//------------------------------------------------------------------------------
/*
    This file is part of rippled: https://github.com/ripple/rippled
    Copyright (c) 2016 Ripple Labs Inc.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose  with  or without fee is hereby granted, provided that the above
    copyright notice and this permission notice appear in all copies.

    THE  SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
    WITH  REGARD  TO  THIS  SOFTWARE  INCLUDING  ALL  IMPLIED  WARRANTIES  OF
    MERCHANTABILITY  AND  FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
    ANY  SPECIAL ,  DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
    WHATSOEVER  RESULTING  FROM  LOSS  OF USE, DATA OR PROFITS, WHETHER IN AN
    ACTION  OF  CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
    OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
*/
//==============================================================================

#include <ripple/basics/Slice.h>
#include <ripple/beast/unit_test.h>
#include <ripple/conditions/Condition.h>
#include <ripple/conditions/Fulfillment.h>
#include <ripple/conditions/impl/Ed25519.h>
#include <ripple/conditions/impl/PrefixSha256.h>
#include <ripple/conditions/impl/PreimageSha256.h>
#include <ripple/conditions/impl/RsaSha256.h>
#include <ripple/conditions/impl/ThresholdSha256.h>
#include <string>

namespace ripple {
namespace cryptoconditions {

class ConditionsTestBase : public beast::unit_test::suite
{
protected:
    void
    check(
        Fulfillment const* expectedF,
        std::string const& msg,
        std::string const& encodedFulfillment,
        std::string const& encodedCondition,
        std::string const& encodedFingerprint)
    {
        using namespace cryptoconditions::der;

        std::string const badMsg = msg + " bad";
        std::error_code ec;
        auto f = Fulfillment::deserialize(makeSlice(encodedFulfillment), ec);
        BEAST_EXPECT(f && !ec && f->checkEqual(*expectedF));
        if (!f)
            return;
        BEAST_EXPECT(f->validate(makeSlice(msg)));

        if (f->validationDependsOnMessage())
            BEAST_EXPECT(!f->validate(makeSlice(badMsg)));

        auto c1 = Condition::deserialize(makeSlice(encodedCondition), ec);
        BEAST_EXPECT(!ec);
        BEAST_EXPECT(f->condition(ec) == c1 && !ec);
        BEAST_EXPECT(expectedF->condition(ec) == c1 && !ec);

        {
            // check fulfillment encodings match
            Encoder s{TagMode::automatic};
            s << f << eos;
            std::vector<char> encoded;
            s.write(encoded);
            BEAST_EXPECT(makeSlice(encoded) == makeSlice(encodedFulfillment));
        }
        if (f->type() != cryptoconditions::Type::preimageSha256)
        {
            // check condition fingerprint encodings
            Encoder s{TagMode::automatic};
            f->encodeFingerprint(s);
            s << eos;
            std::vector<char> encoded;
            s.write(encoded);
            BEAST_EXPECT(makeSlice(encoded) == makeSlice(encodedFingerprint));
        }
        {
            // check condition encoding match
            Encoder s{TagMode::automatic};
            s << f->condition(ec) << eos;
            BEAST_EXPECT(!ec);
            std::vector<char> encoded;
            s.write(encoded);
            BEAST_EXPECT(makeSlice(encoded) == makeSlice(encodedCondition));
        }
    }
};

class Conditions_test : public ConditionsTestBase
{
    void
    testPreim0()
    {
        testcase("Preim0");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * preim0

        auto const preim0Preimage = "I am root"s;
        auto const preim0Msg = "abcdefghijklmnopqrstuvwxyz"s;

        PreimageSha256 const preim0(makeSlice(preim0Preimage));
        {
            auto const preim0EncodedFulfillment =
                "\xa0\x0b\x80\x09\x49\x20\x61\x6d\x20\x72\x6f\x6f\x74"s;
            auto const preim0EncodedCondition =
                "\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f"
                "\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd"
                "\x53\xee\x93\x58\xeb\x4e\x81\x01\x09"s;
            auto const preim0EncodedFingerprint =
                "\x49\x20\x61\x6d\x20\x72\x6f\x6f\x74"s;
            check(
                &preim0,
                preim0Msg,
                preim0EncodedFulfillment,
                preim0EncodedCondition,
                preim0EncodedFingerprint);
        }
    }

    void
    testPrefix0()
    {
        testcase("Prefix0");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * prefix0
        // ** preim1

        auto const preim1Preimage = "I am root"s;
        auto const preim1Msg = "P0abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix0Prefix = "P0"s;
        auto const prefix0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix0MaxMsgLength = 14;

        auto preim1 =
            std::make_unique<PreimageSha256>(makeSlice(preim1Preimage));
        PrefixSha256 const prefix0(
            makeSlice(prefix0Prefix), prefix0MaxMsgLength, std::move(preim1));
        {
            auto const prefix0EncodedFulfillment =
                "\xa1\x16\x80\x02\x50\x30\x81\x01\x0e\xa2\x0d\xa0\x0b\x80\x09"
                "\x49\x20\x61\x6d\x20\x72\x6f\x6f\x74"s;
            auto const prefix0EncodedCondition =
                "\xa1\x2a\x80\x20\x6e\x0d\x78\x32\x51\x7e\x2d\x0d\xec\xbc\x76"
                "\xf8\x96\x6b\xef\x3c\xd1\x3c\x58\xa9\x9e\x5e\x68\x0d\xf2\xf4"
                "\x83\x00\xd4\x9c\x18\x9c\x81\x02\x04\x19\x82\x02\x07\x80"s;
            auto const prefix0EncodedFingerprint =
                "\x30\x30\x80\x02\x50\x30\x81\x01\x0e\xa2\x27\xa0\x25\x80\x20"
                "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
                "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
                "\xeb\x4e\x81\x01\x09"s;
            check(
                &prefix0,
                prefix0Msg,
                prefix0EncodedFulfillment,
                prefix0EncodedCondition,
                prefix0EncodedFingerprint);
        }
    }

    void
    testThresh0()
    {
        testcase("Thresh0");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * thresh0
        // ** preim1

        auto const preim1Preimage = "I am root"s;
        auto const preim1Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const thresh0Msg = "abcdefghijklmnopqrstuvwxyz"s;

        auto preim1 =
            std::make_unique<PreimageSha256>(makeSlice(preim1Preimage));
        std::vector<std::unique_ptr<Fulfillment>> thresh0Subfulfillments;
        thresh0Subfulfillments.emplace_back(std::move(preim1));
        std::vector<Condition> thresh0Subconditions{};
        ThresholdSha256 const thresh0(
            std::move(thresh0Subfulfillments), std::move(thresh0Subconditions));
        {
            auto const thresh0EncodedFulfillment =
                "\xa2\x11\xa0\x0d\xa0\x0b\x80\x09\x49\x20\x61\x6d\x20\x72\x6f"
                "\x6f\x74\xa1\x00"s;
            auto const thresh0EncodedCondition =
                "\xa2\x2a\x80\x20\x57\xb7\x93\x0b\xb8\xe2\x21\xe9\x42\x8c\x85"
                "\x8f\x27\x2d\x4c\xa0\x85\xa0\x40\x6c\x4c\xed\x25\x22\x0d\xef"
                "\x3f\x73\xd9\xcf\x02\xc9\x81\x02\x04\x09\x82\x02\x07\x80"s;
            auto const thresh0EncodedFingerprint =
                "\x30\x2c\x80\x01\x01\xa1\x27\xa0\x25\x80\x20\x5d\xa0\x30\xef"
                "\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9"
                "\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01"
                "\x09"s;
            check(
                &thresh0,
                thresh0Msg,
                thresh0EncodedFulfillment,
                thresh0EncodedCondition,
                thresh0EncodedFingerprint);
        }
    }

    void
    testThresh1()
    {
        testcase("Thresh1");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * thresh0
        // ** Preim2Cond
        // ** Rsa3Cond
        // ** Ed4Cond
        // ** preim1

        auto const preim1Preimage = "I am root"s;
        auto const preim1Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const thresh0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim2CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim2Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim2CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa3CondConditionFingerprint =
            "\xc2\x20\xd2\xd9\x00\x97\x9f\xb2\x4d\x72\x2b\x28\x34\x99\xf6"
            "\xb5\x51\xee\x40\x07\x1b\x8d\x96\x78\x14\xe2\x64\x1e\xea\x05"
            "\x71\xfb"s;
        Condition const Rsa3Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa3CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed4CondConditionFingerprint =
            "\xfa\xa5\xd8\x25\xe0\xb2\x1e\x1b\x7f\x79\xa8\xfe\x46\x2d\xb1"
            "\xc0\x14\x91\xcb\x33\x9e\x03\xe7\x48\x13\x41\xa9\xe3\x58\x0e"
            "\x5d\xdd"s;
        Condition const Ed4Cond{Type::ed25519Sha256,
                                131072,
                                makeSlice(Ed4CondConditionFingerprint),
                                std::bitset<5>{0}};

        auto preim1 =
            std::make_unique<PreimageSha256>(makeSlice(preim1Preimage));
        std::vector<std::unique_ptr<Fulfillment>> thresh0Subfulfillments;
        thresh0Subfulfillments.emplace_back(std::move(preim1));
        std::vector<Condition> thresh0Subconditions{
            {Preim2Cond, Rsa3Cond, Ed4Cond}};
        ThresholdSha256 const thresh0(
            std::move(thresh0Subfulfillments), std::move(thresh0Subconditions));
        {
            auto const thresh0EncodedFulfillment =
                "\xa2\x81\x8a\xa0\x0d\xa0\x0b\x80\x09\x49\x20\x61\x6d\x20\x72"
                "\x6f\x6f\x74\xa1\x79\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1"
                "\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21"
                "\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa3"
                "\x27\x80\x20\xc2\x20\xd2\xd9\x00\x97\x9f\xb2\x4d\x72\x2b\x28"
                "\x34\x99\xf6\xb5\x51\xee\x40\x07\x1b\x8d\x96\x78\x14\xe2\x64"
                "\x1e\xea\x05\x71\xfb\x81\x03\x01\x00\x00\xa4\x27\x80\x20\xfa"
                "\xa5\xd8\x25\xe0\xb2\x1e\x1b\x7f\x79\xa8\xfe\x46\x2d\xb1\xc0"
                "\x14\x91\xcb\x33\x9e\x03\xe7\x48\x13\x41\xa9\xe3\x58\x0e\x5d"
                "\xdd\x81\x03\x02\x00\x00"s;
            auto const thresh0EncodedCondition =
                "\xa2\x2b\x80\x20\xaf\xec\x4c\x75\x19\xac\x0c\xf1\xff\xf5\x88"
                "\x5d\xa6\x5f\x98\x80\xb4\x40\x34\xa0\xce\x16\x79\xc9\xc0\xae"
                "\x9b\x98\xe9\x77\x49\x52\x81\x03\x02\x10\x00\x82\x02\x03\x98"s;
            auto const thresh0EncodedFingerprint =
                "\x30\x81\xa6\x80\x01\x01\xa1\x81\xa0\xa0\x25\x80\x20\x5d\xa0"
                "\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1"
                "\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e"
                "\x81\x01\x09\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11"
                "\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2"
                "\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa3\x27\x80"
                "\x20\xc2\x20\xd2\xd9\x00\x97\x9f\xb2\x4d\x72\x2b\x28\x34\x99"
                "\xf6\xb5\x51\xee\x40\x07\x1b\x8d\x96\x78\x14\xe2\x64\x1e\xea"
                "\x05\x71\xfb\x81\x03\x01\x00\x00\xa4\x27\x80\x20\xfa\xa5\xd8"
                "\x25\xe0\xb2\x1e\x1b\x7f\x79\xa8\xfe\x46\x2d\xb1\xc0\x14\x91"
                "\xcb\x33\x9e\x03\xe7\x48\x13\x41\xa9\xe3\x58\x0e\x5d\xdd\x81"
                "\x03\x02\x00\x00"s;
            check(
                &thresh0,
                thresh0Msg,
                thresh0EncodedFulfillment,
                thresh0EncodedCondition,
                thresh0EncodedFingerprint);
        }
    }

    void
    testThresh2()
    {
        testcase("Thresh2");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * thresh0
        // ** Preim7Cond
        // ** Rsa8Cond
        // ** Ed9Cond
        // ** preim1
        // ** thresh2
        // *** Preim4Cond
        // *** Rsa5Cond
        // *** Ed6Cond
        // *** preim3

        auto const preim1Preimage = "I am root"s;
        auto const preim1Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const preim3Preimage = "I am root"s;
        auto const preim3Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const thresh2Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim4CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim4Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim4CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa5CondConditionFingerprint =
            "\x99\xfb\x0b\x38\x94\x4d\x20\x85\xc8\xda\x3a\x64\x31\x44\x6f"
            "\x6c\x3b\x46\x25\x50\xd7\x7f\xdf\xee\x75\x72\x71\xf9\x61\x40"
            "\x63\xfa"s;
        Condition const Rsa5Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa5CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed6CondConditionFingerprint =
            "\x00\xd3\xc9\x24\x3f\x2d\x2e\x64\x93\xa8\x49\x29\x82\x75\xea"
            "\xbf\xe3\x53\x7f\x8e\x45\x16\xdb\x5e\xc6\xdf\x39\xd2\xcb\xea"
            "\x62\xfb"s;
        Condition const Ed6Cond{Type::ed25519Sha256,
                                131072,
                                makeSlice(Ed6CondConditionFingerprint),
                                std::bitset<5>{0}};
        auto const thresh0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim7CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim7Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim7CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa8CondConditionFingerprint =
            "\xd1\xb5\x1d\x35\x99\x9d\xb4\xc1\xaa\x81\x4d\xd7\x0e\xa9\x2a"
            "\x20\x7f\xe5\x5c\x75\xe8\x57\x8b\xbf\xe8\xd7\x1c\x7e\xb2\xbc"
            "\x91\x16"s;
        Condition const Rsa8Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa8CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed9CondConditionFingerprint =
            "\x92\xfa\xfc\xc6\x2f\xe2\x8d\x8d\x25\x7c\xd4\x46\xab\xea\x82"
            "\xd0\x3f\x36\xbe\x1d\x11\x2b\xa0\xfe\xfe\xd4\x00\xd5\x7d\x9b"
            "\xf6\xc9"s;
        Condition const Ed9Cond{Type::ed25519Sha256,
                                131072,
                                makeSlice(Ed9CondConditionFingerprint),
                                std::bitset<5>{0}};

        auto preim1 =
            std::make_unique<PreimageSha256>(makeSlice(preim1Preimage));
        auto preim3 =
            std::make_unique<PreimageSha256>(makeSlice(preim3Preimage));
        std::vector<std::unique_ptr<Fulfillment>> thresh2Subfulfillments;
        thresh2Subfulfillments.emplace_back(std::move(preim3));
        std::vector<Condition> thresh2Subconditions{
            {Preim4Cond, Rsa5Cond, Ed6Cond}};
        auto thresh2 = std::make_unique<ThresholdSha256>(
            std::move(thresh2Subfulfillments), std::move(thresh2Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh0Subfulfillments;
        thresh0Subfulfillments.emplace_back(std::move(preim1));
        thresh0Subfulfillments.emplace_back(std::move(thresh2));
        std::vector<Condition> thresh0Subconditions{
            {Preim7Cond, Rsa8Cond, Ed9Cond}};
        ThresholdSha256 const thresh0(
            std::move(thresh0Subfulfillments), std::move(thresh0Subconditions));
        {
            auto const thresh0EncodedFulfillment =
                "\xa2\x82\x01\x18\xa0\x81\x9a\xa0\x0b\x80\x09\x49\x20\x61\x6d"
                "\x20\x72\x6f\x6f\x74\xa2\x81\x8a\xa0\x0d\xa0\x0b\x80\x09\x49"
                "\x20\x61\x6d\x20\x72\x6f\x6f\x74\xa1\x79\xa0\x25\x80\x20\x5d"
                "\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b"
                "\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb"
                "\x4e\x81\x01\x09\xa3\x27\x80\x20\x99\xfb\x0b\x38\x94\x4d\x20"
                "\x85\xc8\xda\x3a\x64\x31\x44\x6f\x6c\x3b\x46\x25\x50\xd7\x7f"
                "\xdf\xee\x75\x72\x71\xf9\x61\x40\x63\xfa\x81\x03\x01\x00\x00"
                "\xa4\x27\x80\x20\x00\xd3\xc9\x24\x3f\x2d\x2e\x64\x93\xa8\x49"
                "\x29\x82\x75\xea\xbf\xe3\x53\x7f\x8e\x45\x16\xdb\x5e\xc6\xdf"
                "\x39\xd2\xcb\xea\x62\xfb\x81\x03\x02\x00\x00\xa1\x79\xa0\x25"
                "\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54"
                "\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee"
                "\x93\x58\xeb\x4e\x81\x01\x09\xa3\x27\x80\x20\xd1\xb5\x1d\x35"
                "\x99\x9d\xb4\xc1\xaa\x81\x4d\xd7\x0e\xa9\x2a\x20\x7f\xe5\x5c"
                "\x75\xe8\x57\x8b\xbf\xe8\xd7\x1c\x7e\xb2\xbc\x91\x16\x81\x03"
                "\x01\x00\x00\xa4\x27\x80\x20\x92\xfa\xfc\xc6\x2f\xe2\x8d\x8d"
                "\x25\x7c\xd4\x46\xab\xea\x82\xd0\x3f\x36\xbe\x1d\x11\x2b\xa0"
                "\xfe\xfe\xd4\x00\xd5\x7d\x9b\xf6\xc9\x81\x03\x02\x00\x00"s;
            auto const thresh0EncodedCondition =
                "\xa2\x2b\x80\x20\x8c\x31\x81\x22\x5a\x55\xcf\xb4\xed\x56\x1a"
                "\xe6\x41\x6c\xef\x46\xa6\xdf\x81\x18\xfc\xb1\xf6\x05\x44\xea"
                "\x00\xd1\x2a\x37\xf6\x88\x81\x03\x04\x24\x00\x82\x02\x03\x98"s;
            auto const thresh0EncodedFingerprint =
                "\x30\x81\xd3\x80\x01\x02\xa1\x81\xcd\xa0\x25\x80\x20\x5d\xa0"
                "\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1"
                "\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e"
                "\x81\x01\x09\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11"
                "\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2"
                "\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa2\x2b\x80"
                "\x20\xf1\x11\x26\xc0\x4c\x93\x00\x8b\x62\x92\xb1\xfc\x62\xbf"
                "\x29\x71\x90\x46\x6d\xb4\xee\x30\x7a\xe2\x3f\x8d\x46\xe8\x81"
                "\x70\x11\x4f\x81\x03\x02\x10\x00\x82\x02\x03\x98\xa3\x27\x80"
                "\x20\xd1\xb5\x1d\x35\x99\x9d\xb4\xc1\xaa\x81\x4d\xd7\x0e\xa9"
                "\x2a\x20\x7f\xe5\x5c\x75\xe8\x57\x8b\xbf\xe8\xd7\x1c\x7e\xb2"
                "\xbc\x91\x16\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x92\xfa\xfc"
                "\xc6\x2f\xe2\x8d\x8d\x25\x7c\xd4\x46\xab\xea\x82\xd0\x3f\x36"
                "\xbe\x1d\x11\x2b\xa0\xfe\xfe\xd4\x00\xd5\x7d\x9b\xf6\xc9\x81"
                "\x03\x02\x00\x00"s;
            check(
                &thresh0,
                thresh0Msg,
                thresh0EncodedFulfillment,
                thresh0EncodedCondition,
                thresh0EncodedFingerprint);
        }
    }

    void
    testThresh3()
    {
        testcase("Thresh3");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * thresh0
        // ** Preim7Cond
        // ** Rsa8Cond
        // ** Ed9Cond
        // ** Thresh10Cond
        // ** preim1
        // ** thresh2
        // *** Preim4Cond
        // *** Rsa5Cond
        // *** Ed6Cond
        // *** preim3

        auto const preim1Preimage = "I am root"s;
        auto const preim1Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const preim3Preimage = "I am root"s;
        auto const preim3Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const thresh2Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim4CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim4Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim4CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa5CondConditionFingerprint =
            "\x99\xfb\x0b\x38\x94\x4d\x20\x85\xc8\xda\x3a\x64\x31\x44\x6f"
            "\x6c\x3b\x46\x25\x50\xd7\x7f\xdf\xee\x75\x72\x71\xf9\x61\x40"
            "\x63\xfa"s;
        Condition const Rsa5Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa5CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed6CondConditionFingerprint =
            "\x00\xd3\xc9\x24\x3f\x2d\x2e\x64\x93\xa8\x49\x29\x82\x75\xea"
            "\xbf\xe3\x53\x7f\x8e\x45\x16\xdb\x5e\xc6\xdf\x39\xd2\xcb\xea"
            "\x62\xfb"s;
        Condition const Ed6Cond{Type::ed25519Sha256,
                                131072,
                                makeSlice(Ed6CondConditionFingerprint),
                                std::bitset<5>{0}};
        auto const thresh0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim7CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim7Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim7CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa8CondConditionFingerprint =
            "\xd1\xb5\x1d\x35\x99\x9d\xb4\xc1\xaa\x81\x4d\xd7\x0e\xa9\x2a"
            "\x20\x7f\xe5\x5c\x75\xe8\x57\x8b\xbf\xe8\xd7\x1c\x7e\xb2\xbc"
            "\x91\x16"s;
        Condition const Rsa8Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa8CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed9CondConditionFingerprint =
            "\x92\xfa\xfc\xc6\x2f\xe2\x8d\x8d\x25\x7c\xd4\x46\xab\xea\x82"
            "\xd0\x3f\x36\xbe\x1d\x11\x2b\xa0\xfe\xfe\xd4\x00\xd5\x7d\x9b"
            "\xf6\xc9"s;
        Condition const Ed9Cond{Type::ed25519Sha256,
                                131072,
                                makeSlice(Ed9CondConditionFingerprint),
                                std::bitset<5>{0}};
        auto const Thresh10CondConditionFingerprint =
            "\x3f\xdc\xe5\x2e\x5b\xa8\x02\x75\xbc\xec\x28\x88\xde\x80\x1e"
            "\x1e\xfc\x04\x21\x0e\x1a\x8c\xc0\xf5\xaf\x0a\x0a\x38\x9f\xd2"
            "\x94\x16"s;
        Condition const Thresh10Cond{
            Type::thresholdSha256,
            135168,
            makeSlice(Thresh10CondConditionFingerprint),
            std::bitset<5>{25}};

        auto preim1 =
            std::make_unique<PreimageSha256>(makeSlice(preim1Preimage));
        auto preim3 =
            std::make_unique<PreimageSha256>(makeSlice(preim3Preimage));
        std::vector<std::unique_ptr<Fulfillment>> thresh2Subfulfillments;
        thresh2Subfulfillments.emplace_back(std::move(preim3));
        std::vector<Condition> thresh2Subconditions{
            {Preim4Cond, Rsa5Cond, Ed6Cond}};
        auto thresh2 = std::make_unique<ThresholdSha256>(
            std::move(thresh2Subfulfillments), std::move(thresh2Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh0Subfulfillments;
        thresh0Subfulfillments.emplace_back(std::move(preim1));
        thresh0Subfulfillments.emplace_back(std::move(thresh2));
        std::vector<Condition> thresh0Subconditions{
            {Preim7Cond, Rsa8Cond, Ed9Cond, Thresh10Cond}};
        ThresholdSha256 const thresh0(
            std::move(thresh0Subfulfillments), std::move(thresh0Subconditions));
        {
            auto const thresh0EncodedFulfillment =
                "\xa2\x82\x01\x46\xa0\x81\x9a\xa0\x0b\x80\x09\x49\x20\x61\x6d"
                "\x20\x72\x6f\x6f\x74\xa2\x81\x8a\xa0\x0d\xa0\x0b\x80\x09\x49"
                "\x20\x61\x6d\x20\x72\x6f\x6f\x74\xa1\x79\xa0\x25\x80\x20\x5d"
                "\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b"
                "\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb"
                "\x4e\x81\x01\x09\xa3\x27\x80\x20\x99\xfb\x0b\x38\x94\x4d\x20"
                "\x85\xc8\xda\x3a\x64\x31\x44\x6f\x6c\x3b\x46\x25\x50\xd7\x7f"
                "\xdf\xee\x75\x72\x71\xf9\x61\x40\x63\xfa\x81\x03\x01\x00\x00"
                "\xa4\x27\x80\x20\x00\xd3\xc9\x24\x3f\x2d\x2e\x64\x93\xa8\x49"
                "\x29\x82\x75\xea\xbf\xe3\x53\x7f\x8e\x45\x16\xdb\x5e\xc6\xdf"
                "\x39\xd2\xcb\xea\x62\xfb\x81\x03\x02\x00\x00\xa1\x81\xa6\xa0"
                "\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e"
                "\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53"
                "\xee\x93\x58\xeb\x4e\x81\x01\x09\xa2\x2b\x80\x20\x3f\xdc\xe5"
                "\x2e\x5b\xa8\x02\x75\xbc\xec\x28\x88\xde\x80\x1e\x1e\xfc\x04"
                "\x21\x0e\x1a\x8c\xc0\xf5\xaf\x0a\x0a\x38\x9f\xd2\x94\x16\x81"
                "\x03\x02\x10\x00\x82\x02\x03\x98\xa3\x27\x80\x20\xd1\xb5\x1d"
                "\x35\x99\x9d\xb4\xc1\xaa\x81\x4d\xd7\x0e\xa9\x2a\x20\x7f\xe5"
                "\x5c\x75\xe8\x57\x8b\xbf\xe8\xd7\x1c\x7e\xb2\xbc\x91\x16\x81"
                "\x03\x01\x00\x00\xa4\x27\x80\x20\x92\xfa\xfc\xc6\x2f\xe2\x8d"
                "\x8d\x25\x7c\xd4\x46\xab\xea\x82\xd0\x3f\x36\xbe\x1d\x11\x2b"
                "\xa0\xfe\xfe\xd4\x00\xd5\x7d\x9b\xf6\xc9\x81\x03\x02\x00\x00"s;
            auto const thresh0EncodedCondition =
                "\xa2\x2b\x80\x20\x38\x06\x63\xf9\xbf\xc4\xe4\x39\x86\x8e\x6b"
                "\x12\xf8\xda\xb8\x41\xf4\x96\xa4\xa5\x3c\xd3\x3d\x66\xff\x1e"
                "\x65\xf8\x83\xbb\xa2\xc5\x81\x03\x04\x38\x00\x82\x02\x03\x98"s;
            auto const thresh0EncodedFingerprint =
                "\x30\x82\x01\x00\x80\x01\x02\xa1\x81\xfa\xa0\x25\x80\x20\x5d"
                "\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b"
                "\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb"
                "\x4e\x81\x01\x09\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75"
                "\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c"
                "\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa2\x2b"
                "\x80\x20\x3f\xdc\xe5\x2e\x5b\xa8\x02\x75\xbc\xec\x28\x88\xde"
                "\x80\x1e\x1e\xfc\x04\x21\x0e\x1a\x8c\xc0\xf5\xaf\x0a\x0a\x38"
                "\x9f\xd2\x94\x16\x81\x03\x02\x10\x00\x82\x02\x03\x98\xa2\x2b"
                "\x80\x20\xf1\x11\x26\xc0\x4c\x93\x00\x8b\x62\x92\xb1\xfc\x62"
                "\xbf\x29\x71\x90\x46\x6d\xb4\xee\x30\x7a\xe2\x3f\x8d\x46\xe8"
                "\x81\x70\x11\x4f\x81\x03\x02\x10\x00\x82\x02\x03\x98\xa3\x27"
                "\x80\x20\xd1\xb5\x1d\x35\x99\x9d\xb4\xc1\xaa\x81\x4d\xd7\x0e"
                "\xa9\x2a\x20\x7f\xe5\x5c\x75\xe8\x57\x8b\xbf\xe8\xd7\x1c\x7e"
                "\xb2\xbc\x91\x16\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x92\xfa"
                "\xfc\xc6\x2f\xe2\x8d\x8d\x25\x7c\xd4\x46\xab\xea\x82\xd0\x3f"
                "\x36\xbe\x1d\x11\x2b\xa0\xfe\xfe\xd4\x00\xd5\x7d\x9b\xf6\xc9"
                "\x81\x03\x02\x00\x00"s;
            check(
                &thresh0,
                thresh0Msg,
                thresh0EncodedFulfillment,
                thresh0EncodedCondition,
                thresh0EncodedFingerprint);
        }
    }

    void
    testPrefix1()
    {
        testcase("Prefix1");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * prefix0
        // ** prefix1
        // *** preim2

        auto const preim2Preimage = "I am root"s;
        auto const preim2Msg = "P1P0abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix1Prefix = "P1"s;
        auto const prefix1Msg = "P0abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix1MaxMsgLength = 14;
        auto const prefix0Prefix = "P0"s;
        auto const prefix0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix0MaxMsgLength = 14;

        auto preim2 =
            std::make_unique<PreimageSha256>(makeSlice(preim2Preimage));
        auto prefix1 = std::make_unique<PrefixSha256>(
            makeSlice(prefix1Prefix), prefix1MaxMsgLength, std::move(preim2));
        PrefixSha256 const prefix0(
            makeSlice(prefix0Prefix), prefix0MaxMsgLength, std::move(prefix1));
        {
            auto const prefix0EncodedFulfillment =
                "\xa1\x21\x80\x02\x50\x30\x81\x01\x0e\xa2\x18\xa1\x16\x80\x02"
                "\x50\x31\x81\x01\x0e\xa2\x0d\xa0\x0b\x80\x09\x49\x20\x61\x6d"
                "\x20\x72\x6f\x6f\x74"s;
            auto const prefix0EncodedCondition =
                "\xa1\x2a\x80\x20\x50\x02\x05\xf3\xc9\x64\x56\xe6\x93\x7b\xa1"
                "\x71\x6a\xe5\xd9\xd9\x48\x9f\x6c\x07\xa2\x84\x61\x35\x28\x2c"
                "\xa4\xc1\x51\x42\x89\x31\x81\x02\x08\x29\x82\x02\x07\x80"s;
            auto const prefix0EncodedFingerprint =
                "\x30\x35\x80\x02\x50\x30\x81\x01\x0e\xa2\x2c\xa1\x2a\x80\x20"
                "\xc5\xfb\xcf\xa9\x11\x1d\x41\xc3\x1d\xca\x7a\x24\x9c\x22\x55"
                "\xd3\xe0\xd2\xee\x24\x73\xf7\xcf\x78\xb0\x11\x02\x5b\x7a\xb4"
                "\x11\x7c\x81\x02\x04\x19\x82\x02\x07\x80"s;
            check(
                &prefix0,
                prefix0Msg,
                prefix0EncodedFulfillment,
                prefix0EncodedCondition,
                prefix0EncodedFingerprint);
        }
    }

    void
    testPrefix2()
    {
        testcase("Prefix2");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * prefix0
        // ** prefix1
        // *** prefix2
        // **** preim3

        auto const preim3Preimage = "I am root"s;
        auto const preim3Msg = "P2P1P0abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix2Prefix = "P2"s;
        auto const prefix2Msg = "P1P0abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix2MaxMsgLength = 14;
        auto const prefix1Prefix = "P1"s;
        auto const prefix1Msg = "P0abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix1MaxMsgLength = 14;
        auto const prefix0Prefix = "P0"s;
        auto const prefix0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix0MaxMsgLength = 14;

        auto preim3 =
            std::make_unique<PreimageSha256>(makeSlice(preim3Preimage));
        auto prefix2 = std::make_unique<PrefixSha256>(
            makeSlice(prefix2Prefix), prefix2MaxMsgLength, std::move(preim3));
        auto prefix1 = std::make_unique<PrefixSha256>(
            makeSlice(prefix1Prefix), prefix1MaxMsgLength, std::move(prefix2));
        PrefixSha256 const prefix0(
            makeSlice(prefix0Prefix), prefix0MaxMsgLength, std::move(prefix1));
        {
            auto const prefix0EncodedFulfillment =
                "\xa1\x2c\x80\x02\x50\x30\x81\x01\x0e\xa2\x23\xa1\x21\x80\x02"
                "\x50\x31\x81\x01\x0e\xa2\x18\xa1\x16\x80\x02\x50\x32\x81\x01"
                "\x0e\xa2\x0d\xa0\x0b\x80\x09\x49\x20\x61\x6d\x20\x72\x6f\x6f"
                "\x74"s;
            auto const prefix0EncodedCondition =
                "\xa1\x2a\x80\x20\x69\xaa\xfe\x99\x3c\xb0\x8d\x77\xba\xe3\x75"
                "\x3d\x6b\xce\xab\xab\x11\x28\x63\xc2\x4a\x2b\xff\x84\xc9\xa0"
                "\xee\xa8\xa7\x57\xec\x43\x81\x02\x0c\x39\x82\x02\x07\x80"s;
            auto const prefix0EncodedFingerprint =
                "\x30\x35\x80\x02\x50\x30\x81\x01\x0e\xa2\x2c\xa1\x2a\x80\x20"
                "\xad\xff\xf5\xae\x14\x94\xaa\x40\xc1\x0a\x94\xef\x53\x65\xf7"
                "\xb9\x36\xd9\xcf\x32\x0c\xbd\xdd\x22\x2e\x20\x9b\x06\xd9\xe7"
                "\x6b\x00\x81\x02\x08\x29\x82\x02\x07\x80"s;
            check(
                &prefix0,
                prefix0Msg,
                prefix0EncodedFulfillment,
                prefix0EncodedCondition,
                prefix0EncodedFingerprint);
        }
    }

    void
    testPrefix3()
    {
        testcase("Prefix3");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * prefix0
        // ** prefix1
        // *** thresh2
        // **** preim3

        auto const preim3Preimage = "I am root"s;
        auto const preim3Msg = "P1P0abcdefghijklmnopqrstuvwxyz"s;
        auto const thresh2Msg = "P1P0abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix1Prefix = "P1"s;
        auto const prefix1Msg = "P0abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix1MaxMsgLength = 14;
        auto const prefix0Prefix = "P0"s;
        auto const prefix0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix0MaxMsgLength = 14;

        auto preim3 =
            std::make_unique<PreimageSha256>(makeSlice(preim3Preimage));
        std::vector<std::unique_ptr<Fulfillment>> thresh2Subfulfillments;
        thresh2Subfulfillments.emplace_back(std::move(preim3));
        std::vector<Condition> thresh2Subconditions{};
        auto thresh2 = std::make_unique<ThresholdSha256>(
            std::move(thresh2Subfulfillments), std::move(thresh2Subconditions));
        auto prefix1 = std::make_unique<PrefixSha256>(
            makeSlice(prefix1Prefix), prefix1MaxMsgLength, std::move(thresh2));
        PrefixSha256 const prefix0(
            makeSlice(prefix0Prefix), prefix0MaxMsgLength, std::move(prefix1));
        {
            auto const prefix0EncodedFulfillment =
                "\xa1\x27\x80\x02\x50\x30\x81\x01\x0e\xa2\x1e\xa1\x1c\x80\x02"
                "\x50\x31\x81\x01\x0e\xa2\x13\xa2\x11\xa0\x0d\xa0\x0b\x80\x09"
                "\x49\x20\x61\x6d\x20\x72\x6f\x6f\x74\xa1\x00"s;
            auto const prefix0EncodedCondition =
                "\xa1\x2a\x80\x20\x01\xd0\xbe\xb8\x89\xbc\x77\x91\x3d\xc1\x3c"
                "\x1d\x8d\x18\xe1\xcc\xf1\x44\x40\x62\x9a\xc2\x74\xc6\x2c\x93"
                "\xec\x68\xac\x55\xf6\x2e\x81\x02\x0c\x29\x82\x02\x05\xa0"s;
            auto const prefix0EncodedFingerprint =
                "\x30\x35\x80\x02\x50\x30\x81\x01\x0e\xa2\x2c\xa1\x2a\x80\x20"
                "\xff\x6a\x9f\x56\xfb\xa3\xd4\xd7\x72\x2a\x85\x3b\xcf\x8e\x6f"
                "\x54\x51\xcb\x5c\xb4\x34\x51\xf5\x44\xc5\xea\xb6\x90\x85\x0d"
                "\x99\x0c\x81\x02\x08\x19\x82\x02\x05\xa0"s;
            check(
                &prefix0,
                prefix0Msg,
                prefix0EncodedFulfillment,
                prefix0EncodedCondition,
                prefix0EncodedFingerprint);
        }
    }

    void
    testPrefix4()
    {
        testcase("Prefix4");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * prefix0
        // ** prefix1
        // *** thresh2
        // **** Preim4Cond
        // **** Rsa5Cond
        // **** Ed6Cond
        // **** preim3

        auto const preim3Preimage = "I am root"s;
        auto const preim3Msg = "P1P0abcdefghijklmnopqrstuvwxyz"s;
        auto const thresh2Msg = "P1P0abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim4CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim4Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim4CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa5CondConditionFingerprint =
            "\x99\xfb\x0b\x38\x94\x4d\x20\x85\xc8\xda\x3a\x64\x31\x44\x6f"
            "\x6c\x3b\x46\x25\x50\xd7\x7f\xdf\xee\x75\x72\x71\xf9\x61\x40"
            "\x63\xfa"s;
        Condition const Rsa5Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa5CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed6CondConditionFingerprint =
            "\x00\xd3\xc9\x24\x3f\x2d\x2e\x64\x93\xa8\x49\x29\x82\x75\xea"
            "\xbf\xe3\x53\x7f\x8e\x45\x16\xdb\x5e\xc6\xdf\x39\xd2\xcb\xea"
            "\x62\xfb"s;
        Condition const Ed6Cond{Type::ed25519Sha256,
                                131072,
                                makeSlice(Ed6CondConditionFingerprint),
                                std::bitset<5>{0}};
        auto const prefix1Prefix = "P1"s;
        auto const prefix1Msg = "P0abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix1MaxMsgLength = 14;
        auto const prefix0Prefix = "P0"s;
        auto const prefix0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix0MaxMsgLength = 14;

        auto preim3 =
            std::make_unique<PreimageSha256>(makeSlice(preim3Preimage));
        std::vector<std::unique_ptr<Fulfillment>> thresh2Subfulfillments;
        thresh2Subfulfillments.emplace_back(std::move(preim3));
        std::vector<Condition> thresh2Subconditions{
            {Preim4Cond, Rsa5Cond, Ed6Cond}};
        auto thresh2 = std::make_unique<ThresholdSha256>(
            std::move(thresh2Subfulfillments), std::move(thresh2Subconditions));
        auto prefix1 = std::make_unique<PrefixSha256>(
            makeSlice(prefix1Prefix), prefix1MaxMsgLength, std::move(thresh2));
        PrefixSha256 const prefix0(
            makeSlice(prefix0Prefix), prefix0MaxMsgLength, std::move(prefix1));
        {
            auto const prefix0EncodedFulfillment =
                "\xa1\x81\xa4\x80\x02\x50\x30\x81\x01\x0e\xa2\x81\x9a\xa1\x81"
                "\x97\x80\x02\x50\x31\x81\x01\x0e\xa2\x81\x8d\xa2\x81\x8a\xa0"
                "\x0d\xa0\x0b\x80\x09\x49\x20\x61\x6d\x20\x72\x6f\x6f\x74\xa1"
                "\x79\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8"
                "\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc"
                "\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa3\x27\x80\x20\x99"
                "\xfb\x0b\x38\x94\x4d\x20\x85\xc8\xda\x3a\x64\x31\x44\x6f\x6c"
                "\x3b\x46\x25\x50\xd7\x7f\xdf\xee\x75\x72\x71\xf9\x61\x40\x63"
                "\xfa\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x00\xd3\xc9\x24\x3f"
                "\x2d\x2e\x64\x93\xa8\x49\x29\x82\x75\xea\xbf\xe3\x53\x7f\x8e"
                "\x45\x16\xdb\x5e\xc6\xdf\x39\xd2\xcb\xea\x62\xfb\x81\x03\x02"
                "\x00\x00"s;
            auto const prefix0EncodedCondition =
                "\xa1\x2b\x80\x20\xa0\xde\xd9\x5d\x95\xc3\x47\xb6\xe3\x9d\xd2"
                "\xa9\xef\x29\xa9\xeb\xb1\x88\xd3\x7a\x23\x7d\xff\xec\x0b\x3c"
                "\xe5\x0f\x70\x88\xaa\xd1\x81\x03\x02\x18\x20\x82\x02\x03\xb8"s;
            auto const prefix0EncodedFingerprint =
                "\x30\x36\x80\x02\x50\x30\x81\x01\x0e\xa2\x2d\xa1\x2b\x80\x20"
                "\x50\xd9\x24\x4f\x7a\x00\x8c\x96\xfb\x26\xaf\x1e\x96\xb5\xc1"
                "\x36\x41\x7d\x28\xb2\xec\x83\x26\xe1\x61\x0b\xb0\x8a\xe1\x7e"
                "\xed\x84\x81\x03\x02\x14\x10\x82\x02\x03\xb8"s;
            check(
                &prefix0,
                prefix0Msg,
                prefix0EncodedFulfillment,
                prefix0EncodedCondition,
                prefix0EncodedFingerprint);
        }
    }

    void
    testPrefix5()
    {
        testcase("Prefix5");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * prefix0
        // ** prefix1
        // *** thresh2
        // **** Preim9Cond
        // **** Rsa10Cond
        // **** Ed11Cond
        // **** preim3
        // **** thresh4
        // ***** Preim6Cond
        // ***** Rsa7Cond
        // ***** Ed8Cond
        // ***** preim5

        auto const preim3Preimage = "I am root"s;
        auto const preim3Msg = "P1P0abcdefghijklmnopqrstuvwxyz"s;
        auto const preim5Preimage = "I am root"s;
        auto const preim5Msg = "P1P0abcdefghijklmnopqrstuvwxyz"s;
        auto const thresh4Msg = "P1P0abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim6CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim6Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim6CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa7CondConditionFingerprint =
            "\x6c\x7b\xea\x83\xa1\xf4\x82\x3d\x36\xe7\x6e\xae\x1a\xbc\xa0"
            "\xba\x90\x3d\x96\xc1\xe6\xad\x3a\x47\xa5\xcb\x88\xab\x3c\x5f"
            "\xcc\xd5"s;
        Condition const Rsa7Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa7CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed8CondConditionFingerprint =
            "\xf1\x68\x96\xa6\x2e\xef\x7f\x47\x06\x51\x4c\xc6\x7e\x24\xf7"
            "\x29\x84\x9c\xd6\xb0\xd9\x4b\xd9\x0f\xc9\x34\x01\x9d\x92\xeb"
            "\xbc\x0a"s;
        Condition const Ed8Cond{Type::ed25519Sha256,
                                131072,
                                makeSlice(Ed8CondConditionFingerprint),
                                std::bitset<5>{0}};
        auto const thresh2Msg = "P1P0abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim9CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim9Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim9CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa10CondConditionFingerprint =
            "\x3c\x73\x38\xcf\x23\xc6\x31\x53\x28\xc4\x27\xf8\x95\x87\x99"
            "\x83\x2d\x35\x3c\x03\x9b\xd1\xff\xff\x2e\x53\x20\xe9\x5e\x62"
            "\xb9\xb7"s;
        Condition const Rsa10Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa10CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed11CondConditionFingerprint =
            "\x41\x80\x08\xb2\x60\x74\x57\x6d\xac\xed\x74\x7f\x54\xdb\x96"
            "\x18\x91\x06\x0a\x95\xa1\x49\x17\xc7\x65\xe3\x94\xc8\x5e\x2c"
            "\x92\x20"s;
        Condition const Ed11Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed11CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const prefix1Prefix = "P1"s;
        auto const prefix1Msg = "P0abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix1MaxMsgLength = 14;
        auto const prefix0Prefix = "P0"s;
        auto const prefix0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix0MaxMsgLength = 14;

        auto preim3 =
            std::make_unique<PreimageSha256>(makeSlice(preim3Preimage));
        auto preim5 =
            std::make_unique<PreimageSha256>(makeSlice(preim5Preimage));
        std::vector<std::unique_ptr<Fulfillment>> thresh4Subfulfillments;
        thresh4Subfulfillments.emplace_back(std::move(preim5));
        std::vector<Condition> thresh4Subconditions{
            {Preim6Cond, Rsa7Cond, Ed8Cond}};
        auto thresh4 = std::make_unique<ThresholdSha256>(
            std::move(thresh4Subfulfillments), std::move(thresh4Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh2Subfulfillments;
        thresh2Subfulfillments.emplace_back(std::move(preim3));
        thresh2Subfulfillments.emplace_back(std::move(thresh4));
        std::vector<Condition> thresh2Subconditions{
            {Preim9Cond, Rsa10Cond, Ed11Cond}};
        auto thresh2 = std::make_unique<ThresholdSha256>(
            std::move(thresh2Subfulfillments), std::move(thresh2Subconditions));
        auto prefix1 = std::make_unique<PrefixSha256>(
            makeSlice(prefix1Prefix), prefix1MaxMsgLength, std::move(thresh2));
        PrefixSha256 const prefix0(
            makeSlice(prefix0Prefix), prefix0MaxMsgLength, std::move(prefix1));
        {
            auto const prefix0EncodedFulfillment =
                "\xa1\x82\x01\x36\x80\x02\x50\x30\x81\x01\x0e\xa2\x82\x01\x2b"
                "\xa1\x82\x01\x27\x80\x02\x50\x31\x81\x01\x0e\xa2\x82\x01\x1c"
                "\xa2\x82\x01\x18\xa0\x81\x9a\xa0\x0b\x80\x09\x49\x20\x61\x6d"
                "\x20\x72\x6f\x6f\x74\xa2\x81\x8a\xa0\x0d\xa0\x0b\x80\x09\x49"
                "\x20\x61\x6d\x20\x72\x6f\x6f\x74\xa1\x79\xa0\x25\x80\x20\x5d"
                "\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b"
                "\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb"
                "\x4e\x81\x01\x09\xa3\x27\x80\x20\x6c\x7b\xea\x83\xa1\xf4\x82"
                "\x3d\x36\xe7\x6e\xae\x1a\xbc\xa0\xba\x90\x3d\x96\xc1\xe6\xad"
                "\x3a\x47\xa5\xcb\x88\xab\x3c\x5f\xcc\xd5\x81\x03\x01\x00\x00"
                "\xa4\x27\x80\x20\xf1\x68\x96\xa6\x2e\xef\x7f\x47\x06\x51\x4c"
                "\xc6\x7e\x24\xf7\x29\x84\x9c\xd6\xb0\xd9\x4b\xd9\x0f\xc9\x34"
                "\x01\x9d\x92\xeb\xbc\x0a\x81\x03\x02\x00\x00\xa1\x79\xa0\x25"
                "\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54"
                "\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee"
                "\x93\x58\xeb\x4e\x81\x01\x09\xa3\x27\x80\x20\x3c\x73\x38\xcf"
                "\x23\xc6\x31\x53\x28\xc4\x27\xf8\x95\x87\x99\x83\x2d\x35\x3c"
                "\x03\x9b\xd1\xff\xff\x2e\x53\x20\xe9\x5e\x62\xb9\xb7\x81\x03"
                "\x01\x00\x00\xa4\x27\x80\x20\x41\x80\x08\xb2\x60\x74\x57\x6d"
                "\xac\xed\x74\x7f\x54\xdb\x96\x18\x91\x06\x0a\x95\xa1\x49\x17"
                "\xc7\x65\xe3\x94\xc8\x5e\x2c\x92\x20\x81\x03\x02\x00\x00"s;
            auto const prefix0EncodedCondition =
                "\xa1\x2b\x80\x20\x40\xde\x6f\x75\xde\x2b\xb4\xe8\xf8\x3b\x34"
                "\x27\xb1\x15\xd7\xb3\x8e\x01\x64\x60\x97\xe9\x0d\x34\x20\xc2"
                "\x43\xb4\x53\xf8\xf1\x63\x81\x03\x04\x2c\x20\x82\x02\x03\xb8"s;
            auto const prefix0EncodedFingerprint =
                "\x30\x36\x80\x02\x50\x30\x81\x01\x0e\xa2\x2d\xa1\x2b\x80\x20"
                "\xf9\x45\xd5\x9d\x4a\x2a\xe1\x52\xe7\xf0\xc2\xc4\xd1\x26\x9a"
                "\x8b\x08\x37\x18\x22\xbe\x6d\xd1\x93\xf9\x04\xb6\x44\x49\x91"
                "\xc5\xd4\x81\x03\x04\x28\x10\x82\x02\x03\xb8"s;
            check(
                &prefix0,
                prefix0Msg,
                prefix0EncodedFulfillment,
                prefix0EncodedCondition,
                prefix0EncodedFingerprint);
        }
    }

    void
    testPrefix6()
    {
        testcase("Prefix6");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * prefix0
        // ** prefix1
        // *** thresh2
        // **** Preim9Cond
        // **** Rsa10Cond
        // **** Ed11Cond
        // **** Thresh12Cond
        // **** preim3
        // **** thresh4
        // ***** Preim6Cond
        // ***** Rsa7Cond
        // ***** Ed8Cond
        // ***** preim5

        auto const preim3Preimage = "I am root"s;
        auto const preim3Msg = "P1P0abcdefghijklmnopqrstuvwxyz"s;
        auto const preim5Preimage = "I am root"s;
        auto const preim5Msg = "P1P0abcdefghijklmnopqrstuvwxyz"s;
        auto const thresh4Msg = "P1P0abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim6CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim6Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim6CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa7CondConditionFingerprint =
            "\x6c\x7b\xea\x83\xa1\xf4\x82\x3d\x36\xe7\x6e\xae\x1a\xbc\xa0"
            "\xba\x90\x3d\x96\xc1\xe6\xad\x3a\x47\xa5\xcb\x88\xab\x3c\x5f"
            "\xcc\xd5"s;
        Condition const Rsa7Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa7CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed8CondConditionFingerprint =
            "\xf1\x68\x96\xa6\x2e\xef\x7f\x47\x06\x51\x4c\xc6\x7e\x24\xf7"
            "\x29\x84\x9c\xd6\xb0\xd9\x4b\xd9\x0f\xc9\x34\x01\x9d\x92\xeb"
            "\xbc\x0a"s;
        Condition const Ed8Cond{Type::ed25519Sha256,
                                131072,
                                makeSlice(Ed8CondConditionFingerprint),
                                std::bitset<5>{0}};
        auto const thresh2Msg = "P1P0abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim9CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim9Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim9CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa10CondConditionFingerprint =
            "\x3c\x73\x38\xcf\x23\xc6\x31\x53\x28\xc4\x27\xf8\x95\x87\x99"
            "\x83\x2d\x35\x3c\x03\x9b\xd1\xff\xff\x2e\x53\x20\xe9\x5e\x62"
            "\xb9\xb7"s;
        Condition const Rsa10Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa10CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed11CondConditionFingerprint =
            "\x41\x80\x08\xb2\x60\x74\x57\x6d\xac\xed\x74\x7f\x54\xdb\x96"
            "\x18\x91\x06\x0a\x95\xa1\x49\x17\xc7\x65\xe3\x94\xc8\x5e\x2c"
            "\x92\x20"s;
        Condition const Ed11Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed11CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Thresh12CondConditionFingerprint =
            "\x2b\x40\xdc\x99\x90\xf5\xc1\xc1\x79\x66\x76\xa2\xc6\x2e\xb7"
            "\x46\xeb\x34\xa9\x67\x07\xb2\xe3\xd4\x31\x8e\x61\xbf\x80\x1a"
            "\x20\x4a"s;
        Condition const Thresh12Cond{
            Type::thresholdSha256,
            135168,
            makeSlice(Thresh12CondConditionFingerprint),
            std::bitset<5>{25}};
        auto const prefix1Prefix = "P1"s;
        auto const prefix1Msg = "P0abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix1MaxMsgLength = 14;
        auto const prefix0Prefix = "P0"s;
        auto const prefix0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix0MaxMsgLength = 14;

        auto preim3 =
            std::make_unique<PreimageSha256>(makeSlice(preim3Preimage));
        auto preim5 =
            std::make_unique<PreimageSha256>(makeSlice(preim5Preimage));
        std::vector<std::unique_ptr<Fulfillment>> thresh4Subfulfillments;
        thresh4Subfulfillments.emplace_back(std::move(preim5));
        std::vector<Condition> thresh4Subconditions{
            {Preim6Cond, Rsa7Cond, Ed8Cond}};
        auto thresh4 = std::make_unique<ThresholdSha256>(
            std::move(thresh4Subfulfillments), std::move(thresh4Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh2Subfulfillments;
        thresh2Subfulfillments.emplace_back(std::move(preim3));
        thresh2Subfulfillments.emplace_back(std::move(thresh4));
        std::vector<Condition> thresh2Subconditions{
            {Preim9Cond, Rsa10Cond, Ed11Cond, Thresh12Cond}};
        auto thresh2 = std::make_unique<ThresholdSha256>(
            std::move(thresh2Subfulfillments), std::move(thresh2Subconditions));
        auto prefix1 = std::make_unique<PrefixSha256>(
            makeSlice(prefix1Prefix), prefix1MaxMsgLength, std::move(thresh2));
        PrefixSha256 const prefix0(
            makeSlice(prefix0Prefix), prefix0MaxMsgLength, std::move(prefix1));
        {
            auto const prefix0EncodedFulfillment =
                "\xa1\x82\x01\x64\x80\x02\x50\x30\x81\x01\x0e\xa2\x82\x01\x59"
                "\xa1\x82\x01\x55\x80\x02\x50\x31\x81\x01\x0e\xa2\x82\x01\x4a"
                "\xa2\x82\x01\x46\xa0\x81\x9a\xa0\x0b\x80\x09\x49\x20\x61\x6d"
                "\x20\x72\x6f\x6f\x74\xa2\x81\x8a\xa0\x0d\xa0\x0b\x80\x09\x49"
                "\x20\x61\x6d\x20\x72\x6f\x6f\x74\xa1\x79\xa0\x25\x80\x20\x5d"
                "\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b"
                "\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb"
                "\x4e\x81\x01\x09\xa3\x27\x80\x20\x6c\x7b\xea\x83\xa1\xf4\x82"
                "\x3d\x36\xe7\x6e\xae\x1a\xbc\xa0\xba\x90\x3d\x96\xc1\xe6\xad"
                "\x3a\x47\xa5\xcb\x88\xab\x3c\x5f\xcc\xd5\x81\x03\x01\x00\x00"
                "\xa4\x27\x80\x20\xf1\x68\x96\xa6\x2e\xef\x7f\x47\x06\x51\x4c"
                "\xc6\x7e\x24\xf7\x29\x84\x9c\xd6\xb0\xd9\x4b\xd9\x0f\xc9\x34"
                "\x01\x9d\x92\xeb\xbc\x0a\x81\x03\x02\x00\x00\xa1\x81\xa6\xa0"
                "\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e"
                "\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53"
                "\xee\x93\x58\xeb\x4e\x81\x01\x09\xa2\x2b\x80\x20\x2b\x40\xdc"
                "\x99\x90\xf5\xc1\xc1\x79\x66\x76\xa2\xc6\x2e\xb7\x46\xeb\x34"
                "\xa9\x67\x07\xb2\xe3\xd4\x31\x8e\x61\xbf\x80\x1a\x20\x4a\x81"
                "\x03\x02\x10\x00\x82\x02\x03\x98\xa3\x27\x80\x20\x3c\x73\x38"
                "\xcf\x23\xc6\x31\x53\x28\xc4\x27\xf8\x95\x87\x99\x83\x2d\x35"
                "\x3c\x03\x9b\xd1\xff\xff\x2e\x53\x20\xe9\x5e\x62\xb9\xb7\x81"
                "\x03\x01\x00\x00\xa4\x27\x80\x20\x41\x80\x08\xb2\x60\x74\x57"
                "\x6d\xac\xed\x74\x7f\x54\xdb\x96\x18\x91\x06\x0a\x95\xa1\x49"
                "\x17\xc7\x65\xe3\x94\xc8\x5e\x2c\x92\x20\x81\x03\x02\x00\x00"s;
            auto const prefix0EncodedCondition =
                "\xa1\x2b\x80\x20\xeb\x69\xcc\x9e\xe8\x3c\xa2\x2d\x67\x01\x1c"
                "\xbc\x37\xaf\x40\x9c\x33\x9d\x90\xb0\x72\x59\xa5\xbf\x7f\x12"
                "\x85\x81\x9f\x9f\x18\xb7\x81\x03\x04\x40\x20\x82\x02\x03\xb8"s;
            auto const prefix0EncodedFingerprint =
                "\x30\x36\x80\x02\x50\x30\x81\x01\x0e\xa2\x2d\xa1\x2b\x80\x20"
                "\x30\xa5\x84\x21\xd7\x4f\x97\x61\x29\x91\x8e\xd2\x55\x65\x7b"
                "\xd5\xeb\x17\x43\x4f\x0a\x32\xd0\x76\xab\x85\xa7\x01\xd4\xd1"
                "\xdf\xc1\x81\x03\x04\x3c\x10\x82\x02\x03\xb8"s;
            check(
                &prefix0,
                prefix0Msg,
                prefix0EncodedFulfillment,
                prefix0EncodedCondition,
                prefix0EncodedFingerprint);
        }
    }

    void
    testThresh4()
    {
        testcase("Thresh4");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * thresh0
        // ** Preim9Cond
        // ** Rsa10Cond
        // ** Ed11Cond
        // ** prefix1
        // *** prefix2
        // **** preim3
        // ** prefix4
        // *** prefix5
        // **** preim6
        // ** thresh7
        // *** preim8

        auto const preim3Preimage = "I am root"s;
        auto const preim3Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix2Prefix = "P2"s;
        auto const prefix2Msg = "P1abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix2MaxMsgLength = 14;
        auto const prefix1Prefix = "P1"s;
        auto const prefix1Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix1MaxMsgLength = 14;
        auto const preim6Preimage = "I am root"s;
        auto const preim6Msg = "P5P4abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix5Prefix = "P5"s;
        auto const prefix5Msg = "P4abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix5MaxMsgLength = 14;
        auto const prefix4Prefix = "P4"s;
        auto const prefix4Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix4MaxMsgLength = 14;
        auto const preim8Preimage = "I am root"s;
        auto const preim8Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const thresh7Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const thresh0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim9CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim9Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim9CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa10CondConditionFingerprint =
            "\x3c\x73\x38\xcf\x23\xc6\x31\x53\x28\xc4\x27\xf8\x95\x87\x99"
            "\x83\x2d\x35\x3c\x03\x9b\xd1\xff\xff\x2e\x53\x20\xe9\x5e\x62"
            "\xb9\xb7"s;
        Condition const Rsa10Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa10CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed11CondConditionFingerprint =
            "\x41\x80\x08\xb2\x60\x74\x57\x6d\xac\xed\x74\x7f\x54\xdb\x96"
            "\x18\x91\x06\x0a\x95\xa1\x49\x17\xc7\x65\xe3\x94\xc8\x5e\x2c"
            "\x92\x20"s;
        Condition const Ed11Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed11CondConditionFingerprint),
                                 std::bitset<5>{0}};

        auto preim3 =
            std::make_unique<PreimageSha256>(makeSlice(preim3Preimage));
        auto prefix2 = std::make_unique<PrefixSha256>(
            makeSlice(prefix2Prefix), prefix2MaxMsgLength, std::move(preim3));
        auto prefix1 = std::make_unique<PrefixSha256>(
            makeSlice(prefix1Prefix), prefix1MaxMsgLength, std::move(prefix2));
        auto preim6 =
            std::make_unique<PreimageSha256>(makeSlice(preim6Preimage));
        auto prefix5 = std::make_unique<PrefixSha256>(
            makeSlice(prefix5Prefix), prefix5MaxMsgLength, std::move(preim6));
        auto prefix4 = std::make_unique<PrefixSha256>(
            makeSlice(prefix4Prefix), prefix4MaxMsgLength, std::move(prefix5));
        auto preim8 =
            std::make_unique<PreimageSha256>(makeSlice(preim8Preimage));
        std::vector<std::unique_ptr<Fulfillment>> thresh7Subfulfillments;
        thresh7Subfulfillments.emplace_back(std::move(preim8));
        std::vector<Condition> thresh7Subconditions{};
        auto thresh7 = std::make_unique<ThresholdSha256>(
            std::move(thresh7Subfulfillments), std::move(thresh7Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh0Subfulfillments;
        thresh0Subfulfillments.emplace_back(std::move(prefix1));
        thresh0Subfulfillments.emplace_back(std::move(prefix4));
        thresh0Subfulfillments.emplace_back(std::move(thresh7));
        std::vector<Condition> thresh0Subconditions{
            {Preim9Cond, Rsa10Cond, Ed11Cond}};
        ThresholdSha256 const thresh0(
            std::move(thresh0Subfulfillments), std::move(thresh0Subconditions));
        {
            auto const thresh0EncodedFulfillment =
                "\xa2\x81\xd6\xa0\x59\xa1\x21\x80\x02\x50\x31\x81\x01\x0e\xa2"
                "\x18\xa1\x16\x80\x02\x50\x32\x81\x01\x0e\xa2\x0d\xa0\x0b\x80"
                "\x09\x49\x20\x61\x6d\x20\x72\x6f\x6f\x74\xa1\x21\x80\x02\x50"
                "\x34\x81\x01\x0e\xa2\x18\xa1\x16\x80\x02\x50\x35\x81\x01\x0e"
                "\xa2\x0d\xa0\x0b\x80\x09\x49\x20\x61\x6d\x20\x72\x6f\x6f\x74"
                "\xa2\x11\xa0\x0d\xa0\x0b\x80\x09\x49\x20\x61\x6d\x20\x72\x6f"
                "\x6f\x74\xa1\x00\xa1\x79\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd"
                "\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33"
                "\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09"
                "\xa3\x27\x80\x20\x3c\x73\x38\xcf\x23\xc6\x31\x53\x28\xc4\x27"
                "\xf8\x95\x87\x99\x83\x2d\x35\x3c\x03\x9b\xd1\xff\xff\x2e\x53"
                "\x20\xe9\x5e\x62\xb9\xb7\x81\x03\x01\x00\x00\xa4\x27\x80\x20"
                "\x41\x80\x08\xb2\x60\x74\x57\x6d\xac\xed\x74\x7f\x54\xdb\x96"
                "\x18\x91\x06\x0a\x95\xa1\x49\x17\xc7\x65\xe3\x94\xc8\x5e\x2c"
                "\x92\x20\x81\x03\x02\x00\x00"s;
            auto const thresh0EncodedCondition =
                "\xa2\x2b\x80\x20\x55\x53\x1e\x26\x3f\x14\x62\x93\xc6\xe2\x12"
                "\xb2\xb9\xdd\xb3\x10\x6e\xbf\xda\xe1\x53\xd0\x44\xa8\x3c\xff"
                "\x58\x10\xa8\x47\x99\xaa\x81\x03\x03\x20\x29\x82\x02\x03\xd8"s;
            auto const thresh0EncodedFingerprint =
                "\x30\x82\x01\x03\x80\x01\x03\xa1\x81\xfd\xa0\x25\x80\x20\x5d"
                "\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b"
                "\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb"
                "\x4e\x81\x01\x09\xa1\x2a\x80\x20\x01\x8c\xeb\x20\xdc\xf7\x50"
                "\x44\x77\x1f\xab\xcb\x48\x54\x6e\x96\x42\xa3\x1e\xb0\x28\x92"
                "\x7a\xde\xe4\xf1\x34\x14\xeb\xa5\x9d\x89\x81\x02\x08\x29\x82"
                "\x02\x07\x80\xa1\x2a\x80\x20\xad\xff\xf5\xae\x14\x94\xaa\x40"
                "\xc1\x0a\x94\xef\x53\x65\xf7\xb9\x36\xd9\xcf\x32\x0c\xbd\xdd"
                "\x22\x2e\x20\x9b\x06\xd9\xe7\x6b\x00\x81\x02\x08\x29\x82\x02"
                "\x07\x80\xa2\x2a\x80\x20\x57\xb7\x93\x0b\xb8\xe2\x21\xe9\x42"
                "\x8c\x85\x8f\x27\x2d\x4c\xa0\x85\xa0\x40\x6c\x4c\xed\x25\x22"
                "\x0d\xef\x3f\x73\xd9\xcf\x02\xc9\x81\x02\x04\x09\x82\x02\x07"
                "\x80\xa3\x27\x80\x20\x3c\x73\x38\xcf\x23\xc6\x31\x53\x28\xc4"
                "\x27\xf8\x95\x87\x99\x83\x2d\x35\x3c\x03\x9b\xd1\xff\xff\x2e"
                "\x53\x20\xe9\x5e\x62\xb9\xb7\x81\x03\x01\x00\x00\xa4\x27\x80"
                "\x20\x41\x80\x08\xb2\x60\x74\x57\x6d\xac\xed\x74\x7f\x54\xdb"
                "\x96\x18\x91\x06\x0a\x95\xa1\x49\x17\xc7\x65\xe3\x94\xc8\x5e"
                "\x2c\x92\x20\x81\x03\x02\x00\x00"s;
            check(
                &thresh0,
                thresh0Msg,
                thresh0EncodedFulfillment,
                thresh0EncodedCondition,
                thresh0EncodedFingerprint);
        }
    }

    void
    testThresh5()
    {
        testcase("Thresh5");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * thresh0
        // ** Preim7Cond
        // ** Rsa8Cond
        // ** Ed9Cond
        // ** Prefix10Cond
        // ** Thresh13Cond
        // ** prefix1
        // *** prefix2
        // **** preim3
        // ** preim4
        // ** rsa5
        // ** ed6

        auto const preim3Preimage = "I am root"s;
        auto const preim3Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix2Prefix = "P2"s;
        auto const prefix2Msg = "P1abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix2MaxMsgLength = 14;
        auto const prefix1Prefix = "P1"s;
        auto const prefix1Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix1MaxMsgLength = 14;
        auto const preim4Preimage = "I am root"s;
        auto const preim4Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const rsa5Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa5PublicKey{
            {0xc0, 0x00, 0xef, 0x8f, 0x4b, 0x81, 0x10, 0x1e, 0x52, 0xe0, 0x07,
             0x9f, 0x68, 0xe7, 0x2f, 0x92, 0xd4, 0x77, 0x3c, 0x1f, 0xa3, 0xff,
             0x72, 0x64, 0x5b, 0x37, 0xf1, 0xf3, 0xa3, 0xc5, 0xfb, 0xcd, 0xfb,
             0xda, 0xcc, 0x8b, 0x52, 0xe1, 0xde, 0xbc, 0x28, 0x8d, 0xe5, 0xad,
             0xab, 0x86, 0x61, 0x45, 0x97, 0x65, 0x37, 0x68, 0x26, 0x21, 0x92,
             0x17, 0xa3, 0xb0, 0x74, 0x5c, 0x8a, 0x45, 0x8d, 0x87, 0x5b, 0x9b,
             0xd1, 0x7b, 0x07, 0xc4, 0x8c, 0x67, 0xa0, 0xe9, 0x82, 0x0c, 0xe0,
             0x6b, 0xea, 0x91, 0x5c, 0xba, 0xe3, 0xd9, 0x9d, 0x39, 0xfd, 0x77,
             0xac, 0xcb, 0x33, 0x9b, 0x28, 0x51, 0x8d, 0xbf, 0x3e, 0xe4, 0x94,
             0x1c, 0x9a, 0x60, 0x71, 0x4b, 0x34, 0x07, 0x30, 0xda, 0x42, 0x46,
             0x0e, 0xb8, 0xb7, 0x2c, 0xf5, 0x2f, 0x4b, 0x9e, 0xe7, 0x64, 0x81,
             0xa1, 0xa2, 0x05, 0x66, 0x92, 0xe6, 0x75, 0x9f, 0x37, 0xae, 0x40,
             0xa9, 0x16, 0x08, 0x19, 0xe8, 0xdc, 0x47, 0xd6, 0x03, 0x29, 0xab,
             0xcc, 0x58, 0xa2, 0x37, 0x2a, 0x32, 0xb8, 0x15, 0xc7, 0x51, 0x91,
             0x73, 0xb9, 0x1d, 0xc6, 0xd0, 0x4f, 0x85, 0x86, 0xd5, 0xb3, 0x21,
             0x1a, 0x2a, 0x6c, 0xeb, 0x7f, 0xfe, 0x84, 0x17, 0x10, 0x2d, 0x0e,
             0xb4, 0xe1, 0xc2, 0x48, 0x4c, 0x3f, 0x61, 0xc7, 0x59, 0x75, 0xa7,
             0xc1, 0x75, 0xce, 0x67, 0x17, 0x42, 0x2a, 0x2f, 0x96, 0xef, 0x8a,
             0x2d, 0x74, 0xd2, 0x13, 0x68, 0xe1, 0xe9, 0xea, 0xfb, 0x73, 0x68,
             0xed, 0x8d, 0xd3, 0xac, 0x49, 0x09, 0xf9, 0xec, 0x62, 0xdf, 0x53,
             0xab, 0xfe, 0x90, 0x64, 0x4b, 0x92, 0x60, 0x0d, 0xdd, 0x00, 0xfe,
             0x02, 0xe6, 0xf3, 0x9b, 0x2b, 0xac, 0x4f, 0x70, 0xe8, 0x5b, 0x69,
             0x9c, 0x40, 0xd3, 0xeb, 0x37, 0xad, 0x6f, 0x37, 0xab, 0xf3, 0x79,
             0x8e, 0xcb, 0x1d}};
        std::array<std::uint8_t, 256> const rsa5Sig{
            {0x90, 0xcd, 0x42, 0xec, 0x1c, 0xc4, 0xff, 0x8d, 0x17, 0x27, 0xdc,
             0xff, 0x1c, 0x09, 0xfc, 0xa4, 0x94, 0x0e, 0x28, 0x80, 0x98, 0xe3,
             0x1d, 0xa5, 0xaf, 0xb3, 0x78, 0xd3, 0x15, 0x50, 0xae, 0x4d, 0x29,
             0x21, 0x7e, 0x7b, 0x07, 0xc5, 0x9e, 0x88, 0x65, 0xab, 0x8c, 0x84,
             0x60, 0x4f, 0x14, 0xac, 0x9c, 0x75, 0x5a, 0xd8, 0x4c, 0x3b, 0xc2,
             0x6b, 0x6c, 0xea, 0xb9, 0x08, 0x75, 0x3e, 0xf4, 0xe6, 0x5c, 0xac,
             0xab, 0x77, 0x39, 0x9a, 0x69, 0x1f, 0x0a, 0xdd, 0xca, 0xcc, 0xe0,
             0x06, 0xf5, 0x59, 0xf9, 0x25, 0x42, 0xbb, 0xc5, 0xec, 0x16, 0xb9,
             0xec, 0xc2, 0x6b, 0xa0, 0xbe, 0x9f, 0x4d, 0x1a, 0x33, 0x38, 0x03,
             0x18, 0x6c, 0xd6, 0xbe, 0x10, 0xef, 0x87, 0xbe, 0xdd, 0x70, 0xa8,
             0xe5, 0xf4, 0xac, 0x8e, 0x09, 0x05, 0x95, 0xa0, 0xdb, 0xb9, 0xed,
             0xa8, 0xe5, 0xbb, 0xe0, 0x31, 0x03, 0xc8, 0x98, 0x85, 0x92, 0x0e,
             0x48, 0x84, 0x3e, 0x2a, 0x0a, 0x37, 0x23, 0x01, 0xba, 0x2a, 0x92,
             0x93, 0x21, 0xea, 0x2f, 0x16, 0x9b, 0x20, 0xdb, 0x59, 0x0b, 0x87,
             0x54, 0xc5, 0xa0, 0x7a, 0x78, 0x48, 0x14, 0x8f, 0x2f, 0x4f, 0xb7,
             0xd1, 0x24, 0x7f, 0x5c, 0x6c, 0x25, 0xd9, 0xb7, 0x4c, 0x9e, 0xba,
             0xc7, 0xd9, 0xcb, 0x9b, 0xe2, 0xf7, 0x50, 0xfc, 0x05, 0x8b, 0x25,
             0x23, 0x6d, 0x3d, 0xe8, 0xa1, 0x7d, 0x43, 0x1a, 0x27, 0xa4, 0x33,
             0x56, 0x13, 0xae, 0x1b, 0x66, 0xb1, 0x0a, 0xac, 0x74, 0x30, 0xc1,
             0x30, 0x8f, 0x1f, 0xc4, 0x20, 0x30, 0x1f, 0xd7, 0x9f, 0xb8, 0x39,
             0x24, 0xc9, 0x15, 0x8e, 0x57, 0x82, 0x62, 0xf0, 0x91, 0x70, 0x3a,
             0xc6, 0xc3, 0x98, 0x42, 0x2c, 0xc6, 0x67, 0x21, 0x06, 0xa7, 0x06,
             0x6b, 0x6e, 0x3f, 0x42, 0x44, 0x8d, 0x8f, 0x0d, 0xbf, 0x57, 0xba,
             0x40, 0xc1, 0xc5}};
        auto const ed6Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed6PublicKey{
            {0xa0, 0x45, 0x26, 0xcf, 0xee, 0x7e, 0xda, 0x68, 0xd9, 0x70, 0x23,
             0xac, 0x68, 0x48, 0x9e, 0x20, 0xa4, 0x5e, 0xf8, 0x51, 0xcb, 0xfe,
             0x72, 0xc1, 0x11, 0x5d, 0x25, 0x9c, 0xbc, 0xfd, 0xbb, 0x8b}};
        std::array<std::uint8_t, 64> const ed6Sig{
            {0x2a, 0x1d, 0xc0, 0x92, 0x24, 0x9a, 0x87, 0x5a, 0xc6, 0xaf, 0xa4,
             0x7f, 0xe1, 0x63, 0xc7, 0xca, 0xfd, 0x08, 0x47, 0xae, 0x2f, 0x98,
             0x07, 0xdc, 0x56, 0x9a, 0xfc, 0x2f, 0x0e, 0xa9, 0x37, 0x16, 0xe0,
             0x81, 0xff, 0x94, 0xb2, 0xab, 0x40, 0x2f, 0x9c, 0xa6, 0xc0, 0xe4,
             0xdf, 0xdf, 0xcd, 0x01, 0xf2, 0xdb, 0x9c, 0xff, 0x62, 0xe7, 0x2f,
             0x9d, 0x51, 0x6e, 0x80, 0xd1, 0x0c, 0x86, 0xd2, 0x01}};
        std::array<std::uint8_t, 32> const ed6SigningKey{
            {0x8f, 0xac, 0x15, 0x02, 0xce, 0xb4, 0x10, 0x27, 0x56, 0x91, 0x2b,
             0xd0, 0x57, 0xe7, 0x6c, 0xe0, 0xc5, 0x46, 0x65, 0x38, 0xf0, 0xc8,
             0x09, 0xe0, 0xb4, 0x57, 0xfb, 0x11, 0xfc, 0x00, 0xe9, 0xdf}};
        (void)ed6SigningKey;
        auto const thresh0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim7CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim7Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim7CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa8CondConditionFingerprint =
            "\xd1\xb5\x1d\x35\x99\x9d\xb4\xc1\xaa\x81\x4d\xd7\x0e\xa9\x2a"
            "\x20\x7f\xe5\x5c\x75\xe8\x57\x8b\xbf\xe8\xd7\x1c\x7e\xb2\xbc"
            "\x91\x16"s;
        Condition const Rsa8Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa8CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed9CondConditionFingerprint =
            "\x92\xfa\xfc\xc6\x2f\xe2\x8d\x8d\x25\x7c\xd4\x46\xab\xea\x82"
            "\xd0\x3f\x36\xbe\x1d\x11\x2b\xa0\xfe\xfe\xd4\x00\xd5\x7d\x9b"
            "\xf6\xc9"s;
        Condition const Ed9Cond{Type::ed25519Sha256,
                                131072,
                                makeSlice(Ed9CondConditionFingerprint),
                                std::bitset<5>{0}};
        auto const Prefix10CondConditionFingerprint =
            "\xe1\x77\x39\xca\x66\xa2\x80\x39\x7f\xcb\xa7\xaf\xf7\x9d\xc6"
            "\x9c\x78\xa9\x2c\xd3\x18\x42\x5b\xde\x8e\xa0\xc0\x43\xdb\x44"
            "\xe6\xd5"s;
        Condition const Prefix10Cond{
            Type::prefixSha256,
            2099,
            makeSlice(Prefix10CondConditionFingerprint),
            std::bitset<5>{1}};
        auto const Thresh13CondConditionFingerprint =
            "\x57\xb7\x93\x0b\xb8\xe2\x21\xe9\x42\x8c\x85\x8f\x27\x2d\x4c"
            "\xa0\x85\xa0\x40\x6c\x4c\xed\x25\x22\x0d\xef\x3f\x73\xd9\xcf"
            "\x02\xc9"s;
        Condition const Thresh13Cond{
            Type::thresholdSha256,
            1033,
            makeSlice(Thresh13CondConditionFingerprint),
            std::bitset<5>{1}};

        auto preim3 =
            std::make_unique<PreimageSha256>(makeSlice(preim3Preimage));
        auto prefix2 = std::make_unique<PrefixSha256>(
            makeSlice(prefix2Prefix), prefix2MaxMsgLength, std::move(preim3));
        auto prefix1 = std::make_unique<PrefixSha256>(
            makeSlice(prefix1Prefix), prefix1MaxMsgLength, std::move(prefix2));
        auto preim4 =
            std::make_unique<PreimageSha256>(makeSlice(preim4Preimage));
        auto rsa5 = std::make_unique<RsaSha256>(
            makeSlice(rsa5PublicKey), makeSlice(rsa5Sig));
        auto ed6 = std::make_unique<Ed25519>(ed6PublicKey, ed6Sig);
        std::vector<std::unique_ptr<Fulfillment>> thresh0Subfulfillments;
        thresh0Subfulfillments.emplace_back(std::move(prefix1));
        thresh0Subfulfillments.emplace_back(std::move(preim4));
        thresh0Subfulfillments.emplace_back(std::move(rsa5));
        thresh0Subfulfillments.emplace_back(std::move(ed6));
        std::vector<Condition> thresh0Subconditions{
            {Preim7Cond, Rsa8Cond, Ed9Cond, Prefix10Cond, Thresh13Cond}};
        ThresholdSha256 const thresh0(
            std::move(thresh0Subfulfillments), std::move(thresh0Subconditions));
        {
            auto const thresh0EncodedFulfillment =
                "\xa2\x82\x03\x7a\xa0\x82\x02\xa2\xa0\x0b\x80\x09\x49\x20\x61"
                "\x6d\x20\x72\x6f\x6f\x74\xa1\x21\x80\x02\x50\x31\x81\x01\x0e"
                "\xa2\x18\xa1\x16\x80\x02\x50\x32\x81\x01\x0e\xa2\x0d\xa0\x0b"
                "\x80\x09\x49\x20\x61\x6d\x20\x72\x6f\x6f\x74\xa3\x82\x02\x08"
                "\x80\x82\x01\x00\xc0\x00\xef\x8f\x4b\x81\x10\x1e\x52\xe0\x07"
                "\x9f\x68\xe7\x2f\x92\xd4\x77\x3c\x1f\xa3\xff\x72\x64\x5b\x37"
                "\xf1\xf3\xa3\xc5\xfb\xcd\xfb\xda\xcc\x8b\x52\xe1\xde\xbc\x28"
                "\x8d\xe5\xad\xab\x86\x61\x45\x97\x65\x37\x68\x26\x21\x92\x17"
                "\xa3\xb0\x74\x5c\x8a\x45\x8d\x87\x5b\x9b\xd1\x7b\x07\xc4\x8c"
                "\x67\xa0\xe9\x82\x0c\xe0\x6b\xea\x91\x5c\xba\xe3\xd9\x9d\x39"
                "\xfd\x77\xac\xcb\x33\x9b\x28\x51\x8d\xbf\x3e\xe4\x94\x1c\x9a"
                "\x60\x71\x4b\x34\x07\x30\xda\x42\x46\x0e\xb8\xb7\x2c\xf5\x2f"
                "\x4b\x9e\xe7\x64\x81\xa1\xa2\x05\x66\x92\xe6\x75\x9f\x37\xae"
                "\x40\xa9\x16\x08\x19\xe8\xdc\x47\xd6\x03\x29\xab\xcc\x58\xa2"
                "\x37\x2a\x32\xb8\x15\xc7\x51\x91\x73\xb9\x1d\xc6\xd0\x4f\x85"
                "\x86\xd5\xb3\x21\x1a\x2a\x6c\xeb\x7f\xfe\x84\x17\x10\x2d\x0e"
                "\xb4\xe1\xc2\x48\x4c\x3f\x61\xc7\x59\x75\xa7\xc1\x75\xce\x67"
                "\x17\x42\x2a\x2f\x96\xef\x8a\x2d\x74\xd2\x13\x68\xe1\xe9\xea"
                "\xfb\x73\x68\xed\x8d\xd3\xac\x49\x09\xf9\xec\x62\xdf\x53\xab"
                "\xfe\x90\x64\x4b\x92\x60\x0d\xdd\x00\xfe\x02\xe6\xf3\x9b\x2b"
                "\xac\x4f\x70\xe8\x5b\x69\x9c\x40\xd3\xeb\x37\xad\x6f\x37\xab"
                "\xf3\x79\x8e\xcb\x1d\x81\x82\x01\x00\x90\xcd\x42\xec\x1c\xc4"
                "\xff\x8d\x17\x27\xdc\xff\x1c\x09\xfc\xa4\x94\x0e\x28\x80\x98"
                "\xe3\x1d\xa5\xaf\xb3\x78\xd3\x15\x50\xae\x4d\x29\x21\x7e\x7b"
                "\x07\xc5\x9e\x88\x65\xab\x8c\x84\x60\x4f\x14\xac\x9c\x75\x5a"
                "\xd8\x4c\x3b\xc2\x6b\x6c\xea\xb9\x08\x75\x3e\xf4\xe6\x5c\xac"
                "\xab\x77\x39\x9a\x69\x1f\x0a\xdd\xca\xcc\xe0\x06\xf5\x59\xf9"
                "\x25\x42\xbb\xc5\xec\x16\xb9\xec\xc2\x6b\xa0\xbe\x9f\x4d\x1a"
                "\x33\x38\x03\x18\x6c\xd6\xbe\x10\xef\x87\xbe\xdd\x70\xa8\xe5"
                "\xf4\xac\x8e\x09\x05\x95\xa0\xdb\xb9\xed\xa8\xe5\xbb\xe0\x31"
                "\x03\xc8\x98\x85\x92\x0e\x48\x84\x3e\x2a\x0a\x37\x23\x01\xba"
                "\x2a\x92\x93\x21\xea\x2f\x16\x9b\x20\xdb\x59\x0b\x87\x54\xc5"
                "\xa0\x7a\x78\x48\x14\x8f\x2f\x4f\xb7\xd1\x24\x7f\x5c\x6c\x25"
                "\xd9\xb7\x4c\x9e\xba\xc7\xd9\xcb\x9b\xe2\xf7\x50\xfc\x05\x8b"
                "\x25\x23\x6d\x3d\xe8\xa1\x7d\x43\x1a\x27\xa4\x33\x56\x13\xae"
                "\x1b\x66\xb1\x0a\xac\x74\x30\xc1\x30\x8f\x1f\xc4\x20\x30\x1f"
                "\xd7\x9f\xb8\x39\x24\xc9\x15\x8e\x57\x82\x62\xf0\x91\x70\x3a"
                "\xc6\xc3\x98\x42\x2c\xc6\x67\x21\x06\xa7\x06\x6b\x6e\x3f\x42"
                "\x44\x8d\x8f\x0d\xbf\x57\xba\x40\xc1\xc5\xa4\x64\x80\x20\xa0"
                "\x45\x26\xcf\xee\x7e\xda\x68\xd9\x70\x23\xac\x68\x48\x9e\x20"
                "\xa4\x5e\xf8\x51\xcb\xfe\x72\xc1\x11\x5d\x25\x9c\xbc\xfd\xbb"
                "\x8b\x81\x40\x2a\x1d\xc0\x92\x24\x9a\x87\x5a\xc6\xaf\xa4\x7f"
                "\xe1\x63\xc7\xca\xfd\x08\x47\xae\x2f\x98\x07\xdc\x56\x9a\xfc"
                "\x2f\x0e\xa9\x37\x16\xe0\x81\xff\x94\xb2\xab\x40\x2f\x9c\xa6"
                "\xc0\xe4\xdf\xdf\xcd\x01\xf2\xdb\x9c\xff\x62\xe7\x2f\x9d\x51"
                "\x6e\x80\xd1\x0c\x86\xd2\x01\xa1\x81\xd1\xa0\x25\x80\x20\x5d"
                "\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b"
                "\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb"
                "\x4e\x81\x01\x09\xa1\x2a\x80\x20\xe1\x77\x39\xca\x66\xa2\x80"
                "\x39\x7f\xcb\xa7\xaf\xf7\x9d\xc6\x9c\x78\xa9\x2c\xd3\x18\x42"
                "\x5b\xde\x8e\xa0\xc0\x43\xdb\x44\xe6\xd5\x81\x02\x08\x33\x82"
                "\x02\x07\x80\xa2\x2a\x80\x20\x57\xb7\x93\x0b\xb8\xe2\x21\xe9"
                "\x42\x8c\x85\x8f\x27\x2d\x4c\xa0\x85\xa0\x40\x6c\x4c\xed\x25"
                "\x22\x0d\xef\x3f\x73\xd9\xcf\x02\xc9\x81\x02\x04\x09\x82\x02"
                "\x07\x80\xa3\x27\x80\x20\xd1\xb5\x1d\x35\x99\x9d\xb4\xc1\xaa"
                "\x81\x4d\xd7\x0e\xa9\x2a\x20\x7f\xe5\x5c\x75\xe8\x57\x8b\xbf"
                "\xe8\xd7\x1c\x7e\xb2\xbc\x91\x16\x81\x03\x01\x00\x00\xa4\x27"
                "\x80\x20\x92\xfa\xfc\xc6\x2f\xe2\x8d\x8d\x25\x7c\xd4\x46\xab"
                "\xea\x82\xd0\x3f\x36\xbe\x1d\x11\x2b\xa0\xfe\xfe\xd4\x00\xd5"
                "\x7d\x9b\xf6\xc9\x81\x03\x02\x00\x00"s;
            auto const thresh0EncodedCondition =
                "\xa2\x2b\x80\x20\x4c\x90\x73\x0d\x85\x47\xfc\x9a\x8f\x85\xa6"
                "\xa5\x03\x95\xa1\x06\x16\xc4\xb0\xe6\xae\x56\xf6\xaa\xf5\xdc"
                "\x92\x73\x43\x90\xbb\x7d\x81\x03\x06\x24\x00\x82\x02\x03\xd8"s;
            auto const thresh0EncodedFingerprint =
                "\x30\x82\x01\x7d\x80\x01\x04\xa1\x82\x01\x76\xa0\x25\x80\x20"
                "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
                "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
                "\xeb\x4e\x81\x01\x09\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1"
                "\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21"
                "\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa1"
                "\x2a\x80\x20\xad\xff\xf5\xae\x14\x94\xaa\x40\xc1\x0a\x94\xef"
                "\x53\x65\xf7\xb9\x36\xd9\xcf\x32\x0c\xbd\xdd\x22\x2e\x20\x9b"
                "\x06\xd9\xe7\x6b\x00\x81\x02\x08\x29\x82\x02\x07\x80\xa1\x2a"
                "\x80\x20\xe1\x77\x39\xca\x66\xa2\x80\x39\x7f\xcb\xa7\xaf\xf7"
                "\x9d\xc6\x9c\x78\xa9\x2c\xd3\x18\x42\x5b\xde\x8e\xa0\xc0\x43"
                "\xdb\x44\xe6\xd5\x81\x02\x08\x33\x82\x02\x07\x80\xa2\x2a\x80"
                "\x20\x57\xb7\x93\x0b\xb8\xe2\x21\xe9\x42\x8c\x85\x8f\x27\x2d"
                "\x4c\xa0\x85\xa0\x40\x6c\x4c\xed\x25\x22\x0d\xef\x3f\x73\xd9"
                "\xcf\x02\xc9\x81\x02\x04\x09\x82\x02\x07\x80\xa3\x27\x80\x20"
                "\x99\xfb\x0b\x38\x94\x4d\x20\x85\xc8\xda\x3a\x64\x31\x44\x6f"
                "\x6c\x3b\x46\x25\x50\xd7\x7f\xdf\xee\x75\x72\x71\xf9\x61\x40"
                "\x63\xfa\x81\x03\x01\x00\x00\xa3\x27\x80\x20\xd1\xb5\x1d\x35"
                "\x99\x9d\xb4\xc1\xaa\x81\x4d\xd7\x0e\xa9\x2a\x20\x7f\xe5\x5c"
                "\x75\xe8\x57\x8b\xbf\xe8\xd7\x1c\x7e\xb2\xbc\x91\x16\x81\x03"
                "\x01\x00\x00\xa4\x27\x80\x20\x00\xd3\xc9\x24\x3f\x2d\x2e\x64"
                "\x93\xa8\x49\x29\x82\x75\xea\xbf\xe3\x53\x7f\x8e\x45\x16\xdb"
                "\x5e\xc6\xdf\x39\xd2\xcb\xea\x62\xfb\x81\x03\x02\x00\x00\xa4"
                "\x27\x80\x20\x92\xfa\xfc\xc6\x2f\xe2\x8d\x8d\x25\x7c\xd4\x46"
                "\xab\xea\x82\xd0\x3f\x36\xbe\x1d\x11\x2b\xa0\xfe\xfe\xd4\x00"
                "\xd5\x7d\x9b\xf6\xc9\x81\x03\x02\x00\x00"s;
            check(
                &thresh0,
                thresh0Msg,
                thresh0EncodedFulfillment,
                thresh0EncodedCondition,
                thresh0EncodedFingerprint);
        }
    }

    void
    testThresh6()
    {
        testcase("Thresh6");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * thresh0
        // ** Preim14Cond
        // ** Rsa15Cond
        // ** Ed16Cond
        // ** prefix1
        // *** prefix2
        // **** prefix3
        // ***** preim4
        // ** prefix5
        // *** prefix6
        // **** prefix7
        // ***** preim8
        // ** thresh9
        // *** Preim11Cond
        // *** Rsa12Cond
        // *** Ed13Cond
        // *** preim10

        auto const preim4Preimage = "I am root"s;
        auto const preim4Msg = "P3P2P1abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix3Prefix = "P3"s;
        auto const prefix3Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix3MaxMsgLength = 14;
        auto const prefix2Prefix = "P2"s;
        auto const prefix2Msg = "P1abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix2MaxMsgLength = 14;
        auto const prefix1Prefix = "P1"s;
        auto const prefix1Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix1MaxMsgLength = 14;
        auto const preim8Preimage = "I am root"s;
        auto const preim8Msg = "P7P6P5abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix7Prefix = "P7"s;
        auto const prefix7Msg = "P6P5abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix7MaxMsgLength = 14;
        auto const prefix6Prefix = "P6"s;
        auto const prefix6Msg = "P5abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix6MaxMsgLength = 14;
        auto const prefix5Prefix = "P5"s;
        auto const prefix5Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix5MaxMsgLength = 14;
        auto const preim10Preimage = "I am root"s;
        auto const preim10Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const thresh9Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim11CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim11Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim11CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa12CondConditionFingerprint =
            "\x38\xb9\xf0\xeb\x68\x8b\x9f\x55\x37\x9a\xec\x07\xd4\xa2\x13"
            "\xac\x34\xa1\x67\x31\x34\xea\xc2\x2f\xef\x13\xe3\x5c\xcf\x8f"
            "\x90\x1e"s;
        Condition const Rsa12Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa12CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed13CondConditionFingerprint =
            "\x7c\x54\x6a\x6d\x7f\x00\x52\x31\x03\xe7\xb4\x5b\x1c\x9f\x72"
            "\xeb\x3c\x18\x08\xa3\x24\xb2\x63\x5f\x77\x55\x4a\x42\xdb\x1e"
            "\xff\x1e"s;
        Condition const Ed13Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed13CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const thresh0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim14CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim14Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim14CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa15CondConditionFingerprint =
            "\x55\x6b\x6d\xe3\x00\xd4\xf3\x7e\x75\x3a\x68\xfc\x25\xdf\xf2"
            "\xf7\x18\x54\xa5\x55\x0c\xa5\xa9\x65\xbf\x66\x9e\x4e\x49\x56"
            "\x1e\xf1"s;
        Condition const Rsa15Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa15CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed16CondConditionFingerprint =
            "\xe4\x66\x69\x86\x87\x57\x0e\xac\xf1\xfd\x06\x81\x48\x90\x82"
            "\x42\x48\x50\x75\x8e\xd4\x2d\xf3\x02\x37\x89\x28\xc5\x68\xd7"
            "\xa0\x11"s;
        Condition const Ed16Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed16CondConditionFingerprint),
                                 std::bitset<5>{0}};

        auto preim4 =
            std::make_unique<PreimageSha256>(makeSlice(preim4Preimage));
        auto prefix3 = std::make_unique<PrefixSha256>(
            makeSlice(prefix3Prefix), prefix3MaxMsgLength, std::move(preim4));
        auto prefix2 = std::make_unique<PrefixSha256>(
            makeSlice(prefix2Prefix), prefix2MaxMsgLength, std::move(prefix3));
        auto prefix1 = std::make_unique<PrefixSha256>(
            makeSlice(prefix1Prefix), prefix1MaxMsgLength, std::move(prefix2));
        auto preim8 =
            std::make_unique<PreimageSha256>(makeSlice(preim8Preimage));
        auto prefix7 = std::make_unique<PrefixSha256>(
            makeSlice(prefix7Prefix), prefix7MaxMsgLength, std::move(preim8));
        auto prefix6 = std::make_unique<PrefixSha256>(
            makeSlice(prefix6Prefix), prefix6MaxMsgLength, std::move(prefix7));
        auto prefix5 = std::make_unique<PrefixSha256>(
            makeSlice(prefix5Prefix), prefix5MaxMsgLength, std::move(prefix6));
        auto preim10 =
            std::make_unique<PreimageSha256>(makeSlice(preim10Preimage));
        std::vector<std::unique_ptr<Fulfillment>> thresh9Subfulfillments;
        thresh9Subfulfillments.emplace_back(std::move(preim10));
        std::vector<Condition> thresh9Subconditions{
            {Preim11Cond, Rsa12Cond, Ed13Cond}};
        auto thresh9 = std::make_unique<ThresholdSha256>(
            std::move(thresh9Subfulfillments), std::move(thresh9Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh0Subfulfillments;
        thresh0Subfulfillments.emplace_back(std::move(prefix1));
        thresh0Subfulfillments.emplace_back(std::move(prefix5));
        thresh0Subfulfillments.emplace_back(std::move(thresh9));
        std::vector<Condition> thresh0Subconditions{
            {Preim14Cond, Rsa15Cond, Ed16Cond}};
        ThresholdSha256 const thresh0(
            std::move(thresh0Subfulfillments), std::move(thresh0Subconditions));
        {
            auto const thresh0EncodedFulfillment =
                "\xa2\x82\x01\x67\xa0\x81\xe9\xa1\x2c\x80\x02\x50\x31\x81\x01"
                "\x0e\xa2\x23\xa1\x21\x80\x02\x50\x32\x81\x01\x0e\xa2\x18\xa1"
                "\x16\x80\x02\x50\x33\x81\x01\x0e\xa2\x0d\xa0\x0b\x80\x09\x49"
                "\x20\x61\x6d\x20\x72\x6f\x6f\x74\xa1\x2c\x80\x02\x50\x35\x81"
                "\x01\x0e\xa2\x23\xa1\x21\x80\x02\x50\x36\x81\x01\x0e\xa2\x18"
                "\xa1\x16\x80\x02\x50\x37\x81\x01\x0e\xa2\x0d\xa0\x0b\x80\x09"
                "\x49\x20\x61\x6d\x20\x72\x6f\x6f\x74\xa2\x81\x8a\xa0\x0d\xa0"
                "\x0b\x80\x09\x49\x20\x61\x6d\x20\x72\x6f\x6f\x74\xa1\x79\xa0"
                "\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e"
                "\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53"
                "\xee\x93\x58\xeb\x4e\x81\x01\x09\xa3\x27\x80\x20\x38\xb9\xf0"
                "\xeb\x68\x8b\x9f\x55\x37\x9a\xec\x07\xd4\xa2\x13\xac\x34\xa1"
                "\x67\x31\x34\xea\xc2\x2f\xef\x13\xe3\x5c\xcf\x8f\x90\x1e\x81"
                "\x03\x01\x00\x00\xa4\x27\x80\x20\x7c\x54\x6a\x6d\x7f\x00\x52"
                "\x31\x03\xe7\xb4\x5b\x1c\x9f\x72\xeb\x3c\x18\x08\xa3\x24\xb2"
                "\x63\x5f\x77\x55\x4a\x42\xdb\x1e\xff\x1e\x81\x03\x02\x00\x00"
                "\xa1\x79\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51"
                "\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68"
                "\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa3\x27\x80\x20"
                "\x55\x6b\x6d\xe3\x00\xd4\xf3\x7e\x75\x3a\x68\xfc\x25\xdf\xf2"
                "\xf7\x18\x54\xa5\x55\x0c\xa5\xa9\x65\xbf\x66\x9e\x4e\x49\x56"
                "\x1e\xf1\x81\x03\x01\x00\x00\xa4\x27\x80\x20\xe4\x66\x69\x86"
                "\x87\x57\x0e\xac\xf1\xfd\x06\x81\x48\x90\x82\x42\x48\x50\x75"
                "\x8e\xd4\x2d\xf3\x02\x37\x89\x28\xc5\x68\xd7\xa0\x11\x81\x03"
                "\x02\x00\x00"s;
            auto const thresh0EncodedCondition =
                "\xa2\x2b\x80\x20\x09\x3d\x3a\x4e\x9d\x07\xfd\xb0\x1d\xf6\xa2"
                "\x0d\x21\x15\x42\x4b\x4f\x1b\xb1\x3f\xad\x07\xb0\x32\xc6\xe4"
                "\x4a\xe5\x45\x0a\x1d\xff\x81\x03\x05\x28\x00\x82\x02\x03\xd8"s;
            auto const thresh0EncodedFingerprint =
                "\x30\x82\x01\x04\x80\x01\x03\xa1\x81\xfe\xa0\x25\x80\x20\x5d"
                "\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b"
                "\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb"
                "\x4e\x81\x01\x09\xa1\x2a\x80\x20\x06\x07\x94\x5a\x08\xd7\x51"
                "\x9e\x8e\xba\x7b\x44\xe0\x78\xab\x79\xd9\x63\x88\x03\x70\x52"
                "\xa9\x72\xe7\x1e\x76\x5f\x16\x2a\x98\xaf\x81\x02\x0c\x39\x82"
                "\x02\x07\x80\xa1\x2a\x80\x20\x4d\x81\x76\x3b\x6e\xf3\xb3\x51"
                "\x6a\xac\xbf\xef\x9a\x41\xb9\xb4\x9e\xfb\x75\x75\x66\xcb\x36"
                "\xae\x61\x42\xfa\x3b\x95\x48\x6c\xff\x81\x02\x0c\x39\x82\x02"
                "\x07\x80\xa2\x2b\x80\x20\xa2\x3a\x32\xd1\x76\xb4\x02\xa3\xcd"
                "\x4f\x70\xa2\xd8\x41\xf5\x95\x9c\x3e\x1d\xb0\x9f\x4c\xc2\x43"
                "\x5e\xc1\x8a\x06\x8c\x77\xf3\x7f\x81\x03\x02\x10\x00\x82\x02"
                "\x03\x98\xa3\x27\x80\x20\x55\x6b\x6d\xe3\x00\xd4\xf3\x7e\x75"
                "\x3a\x68\xfc\x25\xdf\xf2\xf7\x18\x54\xa5\x55\x0c\xa5\xa9\x65"
                "\xbf\x66\x9e\x4e\x49\x56\x1e\xf1\x81\x03\x01\x00\x00\xa4\x27"
                "\x80\x20\xe4\x66\x69\x86\x87\x57\x0e\xac\xf1\xfd\x06\x81\x48"
                "\x90\x82\x42\x48\x50\x75\x8e\xd4\x2d\xf3\x02\x37\x89\x28\xc5"
                "\x68\xd7\xa0\x11\x81\x03\x02\x00\x00"s;
            check(
                &thresh0,
                thresh0Msg,
                thresh0EncodedFulfillment,
                thresh0EncodedCondition,
                thresh0EncodedFingerprint);
        }
    }

    void
    testThresh7()
    {
        testcase("Thresh7");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * thresh0
        // ** Preim8Cond
        // ** Rsa9Cond
        // ** Ed10Cond
        // ** Prefix11Cond
        // ** Thresh15Cond
        // ** prefix1
        // *** prefix2
        // **** prefix3
        // ***** preim4
        // ** preim5
        // ** rsa6
        // ** ed7

        auto const preim4Preimage = "I am root"s;
        auto const preim4Msg = "P3P2P1abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix3Prefix = "P3"s;
        auto const prefix3Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix3MaxMsgLength = 14;
        auto const prefix2Prefix = "P2"s;
        auto const prefix2Msg = "P1abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix2MaxMsgLength = 14;
        auto const prefix1Prefix = "P1"s;
        auto const prefix1Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix1MaxMsgLength = 14;
        auto const preim5Preimage = "I am root"s;
        auto const preim5Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const rsa6Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa6PublicKey{
            {0xd0, 0x07, 0xfc, 0x9d, 0xb0, 0xa1, 0xa6, 0x40, 0xe4, 0x52, 0x30,
             0x42, 0x74, 0xfd, 0x35, 0x04, 0xde, 0x45, 0x68, 0xb3, 0x22, 0xdd,
             0xff, 0x41, 0x43, 0x69, 0x33, 0xc0, 0xff, 0x35, 0xb6, 0x6d, 0x15,
             0xe9, 0x54, 0x15, 0xeb, 0x1d, 0x07, 0xe2, 0x25, 0x2b, 0xdb, 0xaa,
             0x16, 0x8d, 0x0d, 0x7f, 0x05, 0xf0, 0xd2, 0x7d, 0xb4, 0x9b, 0x51,
             0x19, 0x20, 0x1e, 0x3d, 0xba, 0x50, 0x9e, 0x51, 0x13, 0x81, 0x43,
             0x55, 0x96, 0xca, 0xdb, 0x88, 0x1f, 0xef, 0x2d, 0x38, 0x3f, 0xae,
             0x8d, 0xac, 0xc8, 0x6f, 0x2b, 0xd5, 0xf0, 0x34, 0x1a, 0x99, 0x00,
             0x7c, 0x6d, 0xb3, 0x1b, 0x1d, 0x68, 0xdb, 0xf8, 0x1c, 0x59, 0x3a,
             0x63, 0x38, 0x7c, 0x1c, 0x14, 0xbc, 0x22, 0xcf, 0xc8, 0x9a, 0xc6,
             0x96, 0x6f, 0x3d, 0x03, 0x0b, 0x61, 0x6b, 0x7d, 0x75, 0x97, 0xe8,
             0x25, 0xb8, 0x2f, 0xfa, 0xf4, 0x07, 0x44, 0xdf, 0x00, 0x3d, 0xff,
             0x0d, 0xd5, 0x7f, 0x7f, 0xf3, 0x0c, 0x13, 0xac, 0x8d, 0xf8, 0x8c,
             0x79, 0xc5, 0xf3, 0x29, 0xdc, 0x23, 0x65, 0xd3, 0xd1, 0x1c, 0xa6,
             0x14, 0x78, 0x6a, 0x1a, 0xe3, 0x15, 0x8d, 0x8b, 0xdc, 0xa0, 0x5a,
             0xc7, 0x82, 0xb0, 0x03, 0x6c, 0x71, 0x43, 0x59, 0x24, 0xc7, 0x50,
             0x64, 0xb2, 0xa7, 0x69, 0xf5, 0xbd, 0xe6, 0x5e, 0xaa, 0x77, 0x59,
             0x60, 0x36, 0xc0, 0xe3, 0x42, 0x7f, 0x05, 0x3b, 0x4c, 0x02, 0x0e,
             0x70, 0x5a, 0x70, 0xc5, 0x2a, 0xeb, 0x94, 0x4d, 0x15, 0x09, 0xef,
             0xbb, 0x58, 0x42, 0x68, 0x05, 0x59, 0x70, 0xa0, 0x17, 0xb2, 0x8e,
             0xdf, 0x7b, 0x40, 0x5d, 0x21, 0x1e, 0xfe, 0x62, 0x58, 0xde, 0xfb,
             0x14, 0x91, 0x18, 0xf3, 0x4f, 0x9b, 0x36, 0x55, 0xcf, 0xb3, 0x5e,
             0xec, 0x4f, 0xcc, 0x6d, 0x13, 0x58, 0xc8, 0xa3, 0xa3, 0xee, 0x23,
             0x8a, 0xc2, 0xbf}};
        std::array<std::uint8_t, 256> const rsa6Sig{
            {0x16, 0x5a, 0x22, 0xa2, 0xdc, 0xce, 0xe2, 0x77, 0x7e, 0x49, 0x6e,
             0x73, 0xb7, 0x0a, 0xcd, 0x49, 0xcb, 0x92, 0x22, 0xbf, 0xfb, 0x11,
             0x58, 0x88, 0x85, 0x2b, 0xc3, 0xe6, 0x55, 0xe6, 0x89, 0x81, 0x29,
             0x05, 0x61, 0x00, 0x34, 0x2a, 0xb2, 0x0a, 0xc0, 0xda, 0x44, 0xf8,
             0x48, 0xfa, 0xa3, 0x40, 0xee, 0x58, 0xbf, 0xb1, 0xd9, 0x3e, 0x72,
             0x40, 0xb3, 0x58, 0xe1, 0xa6, 0x4d, 0x69, 0x4e, 0x4e, 0x50, 0xb2,
             0xc5, 0x63, 0xa1, 0x73, 0xee, 0xca, 0x7f, 0xe8, 0x11, 0x17, 0xf6,
             0x8b, 0x83, 0xe1, 0x74, 0x28, 0x76, 0x7e, 0xdf, 0x26, 0xcb, 0x09,
             0x5f, 0x37, 0x1a, 0xaf, 0x16, 0x98, 0x61, 0x70, 0x33, 0x06, 0x2f,
             0xd0, 0xd4, 0xa4, 0x77, 0xc3, 0x0d, 0xb3, 0x98, 0x5f, 0xf7, 0x63,
             0x83, 0x4b, 0x53, 0x48, 0x15, 0xd5, 0xac, 0x61, 0xdc, 0x1e, 0x8c,
             0x3b, 0x0c, 0x11, 0x87, 0x4b, 0xb6, 0xf1, 0x22, 0xed, 0x8a, 0xee,
             0xa6, 0xd6, 0x86, 0x12, 0x55, 0x39, 0x8a, 0xf9, 0x3b, 0x97, 0x3f,
             0xd7, 0x10, 0x15, 0x84, 0x13, 0x36, 0xea, 0x41, 0xd9, 0xef, 0xff,
             0x0e, 0xb9, 0xda, 0x78, 0xed, 0x1d, 0x0f, 0x39, 0x51, 0xd8, 0x21,
             0x83, 0x41, 0xe1, 0x78, 0xe8, 0x8c, 0xce, 0xd8, 0x2e, 0xb3, 0x7e,
             0x72, 0x46, 0xcd, 0xfc, 0xb4, 0x8d, 0x12, 0x7c, 0x3d, 0x3a, 0xbd,
             0x00, 0x8d, 0xa4, 0x3d, 0x53, 0xd1, 0x43, 0xf0, 0x7c, 0x45, 0xe5,
             0x20, 0xb7, 0xe6, 0x4e, 0x4a, 0x96, 0xcd, 0xed, 0xd3, 0x9d, 0x52,
             0xef, 0x63, 0x8c, 0xd5, 0x72, 0x0a, 0xbf, 0x95, 0x7b, 0xce, 0x5e,
             0x47, 0x6e, 0x51, 0x32, 0x1d, 0xcc, 0xaa, 0xd0, 0xd2, 0x8d, 0x28,
             0x95, 0x6c, 0x90, 0xbb, 0x97, 0x28, 0xe3, 0xe3, 0x19, 0x3c, 0x78,
             0x94, 0x2d, 0x78, 0x00, 0x0f, 0x2c, 0xaa, 0x60, 0xa2, 0x87, 0xbd,
             0x8b, 0x9e, 0x92}};
        auto const ed7Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed7PublicKey{
            {0x58, 0xcf, 0x4b, 0xc5, 0x59, 0xdb, 0xba, 0x62, 0x25, 0x14, 0x3a,
             0xc0, 0xad, 0xab, 0x5e, 0x35, 0xa1, 0xb4, 0x0e, 0xc1, 0xaf, 0x3c,
             0xa8, 0x2f, 0x69, 0x2c, 0xb6, 0x25, 0xd7, 0xea, 0x15, 0xb3}};
        std::array<std::uint8_t, 64> const ed7Sig{
            {0xd0, 0xd1, 0x17, 0xe2, 0xb5, 0x40, 0x14, 0x81, 0x0b, 0x12, 0xd8,
             0xbe, 0x1d, 0x1c, 0xb0, 0x88, 0x27, 0xaf, 0x6e, 0xc3, 0x13, 0x71,
             0xea, 0xac, 0xf3, 0xd8, 0x6f, 0x38, 0x21, 0xe2, 0x6d, 0x77, 0xe9,
             0xa6, 0xba, 0x03, 0x2a, 0xe3, 0x50, 0xcb, 0x38, 0xbe, 0x36, 0xba,
             0x62, 0x6e, 0x37, 0x5c, 0x8d, 0x69, 0x9f, 0xf0, 0x43, 0x64, 0x83,
             0x82, 0x8e, 0xbe, 0xf5, 0xa6, 0x96, 0x35, 0xb7, 0x03}};
        std::array<std::uint8_t, 32> const ed7SigningKey{
            {0x9c, 0x02, 0x4b, 0x5e, 0x6a, 0x83, 0x35, 0x8a, 0x2a, 0x71, 0x70,
             0x4e, 0xab, 0x74, 0x72, 0x22, 0x33, 0x5a, 0x82, 0xd9, 0x8e, 0x9c,
             0x8c, 0x41, 0x62, 0x6b, 0x02, 0x62, 0xbd, 0x59, 0x31, 0xcb}};
        (void)ed7SigningKey;
        auto const thresh0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim8CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim8Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim8CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa9CondConditionFingerprint =
            "\xe5\x15\x0a\xbd\xf6\x06\xbe\xaa\x6c\x81\xf1\x88\x7e\x70\x64"
            "\x51\xeb\x6f\x70\xb1\xdd\xc5\xf1\x20\x53\xf7\xcb\x9f\x7f\xc7"
            "\xe4\x52"s;
        Condition const Rsa9Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa9CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed10CondConditionFingerprint =
            "\x00\x8b\xe6\x62\xd4\x30\x65\x1e\x40\xb3\x23\x05\x52\x3a\xf3"
            "\x16\xda\x09\xbe\x79\x5f\x41\xc9\x03\x93\x34\x5b\x7c\x24\x87"
            "\x62\xfa"s;
        Condition const Ed10Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed10CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Prefix11CondConditionFingerprint =
            "\xb1\x45\x93\xab\xca\x4f\xfc\xa3\x32\xd5\x73\x3d\x92\x93\xdc"
            "\x94\x21\x19\xb2\x19\xc8\xf1\x43\x42\x40\x9e\x4e\x77\xb8\x5c"
            "\xbf\xf3"s;
        Condition const Prefix11Cond{
            Type::prefixSha256,
            3144,
            makeSlice(Prefix11CondConditionFingerprint),
            std::bitset<5>{1}};
        auto const Thresh15CondConditionFingerprint =
            "\xd1\x6d\xda\x96\x60\x90\x20\x59\x46\x02\x38\x55\x20\xf4\x49"
            "\xcb\x2d\x28\x4a\x11\x09\x6d\xe2\xbe\xd0\x67\x23\x7d\xeb\xb4"
            "\xf3\xc8"s;
        Condition const Thresh15Cond{
            Type::thresholdSha256,
            135168,
            makeSlice(Thresh15CondConditionFingerprint),
            std::bitset<5>{25}};

        auto preim4 =
            std::make_unique<PreimageSha256>(makeSlice(preim4Preimage));
        auto prefix3 = std::make_unique<PrefixSha256>(
            makeSlice(prefix3Prefix), prefix3MaxMsgLength, std::move(preim4));
        auto prefix2 = std::make_unique<PrefixSha256>(
            makeSlice(prefix2Prefix), prefix2MaxMsgLength, std::move(prefix3));
        auto prefix1 = std::make_unique<PrefixSha256>(
            makeSlice(prefix1Prefix), prefix1MaxMsgLength, std::move(prefix2));
        auto preim5 =
            std::make_unique<PreimageSha256>(makeSlice(preim5Preimage));
        auto rsa6 = std::make_unique<RsaSha256>(
            makeSlice(rsa6PublicKey), makeSlice(rsa6Sig));
        auto ed7 = std::make_unique<Ed25519>(ed7PublicKey, ed7Sig);
        std::vector<std::unique_ptr<Fulfillment>> thresh0Subfulfillments;
        thresh0Subfulfillments.emplace_back(std::move(prefix1));
        thresh0Subfulfillments.emplace_back(std::move(preim5));
        thresh0Subfulfillments.emplace_back(std::move(rsa6));
        thresh0Subfulfillments.emplace_back(std::move(ed7));
        std::vector<Condition> thresh0Subconditions{
            {Preim8Cond, Rsa9Cond, Ed10Cond, Prefix11Cond, Thresh15Cond}};
        ThresholdSha256 const thresh0(
            std::move(thresh0Subfulfillments), std::move(thresh0Subconditions));
        {
            auto const thresh0EncodedFulfillment =
                "\xa2\x82\x03\x86\xa0\x82\x02\xad\xa0\x0b\x80\x09\x49\x20\x61"
                "\x6d\x20\x72\x6f\x6f\x74\xa1\x2c\x80\x02\x50\x31\x81\x01\x0e"
                "\xa2\x23\xa1\x21\x80\x02\x50\x32\x81\x01\x0e\xa2\x18\xa1\x16"
                "\x80\x02\x50\x33\x81\x01\x0e\xa2\x0d\xa0\x0b\x80\x09\x49\x20"
                "\x61\x6d\x20\x72\x6f\x6f\x74\xa3\x82\x02\x08\x80\x82\x01\x00"
                "\xd0\x07\xfc\x9d\xb0\xa1\xa6\x40\xe4\x52\x30\x42\x74\xfd\x35"
                "\x04\xde\x45\x68\xb3\x22\xdd\xff\x41\x43\x69\x33\xc0\xff\x35"
                "\xb6\x6d\x15\xe9\x54\x15\xeb\x1d\x07\xe2\x25\x2b\xdb\xaa\x16"
                "\x8d\x0d\x7f\x05\xf0\xd2\x7d\xb4\x9b\x51\x19\x20\x1e\x3d\xba"
                "\x50\x9e\x51\x13\x81\x43\x55\x96\xca\xdb\x88\x1f\xef\x2d\x38"
                "\x3f\xae\x8d\xac\xc8\x6f\x2b\xd5\xf0\x34\x1a\x99\x00\x7c\x6d"
                "\xb3\x1b\x1d\x68\xdb\xf8\x1c\x59\x3a\x63\x38\x7c\x1c\x14\xbc"
                "\x22\xcf\xc8\x9a\xc6\x96\x6f\x3d\x03\x0b\x61\x6b\x7d\x75\x97"
                "\xe8\x25\xb8\x2f\xfa\xf4\x07\x44\xdf\x00\x3d\xff\x0d\xd5\x7f"
                "\x7f\xf3\x0c\x13\xac\x8d\xf8\x8c\x79\xc5\xf3\x29\xdc\x23\x65"
                "\xd3\xd1\x1c\xa6\x14\x78\x6a\x1a\xe3\x15\x8d\x8b\xdc\xa0\x5a"
                "\xc7\x82\xb0\x03\x6c\x71\x43\x59\x24\xc7\x50\x64\xb2\xa7\x69"
                "\xf5\xbd\xe6\x5e\xaa\x77\x59\x60\x36\xc0\xe3\x42\x7f\x05\x3b"
                "\x4c\x02\x0e\x70\x5a\x70\xc5\x2a\xeb\x94\x4d\x15\x09\xef\xbb"
                "\x58\x42\x68\x05\x59\x70\xa0\x17\xb2\x8e\xdf\x7b\x40\x5d\x21"
                "\x1e\xfe\x62\x58\xde\xfb\x14\x91\x18\xf3\x4f\x9b\x36\x55\xcf"
                "\xb3\x5e\xec\x4f\xcc\x6d\x13\x58\xc8\xa3\xa3\xee\x23\x8a\xc2"
                "\xbf\x81\x82\x01\x00\x16\x5a\x22\xa2\xdc\xce\xe2\x77\x7e\x49"
                "\x6e\x73\xb7\x0a\xcd\x49\xcb\x92\x22\xbf\xfb\x11\x58\x88\x85"
                "\x2b\xc3\xe6\x55\xe6\x89\x81\x29\x05\x61\x00\x34\x2a\xb2\x0a"
                "\xc0\xda\x44\xf8\x48\xfa\xa3\x40\xee\x58\xbf\xb1\xd9\x3e\x72"
                "\x40\xb3\x58\xe1\xa6\x4d\x69\x4e\x4e\x50\xb2\xc5\x63\xa1\x73"
                "\xee\xca\x7f\xe8\x11\x17\xf6\x8b\x83\xe1\x74\x28\x76\x7e\xdf"
                "\x26\xcb\x09\x5f\x37\x1a\xaf\x16\x98\x61\x70\x33\x06\x2f\xd0"
                "\xd4\xa4\x77\xc3\x0d\xb3\x98\x5f\xf7\x63\x83\x4b\x53\x48\x15"
                "\xd5\xac\x61\xdc\x1e\x8c\x3b\x0c\x11\x87\x4b\xb6\xf1\x22\xed"
                "\x8a\xee\xa6\xd6\x86\x12\x55\x39\x8a\xf9\x3b\x97\x3f\xd7\x10"
                "\x15\x84\x13\x36\xea\x41\xd9\xef\xff\x0e\xb9\xda\x78\xed\x1d"
                "\x0f\x39\x51\xd8\x21\x83\x41\xe1\x78\xe8\x8c\xce\xd8\x2e\xb3"
                "\x7e\x72\x46\xcd\xfc\xb4\x8d\x12\x7c\x3d\x3a\xbd\x00\x8d\xa4"
                "\x3d\x53\xd1\x43\xf0\x7c\x45\xe5\x20\xb7\xe6\x4e\x4a\x96\xcd"
                "\xed\xd3\x9d\x52\xef\x63\x8c\xd5\x72\x0a\xbf\x95\x7b\xce\x5e"
                "\x47\x6e\x51\x32\x1d\xcc\xaa\xd0\xd2\x8d\x28\x95\x6c\x90\xbb"
                "\x97\x28\xe3\xe3\x19\x3c\x78\x94\x2d\x78\x00\x0f\x2c\xaa\x60"
                "\xa2\x87\xbd\x8b\x9e\x92\xa4\x64\x80\x20\x58\xcf\x4b\xc5\x59"
                "\xdb\xba\x62\x25\x14\x3a\xc0\xad\xab\x5e\x35\xa1\xb4\x0e\xc1"
                "\xaf\x3c\xa8\x2f\x69\x2c\xb6\x25\xd7\xea\x15\xb3\x81\x40\xd0"
                "\xd1\x17\xe2\xb5\x40\x14\x81\x0b\x12\xd8\xbe\x1d\x1c\xb0\x88"
                "\x27\xaf\x6e\xc3\x13\x71\xea\xac\xf3\xd8\x6f\x38\x21\xe2\x6d"
                "\x77\xe9\xa6\xba\x03\x2a\xe3\x50\xcb\x38\xbe\x36\xba\x62\x6e"
                "\x37\x5c\x8d\x69\x9f\xf0\x43\x64\x83\x82\x8e\xbe\xf5\xa6\x96"
                "\x35\xb7\x03\xa1\x81\xd2\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd"
                "\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33"
                "\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09"
                "\xa1\x2a\x80\x20\xb1\x45\x93\xab\xca\x4f\xfc\xa3\x32\xd5\x73"
                "\x3d\x92\x93\xdc\x94\x21\x19\xb2\x19\xc8\xf1\x43\x42\x40\x9e"
                "\x4e\x77\xb8\x5c\xbf\xf3\x81\x02\x0c\x48\x82\x02\x07\x80\xa2"
                "\x2b\x80\x20\xd1\x6d\xda\x96\x60\x90\x20\x59\x46\x02\x38\x55"
                "\x20\xf4\x49\xcb\x2d\x28\x4a\x11\x09\x6d\xe2\xbe\xd0\x67\x23"
                "\x7d\xeb\xb4\xf3\xc8\x81\x03\x02\x10\x00\x82\x02\x03\x98\xa3"
                "\x27\x80\x20\xe5\x15\x0a\xbd\xf6\x06\xbe\xaa\x6c\x81\xf1\x88"
                "\x7e\x70\x64\x51\xeb\x6f\x70\xb1\xdd\xc5\xf1\x20\x53\xf7\xcb"
                "\x9f\x7f\xc7\xe4\x52\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x00"
                "\x8b\xe6\x62\xd4\x30\x65\x1e\x40\xb3\x23\x05\x52\x3a\xf3\x16"
                "\xda\x09\xbe\x79\x5f\x41\xc9\x03\x93\x34\x5b\x7c\x24\x87\x62"
                "\xfa\x81\x03\x02\x00\x00"s;
            auto const thresh0EncodedCondition =
                "\xa2\x2b\x80\x20\x5c\xef\xdf\x82\x10\x41\xc3\x4e\x01\x3a\x46"
                "\x8e\x93\x9d\x18\x1a\x5b\x7d\x80\x81\xc4\x0c\xd9\xd9\xcc\x1d"
                "\xb8\xb0\xdd\xcc\x12\xcd\x81\x03\x07\x34\x00\x82\x02\x03\xd8"s;
            auto const thresh0EncodedFingerprint =
                "\x30\x82\x01\x7e\x80\x01\x04\xa1\x82\x01\x77\xa0\x25\x80\x20"
                "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
                "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
                "\xeb\x4e\x81\x01\x09\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1"
                "\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21"
                "\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa1"
                "\x2a\x80\x20\x06\x07\x94\x5a\x08\xd7\x51\x9e\x8e\xba\x7b\x44"
                "\xe0\x78\xab\x79\xd9\x63\x88\x03\x70\x52\xa9\x72\xe7\x1e\x76"
                "\x5f\x16\x2a\x98\xaf\x81\x02\x0c\x39\x82\x02\x07\x80\xa1\x2a"
                "\x80\x20\xb1\x45\x93\xab\xca\x4f\xfc\xa3\x32\xd5\x73\x3d\x92"
                "\x93\xdc\x94\x21\x19\xb2\x19\xc8\xf1\x43\x42\x40\x9e\x4e\x77"
                "\xb8\x5c\xbf\xf3\x81\x02\x0c\x48\x82\x02\x07\x80\xa2\x2b\x80"
                "\x20\xd1\x6d\xda\x96\x60\x90\x20\x59\x46\x02\x38\x55\x20\xf4"
                "\x49\xcb\x2d\x28\x4a\x11\x09\x6d\xe2\xbe\xd0\x67\x23\x7d\xeb"
                "\xb4\xf3\xc8\x81\x03\x02\x10\x00\x82\x02\x03\x98\xa3\x27\x80"
                "\x20\xe5\x15\x0a\xbd\xf6\x06\xbe\xaa\x6c\x81\xf1\x88\x7e\x70"
                "\x64\x51\xeb\x6f\x70\xb1\xdd\xc5\xf1\x20\x53\xf7\xcb\x9f\x7f"
                "\xc7\xe4\x52\x81\x03\x01\x00\x00\xa3\x27\x80\x20\xee\x75\xbe"
                "\xb3\x52\x54\xbd\x24\x06\x3f\xd9\x32\x48\x19\xe1\x5c\x70\x85"
                "\x92\x11\x6c\x3a\xc1\x4c\x9b\x83\xeb\x05\xa7\x59\xe2\xa0\x81"
                "\x03\x01\x00\x00\xa4\x27\x80\x20\x00\x8b\xe6\x62\xd4\x30\x65"
                "\x1e\x40\xb3\x23\x05\x52\x3a\xf3\x16\xda\x09\xbe\x79\x5f\x41"
                "\xc9\x03\x93\x34\x5b\x7c\x24\x87\x62\xfa\x81\x03\x02\x00\x00"
                "\xa4\x27\x80\x20\x1e\x5a\xaf\x3e\x46\xf6\xd4\xdf\x4d\x70\xf0"
                "\xa1\xd1\x35\x6d\xf0\x8b\x86\x91\xac\xb2\xf2\x24\xf0\x1a\xd4"
                "\x23\xc0\x21\x8d\x42\xc0\x81\x03\x02\x00\x00"s;
            check(
                &thresh0,
                thresh0Msg,
                thresh0EncodedFulfillment,
                thresh0EncodedCondition,
                thresh0EncodedFingerprint);
        }
    }

    void
    testThresh8()
    {
        testcase("Thresh8");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * thresh0
        // ** Preim19Cond
        // ** Rsa20Cond
        // ** Ed21Cond
        // ** prefix1
        // *** prefix2
        // **** thresh3
        // ***** preim4
        // ** prefix5
        // *** prefix6
        // **** thresh7
        // ***** preim8
        // ** thresh9
        // *** Preim16Cond
        // *** Rsa17Cond
        // *** Ed18Cond
        // *** preim10
        // *** thresh11
        // **** Preim13Cond
        // **** Rsa14Cond
        // **** Ed15Cond
        // **** preim12

        auto const preim4Preimage = "I am root"s;
        auto const preim4Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        auto const thresh3Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix2Prefix = "P2"s;
        auto const prefix2Msg = "P1abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix2MaxMsgLength = 14;
        auto const prefix1Prefix = "P1"s;
        auto const prefix1Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix1MaxMsgLength = 14;
        auto const preim8Preimage = "I am root"s;
        auto const preim8Msg = "P6P5abcdefghijklmnopqrstuvwxyz"s;
        auto const thresh7Msg = "P6P5abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix6Prefix = "P6"s;
        auto const prefix6Msg = "P5abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix6MaxMsgLength = 14;
        auto const prefix5Prefix = "P5"s;
        auto const prefix5Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix5MaxMsgLength = 14;
        auto const preim10Preimage = "I am root"s;
        auto const preim10Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const preim12Preimage = "I am root"s;
        auto const preim12Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const thresh11Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim13CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim13Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim13CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa14CondConditionFingerprint =
            "\x32\xec\xaa\x5e\xa6\x88\xdc\xe4\x81\x0f\x93\x0f\x65\xde\x87"
            "\xfd\x54\x8c\x79\x04\x81\xe3\x63\x3f\x3d\x08\xa1\xba\x0a\x24"
            "\x2b\x46"s;
        Condition const Rsa14Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa14CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed15CondConditionFingerprint =
            "\x40\xd1\x9a\x63\x62\x9b\xc0\x76\xab\x11\x73\x42\x86\xb3\x20"
            "\x9d\x23\xe8\x5e\xee\xb9\x82\x5d\x93\xe3\xac\xad\xa0\x40\x41"
            "\x51\x1b"s;
        Condition const Ed15Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed15CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const thresh9Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim16CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim16Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim16CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa17CondConditionFingerprint =
            "\x78\xe3\x04\xf4\xa6\x16\x68\x4c\x1b\xcf\x3a\x32\xff\xbc\x75"
            "\x1a\xe6\x08\x9b\xff\xba\x79\xf4\x39\x7a\xfc\xe1\x6f\xff\x3e"
            "\xb3\x75"s;
        Condition const Rsa17Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa17CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed18CondConditionFingerprint =
            "\x0d\xea\xc5\x16\x5c\x62\xb8\xd1\xa4\xe7\x5a\x07\x58\x00\x79"
            "\x51\x88\x21\xe9\x4d\xba\x73\x7b\xad\x60\x9c\x5c\x26\x00\x2e"
            "\xd1\x51"s;
        Condition const Ed18Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed18CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const thresh0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim19CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim19Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim19CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa20CondConditionFingerprint =
            "\x8d\xb0\x2c\xb1\x28\xc3\xf4\x97\x50\x84\x64\x57\xca\xf4\x9d"
            "\x63\x08\x73\xfc\xde\x2f\x90\xf0\xf2\xec\x79\xa9\xc6\xa3\xf1"
            "\x33\xfd"s;
        Condition const Rsa20Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa20CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed21CondConditionFingerprint =
            "\x95\x3c\x86\x65\x91\x76\x69\x6b\x72\x61\xaa\x76\x15\x2a\xd7"
            "\x25\x4f\x32\xb7\x73\x7a\xb2\x49\x0c\x0b\xdf\xb5\x4e\x4a\x8b"
            "\xf7\x65"s;
        Condition const Ed21Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed21CondConditionFingerprint),
                                 std::bitset<5>{0}};

        auto preim4 =
            std::make_unique<PreimageSha256>(makeSlice(preim4Preimage));
        std::vector<std::unique_ptr<Fulfillment>> thresh3Subfulfillments;
        thresh3Subfulfillments.emplace_back(std::move(preim4));
        std::vector<Condition> thresh3Subconditions{};
        auto thresh3 = std::make_unique<ThresholdSha256>(
            std::move(thresh3Subfulfillments), std::move(thresh3Subconditions));
        auto prefix2 = std::make_unique<PrefixSha256>(
            makeSlice(prefix2Prefix), prefix2MaxMsgLength, std::move(thresh3));
        auto prefix1 = std::make_unique<PrefixSha256>(
            makeSlice(prefix1Prefix), prefix1MaxMsgLength, std::move(prefix2));
        auto preim8 =
            std::make_unique<PreimageSha256>(makeSlice(preim8Preimage));
        std::vector<std::unique_ptr<Fulfillment>> thresh7Subfulfillments;
        thresh7Subfulfillments.emplace_back(std::move(preim8));
        std::vector<Condition> thresh7Subconditions{};
        auto thresh7 = std::make_unique<ThresholdSha256>(
            std::move(thresh7Subfulfillments), std::move(thresh7Subconditions));
        auto prefix6 = std::make_unique<PrefixSha256>(
            makeSlice(prefix6Prefix), prefix6MaxMsgLength, std::move(thresh7));
        auto prefix5 = std::make_unique<PrefixSha256>(
            makeSlice(prefix5Prefix), prefix5MaxMsgLength, std::move(prefix6));
        auto preim10 =
            std::make_unique<PreimageSha256>(makeSlice(preim10Preimage));
        auto preim12 =
            std::make_unique<PreimageSha256>(makeSlice(preim12Preimage));
        std::vector<std::unique_ptr<Fulfillment>> thresh11Subfulfillments;
        thresh11Subfulfillments.emplace_back(std::move(preim12));
        std::vector<Condition> thresh11Subconditions{
            {Preim13Cond, Rsa14Cond, Ed15Cond}};
        auto thresh11 = std::make_unique<ThresholdSha256>(
            std::move(thresh11Subfulfillments),
            std::move(thresh11Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh9Subfulfillments;
        thresh9Subfulfillments.emplace_back(std::move(preim10));
        thresh9Subfulfillments.emplace_back(std::move(thresh11));
        std::vector<Condition> thresh9Subconditions{
            {Preim16Cond, Rsa17Cond, Ed18Cond}};
        auto thresh9 = std::make_unique<ThresholdSha256>(
            std::move(thresh9Subfulfillments), std::move(thresh9Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh0Subfulfillments;
        thresh0Subfulfillments.emplace_back(std::move(prefix1));
        thresh0Subfulfillments.emplace_back(std::move(prefix5));
        thresh0Subfulfillments.emplace_back(std::move(thresh9));
        std::vector<Condition> thresh0Subconditions{
            {Preim19Cond, Rsa20Cond, Ed21Cond}};
        ThresholdSha256 const thresh0(
            std::move(thresh0Subfulfillments), std::move(thresh0Subconditions));
        {
            auto const thresh0EncodedFulfillment =
                "\xa2\x82\x01\xed\xa0\x82\x01\x6e\xa1\x27\x80\x02\x50\x31\x81"
                "\x01\x0e\xa2\x1e\xa1\x1c\x80\x02\x50\x32\x81\x01\x0e\xa2\x13"
                "\xa2\x11\xa0\x0d\xa0\x0b\x80\x09\x49\x20\x61\x6d\x20\x72\x6f"
                "\x6f\x74\xa1\x00\xa1\x27\x80\x02\x50\x35\x81\x01\x0e\xa2\x1e"
                "\xa1\x1c\x80\x02\x50\x36\x81\x01\x0e\xa2\x13\xa2\x11\xa0\x0d"
                "\xa0\x0b\x80\x09\x49\x20\x61\x6d\x20\x72\x6f\x6f\x74\xa1\x00"
                "\xa2\x82\x01\x18\xa0\x81\x9a\xa0\x0b\x80\x09\x49\x20\x61\x6d"
                "\x20\x72\x6f\x6f\x74\xa2\x81\x8a\xa0\x0d\xa0\x0b\x80\x09\x49"
                "\x20\x61\x6d\x20\x72\x6f\x6f\x74\xa1\x79\xa0\x25\x80\x20\x5d"
                "\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b"
                "\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb"
                "\x4e\x81\x01\x09\xa3\x27\x80\x20\x32\xec\xaa\x5e\xa6\x88\xdc"
                "\xe4\x81\x0f\x93\x0f\x65\xde\x87\xfd\x54\x8c\x79\x04\x81\xe3"
                "\x63\x3f\x3d\x08\xa1\xba\x0a\x24\x2b\x46\x81\x03\x01\x00\x00"
                "\xa4\x27\x80\x20\x40\xd1\x9a\x63\x62\x9b\xc0\x76\xab\x11\x73"
                "\x42\x86\xb3\x20\x9d\x23\xe8\x5e\xee\xb9\x82\x5d\x93\xe3\xac"
                "\xad\xa0\x40\x41\x51\x1b\x81\x03\x02\x00\x00\xa1\x79\xa0\x25"
                "\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54"
                "\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee"
                "\x93\x58\xeb\x4e\x81\x01\x09\xa3\x27\x80\x20\x78\xe3\x04\xf4"
                "\xa6\x16\x68\x4c\x1b\xcf\x3a\x32\xff\xbc\x75\x1a\xe6\x08\x9b"
                "\xff\xba\x79\xf4\x39\x7a\xfc\xe1\x6f\xff\x3e\xb3\x75\x81\x03"
                "\x01\x00\x00\xa4\x27\x80\x20\x0d\xea\xc5\x16\x5c\x62\xb8\xd1"
                "\xa4\xe7\x5a\x07\x58\x00\x79\x51\x88\x21\xe9\x4d\xba\x73\x7b"
                "\xad\x60\x9c\x5c\x26\x00\x2e\xd1\x51\x81\x03\x02\x00\x00\xa1"
                "\x79\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8"
                "\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc"
                "\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa3\x27\x80\x20\x8d"
                "\xb0\x2c\xb1\x28\xc3\xf4\x97\x50\x84\x64\x57\xca\xf4\x9d\x63"
                "\x08\x73\xfc\xde\x2f\x90\xf0\xf2\xec\x79\xa9\xc6\xa3\xf1\x33"
                "\xfd\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x95\x3c\x86\x65\x91"
                "\x76\x69\x6b\x72\x61\xaa\x76\x15\x2a\xd7\x25\x4f\x32\xb7\x73"
                "\x7a\xb2\x49\x0c\x0b\xdf\xb5\x4e\x4a\x8b\xf7\x65\x81\x03\x02"
                "\x00\x00"s;
            auto const thresh0EncodedCondition =
                "\xa2\x2b\x80\x20\xd2\x8a\x2e\x71\xd7\x19\x3d\xa3\xce\xf4\x92"
                "\x01\x4e\xcc\xe8\x1e\xad\x9f\xba\xa8\xe3\x97\xfa\x80\xae\x89"
                "\xcb\xa1\x93\xd1\x7d\x08\x81\x03\x07\x3c\x00\x82\x02\x03\xd8"s;
            auto const thresh0EncodedFingerprint =
                "\x30\x82\x01\x04\x80\x01\x03\xa1\x81\xfe\xa0\x25\x80\x20\x5d"
                "\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b"
                "\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb"
                "\x4e\x81\x01\x09\xa1\x2a\x80\x20\x44\x14\xfa\xdb\x12\xdf\x3b"
                "\xfa\xf4\x83\x76\xcb\xc7\x3b\xf8\x38\x13\x57\x04\xb9\x8d\x95"
                "\xe7\xd0\xdf\xfb\x9c\x41\x6b\x79\xe6\xd9\x81\x02\x0c\x29\x82"
                "\x02\x05\xa0\xa1\x2a\x80\x20\x87\xb8\xf6\xfa\xf2\x8a\x27\x77"
                "\x61\x23\x2b\xac\xb1\x8a\x4b\x76\x3c\x8e\x3d\x7a\x71\x5c\x71"
                "\x44\xab\x47\x53\x97\x96\x34\xf7\x58\x81\x02\x0c\x29\x82\x02"
                "\x05\xa0\xa2\x2b\x80\x20\xff\xf0\xa1\xa3\xc8\x5e\x3f\x37\x30"
                "\xe5\x02\x04\xfa\xa3\x6a\x6f\xf0\x9a\xc8\xc5\x4c\xb5\x17\xb0"
                "\x72\xa2\x59\xe5\xb7\x3a\xee\xc8\x81\x03\x04\x24\x00\x82\x02"
                "\x03\x98\xa3\x27\x80\x20\x8d\xb0\x2c\xb1\x28\xc3\xf4\x97\x50"
                "\x84\x64\x57\xca\xf4\x9d\x63\x08\x73\xfc\xde\x2f\x90\xf0\xf2"
                "\xec\x79\xa9\xc6\xa3\xf1\x33\xfd\x81\x03\x01\x00\x00\xa4\x27"
                "\x80\x20\x95\x3c\x86\x65\x91\x76\x69\x6b\x72\x61\xaa\x76\x15"
                "\x2a\xd7\x25\x4f\x32\xb7\x73\x7a\xb2\x49\x0c\x0b\xdf\xb5\x4e"
                "\x4a\x8b\xf7\x65\x81\x03\x02\x00\x00"s;
            check(
                &thresh0,
                thresh0Msg,
                thresh0EncodedFulfillment,
                thresh0EncodedCondition,
                thresh0EncodedFingerprint);
        }
    }

    void
    testThresh9()
    {
        testcase("Thresh9");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * thresh0
        // ** Preim8Cond
        // ** Rsa9Cond
        // ** Ed10Cond
        // ** Prefix11Cond
        // ** Thresh15Cond
        // ** prefix1
        // *** prefix2
        // **** thresh3
        // ***** preim4
        // ** preim5
        // ** rsa6
        // ** ed7

        auto const preim4Preimage = "I am root"s;
        auto const preim4Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        auto const thresh3Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix2Prefix = "P2"s;
        auto const prefix2Msg = "P1abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix2MaxMsgLength = 14;
        auto const prefix1Prefix = "P1"s;
        auto const prefix1Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix1MaxMsgLength = 14;
        auto const preim5Preimage = "I am root"s;
        auto const preim5Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const rsa6Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa6PublicKey{
            {0xd0, 0x07, 0xfc, 0x9d, 0xb0, 0xa1, 0xa6, 0x40, 0xe4, 0x52, 0x30,
             0x42, 0x74, 0xfd, 0x35, 0x04, 0xde, 0x45, 0x68, 0xb3, 0x22, 0xdd,
             0xff, 0x41, 0x43, 0x69, 0x33, 0xc0, 0xff, 0x35, 0xb6, 0x6d, 0x15,
             0xe9, 0x54, 0x15, 0xeb, 0x1d, 0x07, 0xe2, 0x25, 0x2b, 0xdb, 0xaa,
             0x16, 0x8d, 0x0d, 0x7f, 0x05, 0xf0, 0xd2, 0x7d, 0xb4, 0x9b, 0x51,
             0x19, 0x20, 0x1e, 0x3d, 0xba, 0x50, 0x9e, 0x51, 0x13, 0x81, 0x43,
             0x55, 0x96, 0xca, 0xdb, 0x88, 0x1f, 0xef, 0x2d, 0x38, 0x3f, 0xae,
             0x8d, 0xac, 0xc8, 0x6f, 0x2b, 0xd5, 0xf0, 0x34, 0x1a, 0x99, 0x00,
             0x7c, 0x6d, 0xb3, 0x1b, 0x1d, 0x68, 0xdb, 0xf8, 0x1c, 0x59, 0x3a,
             0x63, 0x38, 0x7c, 0x1c, 0x14, 0xbc, 0x22, 0xcf, 0xc8, 0x9a, 0xc6,
             0x96, 0x6f, 0x3d, 0x03, 0x0b, 0x61, 0x6b, 0x7d, 0x75, 0x97, 0xe8,
             0x25, 0xb8, 0x2f, 0xfa, 0xf4, 0x07, 0x44, 0xdf, 0x00, 0x3d, 0xff,
             0x0d, 0xd5, 0x7f, 0x7f, 0xf3, 0x0c, 0x13, 0xac, 0x8d, 0xf8, 0x8c,
             0x79, 0xc5, 0xf3, 0x29, 0xdc, 0x23, 0x65, 0xd3, 0xd1, 0x1c, 0xa6,
             0x14, 0x78, 0x6a, 0x1a, 0xe3, 0x15, 0x8d, 0x8b, 0xdc, 0xa0, 0x5a,
             0xc7, 0x82, 0xb0, 0x03, 0x6c, 0x71, 0x43, 0x59, 0x24, 0xc7, 0x50,
             0x64, 0xb2, 0xa7, 0x69, 0xf5, 0xbd, 0xe6, 0x5e, 0xaa, 0x77, 0x59,
             0x60, 0x36, 0xc0, 0xe3, 0x42, 0x7f, 0x05, 0x3b, 0x4c, 0x02, 0x0e,
             0x70, 0x5a, 0x70, 0xc5, 0x2a, 0xeb, 0x94, 0x4d, 0x15, 0x09, 0xef,
             0xbb, 0x58, 0x42, 0x68, 0x05, 0x59, 0x70, 0xa0, 0x17, 0xb2, 0x8e,
             0xdf, 0x7b, 0x40, 0x5d, 0x21, 0x1e, 0xfe, 0x62, 0x58, 0xde, 0xfb,
             0x14, 0x91, 0x18, 0xf3, 0x4f, 0x9b, 0x36, 0x55, 0xcf, 0xb3, 0x5e,
             0xec, 0x4f, 0xcc, 0x6d, 0x13, 0x58, 0xc8, 0xa3, 0xa3, 0xee, 0x23,
             0x8a, 0xc2, 0xbf}};
        std::array<std::uint8_t, 256> const rsa6Sig{
            {0xc0, 0x95, 0x70, 0xa6, 0xc9, 0xc6, 0x70, 0x50, 0x4c, 0xb6, 0xa8,
             0xc8, 0xe8, 0x22, 0xd1, 0xd1, 0x7f, 0xd1, 0x61, 0xe6, 0xcb, 0xc7,
             0x35, 0x36, 0x3b, 0xbd, 0x5c, 0xfe, 0x91, 0x66, 0xd1, 0xae, 0x7f,
             0x31, 0x74, 0x98, 0xea, 0xd0, 0xd3, 0x4d, 0x00, 0xbe, 0x5e, 0x4e,
             0xfa, 0x2a, 0xbc, 0xa7, 0x3f, 0xbe, 0x14, 0xe4, 0x7d, 0x0d, 0x04,
             0x4f, 0x65, 0x22, 0x16, 0x65, 0x3f, 0xdf, 0xe0, 0x39, 0x4f, 0x24,
             0x15, 0x0e, 0x7b, 0x01, 0xd5, 0xd6, 0xa4, 0x3a, 0xc2, 0x46, 0x23,
             0x68, 0xf2, 0x0f, 0x3a, 0xa1, 0xcc, 0xd9, 0xff, 0xc3, 0xa5, 0x47,
             0x52, 0xfc, 0x83, 0x9d, 0x99, 0xc3, 0x2c, 0x89, 0x00, 0x0a, 0x8d,
             0x83, 0x79, 0xd1, 0x83, 0xe3, 0x7e, 0x86, 0x99, 0x32, 0xd4, 0x60,
             0xe6, 0xe7, 0x03, 0x14, 0x2a, 0x5b, 0x87, 0x6a, 0xae, 0x04, 0x97,
             0x3e, 0xcc, 0x23, 0x9c, 0x8f, 0xff, 0x26, 0x05, 0x03, 0x00, 0x68,
             0xec, 0xa4, 0x93, 0x81, 0x4a, 0xa5, 0x3a, 0x6f, 0x2a, 0x15, 0x9b,
             0xfb, 0x5f, 0x1b, 0x2f, 0xf7, 0x00, 0xa2, 0x87, 0x50, 0x96, 0x1b,
             0x09, 0x4f, 0x93, 0xb1, 0x66, 0x94, 0xd2, 0xb9, 0xac, 0x79, 0xbb,
             0xf1, 0xe4, 0xd0, 0x07, 0xf9, 0x23, 0x40, 0xf4, 0x22, 0x59, 0x51,
             0xb8, 0x45, 0x46, 0xd6, 0x58, 0x94, 0x25, 0x0f, 0x38, 0xcf, 0xf5,
             0xe6, 0xc8, 0x12, 0xa1, 0x12, 0x57, 0x34, 0xbd, 0x9c, 0xa3, 0xeb,
             0x43, 0x9a, 0x3e, 0x34, 0x31, 0x11, 0x41, 0xe9, 0x15, 0xa9, 0xa4,
             0x38, 0xfc, 0x9f, 0x97, 0xa5, 0xd1, 0x90, 0xf1, 0x3b, 0xd3, 0x55,
             0x3c, 0xdd, 0xef, 0x83, 0x5a, 0xeb, 0xb3, 0xed, 0x64, 0xb7, 0xbf,
             0x87, 0xba, 0xf8, 0x45, 0xac, 0xaa, 0x80, 0xdd, 0xcb, 0x99, 0x50,
             0x20, 0x37, 0x4c, 0x9b, 0x04, 0x55, 0x31, 0xf5, 0x41, 0x5c, 0xae,
             0x29, 0xcf, 0xed}};
        auto const ed7Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed7PublicKey{
            {0x58, 0xcf, 0x4b, 0xc5, 0x59, 0xdb, 0xba, 0x62, 0x25, 0x14, 0x3a,
             0xc0, 0xad, 0xab, 0x5e, 0x35, 0xa1, 0xb4, 0x0e, 0xc1, 0xaf, 0x3c,
             0xa8, 0x2f, 0x69, 0x2c, 0xb6, 0x25, 0xd7, 0xea, 0x15, 0xb3}};
        std::array<std::uint8_t, 64> const ed7Sig{
            {0xd0, 0xd1, 0x17, 0xe2, 0xb5, 0x40, 0x14, 0x81, 0x0b, 0x12, 0xd8,
             0xbe, 0x1d, 0x1c, 0xb0, 0x88, 0x27, 0xaf, 0x6e, 0xc3, 0x13, 0x71,
             0xea, 0xac, 0xf3, 0xd8, 0x6f, 0x38, 0x21, 0xe2, 0x6d, 0x77, 0xe9,
             0xa6, 0xba, 0x03, 0x2a, 0xe3, 0x50, 0xcb, 0x38, 0xbe, 0x36, 0xba,
             0x62, 0x6e, 0x37, 0x5c, 0x8d, 0x69, 0x9f, 0xf0, 0x43, 0x64, 0x83,
             0x82, 0x8e, 0xbe, 0xf5, 0xa6, 0x96, 0x35, 0xb7, 0x03}};
        std::array<std::uint8_t, 32> const ed7SigningKey{
            {0x9c, 0x02, 0x4b, 0x5e, 0x6a, 0x83, 0x35, 0x8a, 0x2a, 0x71, 0x70,
             0x4e, 0xab, 0x74, 0x72, 0x22, 0x33, 0x5a, 0x82, 0xd9, 0x8e, 0x9c,
             0x8c, 0x41, 0x62, 0x6b, 0x02, 0x62, 0xbd, 0x59, 0x31, 0xcb}};
        (void)ed7SigningKey;
        auto const thresh0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim8CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim8Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim8CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa9CondConditionFingerprint =
            "\xe5\x15\x0a\xbd\xf6\x06\xbe\xaa\x6c\x81\xf1\x88\x7e\x70\x64"
            "\x51\xeb\x6f\x70\xb1\xdd\xc5\xf1\x20\x53\xf7\xcb\x9f\x7f\xc7"
            "\xe4\x52"s;
        Condition const Rsa9Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa9CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed10CondConditionFingerprint =
            "\x00\x8b\xe6\x62\xd4\x30\x65\x1e\x40\xb3\x23\x05\x52\x3a\xf3"
            "\x16\xda\x09\xbe\x79\x5f\x41\xc9\x03\x93\x34\x5b\x7c\x24\x87"
            "\x62\xfa"s;
        Condition const Ed10Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed10CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Prefix11CondConditionFingerprint =
            "\xbc\x27\x82\x04\x45\x26\xe1\x8c\xa2\x1a\x0f\xb7\xce\x61\x3d"
            "\x78\x75\x5e\x97\x13\x09\x57\xa6\x6f\x20\xf0\x02\x5b\x44\xc2"
            "\x8a\x39"s;
        Condition const Prefix11Cond{
            Type::prefixSha256,
            3123,
            makeSlice(Prefix11CondConditionFingerprint),
            std::bitset<5>{5}};
        auto const Thresh15CondConditionFingerprint =
            "\x38\xa3\x03\x53\x35\x19\x29\x19\xc3\x92\xbb\x76\xbe\xde\x2c"
            "\x5d\xb4\x33\xe9\x8b\xcd\xf1\x80\xf9\xd6\x84\x2a\xcc\x45\x7e"
            "\x74\x99"s;
        Condition const Thresh15Cond{
            Type::thresholdSha256,
            271360,
            makeSlice(Thresh15CondConditionFingerprint),
            std::bitset<5>{25}};

        auto preim4 =
            std::make_unique<PreimageSha256>(makeSlice(preim4Preimage));
        std::vector<std::unique_ptr<Fulfillment>> thresh3Subfulfillments;
        thresh3Subfulfillments.emplace_back(std::move(preim4));
        std::vector<Condition> thresh3Subconditions{};
        auto thresh3 = std::make_unique<ThresholdSha256>(
            std::move(thresh3Subfulfillments), std::move(thresh3Subconditions));
        auto prefix2 = std::make_unique<PrefixSha256>(
            makeSlice(prefix2Prefix), prefix2MaxMsgLength, std::move(thresh3));
        auto prefix1 = std::make_unique<PrefixSha256>(
            makeSlice(prefix1Prefix), prefix1MaxMsgLength, std::move(prefix2));
        auto preim5 =
            std::make_unique<PreimageSha256>(makeSlice(preim5Preimage));
        auto rsa6 = std::make_unique<RsaSha256>(
            makeSlice(rsa6PublicKey), makeSlice(rsa6Sig));
        auto ed7 = std::make_unique<Ed25519>(ed7PublicKey, ed7Sig);
        std::vector<std::unique_ptr<Fulfillment>> thresh0Subfulfillments;
        thresh0Subfulfillments.emplace_back(std::move(prefix1));
        thresh0Subfulfillments.emplace_back(std::move(preim5));
        thresh0Subfulfillments.emplace_back(std::move(rsa6));
        thresh0Subfulfillments.emplace_back(std::move(ed7));
        std::vector<Condition> thresh0Subconditions{
            {Preim8Cond, Rsa9Cond, Ed10Cond, Prefix11Cond, Thresh15Cond}};
        ThresholdSha256 const thresh0(
            std::move(thresh0Subfulfillments), std::move(thresh0Subconditions));
        {
            auto const thresh0EncodedFulfillment =
                "\xa2\x82\x03\x81\xa0\x82\x02\xa8\xa0\x0b\x80\x09\x49\x20\x61"
                "\x6d\x20\x72\x6f\x6f\x74\xa1\x27\x80\x02\x50\x31\x81\x01\x0e"
                "\xa2\x1e\xa1\x1c\x80\x02\x50\x32\x81\x01\x0e\xa2\x13\xa2\x11"
                "\xa0\x0d\xa0\x0b\x80\x09\x49\x20\x61\x6d\x20\x72\x6f\x6f\x74"
                "\xa1\x00\xa3\x82\x02\x08\x80\x82\x01\x00\xd0\x07\xfc\x9d\xb0"
                "\xa1\xa6\x40\xe4\x52\x30\x42\x74\xfd\x35\x04\xde\x45\x68\xb3"
                "\x22\xdd\xff\x41\x43\x69\x33\xc0\xff\x35\xb6\x6d\x15\xe9\x54"
                "\x15\xeb\x1d\x07\xe2\x25\x2b\xdb\xaa\x16\x8d\x0d\x7f\x05\xf0"
                "\xd2\x7d\xb4\x9b\x51\x19\x20\x1e\x3d\xba\x50\x9e\x51\x13\x81"
                "\x43\x55\x96\xca\xdb\x88\x1f\xef\x2d\x38\x3f\xae\x8d\xac\xc8"
                "\x6f\x2b\xd5\xf0\x34\x1a\x99\x00\x7c\x6d\xb3\x1b\x1d\x68\xdb"
                "\xf8\x1c\x59\x3a\x63\x38\x7c\x1c\x14\xbc\x22\xcf\xc8\x9a\xc6"
                "\x96\x6f\x3d\x03\x0b\x61\x6b\x7d\x75\x97\xe8\x25\xb8\x2f\xfa"
                "\xf4\x07\x44\xdf\x00\x3d\xff\x0d\xd5\x7f\x7f\xf3\x0c\x13\xac"
                "\x8d\xf8\x8c\x79\xc5\xf3\x29\xdc\x23\x65\xd3\xd1\x1c\xa6\x14"
                "\x78\x6a\x1a\xe3\x15\x8d\x8b\xdc\xa0\x5a\xc7\x82\xb0\x03\x6c"
                "\x71\x43\x59\x24\xc7\x50\x64\xb2\xa7\x69\xf5\xbd\xe6\x5e\xaa"
                "\x77\x59\x60\x36\xc0\xe3\x42\x7f\x05\x3b\x4c\x02\x0e\x70\x5a"
                "\x70\xc5\x2a\xeb\x94\x4d\x15\x09\xef\xbb\x58\x42\x68\x05\x59"
                "\x70\xa0\x17\xb2\x8e\xdf\x7b\x40\x5d\x21\x1e\xfe\x62\x58\xde"
                "\xfb\x14\x91\x18\xf3\x4f\x9b\x36\x55\xcf\xb3\x5e\xec\x4f\xcc"
                "\x6d\x13\x58\xc8\xa3\xa3\xee\x23\x8a\xc2\xbf\x81\x82\x01\x00"
                "\xc0\x95\x70\xa6\xc9\xc6\x70\x50\x4c\xb6\xa8\xc8\xe8\x22\xd1"
                "\xd1\x7f\xd1\x61\xe6\xcb\xc7\x35\x36\x3b\xbd\x5c\xfe\x91\x66"
                "\xd1\xae\x7f\x31\x74\x98\xea\xd0\xd3\x4d\x00\xbe\x5e\x4e\xfa"
                "\x2a\xbc\xa7\x3f\xbe\x14\xe4\x7d\x0d\x04\x4f\x65\x22\x16\x65"
                "\x3f\xdf\xe0\x39\x4f\x24\x15\x0e\x7b\x01\xd5\xd6\xa4\x3a\xc2"
                "\x46\x23\x68\xf2\x0f\x3a\xa1\xcc\xd9\xff\xc3\xa5\x47\x52\xfc"
                "\x83\x9d\x99\xc3\x2c\x89\x00\x0a\x8d\x83\x79\xd1\x83\xe3\x7e"
                "\x86\x99\x32\xd4\x60\xe6\xe7\x03\x14\x2a\x5b\x87\x6a\xae\x04"
                "\x97\x3e\xcc\x23\x9c\x8f\xff\x26\x05\x03\x00\x68\xec\xa4\x93"
                "\x81\x4a\xa5\x3a\x6f\x2a\x15\x9b\xfb\x5f\x1b\x2f\xf7\x00\xa2"
                "\x87\x50\x96\x1b\x09\x4f\x93\xb1\x66\x94\xd2\xb9\xac\x79\xbb"
                "\xf1\xe4\xd0\x07\xf9\x23\x40\xf4\x22\x59\x51\xb8\x45\x46\xd6"
                "\x58\x94\x25\x0f\x38\xcf\xf5\xe6\xc8\x12\xa1\x12\x57\x34\xbd"
                "\x9c\xa3\xeb\x43\x9a\x3e\x34\x31\x11\x41\xe9\x15\xa9\xa4\x38"
                "\xfc\x9f\x97\xa5\xd1\x90\xf1\x3b\xd3\x55\x3c\xdd\xef\x83\x5a"
                "\xeb\xb3\xed\x64\xb7\xbf\x87\xba\xf8\x45\xac\xaa\x80\xdd\xcb"
                "\x99\x50\x20\x37\x4c\x9b\x04\x55\x31\xf5\x41\x5c\xae\x29\xcf"
                "\xed\xa4\x64\x80\x20\x58\xcf\x4b\xc5\x59\xdb\xba\x62\x25\x14"
                "\x3a\xc0\xad\xab\x5e\x35\xa1\xb4\x0e\xc1\xaf\x3c\xa8\x2f\x69"
                "\x2c\xb6\x25\xd7\xea\x15\xb3\x81\x40\xd0\xd1\x17\xe2\xb5\x40"
                "\x14\x81\x0b\x12\xd8\xbe\x1d\x1c\xb0\x88\x27\xaf\x6e\xc3\x13"
                "\x71\xea\xac\xf3\xd8\x6f\x38\x21\xe2\x6d\x77\xe9\xa6\xba\x03"
                "\x2a\xe3\x50\xcb\x38\xbe\x36\xba\x62\x6e\x37\x5c\x8d\x69\x9f"
                "\xf0\x43\x64\x83\x82\x8e\xbe\xf5\xa6\x96\x35\xb7\x03\xa1\x81"
                "\xd2\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8"
                "\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc"
                "\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa1\x2a\x80\x20\xbc"
                "\x27\x82\x04\x45\x26\xe1\x8c\xa2\x1a\x0f\xb7\xce\x61\x3d\x78"
                "\x75\x5e\x97\x13\x09\x57\xa6\x6f\x20\xf0\x02\x5b\x44\xc2\x8a"
                "\x39\x81\x02\x0c\x33\x82\x02\x05\xa0\xa2\x2b\x80\x20\x38\xa3"
                "\x03\x53\x35\x19\x29\x19\xc3\x92\xbb\x76\xbe\xde\x2c\x5d\xb4"
                "\x33\xe9\x8b\xcd\xf1\x80\xf9\xd6\x84\x2a\xcc\x45\x7e\x74\x99"
                "\x81\x03\x04\x24\x00\x82\x02\x03\x98\xa3\x27\x80\x20\xe5\x15"
                "\x0a\xbd\xf6\x06\xbe\xaa\x6c\x81\xf1\x88\x7e\x70\x64\x51\xeb"
                "\x6f\x70\xb1\xdd\xc5\xf1\x20\x53\xf7\xcb\x9f\x7f\xc7\xe4\x52"
                "\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x00\x8b\xe6\x62\xd4\x30"
                "\x65\x1e\x40\xb3\x23\x05\x52\x3a\xf3\x16\xda\x09\xbe\x79\x5f"
                "\x41\xc9\x03\x93\x34\x5b\x7c\x24\x87\x62\xfa\x81\x03\x02\x00"
                "\x00"s;
            auto const thresh0EncodedCondition =
                "\xa2\x2b\x80\x20\x32\x29\x74\x4e\x0d\x5b\xec\x8e\x42\x71\xf6"
                "\x81\xf0\x48\x3f\xa7\x07\x6e\xb3\x0e\xa5\x2b\x36\xfa\x7c\x03"
                "\x57\x9b\xcc\xae\x52\x11\x81\x03\x09\x48\x00\x82\x02\x03\xd8"s;
            auto const thresh0EncodedFingerprint =
                "\x30\x82\x01\x7e\x80\x01\x04\xa1\x82\x01\x77\xa0\x25\x80\x20"
                "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
                "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
                "\xeb\x4e\x81\x01\x09\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1"
                "\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21"
                "\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa1"
                "\x2a\x80\x20\x87\xb8\xf6\xfa\xf2\x8a\x27\x77\x61\x23\x2b\xac"
                "\xb1\x8a\x4b\x76\x3c\x8e\x3d\x7a\x71\x5c\x71\x44\xab\x47\x53"
                "\x97\x96\x34\xf7\x58\x81\x02\x0c\x29\x82\x02\x05\xa0\xa1\x2a"
                "\x80\x20\xbc\x27\x82\x04\x45\x26\xe1\x8c\xa2\x1a\x0f\xb7\xce"
                "\x61\x3d\x78\x75\x5e\x97\x13\x09\x57\xa6\x6f\x20\xf0\x02\x5b"
                "\x44\xc2\x8a\x39\x81\x02\x0c\x33\x82\x02\x05\xa0\xa2\x2b\x80"
                "\x20\x38\xa3\x03\x53\x35\x19\x29\x19\xc3\x92\xbb\x76\xbe\xde"
                "\x2c\x5d\xb4\x33\xe9\x8b\xcd\xf1\x80\xf9\xd6\x84\x2a\xcc\x45"
                "\x7e\x74\x99\x81\x03\x04\x24\x00\x82\x02\x03\x98\xa3\x27\x80"
                "\x20\xe5\x15\x0a\xbd\xf6\x06\xbe\xaa\x6c\x81\xf1\x88\x7e\x70"
                "\x64\x51\xeb\x6f\x70\xb1\xdd\xc5\xf1\x20\x53\xf7\xcb\x9f\x7f"
                "\xc7\xe4\x52\x81\x03\x01\x00\x00\xa3\x27\x80\x20\xee\x75\xbe"
                "\xb3\x52\x54\xbd\x24\x06\x3f\xd9\x32\x48\x19\xe1\x5c\x70\x85"
                "\x92\x11\x6c\x3a\xc1\x4c\x9b\x83\xeb\x05\xa7\x59\xe2\xa0\x81"
                "\x03\x01\x00\x00\xa4\x27\x80\x20\x00\x8b\xe6\x62\xd4\x30\x65"
                "\x1e\x40\xb3\x23\x05\x52\x3a\xf3\x16\xda\x09\xbe\x79\x5f\x41"
                "\xc9\x03\x93\x34\x5b\x7c\x24\x87\x62\xfa\x81\x03\x02\x00\x00"
                "\xa4\x27\x80\x20\x1e\x5a\xaf\x3e\x46\xf6\xd4\xdf\x4d\x70\xf0"
                "\xa1\xd1\x35\x6d\xf0\x8b\x86\x91\xac\xb2\xf2\x24\xf0\x1a\xd4"
                "\x23\xc0\x21\x8d\x42\xc0\x81\x03\x02\x00\x00"s;
            check(
                &thresh0,
                thresh0Msg,
                thresh0EncodedFulfillment,
                thresh0EncodedCondition,
                thresh0EncodedFingerprint);
        }
    }

    void
    testThresh10()
    {
        testcase("Thresh10");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * thresh0
        // ** Preim30Cond
        // ** Rsa31Cond
        // ** Ed32Cond
        // ** prefix1
        // *** prefix2
        // **** thresh3
        // ***** Preim5Cond
        // ***** Rsa6Cond
        // ***** Ed7Cond
        // ***** preim4
        // ** prefix8
        // *** prefix9
        // **** thresh10
        // ***** Preim12Cond
        // ***** Rsa13Cond
        // ***** Ed14Cond
        // ***** preim11
        // ** thresh15
        // *** Preim22Cond
        // *** Rsa23Cond
        // *** Ed24Cond
        // *** Thresh25Cond
        // *** preim16
        // *** thresh17
        // **** Preim19Cond
        // **** Rsa20Cond
        // **** Ed21Cond
        // **** preim18

        auto const preim4Preimage = "I am root"s;
        auto const preim4Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        auto const thresh3Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim5CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim5Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim5CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa6CondConditionFingerprint =
            "\xee\x75\xbe\xb3\x52\x54\xbd\x24\x06\x3f\xd9\x32\x48\x19\xe1"
            "\x5c\x70\x85\x92\x11\x6c\x3a\xc1\x4c\x9b\x83\xeb\x05\xa7\x59"
            "\xe2\xa0"s;
        Condition const Rsa6Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa6CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed7CondConditionFingerprint =
            "\x1e\x5a\xaf\x3e\x46\xf6\xd4\xdf\x4d\x70\xf0\xa1\xd1\x35\x6d"
            "\xf0\x8b\x86\x91\xac\xb2\xf2\x24\xf0\x1a\xd4\x23\xc0\x21\x8d"
            "\x42\xc0"s;
        Condition const Ed7Cond{Type::ed25519Sha256,
                                131072,
                                makeSlice(Ed7CondConditionFingerprint),
                                std::bitset<5>{0}};
        auto const prefix2Prefix = "P2"s;
        auto const prefix2Msg = "P1abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix2MaxMsgLength = 14;
        auto const prefix1Prefix = "P1"s;
        auto const prefix1Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix1MaxMsgLength = 14;
        auto const preim11Preimage = "I am root"s;
        auto const preim11Msg = "P9P8abcdefghijklmnopqrstuvwxyz"s;
        auto const thresh10Msg = "P9P8abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim12CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim12Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim12CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa13CondConditionFingerprint =
            "\x65\x58\x3c\x41\x23\xcb\x17\xee\x38\xf7\x10\x74\xdb\xa3\x24"
            "\xb4\x5b\x39\x35\xc1\x1a\xa6\xbd\xbc\xc8\xea\x71\x39\x33\xe5"
            "\xd5\x1a"s;
        Condition const Rsa13Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa13CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed14CondConditionFingerprint =
            "\xde\x4c\x08\x88\x5c\xfe\x31\x01\xbe\xe9\xe4\x12\xce\x03\x59"
            "\x75\xb3\x7b\xac\x62\x26\xfa\x78\x07\x59\x64\x4e\x5e\x89\x64"
            "\x17\x04"s;
        Condition const Ed14Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed14CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const prefix9Prefix = "P9"s;
        auto const prefix9Msg = "P8abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix9MaxMsgLength = 14;
        auto const prefix8Prefix = "P8"s;
        auto const prefix8Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix8MaxMsgLength = 14;
        auto const preim16Preimage = "I am root"s;
        auto const preim16Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const preim18Preimage = "I am root"s;
        auto const preim18Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const thresh17Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim19CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim19Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim19CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa20CondConditionFingerprint =
            "\x8d\xb0\x2c\xb1\x28\xc3\xf4\x97\x50\x84\x64\x57\xca\xf4\x9d"
            "\x63\x08\x73\xfc\xde\x2f\x90\xf0\xf2\xec\x79\xa9\xc6\xa3\xf1"
            "\x33\xfd"s;
        Condition const Rsa20Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa20CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed21CondConditionFingerprint =
            "\x95\x3c\x86\x65\x91\x76\x69\x6b\x72\x61\xaa\x76\x15\x2a\xd7"
            "\x25\x4f\x32\xb7\x73\x7a\xb2\x49\x0c\x0b\xdf\xb5\x4e\x4a\x8b"
            "\xf7\x65"s;
        Condition const Ed21Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed21CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const thresh15Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim22CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim22Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim22CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa23CondConditionFingerprint =
            "\x4a\x64\xbf\x23\xa9\x2b\xec\x55\x00\x3d\x55\xf5\xbf\x3f\x26"
            "\x49\x18\xbb\xe0\xda\xf8\x0c\xf4\x5c\x8a\x33\x74\xb6\x58\xa4"
            "\x38\x30"s;
        Condition const Rsa23Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa23CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed24CondConditionFingerprint =
            "\x6b\xf3\xe3\x0f\x92\x6d\x45\x8d\xae\xd2\x8a\x2a\x3e\x53\x37"
            "\x1f\x57\x82\x21\x60\xe4\x5b\x88\x9a\x9d\x13\xa2\x56\x13\x88"
            "\x9e\x21"s;
        Condition const Ed24Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed24CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Thresh25CondConditionFingerprint =
            "\x97\x57\x7e\xfd\x8a\x6c\x0e\xb0\x84\xe0\x63\x04\x2a\x01\x2e"
            "\x09\xd4\xc7\x67\x3d\x89\xf0\x63\x26\xd0\x69\xe0\xcb\x7a\x81"
            "\xbf\x97"s;
        Condition const Thresh25Cond{
            Type::thresholdSha256,
            135168,
            makeSlice(Thresh25CondConditionFingerprint),
            std::bitset<5>{25}};
        auto const thresh0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim30CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim30Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim30CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa31CondConditionFingerprint =
            "\x34\x77\x63\xd7\x27\x76\x4d\x3a\x9b\x6c\xdb\x09\xed\xd8\x5f"
            "\xc2\x12\x9e\x9c\xc4\xc8\xa6\x62\xcf\x14\xde\x09\x30\x64\x8e"
            "\xf4\x84"s;
        Condition const Rsa31Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa31CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed32CondConditionFingerprint =
            "\xe9\x54\x85\xb7\x7d\xa1\x1f\x2f\xaa\x84\x72\x3f\x4e\x3f\x09"
            "\xa7\x49\xf2\x15\x2a\xe6\x13\x5b\x68\xb6\xe1\x98\xa6\x89\x76"
            "\x08\x05"s;
        Condition const Ed32Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed32CondConditionFingerprint),
                                 std::bitset<5>{0}};

        auto preim4 =
            std::make_unique<PreimageSha256>(makeSlice(preim4Preimage));
        std::vector<std::unique_ptr<Fulfillment>> thresh3Subfulfillments;
        thresh3Subfulfillments.emplace_back(std::move(preim4));
        std::vector<Condition> thresh3Subconditions{
            {Preim5Cond, Rsa6Cond, Ed7Cond}};
        auto thresh3 = std::make_unique<ThresholdSha256>(
            std::move(thresh3Subfulfillments), std::move(thresh3Subconditions));
        auto prefix2 = std::make_unique<PrefixSha256>(
            makeSlice(prefix2Prefix), prefix2MaxMsgLength, std::move(thresh3));
        auto prefix1 = std::make_unique<PrefixSha256>(
            makeSlice(prefix1Prefix), prefix1MaxMsgLength, std::move(prefix2));
        auto preim11 =
            std::make_unique<PreimageSha256>(makeSlice(preim11Preimage));
        std::vector<std::unique_ptr<Fulfillment>> thresh10Subfulfillments;
        thresh10Subfulfillments.emplace_back(std::move(preim11));
        std::vector<Condition> thresh10Subconditions{
            {Preim12Cond, Rsa13Cond, Ed14Cond}};
        auto thresh10 = std::make_unique<ThresholdSha256>(
            std::move(thresh10Subfulfillments),
            std::move(thresh10Subconditions));
        auto prefix9 = std::make_unique<PrefixSha256>(
            makeSlice(prefix9Prefix), prefix9MaxMsgLength, std::move(thresh10));
        auto prefix8 = std::make_unique<PrefixSha256>(
            makeSlice(prefix8Prefix), prefix8MaxMsgLength, std::move(prefix9));
        auto preim16 =
            std::make_unique<PreimageSha256>(makeSlice(preim16Preimage));
        auto preim18 =
            std::make_unique<PreimageSha256>(makeSlice(preim18Preimage));
        std::vector<std::unique_ptr<Fulfillment>> thresh17Subfulfillments;
        thresh17Subfulfillments.emplace_back(std::move(preim18));
        std::vector<Condition> thresh17Subconditions{
            {Preim19Cond, Rsa20Cond, Ed21Cond}};
        auto thresh17 = std::make_unique<ThresholdSha256>(
            std::move(thresh17Subfulfillments),
            std::move(thresh17Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh15Subfulfillments;
        thresh15Subfulfillments.emplace_back(std::move(preim16));
        thresh15Subfulfillments.emplace_back(std::move(thresh17));
        std::vector<Condition> thresh15Subconditions{
            {Preim22Cond, Rsa23Cond, Ed24Cond, Thresh25Cond}};
        auto thresh15 = std::make_unique<ThresholdSha256>(
            std::move(thresh15Subfulfillments),
            std::move(thresh15Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh0Subfulfillments;
        thresh0Subfulfillments.emplace_back(std::move(prefix1));
        thresh0Subfulfillments.emplace_back(std::move(prefix8));
        thresh0Subfulfillments.emplace_back(std::move(thresh15));
        std::vector<Condition> thresh0Subconditions{
            {Preim30Cond, Rsa31Cond, Ed32Cond}};
        ThresholdSha256 const thresh0(
            std::move(thresh0Subfulfillments), std::move(thresh0Subconditions));
        {
            auto const thresh0EncodedFulfillment =
                "\xa2\x82\x03\x17\xa0\x82\x02\x98\xa1\x81\xa4\x80\x02\x50\x31"
                "\x81\x01\x0e\xa2\x81\x9a\xa1\x81\x97\x80\x02\x50\x32\x81\x01"
                "\x0e\xa2\x81\x8d\xa2\x81\x8a\xa0\x0d\xa0\x0b\x80\x09\x49\x20"
                "\x61\x6d\x20\x72\x6f\x6f\x74\xa1\x79\xa0\x25\x80\x20\x5d\xa0"
                "\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1"
                "\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e"
                "\x81\x01\x09\xa3\x27\x80\x20\xee\x75\xbe\xb3\x52\x54\xbd\x24"
                "\x06\x3f\xd9\x32\x48\x19\xe1\x5c\x70\x85\x92\x11\x6c\x3a\xc1"
                "\x4c\x9b\x83\xeb\x05\xa7\x59\xe2\xa0\x81\x03\x01\x00\x00\xa4"
                "\x27\x80\x20\x1e\x5a\xaf\x3e\x46\xf6\xd4\xdf\x4d\x70\xf0\xa1"
                "\xd1\x35\x6d\xf0\x8b\x86\x91\xac\xb2\xf2\x24\xf0\x1a\xd4\x23"
                "\xc0\x21\x8d\x42\xc0\x81\x03\x02\x00\x00\xa1\x81\xa4\x80\x02"
                "\x50\x38\x81\x01\x0e\xa2\x81\x9a\xa1\x81\x97\x80\x02\x50\x39"
                "\x81\x01\x0e\xa2\x81\x8d\xa2\x81\x8a\xa0\x0d\xa0\x0b\x80\x09"
                "\x49\x20\x61\x6d\x20\x72\x6f\x6f\x74\xa1\x79\xa0\x25\x80\x20"
                "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
                "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
                "\xeb\x4e\x81\x01\x09\xa3\x27\x80\x20\x65\x58\x3c\x41\x23\xcb"
                "\x17\xee\x38\xf7\x10\x74\xdb\xa3\x24\xb4\x5b\x39\x35\xc1\x1a"
                "\xa6\xbd\xbc\xc8\xea\x71\x39\x33\xe5\xd5\x1a\x81\x03\x01\x00"
                "\x00\xa4\x27\x80\x20\xde\x4c\x08\x88\x5c\xfe\x31\x01\xbe\xe9"
                "\xe4\x12\xce\x03\x59\x75\xb3\x7b\xac\x62\x26\xfa\x78\x07\x59"
                "\x64\x4e\x5e\x89\x64\x17\x04\x81\x03\x02\x00\x00\xa2\x82\x01"
                "\x46\xa0\x81\x9a\xa0\x0b\x80\x09\x49\x20\x61\x6d\x20\x72\x6f"
                "\x6f\x74\xa2\x81\x8a\xa0\x0d\xa0\x0b\x80\x09\x49\x20\x61\x6d"
                "\x20\x72\x6f\x6f\x74\xa1\x79\xa0\x25\x80\x20\x5d\xa0\x30\xef"
                "\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9"
                "\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01"
                "\x09\xa3\x27\x80\x20\x8d\xb0\x2c\xb1\x28\xc3\xf4\x97\x50\x84"
                "\x64\x57\xca\xf4\x9d\x63\x08\x73\xfc\xde\x2f\x90\xf0\xf2\xec"
                "\x79\xa9\xc6\xa3\xf1\x33\xfd\x81\x03\x01\x00\x00\xa4\x27\x80"
                "\x20\x95\x3c\x86\x65\x91\x76\x69\x6b\x72\x61\xaa\x76\x15\x2a"
                "\xd7\x25\x4f\x32\xb7\x73\x7a\xb2\x49\x0c\x0b\xdf\xb5\x4e\x4a"
                "\x8b\xf7\x65\x81\x03\x02\x00\x00\xa1\x81\xa6\xa0\x25\x80\x20"
                "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
                "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
                "\xeb\x4e\x81\x01\x09\xa2\x2b\x80\x20\x97\x57\x7e\xfd\x8a\x6c"
                "\x0e\xb0\x84\xe0\x63\x04\x2a\x01\x2e\x09\xd4\xc7\x67\x3d\x89"
                "\xf0\x63\x26\xd0\x69\xe0\xcb\x7a\x81\xbf\x97\x81\x03\x02\x10"
                "\x00\x82\x02\x03\x98\xa3\x27\x80\x20\x4a\x64\xbf\x23\xa9\x2b"
                "\xec\x55\x00\x3d\x55\xf5\xbf\x3f\x26\x49\x18\xbb\xe0\xda\xf8"
                "\x0c\xf4\x5c\x8a\x33\x74\xb6\x58\xa4\x38\x30\x81\x03\x01\x00"
                "\x00\xa4\x27\x80\x20\x6b\xf3\xe3\x0f\x92\x6d\x45\x8d\xae\xd2"
                "\x8a\x2a\x3e\x53\x37\x1f\x57\x82\x21\x60\xe4\x5b\x88\x9a\x9d"
                "\x13\xa2\x56\x13\x88\x9e\x21\x81\x03\x02\x00\x00\xa1\x79\xa0"
                "\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e"
                "\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53"
                "\xee\x93\x58\xeb\x4e\x81\x01\x09\xa3\x27\x80\x20\x34\x77\x63"
                "\xd7\x27\x76\x4d\x3a\x9b\x6c\xdb\x09\xed\xd8\x5f\xc2\x12\x9e"
                "\x9c\xc4\xc8\xa6\x62\xcf\x14\xde\x09\x30\x64\x8e\xf4\x84\x81"
                "\x03\x01\x00\x00\xa4\x27\x80\x20\xe9\x54\x85\xb7\x7d\xa1\x1f"
                "\x2f\xaa\x84\x72\x3f\x4e\x3f\x09\xa7\x49\xf2\x15\x2a\xe6\x13"
                "\x5b\x68\xb6\xe1\x98\xa6\x89\x76\x08\x05\x81\x03\x02\x00\x00"s;
            auto const thresh0EncodedCondition =
                "\xa2\x2b\x80\x20\xc4\x29\xba\xfe\x2a\xf0\xb6\x5f\xf3\x68\x32"
                "\xe0\x49\x4c\x16\x02\x93\x36\x7e\x16\x92\x35\x79\x8d\xb1\xc8"
                "\x15\xfd\x2c\x8d\x36\xf3\x81\x03\x08\x80\x40\x82\x02\x03\xd8"s;
            auto const thresh0EncodedFingerprint =
                "\x30\x82\x01\x07\x80\x01\x03\xa1\x82\x01\x00\xa0\x25\x80\x20"
                "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
                "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
                "\xeb\x4e\x81\x01\x09\xa1\x2b\x80\x20\x19\x59\x28\xb3\xe5\xbf"
                "\x2c\xa9\x3d\x83\x9f\xe9\x55\x65\xbd\x5c\xe5\x3a\x91\x53\x8b"
                "\x92\xf5\x78\x59\x92\x10\x8c\x3f\x4a\x06\xd5\x81\x03\x02\x18"
                "\x20\x82\x02\x03\xb8\xa1\x2b\x80\x20\xc3\xca\xa6\x1e\x59\xe5"
                "\xb3\x8f\xd9\x5c\xb7\x41\x08\x2a\xfe\x70\x1f\x22\xa0\xd0\x2f"
                "\x8f\xff\x18\x92\x4b\x56\x34\xc8\x4f\x32\x1c\x81\x03\x02\x18"
                "\x20\x82\x02\x03\xb8\xa2\x2b\x80\x20\x79\x93\x46\xe5\x6c\x0e"
                "\xce\xa6\x9c\x0e\x67\xea\x57\x74\xda\x8b\xd6\x9d\x84\x9c\x87"
                "\xee\x37\x70\x3e\xe9\x9f\x9d\x66\x26\x6a\xd9\x81\x03\x04\x38"
                "\x00\x82\x02\x03\x98\xa3\x27\x80\x20\x34\x77\x63\xd7\x27\x76"
                "\x4d\x3a\x9b\x6c\xdb\x09\xed\xd8\x5f\xc2\x12\x9e\x9c\xc4\xc8"
                "\xa6\x62\xcf\x14\xde\x09\x30\x64\x8e\xf4\x84\x81\x03\x01\x00"
                "\x00\xa4\x27\x80\x20\xe9\x54\x85\xb7\x7d\xa1\x1f\x2f\xaa\x84"
                "\x72\x3f\x4e\x3f\x09\xa7\x49\xf2\x15\x2a\xe6\x13\x5b\x68\xb6"
                "\xe1\x98\xa6\x89\x76\x08\x05\x81\x03\x02\x00\x00"s;
            check(
                &thresh0,
                thresh0Msg,
                thresh0EncodedFulfillment,
                thresh0EncodedCondition,
                thresh0EncodedFingerprint);
        }
    }

    void
    testThresh11()
    {
        testcase("Thresh11");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * thresh0
        // ** Preim11Cond
        // ** Rsa12Cond
        // ** Ed13Cond
        // ** Prefix14Cond
        // ** Thresh21Cond
        // ** prefix1
        // *** prefix2
        // **** thresh3
        // ***** Preim5Cond
        // ***** Rsa6Cond
        // ***** Ed7Cond
        // ***** preim4
        // ** preim8
        // ** rsa9
        // ** ed10

        auto const preim4Preimage = "I am root"s;
        auto const preim4Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        auto const thresh3Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim5CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim5Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim5CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa6CondConditionFingerprint =
            "\xee\x75\xbe\xb3\x52\x54\xbd\x24\x06\x3f\xd9\x32\x48\x19\xe1"
            "\x5c\x70\x85\x92\x11\x6c\x3a\xc1\x4c\x9b\x83\xeb\x05\xa7\x59"
            "\xe2\xa0"s;
        Condition const Rsa6Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa6CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed7CondConditionFingerprint =
            "\x1e\x5a\xaf\x3e\x46\xf6\xd4\xdf\x4d\x70\xf0\xa1\xd1\x35\x6d"
            "\xf0\x8b\x86\x91\xac\xb2\xf2\x24\xf0\x1a\xd4\x23\xc0\x21\x8d"
            "\x42\xc0"s;
        Condition const Ed7Cond{Type::ed25519Sha256,
                                131072,
                                makeSlice(Ed7CondConditionFingerprint),
                                std::bitset<5>{0}};
        auto const prefix2Prefix = "P2"s;
        auto const prefix2Msg = "P1abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix2MaxMsgLength = 14;
        auto const prefix1Prefix = "P1"s;
        auto const prefix1Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix1MaxMsgLength = 14;
        auto const preim8Preimage = "I am root"s;
        auto const preim8Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const rsa9Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa9PublicKey{
            {0xb6, 0x7b, 0xe2, 0x98, 0x9f, 0xff, 0x6c, 0x37, 0xd0, 0xb6, 0x64,
             0x19, 0xfb, 0xa0, 0x21, 0x18, 0xe2, 0xc0, 0xd1, 0x92, 0xbd, 0x04,
             0xa6, 0xd2, 0xb4, 0x7e, 0xc6, 0x6a, 0x1a, 0x34, 0x20, 0x7b, 0xfe,
             0x84, 0xeb, 0xe8, 0xc1, 0x6f, 0xfd, 0xdc, 0x0a, 0xfe, 0x60, 0x55,
             0xb6, 0xfc, 0x86, 0x5a, 0x21, 0xbf, 0xf1, 0x39, 0xfa, 0xec, 0x42,
             0xca, 0x57, 0xb3, 0x3e, 0x3f, 0xe6, 0x26, 0x5a, 0xb7, 0x4a, 0x5f,
             0xbb, 0xb1, 0xf5, 0x91, 0x85, 0x92, 0x3e, 0x6a, 0x18, 0x48, 0x4d,
             0x9e, 0xdd, 0x08, 0x25, 0xa3, 0x3b, 0x3d, 0x75, 0x9a, 0xbe, 0xee,
             0x0d, 0x6e, 0xd2, 0x5d, 0xe2, 0xbd, 0xed, 0x45, 0x60, 0xef, 0xa0,
             0x37, 0xfd, 0xbb, 0xcf, 0x30, 0x97, 0xf1, 0x5b, 0xc8, 0x9c, 0x29,
             0x33, 0x67, 0x3e, 0x23, 0x33, 0x7f, 0x36, 0xd4, 0x75, 0x8b, 0xa1,
             0xcf, 0x9e, 0xe6, 0xc5, 0x63, 0x63, 0xb0, 0x3f, 0xa0, 0xc2, 0xa2,
             0x10, 0xc9, 0xb2, 0x6b, 0xaa, 0x67, 0xc9, 0xf5, 0xb8, 0xbf, 0x5b,
             0x97, 0xe5, 0x29, 0xf2, 0xbb, 0xc7, 0x22, 0x0f, 0x1f, 0xc1, 0xf6,
             0xca, 0x4a, 0x8a, 0x46, 0x89, 0xa0, 0xca, 0x4e, 0x49, 0x9d, 0xfc,
             0x23, 0xd3, 0xb4, 0xdb, 0xc6, 0x84, 0x45, 0xbd, 0x9f, 0x10, 0x86,
             0xe2, 0xf0, 0x47, 0x7b, 0x75, 0xbf, 0x25, 0x99, 0x02, 0x2c, 0xdb,
             0x6b, 0xd6, 0x2b, 0x67, 0x0d, 0xcd, 0x46, 0x63, 0xbd, 0xce, 0x1c,
             0xc5, 0x56, 0x63, 0x58, 0x5b, 0xc8, 0xb2, 0x58, 0x42, 0xf6, 0xaf,
             0xce, 0x47, 0xb2, 0xa9, 0x2a, 0x71, 0x8b, 0x82, 0xf4, 0x72, 0xff,
             0xef, 0xe7, 0xc1, 0x70, 0x12, 0xfa, 0xb8, 0xad, 0xb2, 0xfe, 0xa9,
             0x14, 0xe7, 0xc2, 0xec, 0x12, 0xbf, 0x29, 0x5a, 0x65, 0x91, 0x74,
             0x82, 0xd3, 0x77, 0x1f, 0x14, 0xbf, 0x5f, 0x41, 0x11, 0x6c, 0x7c,
             0x22, 0x70, 0x65}};
        std::array<std::uint8_t, 256> const rsa9Sig{
            {0x2b, 0x6d, 0x71, 0x44, 0xf5, 0x19, 0xb5, 0xbe, 0x1d, 0x73, 0x28,
             0x42, 0xb7, 0x23, 0x64, 0x9d, 0x25, 0xb4, 0xb7, 0x0f, 0x3e, 0xf5,
             0x02, 0x06, 0x34, 0xca, 0xb6, 0xce, 0x64, 0xd6, 0xc7, 0x16, 0xe6,
             0xd6, 0x6c, 0x63, 0x43, 0xf6, 0x88, 0xb0, 0x34, 0xcb, 0x7c, 0xa4,
             0xac, 0x22, 0xbf, 0x23, 0x5a, 0xf7, 0x4b, 0xe4, 0x4d, 0x28, 0x78,
             0xdb, 0x8c, 0x82, 0x9f, 0xa6, 0xd7, 0x0a, 0x3b, 0xb0, 0xa4, 0x0d,
             0xd0, 0xc7, 0x43, 0x69, 0x36, 0xdd, 0x9a, 0xf0, 0xc9, 0x4f, 0x1e,
             0x56, 0x34, 0x1e, 0xc8, 0x79, 0x85, 0x6a, 0xad, 0xd8, 0xfc, 0x8d,
             0x06, 0xe7, 0x80, 0x32, 0x44, 0x29, 0xd8, 0x6f, 0x67, 0x8e, 0x10,
             0x0b, 0x1c, 0xaf, 0x05, 0xce, 0x96, 0x1f, 0x60, 0xe4, 0x35, 0x5c,
             0xb7, 0x3a, 0x32, 0xf2, 0x20, 0x45, 0x86, 0xb7, 0x9e, 0xf2, 0xae,
             0x6a, 0xd0, 0xe1, 0x70, 0x88, 0x1f, 0xc2, 0xdd, 0xc2, 0x2b, 0x5e,
             0x97, 0xc0, 0x11, 0xb6, 0x5e, 0x69, 0xd1, 0x1e, 0x82, 0x61, 0x3e,
             0x80, 0x33, 0x0e, 0x62, 0x33, 0x5f, 0xc2, 0x92, 0x6d, 0xcc, 0x4d,
             0x28, 0xad, 0x86, 0xa7, 0xc8, 0xc8, 0x11, 0x5f, 0x91, 0x41, 0x74,
             0xc1, 0xdb, 0xe1, 0xdf, 0x44, 0xa3, 0xab, 0xd6, 0xc9, 0xfe, 0x3a,
             0x1d, 0x24, 0xaa, 0x9a, 0x33, 0x55, 0xae, 0xbf, 0x62, 0x4f, 0xb1,
             0x5f, 0x59, 0xf8, 0x21, 0xe5, 0x9d, 0x92, 0x05, 0x37, 0x2a, 0xa3,
             0xf1, 0x5b, 0xf7, 0x98, 0x84, 0xa8, 0x58, 0xc7, 0x7b, 0x79, 0x4a,
             0x40, 0xc3, 0xde, 0xba, 0xef, 0x4f, 0x4f, 0xf6, 0x7d, 0x86, 0x21,
             0x6c, 0x30, 0x94, 0xbb, 0x90, 0xf9, 0xec, 0x5f, 0x14, 0x40, 0xa6,
             0x6e, 0x94, 0xd9, 0x51, 0x55, 0x91, 0x21, 0x82, 0x64, 0xf2, 0xc8,
             0x10, 0xf7, 0xc0, 0x2a, 0x7f, 0x95, 0xb8, 0x14, 0x2c, 0xba, 0xb8,
             0x7e, 0x81, 0x5c}};
        auto const ed10Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed10PublicKey{
            {0x7a, 0xdc, 0x65, 0x52, 0x0f, 0xca, 0x06, 0x72, 0x5c, 0xe4, 0x65,
             0x57, 0x82, 0x6d, 0x3f, 0x57, 0x1f, 0xc6, 0xc6, 0xe4, 0x5d, 0xaf,
             0x08, 0xda, 0xe2, 0x07, 0x02, 0xcb, 0x42, 0x3d, 0x2a, 0xd0}};
        std::array<std::uint8_t, 64> const ed10Sig{
            {0xf2, 0x7c, 0x5f, 0x61, 0xec, 0xbc, 0xc2, 0x8c, 0xad, 0xd0, 0xd3,
             0xcb, 0x89, 0xab, 0xac, 0xe4, 0x01, 0x6f, 0x90, 0x60, 0x6f, 0x89,
             0xc0, 0xd9, 0xca, 0x2b, 0x4b, 0xfd, 0x78, 0x80, 0xae, 0xf9, 0xd0,
             0x3f, 0x45, 0x7a, 0xb2, 0x26, 0x0c, 0xee, 0xc5, 0x06, 0x0e, 0x94,
             0x6b, 0xf8, 0xfe, 0x96, 0x4f, 0x0d, 0xa0, 0x2c, 0x66, 0x78, 0xa5,
             0x60, 0xfe, 0x47, 0x1e, 0xa9, 0x88, 0x76, 0x55, 0x03}};
        std::array<std::uint8_t, 32> const ed10SigningKey{
            {0x84, 0x04, 0xdd, 0x34, 0x6a, 0x4d, 0x40, 0xef, 0x70, 0xf7, 0xef,
             0x7f, 0x25, 0xf4, 0xd0, 0xa0, 0xa8, 0xad, 0xc1, 0x51, 0x1c, 0x16,
             0x57, 0x9d, 0x5e, 0xd9, 0xa6, 0x45, 0xda, 0xff, 0x5e, 0x1e}};
        (void)ed10SigningKey;
        auto const thresh0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim11CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim11Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim11CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa12CondConditionFingerprint =
            "\x38\xb9\xf0\xeb\x68\x8b\x9f\x55\x37\x9a\xec\x07\xd4\xa2\x13"
            "\xac\x34\xa1\x67\x31\x34\xea\xc2\x2f\xef\x13\xe3\x5c\xcf\x8f"
            "\x90\x1e"s;
        Condition const Rsa12Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa12CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed13CondConditionFingerprint =
            "\x7c\x54\x6a\x6d\x7f\x00\x52\x31\x03\xe7\xb4\x5b\x1c\x9f\x72"
            "\xeb\x3c\x18\x08\xa3\x24\xb2\x63\x5f\x77\x55\x4a\x42\xdb\x1e"
            "\xff\x1e"s;
        Condition const Ed13Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed13CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Prefix14CondConditionFingerprint =
            "\x63\xdd\x66\x1b\x77\x32\xe1\x27\x49\x30\xf1\xe2\x5c\x91\x00"
            "\xc7\x8a\xef\x07\x04\x3e\x8e\x7e\x31\xa8\x81\x60\xc4\x28\xc6"
            "\x14\x7a"s;
        Condition const Prefix14Cond{
            Type::prefixSha256,
            137258,
            makeSlice(Prefix14CondConditionFingerprint),
            std::bitset<5>{29}};
        auto const Thresh21CondConditionFingerprint =
            "\x6f\x57\x52\x73\x7f\x22\x19\xb7\xd0\xc9\xa9\xa5\x15\xc8\x99"
            "\x72\xd3\xe9\x2a\x2f\xae\x19\x55\x83\x27\x52\xfd\x07\x03\x5d"
            "\xc0\xd3"s;
        Condition const Thresh21Cond{
            Type::thresholdSha256,
            276480,
            makeSlice(Thresh21CondConditionFingerprint),
            std::bitset<5>{25}};

        auto preim4 =
            std::make_unique<PreimageSha256>(makeSlice(preim4Preimage));
        std::vector<std::unique_ptr<Fulfillment>> thresh3Subfulfillments;
        thresh3Subfulfillments.emplace_back(std::move(preim4));
        std::vector<Condition> thresh3Subconditions{
            {Preim5Cond, Rsa6Cond, Ed7Cond}};
        auto thresh3 = std::make_unique<ThresholdSha256>(
            std::move(thresh3Subfulfillments), std::move(thresh3Subconditions));
        auto prefix2 = std::make_unique<PrefixSha256>(
            makeSlice(prefix2Prefix), prefix2MaxMsgLength, std::move(thresh3));
        auto prefix1 = std::make_unique<PrefixSha256>(
            makeSlice(prefix1Prefix), prefix1MaxMsgLength, std::move(prefix2));
        auto preim8 =
            std::make_unique<PreimageSha256>(makeSlice(preim8Preimage));
        auto rsa9 = std::make_unique<RsaSha256>(
            makeSlice(rsa9PublicKey), makeSlice(rsa9Sig));
        auto ed10 = std::make_unique<Ed25519>(ed10PublicKey, ed10Sig);
        std::vector<std::unique_ptr<Fulfillment>> thresh0Subfulfillments;
        thresh0Subfulfillments.emplace_back(std::move(prefix1));
        thresh0Subfulfillments.emplace_back(std::move(preim8));
        thresh0Subfulfillments.emplace_back(std::move(rsa9));
        thresh0Subfulfillments.emplace_back(std::move(ed10));
        std::vector<Condition> thresh0Subconditions{
            {Preim11Cond, Rsa12Cond, Ed13Cond, Prefix14Cond, Thresh21Cond}};
        ThresholdSha256 const thresh0(
            std::move(thresh0Subfulfillments), std::move(thresh0Subconditions));
        {
            auto const thresh0EncodedFulfillment =
                "\xa2\x82\x04\x00\xa0\x82\x03\x26\xa0\x0b\x80\x09\x49\x20\x61"
                "\x6d\x20\x72\x6f\x6f\x74\xa1\x81\xa4\x80\x02\x50\x31\x81\x01"
                "\x0e\xa2\x81\x9a\xa1\x81\x97\x80\x02\x50\x32\x81\x01\x0e\xa2"
                "\x81\x8d\xa2\x81\x8a\xa0\x0d\xa0\x0b\x80\x09\x49\x20\x61\x6d"
                "\x20\x72\x6f\x6f\x74\xa1\x79\xa0\x25\x80\x20\x5d\xa0\x30\xef"
                "\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9"
                "\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01"
                "\x09\xa3\x27\x80\x20\xee\x75\xbe\xb3\x52\x54\xbd\x24\x06\x3f"
                "\xd9\x32\x48\x19\xe1\x5c\x70\x85\x92\x11\x6c\x3a\xc1\x4c\x9b"
                "\x83\xeb\x05\xa7\x59\xe2\xa0\x81\x03\x01\x00\x00\xa4\x27\x80"
                "\x20\x1e\x5a\xaf\x3e\x46\xf6\xd4\xdf\x4d\x70\xf0\xa1\xd1\x35"
                "\x6d\xf0\x8b\x86\x91\xac\xb2\xf2\x24\xf0\x1a\xd4\x23\xc0\x21"
                "\x8d\x42\xc0\x81\x03\x02\x00\x00\xa3\x82\x02\x08\x80\x82\x01"
                "\x00\xb6\x7b\xe2\x98\x9f\xff\x6c\x37\xd0\xb6\x64\x19\xfb\xa0"
                "\x21\x18\xe2\xc0\xd1\x92\xbd\x04\xa6\xd2\xb4\x7e\xc6\x6a\x1a"
                "\x34\x20\x7b\xfe\x84\xeb\xe8\xc1\x6f\xfd\xdc\x0a\xfe\x60\x55"
                "\xb6\xfc\x86\x5a\x21\xbf\xf1\x39\xfa\xec\x42\xca\x57\xb3\x3e"
                "\x3f\xe6\x26\x5a\xb7\x4a\x5f\xbb\xb1\xf5\x91\x85\x92\x3e\x6a"
                "\x18\x48\x4d\x9e\xdd\x08\x25\xa3\x3b\x3d\x75\x9a\xbe\xee\x0d"
                "\x6e\xd2\x5d\xe2\xbd\xed\x45\x60\xef\xa0\x37\xfd\xbb\xcf\x30"
                "\x97\xf1\x5b\xc8\x9c\x29\x33\x67\x3e\x23\x33\x7f\x36\xd4\x75"
                "\x8b\xa1\xcf\x9e\xe6\xc5\x63\x63\xb0\x3f\xa0\xc2\xa2\x10\xc9"
                "\xb2\x6b\xaa\x67\xc9\xf5\xb8\xbf\x5b\x97\xe5\x29\xf2\xbb\xc7"
                "\x22\x0f\x1f\xc1\xf6\xca\x4a\x8a\x46\x89\xa0\xca\x4e\x49\x9d"
                "\xfc\x23\xd3\xb4\xdb\xc6\x84\x45\xbd\x9f\x10\x86\xe2\xf0\x47"
                "\x7b\x75\xbf\x25\x99\x02\x2c\xdb\x6b\xd6\x2b\x67\x0d\xcd\x46"
                "\x63\xbd\xce\x1c\xc5\x56\x63\x58\x5b\xc8\xb2\x58\x42\xf6\xaf"
                "\xce\x47\xb2\xa9\x2a\x71\x8b\x82\xf4\x72\xff\xef\xe7\xc1\x70"
                "\x12\xfa\xb8\xad\xb2\xfe\xa9\x14\xe7\xc2\xec\x12\xbf\x29\x5a"
                "\x65\x91\x74\x82\xd3\x77\x1f\x14\xbf\x5f\x41\x11\x6c\x7c\x22"
                "\x70\x65\x81\x82\x01\x00\x2b\x6d\x71\x44\xf5\x19\xb5\xbe\x1d"
                "\x73\x28\x42\xb7\x23\x64\x9d\x25\xb4\xb7\x0f\x3e\xf5\x02\x06"
                "\x34\xca\xb6\xce\x64\xd6\xc7\x16\xe6\xd6\x6c\x63\x43\xf6\x88"
                "\xb0\x34\xcb\x7c\xa4\xac\x22\xbf\x23\x5a\xf7\x4b\xe4\x4d\x28"
                "\x78\xdb\x8c\x82\x9f\xa6\xd7\x0a\x3b\xb0\xa4\x0d\xd0\xc7\x43"
                "\x69\x36\xdd\x9a\xf0\xc9\x4f\x1e\x56\x34\x1e\xc8\x79\x85\x6a"
                "\xad\xd8\xfc\x8d\x06\xe7\x80\x32\x44\x29\xd8\x6f\x67\x8e\x10"
                "\x0b\x1c\xaf\x05\xce\x96\x1f\x60\xe4\x35\x5c\xb7\x3a\x32\xf2"
                "\x20\x45\x86\xb7\x9e\xf2\xae\x6a\xd0\xe1\x70\x88\x1f\xc2\xdd"
                "\xc2\x2b\x5e\x97\xc0\x11\xb6\x5e\x69\xd1\x1e\x82\x61\x3e\x80"
                "\x33\x0e\x62\x33\x5f\xc2\x92\x6d\xcc\x4d\x28\xad\x86\xa7\xc8"
                "\xc8\x11\x5f\x91\x41\x74\xc1\xdb\xe1\xdf\x44\xa3\xab\xd6\xc9"
                "\xfe\x3a\x1d\x24\xaa\x9a\x33\x55\xae\xbf\x62\x4f\xb1\x5f\x59"
                "\xf8\x21\xe5\x9d\x92\x05\x37\x2a\xa3\xf1\x5b\xf7\x98\x84\xa8"
                "\x58\xc7\x7b\x79\x4a\x40\xc3\xde\xba\xef\x4f\x4f\xf6\x7d\x86"
                "\x21\x6c\x30\x94\xbb\x90\xf9\xec\x5f\x14\x40\xa6\x6e\x94\xd9"
                "\x51\x55\x91\x21\x82\x64\xf2\xc8\x10\xf7\xc0\x2a\x7f\x95\xb8"
                "\x14\x2c\xba\xb8\x7e\x81\x5c\xa4\x64\x80\x20\x7a\xdc\x65\x52"
                "\x0f\xca\x06\x72\x5c\xe4\x65\x57\x82\x6d\x3f\x57\x1f\xc6\xc6"
                "\xe4\x5d\xaf\x08\xda\xe2\x07\x02\xcb\x42\x3d\x2a\xd0\x81\x40"
                "\xf2\x7c\x5f\x61\xec\xbc\xc2\x8c\xad\xd0\xd3\xcb\x89\xab\xac"
                "\xe4\x01\x6f\x90\x60\x6f\x89\xc0\xd9\xca\x2b\x4b\xfd\x78\x80"
                "\xae\xf9\xd0\x3f\x45\x7a\xb2\x26\x0c\xee\xc5\x06\x0e\x94\x6b"
                "\xf8\xfe\x96\x4f\x0d\xa0\x2c\x66\x78\xa5\x60\xfe\x47\x1e\xa9"
                "\x88\x76\x55\x03\xa1\x81\xd3\xa0\x25\x80\x20\x5d\xa0\x30\xef"
                "\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9"
                "\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01"
                "\x09\xa1\x2b\x80\x20\x63\xdd\x66\x1b\x77\x32\xe1\x27\x49\x30"
                "\xf1\xe2\x5c\x91\x00\xc7\x8a\xef\x07\x04\x3e\x8e\x7e\x31\xa8"
                "\x81\x60\xc4\x28\xc6\x14\x7a\x81\x03\x02\x18\x2a\x82\x02\x03"
                "\xb8\xa2\x2b\x80\x20\x6f\x57\x52\x73\x7f\x22\x19\xb7\xd0\xc9"
                "\xa9\xa5\x15\xc8\x99\x72\xd3\xe9\x2a\x2f\xae\x19\x55\x83\x27"
                "\x52\xfd\x07\x03\x5d\xc0\xd3\x81\x03\x04\x38\x00\x82\x02\x03"
                "\x98\xa3\x27\x80\x20\x38\xb9\xf0\xeb\x68\x8b\x9f\x55\x37\x9a"
                "\xec\x07\xd4\xa2\x13\xac\x34\xa1\x67\x31\x34\xea\xc2\x2f\xef"
                "\x13\xe3\x5c\xcf\x8f\x90\x1e\x81\x03\x01\x00\x00\xa4\x27\x80"
                "\x20\x7c\x54\x6a\x6d\x7f\x00\x52\x31\x03\xe7\xb4\x5b\x1c\x9f"
                "\x72\xeb\x3c\x18\x08\xa3\x24\xb2\x63\x5f\x77\x55\x4a\x42\xdb"
                "\x1e\xff\x1e\x81\x03\x02\x00\x00"s;
            auto const thresh0EncodedCondition =
                "\xa2\x2b\x80\x20\x7a\xbc\x0e\xe7\x3d\x48\x2e\xf5\x74\x84\x43"
                "\x5b\xc9\x5d\xd4\xcd\x27\x6c\x63\xe6\xcd\xa9\xe5\x42\x2c\xbb"
                "\x43\x73\x60\x90\x33\x5b\x81\x03\x0a\x8c\x4a\x82\x02\x03\xd8"s;
            auto const thresh0EncodedFingerprint =
                "\x30\x82\x01\x80\x80\x01\x04\xa1\x82\x01\x79\xa0\x25\x80\x20"
                "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
                "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
                "\xeb\x4e\x81\x01\x09\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1"
                "\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21"
                "\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa1"
                "\x2b\x80\x20\x19\x59\x28\xb3\xe5\xbf\x2c\xa9\x3d\x83\x9f\xe9"
                "\x55\x65\xbd\x5c\xe5\x3a\x91\x53\x8b\x92\xf5\x78\x59\x92\x10"
                "\x8c\x3f\x4a\x06\xd5\x81\x03\x02\x18\x20\x82\x02\x03\xb8\xa1"
                "\x2b\x80\x20\x63\xdd\x66\x1b\x77\x32\xe1\x27\x49\x30\xf1\xe2"
                "\x5c\x91\x00\xc7\x8a\xef\x07\x04\x3e\x8e\x7e\x31\xa8\x81\x60"
                "\xc4\x28\xc6\x14\x7a\x81\x03\x02\x18\x2a\x82\x02\x03\xb8\xa2"
                "\x2b\x80\x20\x6f\x57\x52\x73\x7f\x22\x19\xb7\xd0\xc9\xa9\xa5"
                "\x15\xc8\x99\x72\xd3\xe9\x2a\x2f\xae\x19\x55\x83\x27\x52\xfd"
                "\x07\x03\x5d\xc0\xd3\x81\x03\x04\x38\x00\x82\x02\x03\x98\xa3"
                "\x27\x80\x20\x38\xb9\xf0\xeb\x68\x8b\x9f\x55\x37\x9a\xec\x07"
                "\xd4\xa2\x13\xac\x34\xa1\x67\x31\x34\xea\xc2\x2f\xef\x13\xe3"
                "\x5c\xcf\x8f\x90\x1e\x81\x03\x01\x00\x00\xa3\x27\x80\x20\xe5"
                "\x15\x0a\xbd\xf6\x06\xbe\xaa\x6c\x81\xf1\x88\x7e\x70\x64\x51"
                "\xeb\x6f\x70\xb1\xdd\xc5\xf1\x20\x53\xf7\xcb\x9f\x7f\xc7\xe4"
                "\x52\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x00\x8b\xe6\x62\xd4"
                "\x30\x65\x1e\x40\xb3\x23\x05\x52\x3a\xf3\x16\xda\x09\xbe\x79"
                "\x5f\x41\xc9\x03\x93\x34\x5b\x7c\x24\x87\x62\xfa\x81\x03\x02"
                "\x00\x00\xa4\x27\x80\x20\x7c\x54\x6a\x6d\x7f\x00\x52\x31\x03"
                "\xe7\xb4\x5b\x1c\x9f\x72\xeb\x3c\x18\x08\xa3\x24\xb2\x63\x5f"
                "\x77\x55\x4a\x42\xdb\x1e\xff\x1e\x81\x03\x02\x00\x00"s;
            check(
                &thresh0,
                thresh0Msg,
                thresh0EncodedFulfillment,
                thresh0EncodedCondition,
                thresh0EncodedFingerprint);
        }
    }

    void
    testThresh12()
    {
        testcase("Thresh12");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * thresh0
        // ** Preim27Cond
        // ** Rsa28Cond
        // ** Ed29Cond
        // ** prefix1
        // *** prefix2
        // **** thresh3
        // ***** Preim10Cond
        // ***** Rsa11Cond
        // ***** Ed12Cond
        // ***** preim4
        // ***** thresh5
        // ****** Preim7Cond
        // ****** Rsa8Cond
        // ****** Ed9Cond
        // ****** preim6
        // ** prefix13
        // *** prefix14
        // **** thresh15
        // ***** Preim22Cond
        // ***** Rsa23Cond
        // ***** Ed24Cond
        // ***** preim16
        // ***** thresh17
        // ****** Preim19Cond
        // ****** Rsa20Cond
        // ****** Ed21Cond
        // ****** preim18
        // ** thresh25
        // *** preim26

        auto const preim4Preimage = "I am root"s;
        auto const preim4Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        auto const preim6Preimage = "I am root"s;
        auto const preim6Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        auto const thresh5Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim7CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim7Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim7CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa8CondConditionFingerprint =
            "\xd1\xb5\x1d\x35\x99\x9d\xb4\xc1\xaa\x81\x4d\xd7\x0e\xa9\x2a"
            "\x20\x7f\xe5\x5c\x75\xe8\x57\x8b\xbf\xe8\xd7\x1c\x7e\xb2\xbc"
            "\x91\x16"s;
        Condition const Rsa8Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa8CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed9CondConditionFingerprint =
            "\x92\xfa\xfc\xc6\x2f\xe2\x8d\x8d\x25\x7c\xd4\x46\xab\xea\x82"
            "\xd0\x3f\x36\xbe\x1d\x11\x2b\xa0\xfe\xfe\xd4\x00\xd5\x7d\x9b"
            "\xf6\xc9"s;
        Condition const Ed9Cond{Type::ed25519Sha256,
                                131072,
                                makeSlice(Ed9CondConditionFingerprint),
                                std::bitset<5>{0}};
        auto const thresh3Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim10CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim10Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim10CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa11CondConditionFingerprint =
            "\xaf\x93\xfd\x22\x45\xc2\x08\xab\x43\xf7\x45\x56\x63\xec\xaf"
            "\x15\x33\xa0\x2a\xb4\x9e\x15\xb4\x6e\xda\x87\x35\xde\x09\x4b"
            "\x06\x31"s;
        Condition const Rsa11Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa11CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed12CondConditionFingerprint =
            "\x55\xcc\xd1\xa2\x2c\x90\x8d\xe3\x2e\x42\xd4\xe0\x65\xb2\xf7"
            "\xda\xc0\x07\x1e\xd3\x23\x0f\xfe\x78\x13\xa2\x86\x61\xc4\x34"
            "\x28\x50"s;
        Condition const Ed12Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed12CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const prefix2Prefix = "P2"s;
        auto const prefix2Msg = "P1abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix2MaxMsgLength = 14;
        auto const prefix1Prefix = "P1"s;
        auto const prefix1Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix1MaxMsgLength = 14;
        auto const preim16Preimage = "I am root"s;
        auto const preim16Msg = "P14P13abcdefghijklmnopqrstuvwxyz"s;
        auto const preim18Preimage = "I am root"s;
        auto const preim18Msg = "P14P13abcdefghijklmnopqrstuvwxyz"s;
        auto const thresh17Msg = "P14P13abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim19CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim19Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim19CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa20CondConditionFingerprint =
            "\x8d\xb0\x2c\xb1\x28\xc3\xf4\x97\x50\x84\x64\x57\xca\xf4\x9d"
            "\x63\x08\x73\xfc\xde\x2f\x90\xf0\xf2\xec\x79\xa9\xc6\xa3\xf1"
            "\x33\xfd"s;
        Condition const Rsa20Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa20CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed21CondConditionFingerprint =
            "\x95\x3c\x86\x65\x91\x76\x69\x6b\x72\x61\xaa\x76\x15\x2a\xd7"
            "\x25\x4f\x32\xb7\x73\x7a\xb2\x49\x0c\x0b\xdf\xb5\x4e\x4a\x8b"
            "\xf7\x65"s;
        Condition const Ed21Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed21CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const thresh15Msg = "P14P13abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim22CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim22Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim22CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa23CondConditionFingerprint =
            "\x4a\x64\xbf\x23\xa9\x2b\xec\x55\x00\x3d\x55\xf5\xbf\x3f\x26"
            "\x49\x18\xbb\xe0\xda\xf8\x0c\xf4\x5c\x8a\x33\x74\xb6\x58\xa4"
            "\x38\x30"s;
        Condition const Rsa23Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa23CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed24CondConditionFingerprint =
            "\x6b\xf3\xe3\x0f\x92\x6d\x45\x8d\xae\xd2\x8a\x2a\x3e\x53\x37"
            "\x1f\x57\x82\x21\x60\xe4\x5b\x88\x9a\x9d\x13\xa2\x56\x13\x88"
            "\x9e\x21"s;
        Condition const Ed24Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed24CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const prefix14Prefix = "P14"s;
        auto const prefix14Msg = "P13abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix14MaxMsgLength = 14;
        auto const prefix13Prefix = "P13"s;
        auto const prefix13Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix13MaxMsgLength = 14;
        auto const preim26Preimage = "I am root"s;
        auto const preim26Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const thresh25Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const thresh0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim27CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim27Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim27CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa28CondConditionFingerprint =
            "\x58\xac\x94\x55\x27\x79\x7a\x0c\xac\x84\x2d\x5c\x13\x32\xee"
            "\x84\x25\xb8\xb8\xec\x25\x0d\x40\xee\xc0\xd4\x79\x18\x3f\xc6"
            "\xbc\xd7"s;
        Condition const Rsa28Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa28CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed29CondConditionFingerprint =
            "\xc5\x39\xb2\xc7\xc4\x92\x8a\x29\xf3\x72\xb4\x6c\xa5\x0d\x8c"
            "\xbe\x43\xda\xc9\xac\x6c\x26\x7c\x44\xb9\x3f\xee\x40\xcc\x8e"
            "\x41\x3c"s;
        Condition const Ed29Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed29CondConditionFingerprint),
                                 std::bitset<5>{0}};

        auto preim4 =
            std::make_unique<PreimageSha256>(makeSlice(preim4Preimage));
        auto preim6 =
            std::make_unique<PreimageSha256>(makeSlice(preim6Preimage));
        std::vector<std::unique_ptr<Fulfillment>> thresh5Subfulfillments;
        thresh5Subfulfillments.emplace_back(std::move(preim6));
        std::vector<Condition> thresh5Subconditions{
            {Preim7Cond, Rsa8Cond, Ed9Cond}};
        auto thresh5 = std::make_unique<ThresholdSha256>(
            std::move(thresh5Subfulfillments), std::move(thresh5Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh3Subfulfillments;
        thresh3Subfulfillments.emplace_back(std::move(preim4));
        thresh3Subfulfillments.emplace_back(std::move(thresh5));
        std::vector<Condition> thresh3Subconditions{
            {Preim10Cond, Rsa11Cond, Ed12Cond}};
        auto thresh3 = std::make_unique<ThresholdSha256>(
            std::move(thresh3Subfulfillments), std::move(thresh3Subconditions));
        auto prefix2 = std::make_unique<PrefixSha256>(
            makeSlice(prefix2Prefix), prefix2MaxMsgLength, std::move(thresh3));
        auto prefix1 = std::make_unique<PrefixSha256>(
            makeSlice(prefix1Prefix), prefix1MaxMsgLength, std::move(prefix2));
        auto preim16 =
            std::make_unique<PreimageSha256>(makeSlice(preim16Preimage));
        auto preim18 =
            std::make_unique<PreimageSha256>(makeSlice(preim18Preimage));
        std::vector<std::unique_ptr<Fulfillment>> thresh17Subfulfillments;
        thresh17Subfulfillments.emplace_back(std::move(preim18));
        std::vector<Condition> thresh17Subconditions{
            {Preim19Cond, Rsa20Cond, Ed21Cond}};
        auto thresh17 = std::make_unique<ThresholdSha256>(
            std::move(thresh17Subfulfillments),
            std::move(thresh17Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh15Subfulfillments;
        thresh15Subfulfillments.emplace_back(std::move(preim16));
        thresh15Subfulfillments.emplace_back(std::move(thresh17));
        std::vector<Condition> thresh15Subconditions{
            {Preim22Cond, Rsa23Cond, Ed24Cond}};
        auto thresh15 = std::make_unique<ThresholdSha256>(
            std::move(thresh15Subfulfillments),
            std::move(thresh15Subconditions));
        auto prefix14 = std::make_unique<PrefixSha256>(
            makeSlice(prefix14Prefix),
            prefix14MaxMsgLength,
            std::move(thresh15));
        auto prefix13 = std::make_unique<PrefixSha256>(
            makeSlice(prefix13Prefix),
            prefix13MaxMsgLength,
            std::move(prefix14));
        auto preim26 =
            std::make_unique<PreimageSha256>(makeSlice(preim26Preimage));
        std::vector<std::unique_ptr<Fulfillment>> thresh25Subfulfillments;
        thresh25Subfulfillments.emplace_back(std::move(preim26));
        std::vector<Condition> thresh25Subconditions{};
        auto thresh25 = std::make_unique<ThresholdSha256>(
            std::move(thresh25Subfulfillments),
            std::move(thresh25Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh0Subfulfillments;
        thresh0Subfulfillments.emplace_back(std::move(prefix1));
        thresh0Subfulfillments.emplace_back(std::move(prefix13));
        thresh0Subfulfillments.emplace_back(std::move(thresh25));
        std::vector<Condition> thresh0Subconditions{
            {Preim27Cond, Rsa28Cond, Ed29Cond}};
        ThresholdSha256 const thresh0(
            std::move(thresh0Subfulfillments), std::move(thresh0Subconditions));
        {
            auto const thresh0EncodedFulfillment =
                "\xa2\x82\x03\x08\xa0\x82\x02\x89\xa1\x82\x01\x36\x80\x02\x50"
                "\x31\x81\x01\x0e\xa2\x82\x01\x2b\xa1\x82\x01\x27\x80\x02\x50"
                "\x32\x81\x01\x0e\xa2\x82\x01\x1c\xa2\x82\x01\x18\xa0\x81\x9a"
                "\xa0\x0b\x80\x09\x49\x20\x61\x6d\x20\x72\x6f\x6f\x74\xa2\x81"
                "\x8a\xa0\x0d\xa0\x0b\x80\x09\x49\x20\x61\x6d\x20\x72\x6f\x6f"
                "\x74\xa1\x79\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11"
                "\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2"
                "\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa3\x27\x80"
                "\x20\xd1\xb5\x1d\x35\x99\x9d\xb4\xc1\xaa\x81\x4d\xd7\x0e\xa9"
                "\x2a\x20\x7f\xe5\x5c\x75\xe8\x57\x8b\xbf\xe8\xd7\x1c\x7e\xb2"
                "\xbc\x91\x16\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x92\xfa\xfc"
                "\xc6\x2f\xe2\x8d\x8d\x25\x7c\xd4\x46\xab\xea\x82\xd0\x3f\x36"
                "\xbe\x1d\x11\x2b\xa0\xfe\xfe\xd4\x00\xd5\x7d\x9b\xf6\xc9\x81"
                "\x03\x02\x00\x00\xa1\x79\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd"
                "\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33"
                "\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09"
                "\xa3\x27\x80\x20\xaf\x93\xfd\x22\x45\xc2\x08\xab\x43\xf7\x45"
                "\x56\x63\xec\xaf\x15\x33\xa0\x2a\xb4\x9e\x15\xb4\x6e\xda\x87"
                "\x35\xde\x09\x4b\x06\x31\x81\x03\x01\x00\x00\xa4\x27\x80\x20"
                "\x55\xcc\xd1\xa2\x2c\x90\x8d\xe3\x2e\x42\xd4\xe0\x65\xb2\xf7"
                "\xda\xc0\x07\x1e\xd3\x23\x0f\xfe\x78\x13\xa2\x86\x61\xc4\x34"
                "\x28\x50\x81\x03\x02\x00\x00\xa1\x82\x01\x38\x80\x03\x50\x31"
                "\x33\x81\x01\x0e\xa2\x82\x01\x2c\xa1\x82\x01\x28\x80\x03\x50"
                "\x31\x34\x81\x01\x0e\xa2\x82\x01\x1c\xa2\x82\x01\x18\xa0\x81"
                "\x9a\xa0\x0b\x80\x09\x49\x20\x61\x6d\x20\x72\x6f\x6f\x74\xa2"
                "\x81\x8a\xa0\x0d\xa0\x0b\x80\x09\x49\x20\x61\x6d\x20\x72\x6f"
                "\x6f\x74\xa1\x79\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75"
                "\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c"
                "\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa3\x27"
                "\x80\x20\x8d\xb0\x2c\xb1\x28\xc3\xf4\x97\x50\x84\x64\x57\xca"
                "\xf4\x9d\x63\x08\x73\xfc\xde\x2f\x90\xf0\xf2\xec\x79\xa9\xc6"
                "\xa3\xf1\x33\xfd\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x95\x3c"
                "\x86\x65\x91\x76\x69\x6b\x72\x61\xaa\x76\x15\x2a\xd7\x25\x4f"
                "\x32\xb7\x73\x7a\xb2\x49\x0c\x0b\xdf\xb5\x4e\x4a\x8b\xf7\x65"
                "\x81\x03\x02\x00\x00\xa1\x79\xa0\x25\x80\x20\x5d\xa0\x30\xef"
                "\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9"
                "\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01"
                "\x09\xa3\x27\x80\x20\x4a\x64\xbf\x23\xa9\x2b\xec\x55\x00\x3d"
                "\x55\xf5\xbf\x3f\x26\x49\x18\xbb\xe0\xda\xf8\x0c\xf4\x5c\x8a"
                "\x33\x74\xb6\x58\xa4\x38\x30\x81\x03\x01\x00\x00\xa4\x27\x80"
                "\x20\x6b\xf3\xe3\x0f\x92\x6d\x45\x8d\xae\xd2\x8a\x2a\x3e\x53"
                "\x37\x1f\x57\x82\x21\x60\xe4\x5b\x88\x9a\x9d\x13\xa2\x56\x13"
                "\x88\x9e\x21\x81\x03\x02\x00\x00\xa2\x11\xa0\x0d\xa0\x0b\x80"
                "\x09\x49\x20\x61\x6d\x20\x72\x6f\x6f\x74\xa1\x00\xa1\x79\xa0"
                "\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e"
                "\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53"
                "\xee\x93\x58\xeb\x4e\x81\x01\x09\xa3\x27\x80\x20\x58\xac\x94"
                "\x55\x27\x79\x7a\x0c\xac\x84\x2d\x5c\x13\x32\xee\x84\x25\xb8"
                "\xb8\xec\x25\x0d\x40\xee\xc0\xd4\x79\x18\x3f\xc6\xbc\xd7\x81"
                "\x03\x01\x00\x00\xa4\x27\x80\x20\xc5\x39\xb2\xc7\xc4\x92\x8a"
                "\x29\xf3\x72\xb4\x6c\xa5\x0d\x8c\xbe\x43\xda\xc9\xac\x6c\x26"
                "\x7c\x44\xb9\x3f\xee\x40\xcc\x8e\x41\x3c\x81\x03\x02\x00\x00"s;
            auto const thresh0EncodedCondition =
                "\xa2\x2b\x80\x20\x22\x4b\xbe\x1e\x62\x23\xd8\x82\x75\x8b\xbf"
                "\xdc\xe1\x27\xf4\x7f\xa5\x61\x68\x29\x9a\x9f\x0a\x9f\x0c\x28"
                "\x32\x10\x8e\x8a\xc7\x51\x81\x03\x0a\x70\x42\x82\x02\x03\xd8"s;
            auto const thresh0EncodedFingerprint =
                "\x30\x82\x01\x05\x80\x01\x03\xa1\x81\xff\xa0\x25\x80\x20\x5d"
                "\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b"
                "\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb"
                "\x4e\x81\x01\x09\xa1\x2b\x80\x20\xa5\x9f\x4d\x3e\xf5\x47\xc9"
                "\x01\xf7\xe6\x60\x33\x3b\x48\xe2\x3e\x37\xbe\x6c\x0e\x6d\x34"
                "\xcc\xa3\x0b\xe5\xe8\x3a\x80\x34\x5d\xcc\x81\x03\x04\x2c\x22"
                "\x82\x02\x03\xb8\xa1\x2b\x80\x20\xe3\xfb\x07\xd8\xb1\xbd\x9d"
                "\xd2\x35\x06\x8c\xa1\xde\xbb\xe3\x30\x50\xf6\x34\xcf\x93\x10"
                "\x02\x43\x32\x52\x38\x39\xfc\x51\xe9\x05\x81\x03\x04\x2c\x20"
                "\x82\x02\x03\xb8\xa2\x2a\x80\x20\x57\xb7\x93\x0b\xb8\xe2\x21"
                "\xe9\x42\x8c\x85\x8f\x27\x2d\x4c\xa0\x85\xa0\x40\x6c\x4c\xed"
                "\x25\x22\x0d\xef\x3f\x73\xd9\xcf\x02\xc9\x81\x02\x04\x09\x82"
                "\x02\x07\x80\xa3\x27\x80\x20\x58\xac\x94\x55\x27\x79\x7a\x0c"
                "\xac\x84\x2d\x5c\x13\x32\xee\x84\x25\xb8\xb8\xec\x25\x0d\x40"
                "\xee\xc0\xd4\x79\x18\x3f\xc6\xbc\xd7\x81\x03\x01\x00\x00\xa4"
                "\x27\x80\x20\xc5\x39\xb2\xc7\xc4\x92\x8a\x29\xf3\x72\xb4\x6c"
                "\xa5\x0d\x8c\xbe\x43\xda\xc9\xac\x6c\x26\x7c\x44\xb9\x3f\xee"
                "\x40\xcc\x8e\x41\x3c\x81\x03\x02\x00\x00"s;
            check(
                &thresh0,
                thresh0Msg,
                thresh0EncodedFulfillment,
                thresh0EncodedCondition,
                thresh0EncodedFingerprint);
        }
    }

    void
    testThresh13()
    {
        testcase("Thresh13");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * thresh0
        // ** Preim16Cond
        // ** Rsa17Cond
        // ** Ed18Cond
        // ** Prefix19Cond
        // ** Thresh31Cond
        // ** prefix1
        // *** prefix2
        // **** thresh3
        // ***** Preim10Cond
        // ***** Rsa11Cond
        // ***** Ed12Cond
        // ***** preim4
        // ***** thresh5
        // ****** Preim7Cond
        // ****** Rsa8Cond
        // ****** Ed9Cond
        // ****** preim6
        // ** preim13
        // ** rsa14
        // ** ed15

        auto const preim4Preimage = "I am root"s;
        auto const preim4Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        auto const preim6Preimage = "I am root"s;
        auto const preim6Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        auto const thresh5Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim7CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim7Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim7CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa8CondConditionFingerprint =
            "\xd1\xb5\x1d\x35\x99\x9d\xb4\xc1\xaa\x81\x4d\xd7\x0e\xa9\x2a"
            "\x20\x7f\xe5\x5c\x75\xe8\x57\x8b\xbf\xe8\xd7\x1c\x7e\xb2\xbc"
            "\x91\x16"s;
        Condition const Rsa8Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa8CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed9CondConditionFingerprint =
            "\x92\xfa\xfc\xc6\x2f\xe2\x8d\x8d\x25\x7c\xd4\x46\xab\xea\x82"
            "\xd0\x3f\x36\xbe\x1d\x11\x2b\xa0\xfe\xfe\xd4\x00\xd5\x7d\x9b"
            "\xf6\xc9"s;
        Condition const Ed9Cond{Type::ed25519Sha256,
                                131072,
                                makeSlice(Ed9CondConditionFingerprint),
                                std::bitset<5>{0}};
        auto const thresh3Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim10CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim10Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim10CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa11CondConditionFingerprint =
            "\xaf\x93\xfd\x22\x45\xc2\x08\xab\x43\xf7\x45\x56\x63\xec\xaf"
            "\x15\x33\xa0\x2a\xb4\x9e\x15\xb4\x6e\xda\x87\x35\xde\x09\x4b"
            "\x06\x31"s;
        Condition const Rsa11Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa11CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed12CondConditionFingerprint =
            "\x55\xcc\xd1\xa2\x2c\x90\x8d\xe3\x2e\x42\xd4\xe0\x65\xb2\xf7"
            "\xda\xc0\x07\x1e\xd3\x23\x0f\xfe\x78\x13\xa2\x86\x61\xc4\x34"
            "\x28\x50"s;
        Condition const Ed12Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed12CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const prefix2Prefix = "P2"s;
        auto const prefix2Msg = "P1abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix2MaxMsgLength = 14;
        auto const prefix1Prefix = "P1"s;
        auto const prefix1Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix1MaxMsgLength = 14;
        auto const preim13Preimage = "I am root"s;
        auto const preim13Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const rsa14Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa14PublicKey{
            {0xbd, 0x63, 0x74, 0xd9, 0xc0, 0x3e, 0x0c, 0x57, 0x55, 0x99, 0x00,
             0xf3, 0xa8, 0x03, 0xdc, 0x9a, 0x6c, 0x14, 0xfc, 0x83, 0x33, 0x63,
             0x87, 0x35, 0x9c, 0xfe, 0xc3, 0x00, 0xb4, 0x8b, 0x03, 0xc7, 0x5f,
             0x0a, 0xe2, 0x94, 0xaa, 0x3f, 0x76, 0x15, 0xb1, 0xb9, 0xf6, 0x5f,
             0x0a, 0x87, 0x0c, 0x5c, 0x35, 0xbc, 0x2f, 0x0f, 0x04, 0xdd, 0x9d,
             0x12, 0x8d, 0x94, 0xeb, 0x8b, 0x93, 0xb4, 0x4e, 0x96, 0x20, 0xb7,
             0x17, 0xa0, 0x8e, 0xff, 0x9e, 0x1f, 0x43, 0xbf, 0xd6, 0x6a, 0x1e,
             0xb6, 0x0d, 0x7f, 0x2c, 0x08, 0x67, 0xa5, 0xe7, 0xa3, 0xb6, 0xd2,
             0x63, 0x6a, 0xf2, 0xeb, 0xd1, 0x21, 0x83, 0x8f, 0xa0, 0x25, 0x4a,
             0xc6, 0xcb, 0x4e, 0x66, 0xc3, 0x5f, 0x37, 0xdf, 0x5c, 0x12, 0xb7,
             0xb8, 0xfa, 0x7a, 0x57, 0x91, 0x9d, 0x55, 0xa6, 0x96, 0x91, 0xee,
             0x94, 0xb0, 0xcc, 0x45, 0xd3, 0x76, 0x70, 0x6f, 0x12, 0xbd, 0x81,
             0x9d, 0x08, 0x1b, 0x6d, 0x55, 0x3c, 0x19, 0x56, 0x9c, 0xcf, 0xc4,
             0xb4, 0x63, 0x8a, 0x87, 0x35, 0x2b, 0x4c, 0xc6, 0xe1, 0x0d, 0x74,
             0x31, 0xaa, 0xc6, 0x25, 0x0d, 0x90, 0x55, 0x14, 0xf1, 0x73, 0x09,
             0x93, 0xba, 0xc6, 0xda, 0x52, 0x7f, 0xc2, 0xdd, 0x9d, 0xb2, 0x4f,
             0x92, 0x43, 0xa6, 0xc9, 0x2c, 0x22, 0xc4, 0x5a, 0x22, 0xc2, 0x56,
             0xac, 0xfa, 0x6a, 0x37, 0x6a, 0x0c, 0x22, 0x72, 0x5d, 0x30, 0x50,
             0x4a, 0x6b, 0x93, 0xab, 0xcf, 0x69, 0x5a, 0x09, 0xd2, 0x5a, 0x87,
             0x31, 0x80, 0xa7, 0x5b, 0xe4, 0x34, 0x42, 0x13, 0x44, 0x1d, 0xe6,
             0xf9, 0x27, 0x21, 0xa7, 0x03, 0x74, 0x64, 0x18, 0xfa, 0xd0, 0x68,
             0x28, 0x73, 0x37, 0x3c, 0xf6, 0x63, 0x10, 0x56, 0xcc, 0x25, 0x08,
             0xb9, 0xad, 0xc8, 0x25, 0x64, 0xd1, 0x9c, 0x7c, 0xe7, 0x6c, 0xa6,
             0x12, 0x2c, 0x7d}};
        std::array<std::uint8_t, 256> const rsa14Sig{
            {0x39, 0x8e, 0xf9, 0xba, 0xaf, 0x52, 0x63, 0xf9, 0xe5, 0xd3, 0x6d,
             0xa2, 0x73, 0x92, 0xea, 0x03, 0x62, 0xda, 0xd3, 0x7d, 0x11, 0xd0,
             0x41, 0xc8, 0xe4, 0x25, 0x40, 0x52, 0x41, 0x5a, 0x1c, 0x5b, 0x6f,
             0xaf, 0x81, 0x9c, 0x01, 0xf4, 0xd3, 0x21, 0xa1, 0x19, 0x92, 0x8c,
             0x37, 0x8c, 0x6c, 0x46, 0x1f, 0xbf, 0xfe, 0xaf, 0x51, 0x1f, 0x83,
             0x6f, 0x1b, 0xee, 0x72, 0x1a, 0x60, 0xaf, 0xbd, 0x68, 0x4b, 0xef,
             0x0b, 0x1f, 0x2b, 0xb2, 0x12, 0xe5, 0x22, 0x42, 0x47, 0x32, 0xe7,
             0x0a, 0x89, 0xae, 0xb8, 0x62, 0x60, 0x67, 0x37, 0xe4, 0x2a, 0x23,
             0x1a, 0xff, 0xe4, 0x99, 0x62, 0x8b, 0x57, 0xcd, 0x86, 0x67, 0xe1,
             0x75, 0x92, 0x27, 0xba, 0x6d, 0xad, 0x70, 0x61, 0x6c, 0xd0, 0xaa,
             0xa7, 0x19, 0x56, 0x4c, 0x93, 0x5c, 0xa6, 0x23, 0x51, 0x60, 0x52,
             0x9e, 0xb8, 0xe3, 0x2a, 0xa3, 0x15, 0xd7, 0x02, 0xae, 0xa0, 0x69,
             0xb5, 0x4d, 0x3f, 0x74, 0x5f, 0xb9, 0x15, 0xf2, 0x29, 0x1f, 0x20,
             0x6c, 0xe2, 0xac, 0x91, 0x22, 0xc3, 0xfd, 0xdf, 0xe3, 0x34, 0x3b,
             0x72, 0x1e, 0x67, 0x5f, 0x31, 0x67, 0x40, 0xee, 0x4d, 0x70, 0x4c,
             0x86, 0xda, 0xc9, 0x1d, 0xe3, 0xb1, 0x70, 0xb0, 0x76, 0xa7, 0x3d,
             0x32, 0x5d, 0x94, 0x5c, 0xc1, 0x11, 0xd0, 0x06, 0x6c, 0x51, 0x88,
             0xe4, 0xf7, 0x5e, 0x34, 0x07, 0x72, 0x97, 0x84, 0x28, 0x67, 0x39,
             0xe7, 0x34, 0x49, 0x45, 0xc5, 0x43, 0x1c, 0x0c, 0xbf, 0x26, 0xba,
             0x0f, 0x1a, 0xb5, 0x23, 0xeb, 0xad, 0x8b, 0x51, 0x7e, 0x99, 0xd2,
             0xed, 0xe9, 0x3b, 0x66, 0xbb, 0x7c, 0xf7, 0x9b, 0x2b, 0x6a, 0xcf,
             0xd1, 0xa0, 0x58, 0x21, 0xaf, 0xdc, 0xed, 0x34, 0xac, 0x78, 0x9a,
             0x26, 0x09, 0x38, 0x2c, 0x37, 0xd4, 0x2f, 0x3f, 0x72, 0xc0, 0xe1,
             0xf7, 0xb1, 0xdd}};
        auto const ed15Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed15PublicKey{
            {0x37, 0x86, 0xc1, 0x8d, 0x06, 0xf2, 0xe9, 0x58, 0x82, 0x95, 0xcd,
             0xb6, 0x5d, 0x37, 0x28, 0xc9, 0x72, 0xa9, 0x41, 0x20, 0xdc, 0x78,
             0x3d, 0xac, 0x24, 0x8c, 0xb0, 0x6f, 0x1e, 0x44, 0x22, 0xc3}};
        std::array<std::uint8_t, 64> const ed15Sig{
            {0xd8, 0x59, 0x56, 0xbd, 0x99, 0x5c, 0xdd, 0xcd, 0x82, 0x9b, 0xea,
             0x14, 0x18, 0x09, 0x9a, 0x8c, 0x54, 0xff, 0xb3, 0xd4, 0xf3, 0xbf,
             0xc1, 0x4b, 0x70, 0x2a, 0xc9, 0x69, 0x5d, 0x42, 0x8a, 0x34, 0x08,
             0x74, 0x3a, 0xef, 0x8b, 0xd9, 0x2e, 0x7a, 0x0d, 0xb7, 0xdb, 0x68,
             0xb3, 0xa8, 0xb8, 0x12, 0x3a, 0x11, 0x60, 0x20, 0xee, 0xd9, 0x1e,
             0x4a, 0xb6, 0x33, 0x94, 0x27, 0x4e, 0x83, 0xf0, 0x0e}};
        std::array<std::uint8_t, 32> const ed15SigningKey{
            {0x0e, 0x2d, 0x40, 0x72, 0x23, 0x7c, 0x11, 0x66, 0xdb, 0xe2, 0xa2,
             0x6e, 0x4a, 0x4e, 0x95, 0x3a, 0x03, 0x78, 0x62, 0x84, 0x2b, 0x40,
             0x3e, 0xc5, 0xa8, 0x93, 0x4d, 0xb5, 0xe0, 0xe4, 0xc5, 0xdd}};
        (void)ed15SigningKey;
        auto const thresh0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim16CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim16Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim16CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa17CondConditionFingerprint =
            "\x78\xe3\x04\xf4\xa6\x16\x68\x4c\x1b\xcf\x3a\x32\xff\xbc\x75"
            "\x1a\xe6\x08\x9b\xff\xba\x79\xf4\x39\x7a\xfc\xe1\x6f\xff\x3e"
            "\xb3\x75"s;
        Condition const Rsa17Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa17CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed18CondConditionFingerprint =
            "\x0d\xea\xc5\x16\x5c\x62\xb8\xd1\xa4\xe7\x5a\x07\x58\x00\x79"
            "\x51\x88\x21\xe9\x4d\xba\x73\x7b\xad\x60\x9c\x5c\x26\x00\x2e"
            "\xd1\x51"s;
        Condition const Ed18Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed18CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Prefix19CondConditionFingerprint =
            "\x6e\xe3\x4b\xf2\xcd\x87\x07\x26\x55\xa5\xf3\x3e\x06\x68\xfb"
            "\x5e\x8b\x28\x0c\xe1\x28\x61\x5a\xc3\xab\xfe\xf3\x5a\xf4\x53"
            "\x6d\xd8"s;
        Condition const Prefix19Cond{
            Type::prefixSha256,
            273450,
            makeSlice(Prefix19CondConditionFingerprint),
            std::bitset<5>{29}};
        auto const Thresh31CondConditionFingerprint =
            "\x57\xb7\x93\x0b\xb8\xe2\x21\xe9\x42\x8c\x85\x8f\x27\x2d\x4c"
            "\xa0\x85\xa0\x40\x6c\x4c\xed\x25\x22\x0d\xef\x3f\x73\xd9\xcf"
            "\x02\xc9"s;
        Condition const Thresh31Cond{
            Type::thresholdSha256,
            1033,
            makeSlice(Thresh31CondConditionFingerprint),
            std::bitset<5>{1}};

        auto preim4 =
            std::make_unique<PreimageSha256>(makeSlice(preim4Preimage));
        auto preim6 =
            std::make_unique<PreimageSha256>(makeSlice(preim6Preimage));
        std::vector<std::unique_ptr<Fulfillment>> thresh5Subfulfillments;
        thresh5Subfulfillments.emplace_back(std::move(preim6));
        std::vector<Condition> thresh5Subconditions{
            {Preim7Cond, Rsa8Cond, Ed9Cond}};
        auto thresh5 = std::make_unique<ThresholdSha256>(
            std::move(thresh5Subfulfillments), std::move(thresh5Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh3Subfulfillments;
        thresh3Subfulfillments.emplace_back(std::move(preim4));
        thresh3Subfulfillments.emplace_back(std::move(thresh5));
        std::vector<Condition> thresh3Subconditions{
            {Preim10Cond, Rsa11Cond, Ed12Cond}};
        auto thresh3 = std::make_unique<ThresholdSha256>(
            std::move(thresh3Subfulfillments), std::move(thresh3Subconditions));
        auto prefix2 = std::make_unique<PrefixSha256>(
            makeSlice(prefix2Prefix), prefix2MaxMsgLength, std::move(thresh3));
        auto prefix1 = std::make_unique<PrefixSha256>(
            makeSlice(prefix1Prefix), prefix1MaxMsgLength, std::move(prefix2));
        auto preim13 =
            std::make_unique<PreimageSha256>(makeSlice(preim13Preimage));
        auto rsa14 = std::make_unique<RsaSha256>(
            makeSlice(rsa14PublicKey), makeSlice(rsa14Sig));
        auto ed15 = std::make_unique<Ed25519>(ed15PublicKey, ed15Sig);
        std::vector<std::unique_ptr<Fulfillment>> thresh0Subfulfillments;
        thresh0Subfulfillments.emplace_back(std::move(prefix1));
        thresh0Subfulfillments.emplace_back(std::move(preim13));
        thresh0Subfulfillments.emplace_back(std::move(rsa14));
        thresh0Subfulfillments.emplace_back(std::move(ed15));
        std::vector<Condition> thresh0Subconditions{
            {Preim16Cond, Rsa17Cond, Ed18Cond, Prefix19Cond, Thresh31Cond}};
        ThresholdSha256 const thresh0(
            std::move(thresh0Subfulfillments), std::move(thresh0Subconditions));
        {
            auto const thresh0EncodedFulfillment =
                "\xa2\x82\x04\x92\xa0\x82\x03\xb9\xa0\x0b\x80\x09\x49\x20\x61"
                "\x6d\x20\x72\x6f\x6f\x74\xa1\x82\x01\x36\x80\x02\x50\x31\x81"
                "\x01\x0e\xa2\x82\x01\x2b\xa1\x82\x01\x27\x80\x02\x50\x32\x81"
                "\x01\x0e\xa2\x82\x01\x1c\xa2\x82\x01\x18\xa0\x81\x9a\xa0\x0b"
                "\x80\x09\x49\x20\x61\x6d\x20\x72\x6f\x6f\x74\xa2\x81\x8a\xa0"
                "\x0d\xa0\x0b\x80\x09\x49\x20\x61\x6d\x20\x72\x6f\x6f\x74\xa1"
                "\x79\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8"
                "\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc"
                "\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa3\x27\x80\x20\xd1"
                "\xb5\x1d\x35\x99\x9d\xb4\xc1\xaa\x81\x4d\xd7\x0e\xa9\x2a\x20"
                "\x7f\xe5\x5c\x75\xe8\x57\x8b\xbf\xe8\xd7\x1c\x7e\xb2\xbc\x91"
                "\x16\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x92\xfa\xfc\xc6\x2f"
                "\xe2\x8d\x8d\x25\x7c\xd4\x46\xab\xea\x82\xd0\x3f\x36\xbe\x1d"
                "\x11\x2b\xa0\xfe\xfe\xd4\x00\xd5\x7d\x9b\xf6\xc9\x81\x03\x02"
                "\x00\x00\xa1\x79\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75"
                "\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c"
                "\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa3\x27"
                "\x80\x20\xaf\x93\xfd\x22\x45\xc2\x08\xab\x43\xf7\x45\x56\x63"
                "\xec\xaf\x15\x33\xa0\x2a\xb4\x9e\x15\xb4\x6e\xda\x87\x35\xde"
                "\x09\x4b\x06\x31\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x55\xcc"
                "\xd1\xa2\x2c\x90\x8d\xe3\x2e\x42\xd4\xe0\x65\xb2\xf7\xda\xc0"
                "\x07\x1e\xd3\x23\x0f\xfe\x78\x13\xa2\x86\x61\xc4\x34\x28\x50"
                "\x81\x03\x02\x00\x00\xa3\x82\x02\x08\x80\x82\x01\x00\xbd\x63"
                "\x74\xd9\xc0\x3e\x0c\x57\x55\x99\x00\xf3\xa8\x03\xdc\x9a\x6c"
                "\x14\xfc\x83\x33\x63\x87\x35\x9c\xfe\xc3\x00\xb4\x8b\x03\xc7"
                "\x5f\x0a\xe2\x94\xaa\x3f\x76\x15\xb1\xb9\xf6\x5f\x0a\x87\x0c"
                "\x5c\x35\xbc\x2f\x0f\x04\xdd\x9d\x12\x8d\x94\xeb\x8b\x93\xb4"
                "\x4e\x96\x20\xb7\x17\xa0\x8e\xff\x9e\x1f\x43\xbf\xd6\x6a\x1e"
                "\xb6\x0d\x7f\x2c\x08\x67\xa5\xe7\xa3\xb6\xd2\x63\x6a\xf2\xeb"
                "\xd1\x21\x83\x8f\xa0\x25\x4a\xc6\xcb\x4e\x66\xc3\x5f\x37\xdf"
                "\x5c\x12\xb7\xb8\xfa\x7a\x57\x91\x9d\x55\xa6\x96\x91\xee\x94"
                "\xb0\xcc\x45\xd3\x76\x70\x6f\x12\xbd\x81\x9d\x08\x1b\x6d\x55"
                "\x3c\x19\x56\x9c\xcf\xc4\xb4\x63\x8a\x87\x35\x2b\x4c\xc6\xe1"
                "\x0d\x74\x31\xaa\xc6\x25\x0d\x90\x55\x14\xf1\x73\x09\x93\xba"
                "\xc6\xda\x52\x7f\xc2\xdd\x9d\xb2\x4f\x92\x43\xa6\xc9\x2c\x22"
                "\xc4\x5a\x22\xc2\x56\xac\xfa\x6a\x37\x6a\x0c\x22\x72\x5d\x30"
                "\x50\x4a\x6b\x93\xab\xcf\x69\x5a\x09\xd2\x5a\x87\x31\x80\xa7"
                "\x5b\xe4\x34\x42\x13\x44\x1d\xe6\xf9\x27\x21\xa7\x03\x74\x64"
                "\x18\xfa\xd0\x68\x28\x73\x37\x3c\xf6\x63\x10\x56\xcc\x25\x08"
                "\xb9\xad\xc8\x25\x64\xd1\x9c\x7c\xe7\x6c\xa6\x12\x2c\x7d\x81"
                "\x82\x01\x00\x39\x8e\xf9\xba\xaf\x52\x63\xf9\xe5\xd3\x6d\xa2"
                "\x73\x92\xea\x03\x62\xda\xd3\x7d\x11\xd0\x41\xc8\xe4\x25\x40"
                "\x52\x41\x5a\x1c\x5b\x6f\xaf\x81\x9c\x01\xf4\xd3\x21\xa1\x19"
                "\x92\x8c\x37\x8c\x6c\x46\x1f\xbf\xfe\xaf\x51\x1f\x83\x6f\x1b"
                "\xee\x72\x1a\x60\xaf\xbd\x68\x4b\xef\x0b\x1f\x2b\xb2\x12\xe5"
                "\x22\x42\x47\x32\xe7\x0a\x89\xae\xb8\x62\x60\x67\x37\xe4\x2a"
                "\x23\x1a\xff\xe4\x99\x62\x8b\x57\xcd\x86\x67\xe1\x75\x92\x27"
                "\xba\x6d\xad\x70\x61\x6c\xd0\xaa\xa7\x19\x56\x4c\x93\x5c\xa6"
                "\x23\x51\x60\x52\x9e\xb8\xe3\x2a\xa3\x15\xd7\x02\xae\xa0\x69"
                "\xb5\x4d\x3f\x74\x5f\xb9\x15\xf2\x29\x1f\x20\x6c\xe2\xac\x91"
                "\x22\xc3\xfd\xdf\xe3\x34\x3b\x72\x1e\x67\x5f\x31\x67\x40\xee"
                "\x4d\x70\x4c\x86\xda\xc9\x1d\xe3\xb1\x70\xb0\x76\xa7\x3d\x32"
                "\x5d\x94\x5c\xc1\x11\xd0\x06\x6c\x51\x88\xe4\xf7\x5e\x34\x07"
                "\x72\x97\x84\x28\x67\x39\xe7\x34\x49\x45\xc5\x43\x1c\x0c\xbf"
                "\x26\xba\x0f\x1a\xb5\x23\xeb\xad\x8b\x51\x7e\x99\xd2\xed\xe9"
                "\x3b\x66\xbb\x7c\xf7\x9b\x2b\x6a\xcf\xd1\xa0\x58\x21\xaf\xdc"
                "\xed\x34\xac\x78\x9a\x26\x09\x38\x2c\x37\xd4\x2f\x3f\x72\xc0"
                "\xe1\xf7\xb1\xdd\xa4\x64\x80\x20\x37\x86\xc1\x8d\x06\xf2\xe9"
                "\x58\x82\x95\xcd\xb6\x5d\x37\x28\xc9\x72\xa9\x41\x20\xdc\x78"
                "\x3d\xac\x24\x8c\xb0\x6f\x1e\x44\x22\xc3\x81\x40\xd8\x59\x56"
                "\xbd\x99\x5c\xdd\xcd\x82\x9b\xea\x14\x18\x09\x9a\x8c\x54\xff"
                "\xb3\xd4\xf3\xbf\xc1\x4b\x70\x2a\xc9\x69\x5d\x42\x8a\x34\x08"
                "\x74\x3a\xef\x8b\xd9\x2e\x7a\x0d\xb7\xdb\x68\xb3\xa8\xb8\x12"
                "\x3a\x11\x60\x20\xee\xd9\x1e\x4a\xb6\x33\x94\x27\x4e\x83\xf0"
                "\x0e\xa1\x81\xd2\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75"
                "\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c"
                "\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa1\x2b"
                "\x80\x20\x6e\xe3\x4b\xf2\xcd\x87\x07\x26\x55\xa5\xf3\x3e\x06"
                "\x68\xfb\x5e\x8b\x28\x0c\xe1\x28\x61\x5a\xc3\xab\xfe\xf3\x5a"
                "\xf4\x53\x6d\xd8\x81\x03\x04\x2c\x2a\x82\x02\x03\xb8\xa2\x2a"
                "\x80\x20\x57\xb7\x93\x0b\xb8\xe2\x21\xe9\x42\x8c\x85\x8f\x27"
                "\x2d\x4c\xa0\x85\xa0\x40\x6c\x4c\xed\x25\x22\x0d\xef\x3f\x73"
                "\xd9\xcf\x02\xc9\x81\x02\x04\x09\x82\x02\x07\x80\xa3\x27\x80"
                "\x20\x78\xe3\x04\xf4\xa6\x16\x68\x4c\x1b\xcf\x3a\x32\xff\xbc"
                "\x75\x1a\xe6\x08\x9b\xff\xba\x79\xf4\x39\x7a\xfc\xe1\x6f\xff"
                "\x3e\xb3\x75\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x0d\xea\xc5"
                "\x16\x5c\x62\xb8\xd1\xa4\xe7\x5a\x07\x58\x00\x79\x51\x88\x21"
                "\xe9\x4d\xba\x73\x7b\xad\x60\x9c\x5c\x26\x00\x2e\xd1\x51\x81"
                "\x03\x02\x00\x00"s;
            auto const thresh0EncodedCondition =
                "\xa2\x2b\x80\x20\xda\x5f\x8c\x31\x63\x83\x2c\xce\x18\x89\xca"
                "\xfa\x1f\xc8\x66\x70\xc8\x28\xab\x04\x1d\xa1\x86\x12\x2a\xff"
                "\xc8\xeb\xbf\x85\x39\xf5\x81\x03\x0c\x7c\x4a\x82\x02\x03\xd8"s;
            auto const thresh0EncodedFingerprint =
                "\x30\x82\x01\x7f\x80\x01\x04\xa1\x82\x01\x78\xa0\x25\x80\x20"
                "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
                "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
                "\xeb\x4e\x81\x01\x09\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1"
                "\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21"
                "\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa1"
                "\x2b\x80\x20\x6e\xe3\x4b\xf2\xcd\x87\x07\x26\x55\xa5\xf3\x3e"
                "\x06\x68\xfb\x5e\x8b\x28\x0c\xe1\x28\x61\x5a\xc3\xab\xfe\xf3"
                "\x5a\xf4\x53\x6d\xd8\x81\x03\x04\x2c\x2a\x82\x02\x03\xb8\xa1"
                "\x2b\x80\x20\xe3\xfb\x07\xd8\xb1\xbd\x9d\xd2\x35\x06\x8c\xa1"
                "\xde\xbb\xe3\x30\x50\xf6\x34\xcf\x93\x10\x02\x43\x32\x52\x38"
                "\x39\xfc\x51\xe9\x05\x81\x03\x04\x2c\x20\x82\x02\x03\xb8\xa2"
                "\x2a\x80\x20\x57\xb7\x93\x0b\xb8\xe2\x21\xe9\x42\x8c\x85\x8f"
                "\x27\x2d\x4c\xa0\x85\xa0\x40\x6c\x4c\xed\x25\x22\x0d\xef\x3f"
                "\x73\xd9\xcf\x02\xc9\x81\x02\x04\x09\x82\x02\x07\x80\xa3\x27"
                "\x80\x20\x32\xec\xaa\x5e\xa6\x88\xdc\xe4\x81\x0f\x93\x0f\x65"
                "\xde\x87\xfd\x54\x8c\x79\x04\x81\xe3\x63\x3f\x3d\x08\xa1\xba"
                "\x0a\x24\x2b\x46\x81\x03\x01\x00\x00\xa3\x27\x80\x20\x78\xe3"
                "\x04\xf4\xa6\x16\x68\x4c\x1b\xcf\x3a\x32\xff\xbc\x75\x1a\xe6"
                "\x08\x9b\xff\xba\x79\xf4\x39\x7a\xfc\xe1\x6f\xff\x3e\xb3\x75"
                "\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x0d\xea\xc5\x16\x5c\x62"
                "\xb8\xd1\xa4\xe7\x5a\x07\x58\x00\x79\x51\x88\x21\xe9\x4d\xba"
                "\x73\x7b\xad\x60\x9c\x5c\x26\x00\x2e\xd1\x51\x81\x03\x02\x00"
                "\x00\xa4\x27\x80\x20\x40\xd1\x9a\x63\x62\x9b\xc0\x76\xab\x11"
                "\x73\x42\x86\xb3\x20\x9d\x23\xe8\x5e\xee\xb9\x82\x5d\x93\xe3"
                "\xac\xad\xa0\x40\x41\x51\x1b\x81\x03\x02\x00\x00"s;
            check(
                &thresh0,
                thresh0Msg,
                thresh0EncodedFulfillment,
                thresh0EncodedCondition,
                thresh0EncodedFingerprint);
        }
    }

    void
    testThresh14()
    {
        testcase("Thresh14");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * thresh0
        // ** Preim40Cond
        // ** Rsa41Cond
        // ** Ed42Cond
        // ** prefix1
        // *** prefix2
        // **** thresh3
        // ***** Preim10Cond
        // ***** Rsa11Cond
        // ***** Ed12Cond
        // ***** Thresh13Cond
        // ***** preim4
        // ***** thresh5
        // ****** Preim7Cond
        // ****** Rsa8Cond
        // ****** Ed9Cond
        // ****** preim6
        // ** prefix18
        // *** prefix19
        // **** thresh20
        // ***** Preim27Cond
        // ***** Rsa28Cond
        // ***** Ed29Cond
        // ***** Thresh30Cond
        // ***** preim21
        // ***** thresh22
        // ****** Preim24Cond
        // ****** Rsa25Cond
        // ****** Ed26Cond
        // ****** preim23
        // ** thresh35
        // *** Preim37Cond
        // *** Rsa38Cond
        // *** Ed39Cond
        // *** preim36

        auto const preim4Preimage = "I am root"s;
        auto const preim4Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        auto const preim6Preimage = "I am root"s;
        auto const preim6Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        auto const thresh5Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim7CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim7Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim7CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa8CondConditionFingerprint =
            "\xd1\xb5\x1d\x35\x99\x9d\xb4\xc1\xaa\x81\x4d\xd7\x0e\xa9\x2a"
            "\x20\x7f\xe5\x5c\x75\xe8\x57\x8b\xbf\xe8\xd7\x1c\x7e\xb2\xbc"
            "\x91\x16"s;
        Condition const Rsa8Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa8CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed9CondConditionFingerprint =
            "\x92\xfa\xfc\xc6\x2f\xe2\x8d\x8d\x25\x7c\xd4\x46\xab\xea\x82"
            "\xd0\x3f\x36\xbe\x1d\x11\x2b\xa0\xfe\xfe\xd4\x00\xd5\x7d\x9b"
            "\xf6\xc9"s;
        Condition const Ed9Cond{Type::ed25519Sha256,
                                131072,
                                makeSlice(Ed9CondConditionFingerprint),
                                std::bitset<5>{0}};
        auto const thresh3Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim10CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim10Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim10CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa11CondConditionFingerprint =
            "\xaf\x93\xfd\x22\x45\xc2\x08\xab\x43\xf7\x45\x56\x63\xec\xaf"
            "\x15\x33\xa0\x2a\xb4\x9e\x15\xb4\x6e\xda\x87\x35\xde\x09\x4b"
            "\x06\x31"s;
        Condition const Rsa11Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa11CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed12CondConditionFingerprint =
            "\x55\xcc\xd1\xa2\x2c\x90\x8d\xe3\x2e\x42\xd4\xe0\x65\xb2\xf7"
            "\xda\xc0\x07\x1e\xd3\x23\x0f\xfe\x78\x13\xa2\x86\x61\xc4\x34"
            "\x28\x50"s;
        Condition const Ed12Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed12CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Thresh13CondConditionFingerprint =
            "\xec\x3a\xe5\x7c\x51\x58\x3c\xcd\x1d\x5b\x3c\xcf\xda\x64\xb0"
            "\x06\x2a\x81\xf9\xcf\x46\x7d\x7b\x48\x5e\xa9\x27\x61\x86\x59"
            "\x79\x44"s;
        Condition const Thresh13Cond{
            Type::thresholdSha256,
            135168,
            makeSlice(Thresh13CondConditionFingerprint),
            std::bitset<5>{25}};
        auto const prefix2Prefix = "P2"s;
        auto const prefix2Msg = "P1abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix2MaxMsgLength = 14;
        auto const prefix1Prefix = "P1"s;
        auto const prefix1Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix1MaxMsgLength = 14;
        auto const preim21Preimage = "I am root"s;
        auto const preim21Msg = "P19P18abcdefghijklmnopqrstuvwxyz"s;
        auto const preim23Preimage = "I am root"s;
        auto const preim23Msg = "P19P18abcdefghijklmnopqrstuvwxyz"s;
        auto const thresh22Msg = "P19P18abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim24CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim24Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim24CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa25CondConditionFingerprint =
            "\xb2\x7f\x94\xe3\xdf\x0c\x9a\x71\x3a\xd2\xeb\x71\x91\x72\x40"
            "\xb9\xcb\xb7\xac\xbc\x77\x0a\x08\x85\x07\xa3\x85\x4e\x7e\xc9"
            "\x50\x96"s;
        Condition const Rsa25Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa25CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed26CondConditionFingerprint =
            "\xd6\x2f\x07\xbd\x56\xfe\x9a\x02\x8c\x98\x1a\x72\x17\xb6\x26"
            "\x90\x51\xaf\xe4\xea\x51\x64\xe0\x58\x3e\x85\xc9\x29\x22\x94"
            "\xa1\xbf"s;
        Condition const Ed26Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed26CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const thresh20Msg = "P19P18abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim27CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim27Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim27CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa28CondConditionFingerprint =
            "\x58\xac\x94\x55\x27\x79\x7a\x0c\xac\x84\x2d\x5c\x13\x32\xee"
            "\x84\x25\xb8\xb8\xec\x25\x0d\x40\xee\xc0\xd4\x79\x18\x3f\xc6"
            "\xbc\xd7"s;
        Condition const Rsa28Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa28CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed29CondConditionFingerprint =
            "\xc5\x39\xb2\xc7\xc4\x92\x8a\x29\xf3\x72\xb4\x6c\xa5\x0d\x8c"
            "\xbe\x43\xda\xc9\xac\x6c\x26\x7c\x44\xb9\x3f\xee\x40\xcc\x8e"
            "\x41\x3c"s;
        Condition const Ed29Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed29CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Thresh30CondConditionFingerprint =
            "\x9c\x63\x06\xe7\x17\xa0\x5e\xbd\xd1\x8e\x64\xf5\xd5\xe7\x4e"
            "\x11\x4e\xe4\x25\x56\xae\xdc\x59\x76\xd1\x1e\x33\x6d\x2a\xa9"
            "\x63\xdf"s;
        Condition const Thresh30Cond{
            Type::thresholdSha256,
            135168,
            makeSlice(Thresh30CondConditionFingerprint),
            std::bitset<5>{25}};
        auto const prefix19Prefix = "P19"s;
        auto const prefix19Msg = "P18abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix19MaxMsgLength = 14;
        auto const prefix18Prefix = "P18"s;
        auto const prefix18Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix18MaxMsgLength = 14;
        auto const preim36Preimage = "I am root"s;
        auto const preim36Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const thresh35Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim37CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim37Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim37CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa38CondConditionFingerprint =
            "\x13\xb3\xe0\x2d\xea\x58\x68\x9a\xa7\x10\x7e\xb2\x1a\x12\x55"
            "\x79\xd6\xfe\xde\x57\x0f\x6c\x6b\xde\xd7\xfd\x12\xeb\xa6\x1d"
            "\xad\x43"s;
        Condition const Rsa38Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa38CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed39CondConditionFingerprint =
            "\xbe\x9b\x3b\xe3\x70\xfc\xc2\x29\xaa\xe9\x72\x91\x42\x6b\xd7"
            "\x1f\x1a\x25\x7d\xde\xa8\x39\xfb\xce\x5c\xaa\x63\xde\xfd\x1d"
            "\x23\xcf"s;
        Condition const Ed39Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed39CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const thresh0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim40CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim40Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim40CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa41CondConditionFingerprint =
            "\xf3\xe3\x0d\x35\x45\x3f\x9f\x57\x07\x0b\x13\x04\x4d\x62\x56"
            "\x30\x18\x34\x88\x02\x22\xa6\x94\x6e\xba\x97\xa4\x4a\x64\x5d"
            "\x05\xd1"s;
        Condition const Rsa41Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa41CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed42CondConditionFingerprint =
            "\xe3\x9a\x66\x70\xcd\x9b\x26\x4a\x79\xac\x64\xbe\x92\xbb\xfb"
            "\x70\x0b\xdc\x9c\xbd\x13\x61\xb7\x00\x22\xaa\x2f\xdc\x96\xc9"
            "\x45\x44"s;
        Condition const Ed42Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed42CondConditionFingerprint),
                                 std::bitset<5>{0}};

        auto preim4 =
            std::make_unique<PreimageSha256>(makeSlice(preim4Preimage));
        auto preim6 =
            std::make_unique<PreimageSha256>(makeSlice(preim6Preimage));
        std::vector<std::unique_ptr<Fulfillment>> thresh5Subfulfillments;
        thresh5Subfulfillments.emplace_back(std::move(preim6));
        std::vector<Condition> thresh5Subconditions{
            {Preim7Cond, Rsa8Cond, Ed9Cond}};
        auto thresh5 = std::make_unique<ThresholdSha256>(
            std::move(thresh5Subfulfillments), std::move(thresh5Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh3Subfulfillments;
        thresh3Subfulfillments.emplace_back(std::move(preim4));
        thresh3Subfulfillments.emplace_back(std::move(thresh5));
        std::vector<Condition> thresh3Subconditions{
            {Preim10Cond, Rsa11Cond, Ed12Cond, Thresh13Cond}};
        auto thresh3 = std::make_unique<ThresholdSha256>(
            std::move(thresh3Subfulfillments), std::move(thresh3Subconditions));
        auto prefix2 = std::make_unique<PrefixSha256>(
            makeSlice(prefix2Prefix), prefix2MaxMsgLength, std::move(thresh3));
        auto prefix1 = std::make_unique<PrefixSha256>(
            makeSlice(prefix1Prefix), prefix1MaxMsgLength, std::move(prefix2));
        auto preim21 =
            std::make_unique<PreimageSha256>(makeSlice(preim21Preimage));
        auto preim23 =
            std::make_unique<PreimageSha256>(makeSlice(preim23Preimage));
        std::vector<std::unique_ptr<Fulfillment>> thresh22Subfulfillments;
        thresh22Subfulfillments.emplace_back(std::move(preim23));
        std::vector<Condition> thresh22Subconditions{
            {Preim24Cond, Rsa25Cond, Ed26Cond}};
        auto thresh22 = std::make_unique<ThresholdSha256>(
            std::move(thresh22Subfulfillments),
            std::move(thresh22Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh20Subfulfillments;
        thresh20Subfulfillments.emplace_back(std::move(preim21));
        thresh20Subfulfillments.emplace_back(std::move(thresh22));
        std::vector<Condition> thresh20Subconditions{
            {Preim27Cond, Rsa28Cond, Ed29Cond, Thresh30Cond}};
        auto thresh20 = std::make_unique<ThresholdSha256>(
            std::move(thresh20Subfulfillments),
            std::move(thresh20Subconditions));
        auto prefix19 = std::make_unique<PrefixSha256>(
            makeSlice(prefix19Prefix),
            prefix19MaxMsgLength,
            std::move(thresh20));
        auto prefix18 = std::make_unique<PrefixSha256>(
            makeSlice(prefix18Prefix),
            prefix18MaxMsgLength,
            std::move(prefix19));
        auto preim36 =
            std::make_unique<PreimageSha256>(makeSlice(preim36Preimage));
        std::vector<std::unique_ptr<Fulfillment>> thresh35Subfulfillments;
        thresh35Subfulfillments.emplace_back(std::move(preim36));
        std::vector<Condition> thresh35Subconditions{
            {Preim37Cond, Rsa38Cond, Ed39Cond}};
        auto thresh35 = std::make_unique<ThresholdSha256>(
            std::move(thresh35Subfulfillments),
            std::move(thresh35Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh0Subfulfillments;
        thresh0Subfulfillments.emplace_back(std::move(prefix1));
        thresh0Subfulfillments.emplace_back(std::move(prefix18));
        thresh0Subfulfillments.emplace_back(std::move(thresh35));
        std::vector<Condition> thresh0Subconditions{
            {Preim40Cond, Rsa41Cond, Ed42Cond}};
        ThresholdSha256 const thresh0(
            std::move(thresh0Subfulfillments), std::move(thresh0Subconditions));
        {
            auto const thresh0EncodedFulfillment =
                "\xa2\x82\x03\xde\xa0\x82\x03\x5f\xa1\x82\x01\x64\x80\x02\x50"
                "\x31\x81\x01\x0e\xa2\x82\x01\x59\xa1\x82\x01\x55\x80\x02\x50"
                "\x32\x81\x01\x0e\xa2\x82\x01\x4a\xa2\x82\x01\x46\xa0\x81\x9a"
                "\xa0\x0b\x80\x09\x49\x20\x61\x6d\x20\x72\x6f\x6f\x74\xa2\x81"
                "\x8a\xa0\x0d\xa0\x0b\x80\x09\x49\x20\x61\x6d\x20\x72\x6f\x6f"
                "\x74\xa1\x79\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11"
                "\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2"
                "\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa3\x27\x80"
                "\x20\xd1\xb5\x1d\x35\x99\x9d\xb4\xc1\xaa\x81\x4d\xd7\x0e\xa9"
                "\x2a\x20\x7f\xe5\x5c\x75\xe8\x57\x8b\xbf\xe8\xd7\x1c\x7e\xb2"
                "\xbc\x91\x16\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x92\xfa\xfc"
                "\xc6\x2f\xe2\x8d\x8d\x25\x7c\xd4\x46\xab\xea\x82\xd0\x3f\x36"
                "\xbe\x1d\x11\x2b\xa0\xfe\xfe\xd4\x00\xd5\x7d\x9b\xf6\xc9\x81"
                "\x03\x02\x00\x00\xa1\x81\xa6\xa0\x25\x80\x20\x5d\xa0\x30\xef"
                "\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9"
                "\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01"
                "\x09\xa2\x2b\x80\x20\xec\x3a\xe5\x7c\x51\x58\x3c\xcd\x1d\x5b"
                "\x3c\xcf\xda\x64\xb0\x06\x2a\x81\xf9\xcf\x46\x7d\x7b\x48\x5e"
                "\xa9\x27\x61\x86\x59\x79\x44\x81\x03\x02\x10\x00\x82\x02\x03"
                "\x98\xa3\x27\x80\x20\xaf\x93\xfd\x22\x45\xc2\x08\xab\x43\xf7"
                "\x45\x56\x63\xec\xaf\x15\x33\xa0\x2a\xb4\x9e\x15\xb4\x6e\xda"
                "\x87\x35\xde\x09\x4b\x06\x31\x81\x03\x01\x00\x00\xa4\x27\x80"
                "\x20\x55\xcc\xd1\xa2\x2c\x90\x8d\xe3\x2e\x42\xd4\xe0\x65\xb2"
                "\xf7\xda\xc0\x07\x1e\xd3\x23\x0f\xfe\x78\x13\xa2\x86\x61\xc4"
                "\x34\x28\x50\x81\x03\x02\x00\x00\xa1\x82\x01\x66\x80\x03\x50"
                "\x31\x38\x81\x01\x0e\xa2\x82\x01\x5a\xa1\x82\x01\x56\x80\x03"
                "\x50\x31\x39\x81\x01\x0e\xa2\x82\x01\x4a\xa2\x82\x01\x46\xa0"
                "\x81\x9a\xa0\x0b\x80\x09\x49\x20\x61\x6d\x20\x72\x6f\x6f\x74"
                "\xa2\x81\x8a\xa0\x0d\xa0\x0b\x80\x09\x49\x20\x61\x6d\x20\x72"
                "\x6f\x6f\x74\xa1\x79\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1"
                "\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21"
                "\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa3"
                "\x27\x80\x20\xb2\x7f\x94\xe3\xdf\x0c\x9a\x71\x3a\xd2\xeb\x71"
                "\x91\x72\x40\xb9\xcb\xb7\xac\xbc\x77\x0a\x08\x85\x07\xa3\x85"
                "\x4e\x7e\xc9\x50\x96\x81\x03\x01\x00\x00\xa4\x27\x80\x20\xd6"
                "\x2f\x07\xbd\x56\xfe\x9a\x02\x8c\x98\x1a\x72\x17\xb6\x26\x90"
                "\x51\xaf\xe4\xea\x51\x64\xe0\x58\x3e\x85\xc9\x29\x22\x94\xa1"
                "\xbf\x81\x03\x02\x00\x00\xa1\x81\xa6\xa0\x25\x80\x20\x5d\xa0"
                "\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1"
                "\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e"
                "\x81\x01\x09\xa2\x2b\x80\x20\x9c\x63\x06\xe7\x17\xa0\x5e\xbd"
                "\xd1\x8e\x64\xf5\xd5\xe7\x4e\x11\x4e\xe4\x25\x56\xae\xdc\x59"
                "\x76\xd1\x1e\x33\x6d\x2a\xa9\x63\xdf\x81\x03\x02\x10\x00\x82"
                "\x02\x03\x98\xa3\x27\x80\x20\x58\xac\x94\x55\x27\x79\x7a\x0c"
                "\xac\x84\x2d\x5c\x13\x32\xee\x84\x25\xb8\xb8\xec\x25\x0d\x40"
                "\xee\xc0\xd4\x79\x18\x3f\xc6\xbc\xd7\x81\x03\x01\x00\x00\xa4"
                "\x27\x80\x20\xc5\x39\xb2\xc7\xc4\x92\x8a\x29\xf3\x72\xb4\x6c"
                "\xa5\x0d\x8c\xbe\x43\xda\xc9\xac\x6c\x26\x7c\x44\xb9\x3f\xee"
                "\x40\xcc\x8e\x41\x3c\x81\x03\x02\x00\x00\xa2\x81\x8a\xa0\x0d"
                "\xa0\x0b\x80\x09\x49\x20\x61\x6d\x20\x72\x6f\x6f\x74\xa1\x79"
                "\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f"
                "\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd"
                "\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa3\x27\x80\x20\x13\xb3"
                "\xe0\x2d\xea\x58\x68\x9a\xa7\x10\x7e\xb2\x1a\x12\x55\x79\xd6"
                "\xfe\xde\x57\x0f\x6c\x6b\xde\xd7\xfd\x12\xeb\xa6\x1d\xad\x43"
                "\x81\x03\x01\x00\x00\xa4\x27\x80\x20\xbe\x9b\x3b\xe3\x70\xfc"
                "\xc2\x29\xaa\xe9\x72\x91\x42\x6b\xd7\x1f\x1a\x25\x7d\xde\xa8"
                "\x39\xfb\xce\x5c\xaa\x63\xde\xfd\x1d\x23\xcf\x81\x03\x02\x00"
                "\x00\xa1\x79\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11"
                "\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2"
                "\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa3\x27\x80"
                "\x20\xf3\xe3\x0d\x35\x45\x3f\x9f\x57\x07\x0b\x13\x04\x4d\x62"
                "\x56\x30\x18\x34\x88\x02\x22\xa6\x94\x6e\xba\x97\xa4\x4a\x64"
                "\x5d\x05\xd1\x81\x03\x01\x00\x00\xa4\x27\x80\x20\xe3\x9a\x66"
                "\x70\xcd\x9b\x26\x4a\x79\xac\x64\xbe\x92\xbb\xfb\x70\x0b\xdc"
                "\x9c\xbd\x13\x61\xb7\x00\x22\xaa\x2f\xdc\x96\xc9\x45\x44\x81"
                "\x03\x02\x00\x00"s;
            auto const thresh0EncodedCondition =
                "\xa2\x2b\x80\x20\x35\x07\x34\x03\x72\x85\x1b\x25\xcd\x7b\xdf"
                "\xb5\x20\x68\x65\x3c\x9e\x5d\x3a\xab\x93\x6a\x20\x1a\xe6\xb9"
                "\x5a\x8f\xe0\x9f\x39\x59\x81\x03\x0a\xa8\x42\x82\x02\x03\xd8"s;
            auto const thresh0EncodedFingerprint =
                "\x30\x82\x01\x07\x80\x01\x03\xa1\x82\x01\x00\xa0\x25\x80\x20"
                "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
                "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
                "\xeb\x4e\x81\x01\x09\xa1\x2b\x80\x20\x70\x4c\x06\x9f\x18\x5c"
                "\x29\xaa\xd7\xef\x05\xef\x85\xb8\x3f\x38\xde\x5e\x9e\x0b\xe8"
                "\xd6\x9b\xe0\xc4\x5b\x37\x03\xc1\xb9\xe8\x10\x81\x03\x04\x40"
                "\x22\x82\x02\x03\xb8\xa1\x2b\x80\x20\xae\xaf\x94\x1e\xca\xbf"
                "\xd1\xba\x34\x24\x8b\xea\x22\xe7\x06\x23\xf1\x89\x7b\x66\x3b"
                "\xfc\xc1\xf8\x59\xc5\xfb\x09\xe7\xbc\xfc\xd8\x81\x03\x04\x40"
                "\x20\x82\x02\x03\xb8\xa2\x2b\x80\x20\x55\xdc\x4e\xc4\xec\xa1"
                "\x66\x88\x2d\x34\x87\xd0\x6a\xd0\xd8\x92\xc4\x9d\x8c\x5d\xd4"
                "\xef\x54\x33\x28\x14\x0d\x73\x71\x7f\x6b\x1f\x81\x03\x02\x10"
                "\x00\x82\x02\x03\x98\xa3\x27\x80\x20\xf3\xe3\x0d\x35\x45\x3f"
                "\x9f\x57\x07\x0b\x13\x04\x4d\x62\x56\x30\x18\x34\x88\x02\x22"
                "\xa6\x94\x6e\xba\x97\xa4\x4a\x64\x5d\x05\xd1\x81\x03\x01\x00"
                "\x00\xa4\x27\x80\x20\xe3\x9a\x66\x70\xcd\x9b\x26\x4a\x79\xac"
                "\x64\xbe\x92\xbb\xfb\x70\x0b\xdc\x9c\xbd\x13\x61\xb7\x00\x22"
                "\xaa\x2f\xdc\x96\xc9\x45\x44\x81\x03\x02\x00\x00"s;
            check(
                &thresh0,
                thresh0Msg,
                thresh0EncodedFulfillment,
                thresh0EncodedCondition,
                thresh0EncodedFingerprint);
        }
    }

    void
    testThresh15()
    {
        testcase("Thresh15");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * thresh0
        // ** Preim21Cond
        // ** Rsa22Cond
        // ** Ed23Cond
        // ** Prefix24Cond
        // ** Thresh41Cond
        // ** prefix1
        // *** prefix2
        // **** thresh3
        // ***** Preim10Cond
        // ***** Rsa11Cond
        // ***** Ed12Cond
        // ***** Thresh13Cond
        // ***** preim4
        // ***** thresh5
        // ****** Preim7Cond
        // ****** Rsa8Cond
        // ****** Ed9Cond
        // ****** preim6
        // ** preim18
        // ** rsa19
        // ** ed20

        auto const preim4Preimage = "I am root"s;
        auto const preim4Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        auto const preim6Preimage = "I am root"s;
        auto const preim6Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        auto const thresh5Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim7CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim7Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim7CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa8CondConditionFingerprint =
            "\xd1\xb5\x1d\x35\x99\x9d\xb4\xc1\xaa\x81\x4d\xd7\x0e\xa9\x2a"
            "\x20\x7f\xe5\x5c\x75\xe8\x57\x8b\xbf\xe8\xd7\x1c\x7e\xb2\xbc"
            "\x91\x16"s;
        Condition const Rsa8Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa8CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed9CondConditionFingerprint =
            "\x92\xfa\xfc\xc6\x2f\xe2\x8d\x8d\x25\x7c\xd4\x46\xab\xea\x82"
            "\xd0\x3f\x36\xbe\x1d\x11\x2b\xa0\xfe\xfe\xd4\x00\xd5\x7d\x9b"
            "\xf6\xc9"s;
        Condition const Ed9Cond{Type::ed25519Sha256,
                                131072,
                                makeSlice(Ed9CondConditionFingerprint),
                                std::bitset<5>{0}};
        auto const thresh3Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim10CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim10Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim10CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa11CondConditionFingerprint =
            "\xaf\x93\xfd\x22\x45\xc2\x08\xab\x43\xf7\x45\x56\x63\xec\xaf"
            "\x15\x33\xa0\x2a\xb4\x9e\x15\xb4\x6e\xda\x87\x35\xde\x09\x4b"
            "\x06\x31"s;
        Condition const Rsa11Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa11CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed12CondConditionFingerprint =
            "\x55\xcc\xd1\xa2\x2c\x90\x8d\xe3\x2e\x42\xd4\xe0\x65\xb2\xf7"
            "\xda\xc0\x07\x1e\xd3\x23\x0f\xfe\x78\x13\xa2\x86\x61\xc4\x34"
            "\x28\x50"s;
        Condition const Ed12Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed12CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Thresh13CondConditionFingerprint =
            "\xec\x3a\xe5\x7c\x51\x58\x3c\xcd\x1d\x5b\x3c\xcf\xda\x64\xb0"
            "\x06\x2a\x81\xf9\xcf\x46\x7d\x7b\x48\x5e\xa9\x27\x61\x86\x59"
            "\x79\x44"s;
        Condition const Thresh13Cond{
            Type::thresholdSha256,
            135168,
            makeSlice(Thresh13CondConditionFingerprint),
            std::bitset<5>{25}};
        auto const prefix2Prefix = "P2"s;
        auto const prefix2Msg = "P1abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix2MaxMsgLength = 14;
        auto const prefix1Prefix = "P1"s;
        auto const prefix1Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix1MaxMsgLength = 14;
        auto const preim18Preimage = "I am root"s;
        auto const preim18Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const rsa19Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa19PublicKey{
            {0xc0, 0x81, 0x79, 0x3f, 0x26, 0x8f, 0xe8, 0x48, 0xf1, 0x9c, 0xd2,
             0x09, 0x7c, 0x96, 0x0d, 0x3c, 0xbb, 0x85, 0xdb, 0x1f, 0xab, 0xbe,
             0x97, 0x7d, 0xc0, 0x31, 0x07, 0xb0, 0x2e, 0xb9, 0x5c, 0x2c, 0xae,
             0x82, 0xf5, 0x3e, 0xb6, 0x91, 0xb8, 0x88, 0x2a, 0xa4, 0xa7, 0x81,
             0x97, 0xa5, 0x71, 0xad, 0x09, 0x4d, 0xfc, 0x25, 0x41, 0x3e, 0xe0,
             0xa3, 0xa6, 0x19, 0xba, 0x8f, 0x02, 0x41, 0x8d, 0x05, 0x51, 0xcd,
             0xf8, 0x22, 0xb3, 0x7a, 0x6e, 0x94, 0x7e, 0xaa, 0x58, 0xda, 0x02,
             0xae, 0x73, 0x00, 0x94, 0x1c, 0xb5, 0xb5, 0x26, 0x9f, 0xc5, 0x8b,
             0x04, 0xe0, 0xe0, 0x73, 0x96, 0x4b, 0xaf, 0x6d, 0x0a, 0xe4, 0x25,
             0x90, 0x2d, 0x13, 0x3c, 0xbe, 0x0e, 0x68, 0x7d, 0xfe, 0xa6, 0x12,
             0x6b, 0xb6, 0xec, 0xa0, 0xda, 0x2b, 0x22, 0x31, 0xe6, 0x05, 0x76,
             0xf5, 0x98, 0x8e, 0x76, 0x86, 0xbe, 0xc6, 0x07, 0x73, 0x52, 0x20,
             0x13, 0x8f, 0x93, 0x1f, 0xd9, 0x73, 0xfa, 0xb3, 0xed, 0x50, 0x1b,
             0xf7, 0x68, 0xf6, 0x60, 0xa3, 0x12, 0x73, 0x10, 0xda, 0x06, 0x70,
             0x69, 0xcb, 0xb5, 0x6c, 0x85, 0x29, 0xe8, 0x9e, 0x29, 0xb1, 0x4d,
             0x7e, 0x7e, 0xce, 0x15, 0xf5, 0x25, 0x55, 0xc5, 0x89, 0x7e, 0x34,
             0x48, 0x34, 0x43, 0x30, 0x2b, 0x6a, 0x8a, 0x6d, 0x1b, 0x55, 0x2a,
             0x2c, 0xf4, 0xcd, 0xc1, 0x72, 0x78, 0xda, 0x0d, 0x54, 0x32, 0x46,
             0x93, 0xd7, 0x96, 0xce, 0x33, 0x06, 0xe9, 0x7a, 0x7b, 0x6d, 0xe9,
             0x54, 0xe4, 0xbe, 0x56, 0x37, 0xa7, 0x7c, 0xc8, 0xba, 0x17, 0xb1,
             0xba, 0x76, 0xd7, 0x7f, 0xca, 0x7f, 0xfe, 0x60, 0x7d, 0x60, 0x27,
             0xd0, 0x80, 0x65, 0x74, 0xdc, 0xd6, 0xc8, 0x58, 0x4d, 0xcd, 0x8e,
             0xc9, 0x4e, 0xb2, 0x3e, 0x6e, 0x4f, 0xfa, 0x22, 0xfa, 0x9f, 0x3a,
             0x9f, 0x14, 0xeb}};
        std::array<std::uint8_t, 256> const rsa19Sig{
            {0x5a, 0x2a, 0x61, 0xf8, 0x51, 0xfb, 0xc1, 0x3c, 0x3c, 0x71, 0x74,
             0x0a, 0xaf, 0x3b, 0x48, 0x06, 0xdb, 0xa0, 0xf1, 0x4f, 0x79, 0xaa,
             0xe2, 0xe0, 0xc8, 0xb5, 0xb1, 0xa2, 0xb7, 0x47, 0x48, 0xce, 0x94,
             0x74, 0x59, 0xa4, 0xc9, 0xa8, 0x18, 0xd5, 0xd1, 0x1b, 0x09, 0x8b,
             0x46, 0xcd, 0x07, 0x66, 0x41, 0x7c, 0x06, 0x2c, 0x37, 0xf3, 0xaf,
             0x69, 0xa9, 0x72, 0xe3, 0xba, 0xe1, 0x85, 0x33, 0x44, 0x74, 0x1e,
             0x8f, 0xef, 0x54, 0x5f, 0xef, 0x71, 0x16, 0x2e, 0x0a, 0x54, 0x3c,
             0x57, 0xa3, 0x1e, 0x65, 0x55, 0xb8, 0x49, 0xb5, 0x6d, 0x46, 0x4d,
             0x1c, 0x57, 0xfd, 0x33, 0xa8, 0xf3, 0xb2, 0xed, 0x08, 0x44, 0x98,
             0x5e, 0x33, 0x48, 0xb3, 0xf2, 0x5a, 0xc5, 0x7e, 0xc2, 0x65, 0xd8,
             0x71, 0x99, 0x74, 0x6a, 0xf1, 0xe9, 0x8b, 0xe2, 0xe8, 0x3c, 0xc8,
             0x7c, 0x66, 0x62, 0x1b, 0x4d, 0x99, 0x2e, 0xa0, 0x38, 0xf1, 0x58,
             0x00, 0x9a, 0x94, 0x48, 0xb2, 0x8d, 0x09, 0xeb, 0x25, 0x8d, 0x64,
             0xf3, 0x31, 0xa5, 0x25, 0x15, 0x86, 0x35, 0xf2, 0xa6, 0xe1, 0x51,
             0x3f, 0x56, 0x91, 0x79, 0x5e, 0xaa, 0xcc, 0x1b, 0x91, 0x9e, 0x22,
             0xb8, 0xd3, 0x23, 0xae, 0x5a, 0xce, 0x81, 0x82, 0xd7, 0x56, 0x62,
             0x98, 0xeb, 0x73, 0x37, 0x96, 0x71, 0x51, 0x0c, 0x44, 0x77, 0xb7,
             0x99, 0x3f, 0x0c, 0x9c, 0x2a, 0x10, 0xaa, 0x09, 0x53, 0x49, 0x91,
             0x25, 0x43, 0xb8, 0x91, 0xe1, 0xfd, 0xcb, 0x63, 0xc3, 0x32, 0x4a,
             0x45, 0xd3, 0xea, 0x08, 0xad, 0x9d, 0xd8, 0x62, 0x30, 0xe6, 0xbe,
             0x3b, 0xd5, 0x43, 0x33, 0xe0, 0xc4, 0xb1, 0xb6, 0x48, 0x37, 0x45,
             0x3e, 0x5f, 0x96, 0xc8, 0xef, 0x55, 0x19, 0x65, 0xae, 0xc3, 0xd5,
             0xbf, 0x4d, 0xb7, 0x61, 0xf3, 0x3b, 0xd4, 0xe4, 0x4a, 0x49, 0x6a,
             0x51, 0x77, 0x70}};
        auto const ed20Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed20PublicKey{
            {0x63, 0x87, 0xe7, 0xfd, 0x5e, 0x93, 0x76, 0x3e, 0x74, 0x42, 0x8e,
             0xd5, 0xc9, 0x79, 0xa6, 0xa9, 0xc4, 0x3d, 0x61, 0x14, 0x7b, 0x49,
             0xf3, 0xda, 0x52, 0xc2, 0x74, 0x9b, 0x62, 0xae, 0x8c, 0x90}};
        std::array<std::uint8_t, 64> const ed20Sig{
            {0x4f, 0x9d, 0xaf, 0x7e, 0x00, 0x50, 0x3d, 0xdc, 0xb2, 0xd9, 0x56,
             0x79, 0x61, 0xb7, 0xcb, 0xe6, 0x2d, 0xf3, 0xc8, 0xce, 0x6f, 0x7a,
             0xde, 0x9a, 0x85, 0xf8, 0xc5, 0xc7, 0x93, 0x7d, 0xf8, 0xdc, 0xdb,
             0xbc, 0x12, 0x87, 0x0d, 0x42, 0x62, 0xc8, 0xc8, 0xd0, 0xbd, 0xb7,
             0xa9, 0x05, 0x0c, 0x57, 0x2a, 0xf5, 0x59, 0x83, 0x81, 0x69, 0xc8,
             0xbc, 0xec, 0x4b, 0xf8, 0xf6, 0xbd, 0xc7, 0x70, 0x0f}};
        std::array<std::uint8_t, 32> const ed20SigningKey{
            {0x15, 0xe5, 0xd2, 0xb8, 0x15, 0x1f, 0xe1, 0x89, 0x7e, 0x3f, 0x33,
             0x3b, 0x27, 0xed, 0x94, 0xb6, 0xe4, 0x47, 0x82, 0xa0, 0xa8, 0x40,
             0xb9, 0x4d, 0xa8, 0x65, 0xb8, 0x79, 0x2b, 0x0f, 0x1b, 0x4c}};
        (void)ed20SigningKey;
        auto const thresh0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim21CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim21Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim21CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa22CondConditionFingerprint =
            "\x1a\x59\xf0\xd9\x99\xe2\xac\x9a\xc7\x84\xc3\xe7\x21\x3d\x86"
            "\x3b\x18\xfd\x67\xc1\x70\x5f\x36\x60\xc3\x4d\xb6\x1c\x84\x53"
            "\x7e\xda"s;
        Condition const Rsa22Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa22CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed23CondConditionFingerprint =
            "\x1a\x18\x47\x1f\xd0\x23\xc4\x4d\x07\x5b\x1e\x43\xa6\x28\x54"
            "\xce\xec\x02\x4d\xc1\x00\x3c\x0c\x55\x02\xa3\xa3\x28\x38\x88"
            "\x5c\x84"s;
        Condition const Ed23Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed23CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Prefix24CondConditionFingerprint =
            "\xb6\xee\xb4\xa9\x2e\x86\x10\x03\xb7\xad\xd2\x2f\xe6\xf4\x01"
            "\x60\xa6\x5b\xa4\xa0\xab\xaa\xf5\x7b\x26\x54\xf4\x9b\xb2\x30"
            "\x6b\x46"s;
        Condition const Prefix24Cond{
            Type::prefixSha256,
            278570,
            makeSlice(Prefix24CondConditionFingerprint),
            std::bitset<5>{29}};
        auto const Thresh41CondConditionFingerprint =
            "\xce\xc3\xf7\x49\x6e\x0c\xa4\xf0\xc7\x5a\x8f\xd7\x84\xd2\x0d"
            "\x3d\x5a\xb7\xd3\x36\x36\x49\x21\x75\xc7\x3e\x99\x9c\x82\xa4"
            "\x49\x8a"s;
        Condition const Thresh41Cond{
            Type::thresholdSha256,
            135168,
            makeSlice(Thresh41CondConditionFingerprint),
            std::bitset<5>{25}};

        auto preim4 =
            std::make_unique<PreimageSha256>(makeSlice(preim4Preimage));
        auto preim6 =
            std::make_unique<PreimageSha256>(makeSlice(preim6Preimage));
        std::vector<std::unique_ptr<Fulfillment>> thresh5Subfulfillments;
        thresh5Subfulfillments.emplace_back(std::move(preim6));
        std::vector<Condition> thresh5Subconditions{
            {Preim7Cond, Rsa8Cond, Ed9Cond}};
        auto thresh5 = std::make_unique<ThresholdSha256>(
            std::move(thresh5Subfulfillments), std::move(thresh5Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh3Subfulfillments;
        thresh3Subfulfillments.emplace_back(std::move(preim4));
        thresh3Subfulfillments.emplace_back(std::move(thresh5));
        std::vector<Condition> thresh3Subconditions{
            {Preim10Cond, Rsa11Cond, Ed12Cond, Thresh13Cond}};
        auto thresh3 = std::make_unique<ThresholdSha256>(
            std::move(thresh3Subfulfillments), std::move(thresh3Subconditions));
        auto prefix2 = std::make_unique<PrefixSha256>(
            makeSlice(prefix2Prefix), prefix2MaxMsgLength, std::move(thresh3));
        auto prefix1 = std::make_unique<PrefixSha256>(
            makeSlice(prefix1Prefix), prefix1MaxMsgLength, std::move(prefix2));
        auto preim18 =
            std::make_unique<PreimageSha256>(makeSlice(preim18Preimage));
        auto rsa19 = std::make_unique<RsaSha256>(
            makeSlice(rsa19PublicKey), makeSlice(rsa19Sig));
        auto ed20 = std::make_unique<Ed25519>(ed20PublicKey, ed20Sig);
        std::vector<std::unique_ptr<Fulfillment>> thresh0Subfulfillments;
        thresh0Subfulfillments.emplace_back(std::move(prefix1));
        thresh0Subfulfillments.emplace_back(std::move(preim18));
        thresh0Subfulfillments.emplace_back(std::move(rsa19));
        thresh0Subfulfillments.emplace_back(std::move(ed20));
        std::vector<Condition> thresh0Subconditions{
            {Preim21Cond, Rsa22Cond, Ed23Cond, Prefix24Cond, Thresh41Cond}};
        ThresholdSha256 const thresh0(
            std::move(thresh0Subfulfillments), std::move(thresh0Subconditions));
        {
            auto const thresh0EncodedFulfillment =
                "\xa2\x82\x04\xc1\xa0\x82\x03\xe7\xa0\x0b\x80\x09\x49\x20\x61"
                "\x6d\x20\x72\x6f\x6f\x74\xa1\x82\x01\x64\x80\x02\x50\x31\x81"
                "\x01\x0e\xa2\x82\x01\x59\xa1\x82\x01\x55\x80\x02\x50\x32\x81"
                "\x01\x0e\xa2\x82\x01\x4a\xa2\x82\x01\x46\xa0\x81\x9a\xa0\x0b"
                "\x80\x09\x49\x20\x61\x6d\x20\x72\x6f\x6f\x74\xa2\x81\x8a\xa0"
                "\x0d\xa0\x0b\x80\x09\x49\x20\x61\x6d\x20\x72\x6f\x6f\x74\xa1"
                "\x79\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8"
                "\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc"
                "\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa3\x27\x80\x20\xd1"
                "\xb5\x1d\x35\x99\x9d\xb4\xc1\xaa\x81\x4d\xd7\x0e\xa9\x2a\x20"
                "\x7f\xe5\x5c\x75\xe8\x57\x8b\xbf\xe8\xd7\x1c\x7e\xb2\xbc\x91"
                "\x16\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x92\xfa\xfc\xc6\x2f"
                "\xe2\x8d\x8d\x25\x7c\xd4\x46\xab\xea\x82\xd0\x3f\x36\xbe\x1d"
                "\x11\x2b\xa0\xfe\xfe\xd4\x00\xd5\x7d\x9b\xf6\xc9\x81\x03\x02"
                "\x00\x00\xa1\x81\xa6\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1"
                "\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21"
                "\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa2"
                "\x2b\x80\x20\xec\x3a\xe5\x7c\x51\x58\x3c\xcd\x1d\x5b\x3c\xcf"
                "\xda\x64\xb0\x06\x2a\x81\xf9\xcf\x46\x7d\x7b\x48\x5e\xa9\x27"
                "\x61\x86\x59\x79\x44\x81\x03\x02\x10\x00\x82\x02\x03\x98\xa3"
                "\x27\x80\x20\xaf\x93\xfd\x22\x45\xc2\x08\xab\x43\xf7\x45\x56"
                "\x63\xec\xaf\x15\x33\xa0\x2a\xb4\x9e\x15\xb4\x6e\xda\x87\x35"
                "\xde\x09\x4b\x06\x31\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x55"
                "\xcc\xd1\xa2\x2c\x90\x8d\xe3\x2e\x42\xd4\xe0\x65\xb2\xf7\xda"
                "\xc0\x07\x1e\xd3\x23\x0f\xfe\x78\x13\xa2\x86\x61\xc4\x34\x28"
                "\x50\x81\x03\x02\x00\x00\xa3\x82\x02\x08\x80\x82\x01\x00\xc0"
                "\x81\x79\x3f\x26\x8f\xe8\x48\xf1\x9c\xd2\x09\x7c\x96\x0d\x3c"
                "\xbb\x85\xdb\x1f\xab\xbe\x97\x7d\xc0\x31\x07\xb0\x2e\xb9\x5c"
                "\x2c\xae\x82\xf5\x3e\xb6\x91\xb8\x88\x2a\xa4\xa7\x81\x97\xa5"
                "\x71\xad\x09\x4d\xfc\x25\x41\x3e\xe0\xa3\xa6\x19\xba\x8f\x02"
                "\x41\x8d\x05\x51\xcd\xf8\x22\xb3\x7a\x6e\x94\x7e\xaa\x58\xda"
                "\x02\xae\x73\x00\x94\x1c\xb5\xb5\x26\x9f\xc5\x8b\x04\xe0\xe0"
                "\x73\x96\x4b\xaf\x6d\x0a\xe4\x25\x90\x2d\x13\x3c\xbe\x0e\x68"
                "\x7d\xfe\xa6\x12\x6b\xb6\xec\xa0\xda\x2b\x22\x31\xe6\x05\x76"
                "\xf5\x98\x8e\x76\x86\xbe\xc6\x07\x73\x52\x20\x13\x8f\x93\x1f"
                "\xd9\x73\xfa\xb3\xed\x50\x1b\xf7\x68\xf6\x60\xa3\x12\x73\x10"
                "\xda\x06\x70\x69\xcb\xb5\x6c\x85\x29\xe8\x9e\x29\xb1\x4d\x7e"
                "\x7e\xce\x15\xf5\x25\x55\xc5\x89\x7e\x34\x48\x34\x43\x30\x2b"
                "\x6a\x8a\x6d\x1b\x55\x2a\x2c\xf4\xcd\xc1\x72\x78\xda\x0d\x54"
                "\x32\x46\x93\xd7\x96\xce\x33\x06\xe9\x7a\x7b\x6d\xe9\x54\xe4"
                "\xbe\x56\x37\xa7\x7c\xc8\xba\x17\xb1\xba\x76\xd7\x7f\xca\x7f"
                "\xfe\x60\x7d\x60\x27\xd0\x80\x65\x74\xdc\xd6\xc8\x58\x4d\xcd"
                "\x8e\xc9\x4e\xb2\x3e\x6e\x4f\xfa\x22\xfa\x9f\x3a\x9f\x14\xeb"
                "\x81\x82\x01\x00\x5a\x2a\x61\xf8\x51\xfb\xc1\x3c\x3c\x71\x74"
                "\x0a\xaf\x3b\x48\x06\xdb\xa0\xf1\x4f\x79\xaa\xe2\xe0\xc8\xb5"
                "\xb1\xa2\xb7\x47\x48\xce\x94\x74\x59\xa4\xc9\xa8\x18\xd5\xd1"
                "\x1b\x09\x8b\x46\xcd\x07\x66\x41\x7c\x06\x2c\x37\xf3\xaf\x69"
                "\xa9\x72\xe3\xba\xe1\x85\x33\x44\x74\x1e\x8f\xef\x54\x5f\xef"
                "\x71\x16\x2e\x0a\x54\x3c\x57\xa3\x1e\x65\x55\xb8\x49\xb5\x6d"
                "\x46\x4d\x1c\x57\xfd\x33\xa8\xf3\xb2\xed\x08\x44\x98\x5e\x33"
                "\x48\xb3\xf2\x5a\xc5\x7e\xc2\x65\xd8\x71\x99\x74\x6a\xf1\xe9"
                "\x8b\xe2\xe8\x3c\xc8\x7c\x66\x62\x1b\x4d\x99\x2e\xa0\x38\xf1"
                "\x58\x00\x9a\x94\x48\xb2\x8d\x09\xeb\x25\x8d\x64\xf3\x31\xa5"
                "\x25\x15\x86\x35\xf2\xa6\xe1\x51\x3f\x56\x91\x79\x5e\xaa\xcc"
                "\x1b\x91\x9e\x22\xb8\xd3\x23\xae\x5a\xce\x81\x82\xd7\x56\x62"
                "\x98\xeb\x73\x37\x96\x71\x51\x0c\x44\x77\xb7\x99\x3f\x0c\x9c"
                "\x2a\x10\xaa\x09\x53\x49\x91\x25\x43\xb8\x91\xe1\xfd\xcb\x63"
                "\xc3\x32\x4a\x45\xd3\xea\x08\xad\x9d\xd8\x62\x30\xe6\xbe\x3b"
                "\xd5\x43\x33\xe0\xc4\xb1\xb6\x48\x37\x45\x3e\x5f\x96\xc8\xef"
                "\x55\x19\x65\xae\xc3\xd5\xbf\x4d\xb7\x61\xf3\x3b\xd4\xe4\x4a"
                "\x49\x6a\x51\x77\x70\xa4\x64\x80\x20\x63\x87\xe7\xfd\x5e\x93"
                "\x76\x3e\x74\x42\x8e\xd5\xc9\x79\xa6\xa9\xc4\x3d\x61\x14\x7b"
                "\x49\xf3\xda\x52\xc2\x74\x9b\x62\xae\x8c\x90\x81\x40\x4f\x9d"
                "\xaf\x7e\x00\x50\x3d\xdc\xb2\xd9\x56\x79\x61\xb7\xcb\xe6\x2d"
                "\xf3\xc8\xce\x6f\x7a\xde\x9a\x85\xf8\xc5\xc7\x93\x7d\xf8\xdc"
                "\xdb\xbc\x12\x87\x0d\x42\x62\xc8\xc8\xd0\xbd\xb7\xa9\x05\x0c"
                "\x57\x2a\xf5\x59\x83\x81\x69\xc8\xbc\xec\x4b\xf8\xf6\xbd\xc7"
                "\x70\x0f\xa1\x81\xd3\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1"
                "\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21"
                "\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa1"
                "\x2b\x80\x20\xb6\xee\xb4\xa9\x2e\x86\x10\x03\xb7\xad\xd2\x2f"
                "\xe6\xf4\x01\x60\xa6\x5b\xa4\xa0\xab\xaa\xf5\x7b\x26\x54\xf4"
                "\x9b\xb2\x30\x6b\x46\x81\x03\x04\x40\x2a\x82\x02\x03\xb8\xa2"
                "\x2b\x80\x20\xce\xc3\xf7\x49\x6e\x0c\xa4\xf0\xc7\x5a\x8f\xd7"
                "\x84\xd2\x0d\x3d\x5a\xb7\xd3\x36\x36\x49\x21\x75\xc7\x3e\x99"
                "\x9c\x82\xa4\x49\x8a\x81\x03\x02\x10\x00\x82\x02\x03\x98\xa3"
                "\x27\x80\x20\x1a\x59\xf0\xd9\x99\xe2\xac\x9a\xc7\x84\xc3\xe7"
                "\x21\x3d\x86\x3b\x18\xfd\x67\xc1\x70\x5f\x36\x60\xc3\x4d\xb6"
                "\x1c\x84\x53\x7e\xda\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x1a"
                "\x18\x47\x1f\xd0\x23\xc4\x4d\x07\x5b\x1e\x43\xa6\x28\x54\xce"
                "\xec\x02\x4d\xc1\x00\x3c\x0c\x55\x02\xa3\xa3\x28\x38\x88\x5c"
                "\x84\x81\x03\x02\x00\x00"s;
            auto const thresh0EncodedCondition =
                "\xa2\x2b\x80\x20\x2c\xa0\x05\x73\x62\xbd\xef\x73\x0e\x14\xb1"
                "\xd2\x2f\xae\x26\x55\xa1\xad\xe6\x29\x8a\xc2\x3e\xfd\x9f\x63"
                "\x9f\x08\xaa\x44\x52\x3b\x81\x03\x0c\xb4\x4a\x82\x02\x03\xd8"s;
            auto const thresh0EncodedFingerprint =
                "\x30\x82\x01\x80\x80\x01\x04\xa1\x82\x01\x79\xa0\x25\x80\x20"
                "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
                "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
                "\xeb\x4e\x81\x01\x09\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1"
                "\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21"
                "\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa1"
                "\x2b\x80\x20\xae\xaf\x94\x1e\xca\xbf\xd1\xba\x34\x24\x8b\xea"
                "\x22\xe7\x06\x23\xf1\x89\x7b\x66\x3b\xfc\xc1\xf8\x59\xc5\xfb"
                "\x09\xe7\xbc\xfc\xd8\x81\x03\x04\x40\x20\x82\x02\x03\xb8\xa1"
                "\x2b\x80\x20\xb6\xee\xb4\xa9\x2e\x86\x10\x03\xb7\xad\xd2\x2f"
                "\xe6\xf4\x01\x60\xa6\x5b\xa4\xa0\xab\xaa\xf5\x7b\x26\x54\xf4"
                "\x9b\xb2\x30\x6b\x46\x81\x03\x04\x40\x2a\x82\x02\x03\xb8\xa2"
                "\x2b\x80\x20\xce\xc3\xf7\x49\x6e\x0c\xa4\xf0\xc7\x5a\x8f\xd7"
                "\x84\xd2\x0d\x3d\x5a\xb7\xd3\x36\x36\x49\x21\x75\xc7\x3e\x99"
                "\x9c\x82\xa4\x49\x8a\x81\x03\x02\x10\x00\x82\x02\x03\x98\xa3"
                "\x27\x80\x20\x19\x8c\xcc\x4c\x02\x17\xf3\xb7\xc0\x65\x68\xae"
                "\xf6\xd8\x1a\x44\xd5\x39\x52\x93\x1c\xb2\x4f\x8f\xb3\x6f\x21"
                "\xfc\x18\x2c\x58\x10\x81\x03\x01\x00\x00\xa3\x27\x80\x20\x1a"
                "\x59\xf0\xd9\x99\xe2\xac\x9a\xc7\x84\xc3\xe7\x21\x3d\x86\x3b"
                "\x18\xfd\x67\xc1\x70\x5f\x36\x60\xc3\x4d\xb6\x1c\x84\x53\x7e"
                "\xda\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x1a\x18\x47\x1f\xd0"
                "\x23\xc4\x4d\x07\x5b\x1e\x43\xa6\x28\x54\xce\xec\x02\x4d\xc1"
                "\x00\x3c\x0c\x55\x02\xa3\xa3\x28\x38\x88\x5c\x84\x81\x03\x02"
                "\x00\x00\xa4\x27\x80\x20\xa1\xa0\xd1\xf4\xea\x8d\x9a\x14\x25"
                "\xca\x52\x3a\x77\x7e\xf4\x0d\x86\x56\xc7\x22\x12\xd3\xa3\xc2"
                "\x32\xa3\x2b\x80\x96\xf3\xd4\x23\x81\x03\x02\x00\x00"s;
            check(
                &thresh0,
                thresh0Msg,
                thresh0EncodedFulfillment,
                thresh0EncodedCondition,
                thresh0EncodedFingerprint);
        }
    }

    void
    testThresh16()
    {
        testcase("Thresh16");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * thresh0
        // ** Preim16Cond
        // ** Rsa17Cond
        // ** Ed18Cond
        // ** thresh1
        // *** preim2
        // ** prefix3
        // *** prefix4
        // **** preim5
        // ** thresh6
        // *** Preim13Cond
        // *** Rsa14Cond
        // *** Ed15Cond
        // *** preim7
        // *** thresh8
        // **** Preim10Cond
        // **** Rsa11Cond
        // **** Ed12Cond
        // **** preim9

        auto const preim2Preimage = "I am root"s;
        auto const preim2Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const thresh1Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const preim5Preimage = "I am root"s;
        auto const preim5Msg = "P4P3abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix4Prefix = "P4"s;
        auto const prefix4Msg = "P3abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix4MaxMsgLength = 14;
        auto const prefix3Prefix = "P3"s;
        auto const prefix3Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix3MaxMsgLength = 14;
        auto const preim7Preimage = "I am root"s;
        auto const preim7Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const preim9Preimage = "I am root"s;
        auto const preim9Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const thresh8Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim10CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim10Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim10CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa11CondConditionFingerprint =
            "\xaf\x93\xfd\x22\x45\xc2\x08\xab\x43\xf7\x45\x56\x63\xec\xaf"
            "\x15\x33\xa0\x2a\xb4\x9e\x15\xb4\x6e\xda\x87\x35\xde\x09\x4b"
            "\x06\x31"s;
        Condition const Rsa11Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa11CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed12CondConditionFingerprint =
            "\x55\xcc\xd1\xa2\x2c\x90\x8d\xe3\x2e\x42\xd4\xe0\x65\xb2\xf7"
            "\xda\xc0\x07\x1e\xd3\x23\x0f\xfe\x78\x13\xa2\x86\x61\xc4\x34"
            "\x28\x50"s;
        Condition const Ed12Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed12CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const thresh6Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim13CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim13Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim13CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa14CondConditionFingerprint =
            "\x32\xec\xaa\x5e\xa6\x88\xdc\xe4\x81\x0f\x93\x0f\x65\xde\x87"
            "\xfd\x54\x8c\x79\x04\x81\xe3\x63\x3f\x3d\x08\xa1\xba\x0a\x24"
            "\x2b\x46"s;
        Condition const Rsa14Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa14CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed15CondConditionFingerprint =
            "\x40\xd1\x9a\x63\x62\x9b\xc0\x76\xab\x11\x73\x42\x86\xb3\x20"
            "\x9d\x23\xe8\x5e\xee\xb9\x82\x5d\x93\xe3\xac\xad\xa0\x40\x41"
            "\x51\x1b"s;
        Condition const Ed15Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed15CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const thresh0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim16CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim16Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim16CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa17CondConditionFingerprint =
            "\x78\xe3\x04\xf4\xa6\x16\x68\x4c\x1b\xcf\x3a\x32\xff\xbc\x75"
            "\x1a\xe6\x08\x9b\xff\xba\x79\xf4\x39\x7a\xfc\xe1\x6f\xff\x3e"
            "\xb3\x75"s;
        Condition const Rsa17Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa17CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed18CondConditionFingerprint =
            "\x0d\xea\xc5\x16\x5c\x62\xb8\xd1\xa4\xe7\x5a\x07\x58\x00\x79"
            "\x51\x88\x21\xe9\x4d\xba\x73\x7b\xad\x60\x9c\x5c\x26\x00\x2e"
            "\xd1\x51"s;
        Condition const Ed18Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed18CondConditionFingerprint),
                                 std::bitset<5>{0}};

        auto preim2 =
            std::make_unique<PreimageSha256>(makeSlice(preim2Preimage));
        std::vector<std::unique_ptr<Fulfillment>> thresh1Subfulfillments;
        thresh1Subfulfillments.emplace_back(std::move(preim2));
        std::vector<Condition> thresh1Subconditions{};
        auto thresh1 = std::make_unique<ThresholdSha256>(
            std::move(thresh1Subfulfillments), std::move(thresh1Subconditions));
        auto preim5 =
            std::make_unique<PreimageSha256>(makeSlice(preim5Preimage));
        auto prefix4 = std::make_unique<PrefixSha256>(
            makeSlice(prefix4Prefix), prefix4MaxMsgLength, std::move(preim5));
        auto prefix3 = std::make_unique<PrefixSha256>(
            makeSlice(prefix3Prefix), prefix3MaxMsgLength, std::move(prefix4));
        auto preim7 =
            std::make_unique<PreimageSha256>(makeSlice(preim7Preimage));
        auto preim9 =
            std::make_unique<PreimageSha256>(makeSlice(preim9Preimage));
        std::vector<std::unique_ptr<Fulfillment>> thresh8Subfulfillments;
        thresh8Subfulfillments.emplace_back(std::move(preim9));
        std::vector<Condition> thresh8Subconditions{
            {Preim10Cond, Rsa11Cond, Ed12Cond}};
        auto thresh8 = std::make_unique<ThresholdSha256>(
            std::move(thresh8Subfulfillments), std::move(thresh8Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh6Subfulfillments;
        thresh6Subfulfillments.emplace_back(std::move(preim7));
        thresh6Subfulfillments.emplace_back(std::move(thresh8));
        std::vector<Condition> thresh6Subconditions{
            {Preim13Cond, Rsa14Cond, Ed15Cond}};
        auto thresh6 = std::make_unique<ThresholdSha256>(
            std::move(thresh6Subfulfillments), std::move(thresh6Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh0Subfulfillments;
        thresh0Subfulfillments.emplace_back(std::move(thresh1));
        thresh0Subfulfillments.emplace_back(std::move(prefix3));
        thresh0Subfulfillments.emplace_back(std::move(thresh6));
        std::vector<Condition> thresh0Subconditions{
            {Preim16Cond, Rsa17Cond, Ed18Cond}};
        ThresholdSha256 const thresh0(
            std::move(thresh0Subfulfillments), std::move(thresh0Subconditions));
        {
            auto const thresh0EncodedFulfillment =
                "\xa2\x82\x01\xd1\xa0\x82\x01\x52\xa1\x21\x80\x02\x50\x33\x81"
                "\x01\x0e\xa2\x18\xa1\x16\x80\x02\x50\x34\x81\x01\x0e\xa2\x0d"
                "\xa0\x0b\x80\x09\x49\x20\x61\x6d\x20\x72\x6f\x6f\x74\xa2\x11"
                "\xa0\x0d\xa0\x0b\x80\x09\x49\x20\x61\x6d\x20\x72\x6f\x6f\x74"
                "\xa1\x00\xa2\x82\x01\x18\xa0\x81\x9a\xa0\x0b\x80\x09\x49\x20"
                "\x61\x6d\x20\x72\x6f\x6f\x74\xa2\x81\x8a\xa0\x0d\xa0\x0b\x80"
                "\x09\x49\x20\x61\x6d\x20\x72\x6f\x6f\x74\xa1\x79\xa0\x25\x80"
                "\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d"
                "\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93"
                "\x58\xeb\x4e\x81\x01\x09\xa3\x27\x80\x20\xaf\x93\xfd\x22\x45"
                "\xc2\x08\xab\x43\xf7\x45\x56\x63\xec\xaf\x15\x33\xa0\x2a\xb4"
                "\x9e\x15\xb4\x6e\xda\x87\x35\xde\x09\x4b\x06\x31\x81\x03\x01"
                "\x00\x00\xa4\x27\x80\x20\x55\xcc\xd1\xa2\x2c\x90\x8d\xe3\x2e"
                "\x42\xd4\xe0\x65\xb2\xf7\xda\xc0\x07\x1e\xd3\x23\x0f\xfe\x78"
                "\x13\xa2\x86\x61\xc4\x34\x28\x50\x81\x03\x02\x00\x00\xa1\x79"
                "\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f"
                "\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd"
                "\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa3\x27\x80\x20\x32\xec"
                "\xaa\x5e\xa6\x88\xdc\xe4\x81\x0f\x93\x0f\x65\xde\x87\xfd\x54"
                "\x8c\x79\x04\x81\xe3\x63\x3f\x3d\x08\xa1\xba\x0a\x24\x2b\x46"
                "\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x40\xd1\x9a\x63\x62\x9b"
                "\xc0\x76\xab\x11\x73\x42\x86\xb3\x20\x9d\x23\xe8\x5e\xee\xb9"
                "\x82\x5d\x93\xe3\xac\xad\xa0\x40\x41\x51\x1b\x81\x03\x02\x00"
                "\x00\xa1\x79\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11"
                "\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2"
                "\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa3\x27\x80"
                "\x20\x78\xe3\x04\xf4\xa6\x16\x68\x4c\x1b\xcf\x3a\x32\xff\xbc"
                "\x75\x1a\xe6\x08\x9b\xff\xba\x79\xf4\x39\x7a\xfc\xe1\x6f\xff"
                "\x3e\xb3\x75\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x0d\xea\xc5"
                "\x16\x5c\x62\xb8\xd1\xa4\xe7\x5a\x07\x58\x00\x79\x51\x88\x21"
                "\xe9\x4d\xba\x73\x7b\xad\x60\x9c\x5c\x26\x00\x2e\xd1\x51\x81"
                "\x03\x02\x00\x00"s;
            auto const thresh0EncodedCondition =
                "\xa2\x2b\x80\x20\xb3\x08\x91\x60\x8c\xf9\x19\x03\x0b\xd9\xb9"
                "\xde\x01\x6f\x30\xe3\x70\xaf\xcf\x0b\xc3\x42\x7c\xd1\x72\x67"
                "\x10\x38\x51\x96\x1f\x49\x81\x03\x07\x3c\x00\x82\x02\x03\xd8"s;
            auto const thresh0EncodedFingerprint =
                "\x30\x82\x01\x04\x80\x01\x03\xa1\x81\xfe\xa0\x25\x80\x20\x5d"
                "\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b"
                "\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb"
                "\x4e\x81\x01\x09\xa1\x2a\x80\x20\x5e\xd7\x08\x88\xaa\xc9\xfb"
                "\xed\xa2\x52\xfa\x22\x48\x27\x95\xe5\x4f\x4b\xf7\x83\x3a\x25"
                "\x2a\x8b\x52\xec\x03\x6c\xb1\x6a\x92\xd1\x81\x02\x08\x29\x82"
                "\x02\x07\x80\xa2\x2a\x80\x20\x57\xb7\x93\x0b\xb8\xe2\x21\xe9"
                "\x42\x8c\x85\x8f\x27\x2d\x4c\xa0\x85\xa0\x40\x6c\x4c\xed\x25"
                "\x22\x0d\xef\x3f\x73\xd9\xcf\x02\xc9\x81\x02\x04\x09\x82\x02"
                "\x07\x80\xa2\x2b\x80\x20\x1d\x3f\x66\x5c\x23\xce\x99\x6b\x18"
                "\xad\x65\xad\x33\xed\x6d\x1d\x1c\xde\x0d\x07\xae\x19\x3e\x63"
                "\x29\x78\x4e\x1f\x21\x64\x8f\x11\x81\x03\x04\x24\x00\x82\x02"
                "\x03\x98\xa3\x27\x80\x20\x78\xe3\x04\xf4\xa6\x16\x68\x4c\x1b"
                "\xcf\x3a\x32\xff\xbc\x75\x1a\xe6\x08\x9b\xff\xba\x79\xf4\x39"
                "\x7a\xfc\xe1\x6f\xff\x3e\xb3\x75\x81\x03\x01\x00\x00\xa4\x27"
                "\x80\x20\x0d\xea\xc5\x16\x5c\x62\xb8\xd1\xa4\xe7\x5a\x07\x58"
                "\x00\x79\x51\x88\x21\xe9\x4d\xba\x73\x7b\xad\x60\x9c\x5c\x26"
                "\x00\x2e\xd1\x51\x81\x03\x02\x00\x00"s;
            check(
                &thresh0,
                thresh0Msg,
                thresh0EncodedFulfillment,
                thresh0EncodedCondition,
                thresh0EncodedFingerprint);
        }
    }

    void
    testThresh17()
    {
        testcase("Thresh17");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * thresh0
        // ** Preim6Cond
        // ** Rsa7Cond
        // ** Ed8Cond
        // ** Prefix9Cond
        // ** Thresh12Cond
        // ** thresh1
        // *** preim2
        // ** preim3
        // ** rsa4
        // ** ed5

        auto const preim2Preimage = "I am root"s;
        auto const preim2Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const thresh1Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const preim3Preimage = "I am root"s;
        auto const preim3Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const rsa4Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa4PublicKey{
            {0xbe, 0x09, 0xc5, 0xa4, 0x27, 0x29, 0xdf, 0xd4, 0x67, 0x76, 0xbe,
             0xbf, 0x2c, 0xf3, 0xa2, 0x0b, 0x42, 0xe4, 0xbf, 0xeb, 0xdd, 0x67,
             0x20, 0xfb, 0x7a, 0x27, 0x93, 0xc0, 0x78, 0x47, 0x78, 0xd7, 0x15,
             0x32, 0xee, 0x38, 0x81, 0x0d, 0x36, 0xa2, 0xc4, 0x65, 0x44, 0xe6,
             0x62, 0x26, 0xb9, 0x58, 0x13, 0xa4, 0x15, 0x82, 0xab, 0xb1, 0x16,
             0x61, 0xfc, 0x01, 0x98, 0xc6, 0x1a, 0x69, 0xc6, 0xba, 0x39, 0x3f,
             0x01, 0x55, 0x3d, 0xd7, 0x8e, 0x14, 0x42, 0x6d, 0x78, 0x74, 0x9b,
             0x28, 0xcb, 0x31, 0x39, 0x98, 0x5a, 0x11, 0xdc, 0xc1, 0x18, 0x9d,
             0x8d, 0xb0, 0xcd, 0x1b, 0x4c, 0x10, 0xab, 0x14, 0x64, 0x19, 0xf1,
             0x33, 0x15, 0x45, 0xc8, 0x92, 0x82, 0x03, 0x82, 0x8a, 0xaa, 0xad,
             0x94, 0xfc, 0x24, 0x11, 0x96, 0x99, 0x7e, 0x94, 0x5a, 0x82, 0x57,
             0x68, 0x61, 0x9f, 0x7b, 0x45, 0xe0, 0x99, 0x9e, 0x4f, 0x32, 0x50,
             0x5f, 0x05, 0xc8, 0x11, 0xae, 0xc4, 0x0c, 0x63, 0x18, 0x0e, 0x02,
             0x59, 0x36, 0x25, 0x92, 0x06, 0x32, 0xc7, 0x71, 0x47, 0x99, 0xcc,
             0x0a, 0x6e, 0x0a, 0x58, 0x71, 0x3f, 0x5e, 0xb7, 0x78, 0xf7, 0x98,
             0x79, 0xdf, 0x74, 0xa4, 0xeb, 0xa9, 0x00, 0xfd, 0x81, 0xb3, 0xcf,
             0x04, 0x8c, 0x5d, 0x7d, 0xe7, 0xb2, 0x82, 0x90, 0x49, 0xbd, 0x69,
             0xf3, 0x08, 0xe9, 0x92, 0xc6, 0x9e, 0x41, 0xba, 0x74, 0xd8, 0x8d,
             0x81, 0x97, 0x6f, 0x86, 0xab, 0xc9, 0xf1, 0x02, 0x31, 0xb4, 0xce,
             0x47, 0xb0, 0x39, 0xc8, 0xba, 0x51, 0xa7, 0x39, 0xf3, 0x71, 0xa2,
             0x25, 0x27, 0x37, 0x6e, 0x09, 0x6f, 0x19, 0x59, 0xbc, 0x65, 0xd9,
             0xcd, 0x12, 0xd3, 0x2c, 0xa2, 0x78, 0xfa, 0x23, 0x15, 0x1a, 0x82,
             0x41, 0x91, 0x1b, 0xbe, 0x8a, 0xe7, 0xfe, 0x3c, 0x3c, 0x30, 0x32,
             0xaa, 0xe9, 0xf3}};
        std::array<std::uint8_t, 256> const rsa4Sig{
            {0x67, 0xb1, 0xfe, 0x42, 0x36, 0xce, 0xa1, 0xf8, 0x17, 0xe0, 0x4f,
             0x0a, 0x02, 0xdf, 0xeb, 0xbc, 0xbe, 0xe9, 0xd8, 0x95, 0x96, 0x01,
             0x77, 0x0c, 0x94, 0xde, 0x42, 0xfb, 0x5b, 0x0b, 0x2d, 0x2d, 0x68,
             0x8e, 0x7f, 0x42, 0x05, 0xc0, 0x6d, 0x05, 0xb8, 0x00, 0x71, 0x6a,
             0x88, 0x71, 0x1d, 0xad, 0x38, 0x5d, 0xc8, 0x31, 0x08, 0x51, 0x85,
             0x8a, 0xba, 0x55, 0x97, 0xe7, 0xfc, 0xf3, 0xe1, 0x5f, 0x08, 0x0b,
             0xf1, 0x23, 0x21, 0x94, 0x0c, 0xd4, 0x79, 0x75, 0xc3, 0x4d, 0xc3,
             0xd8, 0x1b, 0x4d, 0x36, 0x66, 0x69, 0x79, 0xcd, 0x57, 0x7a, 0xdf,
             0xc0, 0xfd, 0x0f, 0xa5, 0xaa, 0xbd, 0xde, 0xde, 0x85, 0xf6, 0x11,
             0xe7, 0xc1, 0xbf, 0xbc, 0x75, 0xf7, 0xee, 0xb4, 0x88, 0x31, 0xba,
             0xbf, 0x4e, 0xa5, 0x6f, 0x30, 0xf4, 0x11, 0x63, 0x80, 0xd5, 0xaf,
             0x1c, 0xbb, 0xf5, 0xd9, 0x4a, 0xf8, 0x06, 0xa2, 0xad, 0xad, 0x6f,
             0xf7, 0x7d, 0xd8, 0xe6, 0x41, 0xf4, 0xef, 0xf3, 0x59, 0x44, 0x19,
             0xdd, 0xcd, 0xba, 0xd3, 0xbb, 0x21, 0xc4, 0x78, 0xad, 0x64, 0xd4,
             0xde, 0x31, 0xfd, 0xa5, 0x8a, 0x41, 0x61, 0x0c, 0xf8, 0x54, 0xb0,
             0x7c, 0x5e, 0xc9, 0xb5, 0x69, 0x27, 0x9c, 0xd9, 0xe0, 0xa2, 0x37,
             0x28, 0xd6, 0x87, 0x2b, 0x77, 0xac, 0xad, 0x3a, 0xa9, 0x3b, 0x17,
             0x33, 0x7c, 0x99, 0x3a, 0x86, 0x3d, 0x53, 0xf7, 0xe1, 0xd7, 0xb6,
             0xb9, 0x81, 0x21, 0x2e, 0x59, 0x43, 0x9b, 0x84, 0xb2, 0x0f, 0xa8,
             0xfd, 0xc3, 0x9b, 0x62, 0x7d, 0xdc, 0xfd, 0xf0, 0x5a, 0xc6, 0x23,
             0x8d, 0x88, 0xb9, 0xe6, 0x0b, 0x81, 0x09, 0x2f, 0x0f, 0x0b, 0xf2,
             0x78, 0xb7, 0x72, 0xdc, 0x2b, 0x8f, 0x46, 0xbc, 0xa5, 0x7b, 0x95,
             0x5f, 0x0e, 0x5f, 0xd2, 0xc7, 0x5d, 0x2e, 0xbf, 0xb5, 0x1f, 0x89,
             0xc1, 0x1e, 0x45}};
        auto const ed5Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed5PublicKey{
            {0xae, 0xbc, 0xe5, 0x4b, 0x88, 0x09, 0x8d, 0x4f, 0xc4, 0xe1, 0x22,
             0xa0, 0x7c, 0x41, 0x05, 0xd7, 0x9f, 0xbe, 0xc8, 0x3d, 0x1d, 0x7e,
             0xd6, 0x55, 0xf4, 0x01, 0x67, 0x68, 0x93, 0x55, 0x85, 0xdf}};
        std::array<std::uint8_t, 64> const ed5Sig{
            {0x30, 0xe8, 0x22, 0x9b, 0x51, 0x8c, 0xaa, 0x86, 0x9b, 0xd0, 0xb2,
             0x06, 0xe0, 0xf0, 0xf2, 0xc0, 0x87, 0x43, 0x0f, 0xb0, 0xbd, 0xe1,
             0xeb, 0x17, 0x7f, 0x85, 0xe8, 0x79, 0xc6, 0xa2, 0x9d, 0x19, 0x17,
             0x07, 0x7e, 0x56, 0x06, 0xcb, 0x5a, 0xe1, 0xca, 0x36, 0x5c, 0x0a,
             0xb5, 0x81, 0x2a, 0x42, 0xf6, 0xcc, 0x6e, 0x04, 0xe2, 0x61, 0x8b,
             0x12, 0x16, 0xc2, 0x36, 0xfc, 0xd5, 0xd8, 0xfc, 0x0c}};
        std::array<std::uint8_t, 32> const ed5SigningKey{
            {0x42, 0x67, 0x67, 0xc0, 0xba, 0xdf, 0xb4, 0xd3, 0xf5, 0xc5, 0x1f,
             0x71, 0x97, 0x8a, 0xb4, 0x8e, 0x9a, 0xea, 0x3e, 0xec, 0xaf, 0xdc,
             0xc7, 0x2b, 0x01, 0x1b, 0x06, 0x8f, 0x05, 0x56, 0x63, 0xbc}};
        (void)ed5SigningKey;
        auto const thresh0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim6CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim6Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim6CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa7CondConditionFingerprint =
            "\x6c\x7b\xea\x83\xa1\xf4\x82\x3d\x36\xe7\x6e\xae\x1a\xbc\xa0"
            "\xba\x90\x3d\x96\xc1\xe6\xad\x3a\x47\xa5\xcb\x88\xab\x3c\x5f"
            "\xcc\xd5"s;
        Condition const Rsa7Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa7CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed8CondConditionFingerprint =
            "\xf1\x68\x96\xa6\x2e\xef\x7f\x47\x06\x51\x4c\xc6\x7e\x24\xf7"
            "\x29\x84\x9c\xd6\xb0\xd9\x4b\xd9\x0f\xc9\x34\x01\x9d\x92\xeb"
            "\xbc\x0a"s;
        Condition const Ed8Cond{Type::ed25519Sha256,
                                131072,
                                makeSlice(Ed8CondConditionFingerprint),
                                std::bitset<5>{0}};
        auto const Prefix9CondConditionFingerprint =
            "\xe1\x77\x39\xca\x66\xa2\x80\x39\x7f\xcb\xa7\xaf\xf7\x9d\xc6"
            "\x9c\x78\xa9\x2c\xd3\x18\x42\x5b\xde\x8e\xa0\xc0\x43\xdb\x44"
            "\xe6\xd5"s;
        Condition const Prefix9Cond{Type::prefixSha256,
                                    2099,
                                    makeSlice(Prefix9CondConditionFingerprint),
                                    std::bitset<5>{1}};
        auto const Thresh12CondConditionFingerprint =
            "\x1b\x04\x83\x7b\xb2\x64\x8e\x23\xdf\x14\x27\x2f\x3d\xab\x92"
            "\x23\x79\x01\xaa\x5e\x59\x9e\xea\x30\x82\xc0\x0d\x27\x0c\xb7"
            "\x4a\x97"s;
        Condition const Thresh12Cond{
            Type::thresholdSha256,
            271360,
            makeSlice(Thresh12CondConditionFingerprint),
            std::bitset<5>{25}};

        auto preim2 =
            std::make_unique<PreimageSha256>(makeSlice(preim2Preimage));
        std::vector<std::unique_ptr<Fulfillment>> thresh1Subfulfillments;
        thresh1Subfulfillments.emplace_back(std::move(preim2));
        std::vector<Condition> thresh1Subconditions{};
        auto thresh1 = std::make_unique<ThresholdSha256>(
            std::move(thresh1Subfulfillments), std::move(thresh1Subconditions));
        auto preim3 =
            std::make_unique<PreimageSha256>(makeSlice(preim3Preimage));
        auto rsa4 = std::make_unique<RsaSha256>(
            makeSlice(rsa4PublicKey), makeSlice(rsa4Sig));
        auto ed5 = std::make_unique<Ed25519>(ed5PublicKey, ed5Sig);
        std::vector<std::unique_ptr<Fulfillment>> thresh0Subfulfillments;
        thresh0Subfulfillments.emplace_back(std::move(thresh1));
        thresh0Subfulfillments.emplace_back(std::move(preim3));
        thresh0Subfulfillments.emplace_back(std::move(rsa4));
        thresh0Subfulfillments.emplace_back(std::move(ed5));
        std::vector<Condition> thresh0Subconditions{
            {Preim6Cond, Rsa7Cond, Ed8Cond, Prefix9Cond, Thresh12Cond}};
        ThresholdSha256 const thresh0(
            std::move(thresh0Subfulfillments), std::move(thresh0Subconditions));
        {
            auto const thresh0EncodedFulfillment =
                "\xa2\x82\x03\x6b\xa0\x82\x02\x92\xa0\x0b\x80\x09\x49\x20\x61"
                "\x6d\x20\x72\x6f\x6f\x74\xa2\x11\xa0\x0d\xa0\x0b\x80\x09\x49"
                "\x20\x61\x6d\x20\x72\x6f\x6f\x74\xa1\x00\xa3\x82\x02\x08\x80"
                "\x82\x01\x00\xbe\x09\xc5\xa4\x27\x29\xdf\xd4\x67\x76\xbe\xbf"
                "\x2c\xf3\xa2\x0b\x42\xe4\xbf\xeb\xdd\x67\x20\xfb\x7a\x27\x93"
                "\xc0\x78\x47\x78\xd7\x15\x32\xee\x38\x81\x0d\x36\xa2\xc4\x65"
                "\x44\xe6\x62\x26\xb9\x58\x13\xa4\x15\x82\xab\xb1\x16\x61\xfc"
                "\x01\x98\xc6\x1a\x69\xc6\xba\x39\x3f\x01\x55\x3d\xd7\x8e\x14"
                "\x42\x6d\x78\x74\x9b\x28\xcb\x31\x39\x98\x5a\x11\xdc\xc1\x18"
                "\x9d\x8d\xb0\xcd\x1b\x4c\x10\xab\x14\x64\x19\xf1\x33\x15\x45"
                "\xc8\x92\x82\x03\x82\x8a\xaa\xad\x94\xfc\x24\x11\x96\x99\x7e"
                "\x94\x5a\x82\x57\x68\x61\x9f\x7b\x45\xe0\x99\x9e\x4f\x32\x50"
                "\x5f\x05\xc8\x11\xae\xc4\x0c\x63\x18\x0e\x02\x59\x36\x25\x92"
                "\x06\x32\xc7\x71\x47\x99\xcc\x0a\x6e\x0a\x58\x71\x3f\x5e\xb7"
                "\x78\xf7\x98\x79\xdf\x74\xa4\xeb\xa9\x00\xfd\x81\xb3\xcf\x04"
                "\x8c\x5d\x7d\xe7\xb2\x82\x90\x49\xbd\x69\xf3\x08\xe9\x92\xc6"
                "\x9e\x41\xba\x74\xd8\x8d\x81\x97\x6f\x86\xab\xc9\xf1\x02\x31"
                "\xb4\xce\x47\xb0\x39\xc8\xba\x51\xa7\x39\xf3\x71\xa2\x25\x27"
                "\x37\x6e\x09\x6f\x19\x59\xbc\x65\xd9\xcd\x12\xd3\x2c\xa2\x78"
                "\xfa\x23\x15\x1a\x82\x41\x91\x1b\xbe\x8a\xe7\xfe\x3c\x3c\x30"
                "\x32\xaa\xe9\xf3\x81\x82\x01\x00\x67\xb1\xfe\x42\x36\xce\xa1"
                "\xf8\x17\xe0\x4f\x0a\x02\xdf\xeb\xbc\xbe\xe9\xd8\x95\x96\x01"
                "\x77\x0c\x94\xde\x42\xfb\x5b\x0b\x2d\x2d\x68\x8e\x7f\x42\x05"
                "\xc0\x6d\x05\xb8\x00\x71\x6a\x88\x71\x1d\xad\x38\x5d\xc8\x31"
                "\x08\x51\x85\x8a\xba\x55\x97\xe7\xfc\xf3\xe1\x5f\x08\x0b\xf1"
                "\x23\x21\x94\x0c\xd4\x79\x75\xc3\x4d\xc3\xd8\x1b\x4d\x36\x66"
                "\x69\x79\xcd\x57\x7a\xdf\xc0\xfd\x0f\xa5\xaa\xbd\xde\xde\x85"
                "\xf6\x11\xe7\xc1\xbf\xbc\x75\xf7\xee\xb4\x88\x31\xba\xbf\x4e"
                "\xa5\x6f\x30\xf4\x11\x63\x80\xd5\xaf\x1c\xbb\xf5\xd9\x4a\xf8"
                "\x06\xa2\xad\xad\x6f\xf7\x7d\xd8\xe6\x41\xf4\xef\xf3\x59\x44"
                "\x19\xdd\xcd\xba\xd3\xbb\x21\xc4\x78\xad\x64\xd4\xde\x31\xfd"
                "\xa5\x8a\x41\x61\x0c\xf8\x54\xb0\x7c\x5e\xc9\xb5\x69\x27\x9c"
                "\xd9\xe0\xa2\x37\x28\xd6\x87\x2b\x77\xac\xad\x3a\xa9\x3b\x17"
                "\x33\x7c\x99\x3a\x86\x3d\x53\xf7\xe1\xd7\xb6\xb9\x81\x21\x2e"
                "\x59\x43\x9b\x84\xb2\x0f\xa8\xfd\xc3\x9b\x62\x7d\xdc\xfd\xf0"
                "\x5a\xc6\x23\x8d\x88\xb9\xe6\x0b\x81\x09\x2f\x0f\x0b\xf2\x78"
                "\xb7\x72\xdc\x2b\x8f\x46\xbc\xa5\x7b\x95\x5f\x0e\x5f\xd2\xc7"
                "\x5d\x2e\xbf\xb5\x1f\x89\xc1\x1e\x45\xa4\x64\x80\x20\xae\xbc"
                "\xe5\x4b\x88\x09\x8d\x4f\xc4\xe1\x22\xa0\x7c\x41\x05\xd7\x9f"
                "\xbe\xc8\x3d\x1d\x7e\xd6\x55\xf4\x01\x67\x68\x93\x55\x85\xdf"
                "\x81\x40\x30\xe8\x22\x9b\x51\x8c\xaa\x86\x9b\xd0\xb2\x06\xe0"
                "\xf0\xf2\xc0\x87\x43\x0f\xb0\xbd\xe1\xeb\x17\x7f\x85\xe8\x79"
                "\xc6\xa2\x9d\x19\x17\x07\x7e\x56\x06\xcb\x5a\xe1\xca\x36\x5c"
                "\x0a\xb5\x81\x2a\x42\xf6\xcc\x6e\x04\xe2\x61\x8b\x12\x16\xc2"
                "\x36\xfc\xd5\xd8\xfc\x0c\xa1\x81\xd2\xa0\x25\x80\x20\x5d\xa0"
                "\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1"
                "\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e"
                "\x81\x01\x09\xa1\x2a\x80\x20\xe1\x77\x39\xca\x66\xa2\x80\x39"
                "\x7f\xcb\xa7\xaf\xf7\x9d\xc6\x9c\x78\xa9\x2c\xd3\x18\x42\x5b"
                "\xde\x8e\xa0\xc0\x43\xdb\x44\xe6\xd5\x81\x02\x08\x33\x82\x02"
                "\x07\x80\xa2\x2b\x80\x20\x1b\x04\x83\x7b\xb2\x64\x8e\x23\xdf"
                "\x14\x27\x2f\x3d\xab\x92\x23\x79\x01\xaa\x5e\x59\x9e\xea\x30"
                "\x82\xc0\x0d\x27\x0c\xb7\x4a\x97\x81\x03\x04\x24\x00\x82\x02"
                "\x03\x98\xa3\x27\x80\x20\x6c\x7b\xea\x83\xa1\xf4\x82\x3d\x36"
                "\xe7\x6e\xae\x1a\xbc\xa0\xba\x90\x3d\x96\xc1\xe6\xad\x3a\x47"
                "\xa5\xcb\x88\xab\x3c\x5f\xcc\xd5\x81\x03\x01\x00\x00\xa4\x27"
                "\x80\x20\xf1\x68\x96\xa6\x2e\xef\x7f\x47\x06\x51\x4c\xc6\x7e"
                "\x24\xf7\x29\x84\x9c\xd6\xb0\xd9\x4b\xd9\x0f\xc9\x34\x01\x9d"
                "\x92\xeb\xbc\x0a\x81\x03\x02\x00\x00"s;
            auto const thresh0EncodedCondition =
                "\xa2\x2b\x80\x20\x95\xf4\x06\xf0\xc2\x0a\xf3\x37\x12\x87\x25"
                "\x8d\x04\x52\x98\xe0\x0d\x9e\x90\x66\xb4\xce\xf4\xd1\xd6\x03"
                "\x80\xdc\xe6\x8d\xde\xcd\x81\x03\x09\x48\x00\x82\x02\x03\xd8"s;
            auto const thresh0EncodedFingerprint =
                "\x30\x82\x01\x7e\x80\x01\x04\xa1\x82\x01\x77\xa0\x25\x80\x20"
                "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
                "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
                "\xeb\x4e\x81\x01\x09\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1"
                "\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21"
                "\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa1"
                "\x2a\x80\x20\xe1\x77\x39\xca\x66\xa2\x80\x39\x7f\xcb\xa7\xaf"
                "\xf7\x9d\xc6\x9c\x78\xa9\x2c\xd3\x18\x42\x5b\xde\x8e\xa0\xc0"
                "\x43\xdb\x44\xe6\xd5\x81\x02\x08\x33\x82\x02\x07\x80\xa2\x2a"
                "\x80\x20\x57\xb7\x93\x0b\xb8\xe2\x21\xe9\x42\x8c\x85\x8f\x27"
                "\x2d\x4c\xa0\x85\xa0\x40\x6c\x4c\xed\x25\x22\x0d\xef\x3f\x73"
                "\xd9\xcf\x02\xc9\x81\x02\x04\x09\x82\x02\x07\x80\xa2\x2b\x80"
                "\x20\x1b\x04\x83\x7b\xb2\x64\x8e\x23\xdf\x14\x27\x2f\x3d\xab"
                "\x92\x23\x79\x01\xaa\x5e\x59\x9e\xea\x30\x82\xc0\x0d\x27\x0c"
                "\xb7\x4a\x97\x81\x03\x04\x24\x00\x82\x02\x03\x98\xa3\x27\x80"
                "\x20\x3a\x82\x3b\x32\x38\xb1\x3c\x17\x87\x60\x62\xec\xcf\x91"
                "\xb0\xaf\xaa\xe5\x11\xe6\xfb\xe2\xb0\x3d\x70\x4d\x1d\xad\xd6"
                "\x7c\xee\xa6\x81\x03\x01\x00\x00\xa3\x27\x80\x20\x6c\x7b\xea"
                "\x83\xa1\xf4\x82\x3d\x36\xe7\x6e\xae\x1a\xbc\xa0\xba\x90\x3d"
                "\x96\xc1\xe6\xad\x3a\x47\xa5\xcb\x88\xab\x3c\x5f\xcc\xd5\x81"
                "\x03\x01\x00\x00\xa4\x27\x80\x20\x90\xce\xed\x45\x98\x68\xff"
                "\x19\x2b\x27\xc1\x2a\xa2\x6e\x2e\x82\xf3\xbd\x71\x13\x61\xb0"
                "\x76\x40\x4d\x48\xea\x16\xfb\x27\x57\xdc\x81\x03\x02\x00\x00"
                "\xa4\x27\x80\x20\xf1\x68\x96\xa6\x2e\xef\x7f\x47\x06\x51\x4c"
                "\xc6\x7e\x24\xf7\x29\x84\x9c\xd6\xb0\xd9\x4b\xd9\x0f\xc9\x34"
                "\x01\x9d\x92\xeb\xbc\x0a\x81\x03\x02\x00\x00"s;
            check(
                &thresh0,
                thresh0Msg,
                thresh0EncodedFulfillment,
                thresh0EncodedCondition,
                thresh0EncodedFingerprint);
        }
    }

    void
    testThresh18()
    {
        testcase("Thresh18");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * thresh0
        // ** Preim25Cond
        // ** Rsa26Cond
        // ** Ed27Cond
        // ** thresh1
        // *** Preim3Cond
        // *** Rsa4Cond
        // *** Ed5Cond
        // *** preim2
        // ** prefix6
        // *** prefix7
        // **** prefix8
        // ***** preim9
        // ** thresh10
        // *** Preim17Cond
        // *** Rsa18Cond
        // *** Ed19Cond
        // *** Thresh20Cond
        // *** preim11
        // *** thresh12
        // **** Preim14Cond
        // **** Rsa15Cond
        // **** Ed16Cond
        // **** preim13

        auto const preim2Preimage = "I am root"s;
        auto const preim2Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const thresh1Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim3CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim3Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim3CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa4CondConditionFingerprint =
            "\x3a\x82\x3b\x32\x38\xb1\x3c\x17\x87\x60\x62\xec\xcf\x91\xb0"
            "\xaf\xaa\xe5\x11\xe6\xfb\xe2\xb0\x3d\x70\x4d\x1d\xad\xd6\x7c"
            "\xee\xa6"s;
        Condition const Rsa4Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa4CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed5CondConditionFingerprint =
            "\x90\xce\xed\x45\x98\x68\xff\x19\x2b\x27\xc1\x2a\xa2\x6e\x2e"
            "\x82\xf3\xbd\x71\x13\x61\xb0\x76\x40\x4d\x48\xea\x16\xfb\x27"
            "\x57\xdc"s;
        Condition const Ed5Cond{Type::ed25519Sha256,
                                131072,
                                makeSlice(Ed5CondConditionFingerprint),
                                std::bitset<5>{0}};
        auto const preim9Preimage = "I am root"s;
        auto const preim9Msg = "P8P7P6abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix8Prefix = "P8"s;
        auto const prefix8Msg = "P7P6abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix8MaxMsgLength = 14;
        auto const prefix7Prefix = "P7"s;
        auto const prefix7Msg = "P6abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix7MaxMsgLength = 14;
        auto const prefix6Prefix = "P6"s;
        auto const prefix6Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix6MaxMsgLength = 14;
        auto const preim11Preimage = "I am root"s;
        auto const preim11Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const preim13Preimage = "I am root"s;
        auto const preim13Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const thresh12Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim14CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim14Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim14CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa15CondConditionFingerprint =
            "\x55\x6b\x6d\xe3\x00\xd4\xf3\x7e\x75\x3a\x68\xfc\x25\xdf\xf2"
            "\xf7\x18\x54\xa5\x55\x0c\xa5\xa9\x65\xbf\x66\x9e\x4e\x49\x56"
            "\x1e\xf1"s;
        Condition const Rsa15Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa15CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed16CondConditionFingerprint =
            "\xe4\x66\x69\x86\x87\x57\x0e\xac\xf1\xfd\x06\x81\x48\x90\x82"
            "\x42\x48\x50\x75\x8e\xd4\x2d\xf3\x02\x37\x89\x28\xc5\x68\xd7"
            "\xa0\x11"s;
        Condition const Ed16Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed16CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const thresh10Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim17CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim17Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim17CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa18CondConditionFingerprint =
            "\x9d\xbe\x65\xf4\xae\x81\x90\x79\x09\x18\xa2\x66\x12\x9c\x10"
            "\x94\x66\x21\x94\x70\x60\x20\x4a\x3d\x5f\xb3\x62\xb6\x06\x46"
            "\x37\xfe"s;
        Condition const Rsa18Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa18CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed19CondConditionFingerprint =
            "\xe5\x88\xb7\x6e\xec\x2d\xaf\x47\xc7\xa2\xf4\x6e\xbf\x7f\x5e"
            "\x46\xd7\xfa\x33\x2c\x0a\x7e\x86\x1d\x8c\x38\xa8\x93\x52\xe8"
            "\x97\xe9"s;
        Condition const Ed19Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed19CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Thresh20CondConditionFingerprint =
            "\xb1\xc3\xf1\x72\xcd\xb5\x21\xc0\x9b\xcf\xd9\xdf\x3a\x31\x32"
            "\xe0\xc0\x2e\xde\x61\xec\xb3\xf5\x86\x46\x9a\xeb\x73\x5a\xc0"
            "\x2d\x7d"s;
        Condition const Thresh20Cond{
            Type::thresholdSha256,
            135168,
            makeSlice(Thresh20CondConditionFingerprint),
            std::bitset<5>{25}};
        auto const thresh0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim25CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim25Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim25CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa26CondConditionFingerprint =
            "\xd6\x40\x0d\x21\x44\x8a\xd4\x5a\xe6\x10\x3f\xd4\x3a\x14\x5a"
            "\x5b\x87\x86\x20\x3c\x43\x20\x9d\x9d\x0c\x75\x57\x80\x7d\xda"
            "\x9d\x06"s;
        Condition const Rsa26Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa26CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed27CondConditionFingerprint =
            "\x6a\x26\x73\x6f\xc3\xbf\x25\x73\x8e\x3b\x27\x79\x47\xa5\x37"
            "\x7c\x78\xa0\x72\xd8\x77\x91\xfc\x45\x87\x7f\x11\x57\xfe\x94"
            "\x57\x45"s;
        Condition const Ed27Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed27CondConditionFingerprint),
                                 std::bitset<5>{0}};

        auto preim2 =
            std::make_unique<PreimageSha256>(makeSlice(preim2Preimage));
        std::vector<std::unique_ptr<Fulfillment>> thresh1Subfulfillments;
        thresh1Subfulfillments.emplace_back(std::move(preim2));
        std::vector<Condition> thresh1Subconditions{
            {Preim3Cond, Rsa4Cond, Ed5Cond}};
        auto thresh1 = std::make_unique<ThresholdSha256>(
            std::move(thresh1Subfulfillments), std::move(thresh1Subconditions));
        auto preim9 =
            std::make_unique<PreimageSha256>(makeSlice(preim9Preimage));
        auto prefix8 = std::make_unique<PrefixSha256>(
            makeSlice(prefix8Prefix), prefix8MaxMsgLength, std::move(preim9));
        auto prefix7 = std::make_unique<PrefixSha256>(
            makeSlice(prefix7Prefix), prefix7MaxMsgLength, std::move(prefix8));
        auto prefix6 = std::make_unique<PrefixSha256>(
            makeSlice(prefix6Prefix), prefix6MaxMsgLength, std::move(prefix7));
        auto preim11 =
            std::make_unique<PreimageSha256>(makeSlice(preim11Preimage));
        auto preim13 =
            std::make_unique<PreimageSha256>(makeSlice(preim13Preimage));
        std::vector<std::unique_ptr<Fulfillment>> thresh12Subfulfillments;
        thresh12Subfulfillments.emplace_back(std::move(preim13));
        std::vector<Condition> thresh12Subconditions{
            {Preim14Cond, Rsa15Cond, Ed16Cond}};
        auto thresh12 = std::make_unique<ThresholdSha256>(
            std::move(thresh12Subfulfillments),
            std::move(thresh12Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh10Subfulfillments;
        thresh10Subfulfillments.emplace_back(std::move(preim11));
        thresh10Subfulfillments.emplace_back(std::move(thresh12));
        std::vector<Condition> thresh10Subconditions{
            {Preim17Cond, Rsa18Cond, Ed19Cond, Thresh20Cond}};
        auto thresh10 = std::make_unique<ThresholdSha256>(
            std::move(thresh10Subfulfillments),
            std::move(thresh10Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh0Subfulfillments;
        thresh0Subfulfillments.emplace_back(std::move(thresh1));
        thresh0Subfulfillments.emplace_back(std::move(prefix6));
        thresh0Subfulfillments.emplace_back(std::move(thresh10));
        std::vector<Condition> thresh0Subconditions{
            {Preim25Cond, Rsa26Cond, Ed27Cond}};
        ThresholdSha256 const thresh0(
            std::move(thresh0Subfulfillments), std::move(thresh0Subconditions));
        {
            auto const thresh0EncodedFulfillment =
                "\xa2\x82\x02\x84\xa0\x82\x02\x05\xa1\x2c\x80\x02\x50\x36\x81"
                "\x01\x0e\xa2\x23\xa1\x21\x80\x02\x50\x37\x81\x01\x0e\xa2\x18"
                "\xa1\x16\x80\x02\x50\x38\x81\x01\x0e\xa2\x0d\xa0\x0b\x80\x09"
                "\x49\x20\x61\x6d\x20\x72\x6f\x6f\x74\xa2\x81\x8a\xa0\x0d\xa0"
                "\x0b\x80\x09\x49\x20\x61\x6d\x20\x72\x6f\x6f\x74\xa1\x79\xa0"
                "\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e"
                "\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53"
                "\xee\x93\x58\xeb\x4e\x81\x01\x09\xa3\x27\x80\x20\x3a\x82\x3b"
                "\x32\x38\xb1\x3c\x17\x87\x60\x62\xec\xcf\x91\xb0\xaf\xaa\xe5"
                "\x11\xe6\xfb\xe2\xb0\x3d\x70\x4d\x1d\xad\xd6\x7c\xee\xa6\x81"
                "\x03\x01\x00\x00\xa4\x27\x80\x20\x90\xce\xed\x45\x98\x68\xff"
                "\x19\x2b\x27\xc1\x2a\xa2\x6e\x2e\x82\xf3\xbd\x71\x13\x61\xb0"
                "\x76\x40\x4d\x48\xea\x16\xfb\x27\x57\xdc\x81\x03\x02\x00\x00"
                "\xa2\x82\x01\x46\xa0\x81\x9a\xa0\x0b\x80\x09\x49\x20\x61\x6d"
                "\x20\x72\x6f\x6f\x74\xa2\x81\x8a\xa0\x0d\xa0\x0b\x80\x09\x49"
                "\x20\x61\x6d\x20\x72\x6f\x6f\x74\xa1\x79\xa0\x25\x80\x20\x5d"
                "\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b"
                "\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb"
                "\x4e\x81\x01\x09\xa3\x27\x80\x20\x55\x6b\x6d\xe3\x00\xd4\xf3"
                "\x7e\x75\x3a\x68\xfc\x25\xdf\xf2\xf7\x18\x54\xa5\x55\x0c\xa5"
                "\xa9\x65\xbf\x66\x9e\x4e\x49\x56\x1e\xf1\x81\x03\x01\x00\x00"
                "\xa4\x27\x80\x20\xe4\x66\x69\x86\x87\x57\x0e\xac\xf1\xfd\x06"
                "\x81\x48\x90\x82\x42\x48\x50\x75\x8e\xd4\x2d\xf3\x02\x37\x89"
                "\x28\xc5\x68\xd7\xa0\x11\x81\x03\x02\x00\x00\xa1\x81\xa6\xa0"
                "\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e"
                "\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53"
                "\xee\x93\x58\xeb\x4e\x81\x01\x09\xa2\x2b\x80\x20\xb1\xc3\xf1"
                "\x72\xcd\xb5\x21\xc0\x9b\xcf\xd9\xdf\x3a\x31\x32\xe0\xc0\x2e"
                "\xde\x61\xec\xb3\xf5\x86\x46\x9a\xeb\x73\x5a\xc0\x2d\x7d\x81"
                "\x03\x02\x10\x00\x82\x02\x03\x98\xa3\x27\x80\x20\x9d\xbe\x65"
                "\xf4\xae\x81\x90\x79\x09\x18\xa2\x66\x12\x9c\x10\x94\x66\x21"
                "\x94\x70\x60\x20\x4a\x3d\x5f\xb3\x62\xb6\x06\x46\x37\xfe\x81"
                "\x03\x01\x00\x00\xa4\x27\x80\x20\xe5\x88\xb7\x6e\xec\x2d\xaf"
                "\x47\xc7\xa2\xf4\x6e\xbf\x7f\x5e\x46\xd7\xfa\x33\x2c\x0a\x7e"
                "\x86\x1d\x8c\x38\xa8\x93\x52\xe8\x97\xe9\x81\x03\x02\x00\x00"
                "\xa1\x79\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51"
                "\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68"
                "\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa3\x27\x80\x20"
                "\xd6\x40\x0d\x21\x44\x8a\xd4\x5a\xe6\x10\x3f\xd4\x3a\x14\x5a"
                "\x5b\x87\x86\x20\x3c\x43\x20\x9d\x9d\x0c\x75\x57\x80\x7d\xda"
                "\x9d\x06\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x6a\x26\x73\x6f"
                "\xc3\xbf\x25\x73\x8e\x3b\x27\x79\x47\xa5\x37\x7c\x78\xa0\x72"
                "\xd8\x77\x91\xfc\x45\x87\x7f\x11\x57\xfe\x94\x57\x45\x81\x03"
                "\x02\x00\x00"s;
            auto const thresh0EncodedCondition =
                "\xa2\x2b\x80\x20\x24\x3a\xc1\x4f\x28\x62\x49\xa2\x56\xb3\x20"
                "\xdf\x59\x55\xac\x05\x76\x23\xda\x02\x4c\x60\x46\x29\xda\xff"
                "\x16\xda\x1f\xfc\xeb\x67\x81\x03\x08\x60\x00\x82\x02\x03\xd8"s;
            auto const thresh0EncodedFingerprint =
                "\x30\x82\x01\x05\x80\x01\x03\xa1\x81\xff\xa0\x25\x80\x20\x5d"
                "\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b"
                "\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb"
                "\x4e\x81\x01\x09\xa1\x2a\x80\x20\x7a\xca\xae\xc4\x40\xda\xb6"
                "\xfe\x56\x59\xe0\x0d\x88\xb1\xf1\x56\x9b\x8d\x64\xe0\x85\x26"
                "\x97\xa0\x26\x97\x4d\x57\x15\xc8\xdf\x1c\x81\x02\x0c\x39\x82"
                "\x02\x07\x80\xa2\x2b\x80\x20\x13\xeb\x94\x11\x11\xbd\x3a\x86"
                "\x32\x53\x0b\x1a\x15\x8e\x6a\x39\xe7\x73\x1f\x22\xa9\xcb\xc1"
                "\x8e\x94\xa6\xdf\xfb\x31\x4d\x25\x75\x81\x03\x04\x38\x00\x82"
                "\x02\x03\x98\xa2\x2b\x80\x20\x46\x88\xe3\xe8\x80\xca\xd5\x79"
                "\x36\xe0\x73\xb0\xf6\xd8\xab\xdd\xf6\x17\xe4\x83\x5f\xc7\xdb"
                "\xe4\x55\x54\x89\x84\x92\xef\x96\x28\x81\x03\x02\x10\x00\x82"
                "\x02\x03\x98\xa3\x27\x80\x20\xd6\x40\x0d\x21\x44\x8a\xd4\x5a"
                "\xe6\x10\x3f\xd4\x3a\x14\x5a\x5b\x87\x86\x20\x3c\x43\x20\x9d"
                "\x9d\x0c\x75\x57\x80\x7d\xda\x9d\x06\x81\x03\x01\x00\x00\xa4"
                "\x27\x80\x20\x6a\x26\x73\x6f\xc3\xbf\x25\x73\x8e\x3b\x27\x79"
                "\x47\xa5\x37\x7c\x78\xa0\x72\xd8\x77\x91\xfc\x45\x87\x7f\x11"
                "\x57\xfe\x94\x57\x45\x81\x03\x02\x00\x00"s;
            check(
                &thresh0,
                thresh0Msg,
                thresh0EncodedFulfillment,
                thresh0EncodedCondition,
                thresh0EncodedFingerprint);
        }
    }

    void
    testThresh19()
    {
        testcase("Thresh19");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * thresh0
        // ** Preim9Cond
        // ** Rsa10Cond
        // ** Ed11Cond
        // ** Prefix12Cond
        // ** Thresh16Cond
        // ** thresh1
        // *** Preim3Cond
        // *** Rsa4Cond
        // *** Ed5Cond
        // *** preim2
        // ** preim6
        // ** rsa7
        // ** ed8

        auto const preim2Preimage = "I am root"s;
        auto const preim2Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const thresh1Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim3CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim3Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim3CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa4CondConditionFingerprint =
            "\x3a\x82\x3b\x32\x38\xb1\x3c\x17\x87\x60\x62\xec\xcf\x91\xb0"
            "\xaf\xaa\xe5\x11\xe6\xfb\xe2\xb0\x3d\x70\x4d\x1d\xad\xd6\x7c"
            "\xee\xa6"s;
        Condition const Rsa4Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa4CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed5CondConditionFingerprint =
            "\x90\xce\xed\x45\x98\x68\xff\x19\x2b\x27\xc1\x2a\xa2\x6e\x2e"
            "\x82\xf3\xbd\x71\x13\x61\xb0\x76\x40\x4d\x48\xea\x16\xfb\x27"
            "\x57\xdc"s;
        Condition const Ed5Cond{Type::ed25519Sha256,
                                131072,
                                makeSlice(Ed5CondConditionFingerprint),
                                std::bitset<5>{0}};
        auto const preim6Preimage = "I am root"s;
        auto const preim6Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const rsa7Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa7PublicKey{
            {0xb5, 0x8b, 0xa2, 0xa1, 0xc0, 0x5b, 0xc3, 0xa3, 0x64, 0xe9, 0x88,
             0xe3, 0x25, 0x89, 0xa0, 0x6d, 0x73, 0x8a, 0x46, 0x09, 0x58, 0xb4,
             0x85, 0x66, 0x87, 0x56, 0x85, 0x39, 0xee, 0x6d, 0x77, 0xbb, 0x99,
             0x57, 0x90, 0x0e, 0x9c, 0x9c, 0xd5, 0x40, 0xc4, 0x8b, 0x37, 0xb1,
             0xfe, 0x78, 0xb7, 0xe1, 0xe8, 0xb7, 0x74, 0xee, 0x74, 0x9c, 0xe5,
             0xa3, 0xdd, 0xb7, 0x87, 0x77, 0xb7, 0x14, 0x08, 0x71, 0xc4, 0xec,
             0x85, 0xe2, 0xe3, 0xc1, 0x1e, 0x34, 0x14, 0x21, 0xe1, 0xac, 0xd3,
             0x20, 0x0f, 0xb8, 0x11, 0x24, 0x69, 0xa3, 0x7d, 0x98, 0x35, 0x2a,
             0xdf, 0x56, 0x7d, 0x30, 0xf7, 0x31, 0x64, 0x73, 0xcf, 0x0c, 0x9e,
             0xa6, 0x3b, 0x7d, 0x93, 0xb1, 0xc4, 0xb6, 0x78, 0x39, 0x52, 0x3b,
             0x4d, 0xb6, 0xb2, 0x55, 0x17, 0x95, 0x27, 0xbd, 0xd6, 0xc1, 0x28,
             0x7b, 0x82, 0xbb, 0xeb, 0xea, 0xec, 0x7e, 0x48, 0x35, 0xb3, 0x4b,
             0x78, 0x30, 0xc4, 0x66, 0x32, 0x39, 0x2d, 0xd6, 0x5f, 0x59, 0xeb,
             0x81, 0x64, 0x68, 0xdb, 0x94, 0xf4, 0x8e, 0x5f, 0x34, 0x4f, 0x3b,
             0x03, 0xe5, 0xa6, 0x1b, 0x30, 0x6c, 0xea, 0xe8, 0xc6, 0x36, 0xf8,
             0xee, 0x0b, 0x0f, 0xb5, 0xd2, 0xe7, 0xa4, 0x0a, 0xbc, 0xef, 0x80,
             0x7e, 0xb1, 0x9b, 0xda, 0xe6, 0x40, 0x4a, 0x3f, 0x6f, 0xd1, 0x5a,
             0x64, 0x84, 0xb2, 0x5c, 0xd2, 0xf0, 0x38, 0x7c, 0xcb, 0xd1, 0xcd,
             0xdd, 0x37, 0x3f, 0x76, 0xe7, 0x08, 0x25, 0xe5, 0xd3, 0xd9, 0xe3,
             0x21, 0x1b, 0x88, 0x41, 0x3d, 0x2d, 0x32, 0xff, 0xd3, 0xfe, 0x4d,
             0x40, 0x85, 0x1b, 0x0f, 0xd6, 0xab, 0x4e, 0xb7, 0x38, 0x68, 0xe9,
             0x67, 0xc7, 0xb5, 0xd1, 0x38, 0xdb, 0x85, 0x2e, 0x2f, 0x76, 0xea,
             0x4a, 0xce, 0xff, 0x08, 0x5e, 0x93, 0x87, 0x98, 0xf7, 0x95, 0xeb,
             0x49, 0xf6, 0x8d}};
        std::array<std::uint8_t, 256> const rsa7Sig{
            {0x9c, 0xbb, 0xd1, 0xd5, 0x38, 0x48, 0x28, 0xb8, 0xc5, 0x5d, 0xea,
             0x5a, 0x97, 0x04, 0xc5, 0xe8, 0x81, 0x33, 0xf5, 0xd8, 0xc5, 0x6e,
             0x41, 0x8b, 0xf6, 0x44, 0xcd, 0x4a, 0x6a, 0x40, 0x00, 0xa3, 0xb0,
             0x8b, 0x21, 0x9f, 0xc5, 0x90, 0x24, 0x6b, 0x3b, 0x42, 0x2d, 0xa1,
             0xbe, 0x6b, 0xf4, 0x30, 0x93, 0xa0, 0xc2, 0x39, 0x1f, 0x42, 0x5b,
             0x2f, 0xb0, 0xb0, 0xae, 0x4d, 0xa6, 0x3a, 0xcc, 0x9a, 0x0d, 0x3f,
             0x86, 0xd0, 0xa6, 0x40, 0x85, 0x2e, 0xf7, 0xd4, 0x5e, 0xd5, 0x5e,
             0xf0, 0x12, 0x37, 0x4b, 0xee, 0xa7, 0xcb, 0xa2, 0x73, 0x6f, 0xe2,
             0x8f, 0x1f, 0x8a, 0xdc, 0xfd, 0xd5, 0x2b, 0xd6, 0xeb, 0x45, 0x53,
             0x19, 0x64, 0xe6, 0x4f, 0x28, 0x12, 0x0f, 0xa2, 0xbf, 0x5f, 0xff,
             0xc4, 0xd1, 0x11, 0x4c, 0x30, 0xd1, 0xb9, 0x77, 0x39, 0x59, 0x5c,
             0x6e, 0x48, 0x52, 0xd5, 0xd9, 0xc9, 0xcc, 0x5f, 0xe8, 0x14, 0x53,
             0x90, 0xf1, 0x40, 0x58, 0x30, 0x86, 0xde, 0x22, 0xa6, 0x85, 0x5c,
             0xfc, 0x55, 0x7d, 0x29, 0xc8, 0xd1, 0xcb, 0x51, 0x5f, 0xb6, 0x63,
             0x4d, 0xf8, 0xb7, 0xbc, 0xc3, 0x03, 0x42, 0xdd, 0x43, 0x18, 0x83,
             0xd3, 0xe6, 0x3b, 0x79, 0x87, 0x75, 0x5f, 0x70, 0x7c, 0x8b, 0x65,
             0x54, 0xdf, 0xa9, 0x80, 0x7d, 0xea, 0xd7, 0xa3, 0xc7, 0x45, 0x8a,
             0x7a, 0x1c, 0x25, 0x69, 0x09, 0x4a, 0x3b, 0xed, 0x3c, 0x8b, 0xbb,
             0x9d, 0x32, 0xab, 0x1e, 0xf0, 0xec, 0xda, 0xfb, 0xe5, 0x28, 0x09,
             0x66, 0x2d, 0xb1, 0xa5, 0xf8, 0xa2, 0x2c, 0xa0, 0xdf, 0x6d, 0x29,
             0xc0, 0x62, 0xdf, 0x0d, 0xf3, 0x71, 0x8c, 0xfa, 0x40, 0x9f, 0xe3,
             0xcc, 0x61, 0x48, 0xa6, 0xee, 0x96, 0xc5, 0xfd, 0xd7, 0xee, 0xaf,
             0x13, 0x98, 0x4d, 0x1b, 0x4c, 0xf9, 0x80, 0xa0, 0x73, 0xa8, 0xf5,
             0xc7, 0x82, 0x47}};
        auto const ed8Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed8PublicKey{
            {0xb6, 0x55, 0xc8, 0xa4, 0x14, 0x20, 0x73, 0x44, 0x12, 0x06, 0xf6,
             0xf7, 0xd0, 0x03, 0x74, 0x53, 0xaa, 0x74, 0x6c, 0xf1, 0x84, 0x0e,
             0x86, 0x1d, 0xb1, 0x97, 0x1a, 0x04, 0x91, 0x83, 0x3b, 0x49}};
        std::array<std::uint8_t, 64> const ed8Sig{
            {0x4d, 0xf6, 0x5a, 0x0e, 0xa4, 0x6f, 0x3d, 0xa0, 0x76, 0xe4, 0x3a,
             0xea, 0x69, 0x1e, 0x3f, 0xe4, 0x45, 0x51, 0x97, 0xc8, 0x7e, 0x3c,
             0xd6, 0x34, 0xc8, 0x7f, 0xa3, 0xf9, 0xd7, 0xfe, 0x0a, 0xf4, 0x86,
             0x18, 0xc5, 0xfa, 0x1c, 0x73, 0x88, 0x37, 0x33, 0x3d, 0xd4, 0x8c,
             0x08, 0xf9, 0xa5, 0xf0, 0x83, 0x37, 0x06, 0x5b, 0xd3, 0xfc, 0x20,
             0x12, 0x42, 0x7a, 0x7a, 0xd7, 0x60, 0xc5, 0xd1, 0x0b}};
        std::array<std::uint8_t, 32> const ed8SigningKey{
            {0xc2, 0x00, 0xc6, 0x2e, 0x45, 0xde, 0xf2, 0x39, 0x81, 0x0a, 0xf8,
             0x6d, 0x53, 0x29, 0xe3, 0x1b, 0x8e, 0x57, 0xad, 0xfa, 0x29, 0x1b,
             0x07, 0x1a, 0xee, 0x34, 0xe6, 0x57, 0x5a, 0xeb, 0xf2, 0x1c}};
        (void)ed8SigningKey;
        auto const thresh0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim9CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim9Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim9CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa10CondConditionFingerprint =
            "\x3c\x73\x38\xcf\x23\xc6\x31\x53\x28\xc4\x27\xf8\x95\x87\x99"
            "\x83\x2d\x35\x3c\x03\x9b\xd1\xff\xff\x2e\x53\x20\xe9\x5e\x62"
            "\xb9\xb7"s;
        Condition const Rsa10Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa10CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed11CondConditionFingerprint =
            "\x41\x80\x08\xb2\x60\x74\x57\x6d\xac\xed\x74\x7f\x54\xdb\x96"
            "\x18\x91\x06\x0a\x95\xa1\x49\x17\xc7\x65\xe3\x94\xc8\x5e\x2c"
            "\x92\x20"s;
        Condition const Ed11Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed11CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Prefix12CondConditionFingerprint =
            "\xb1\x45\x93\xab\xca\x4f\xfc\xa3\x32\xd5\x73\x3d\x92\x93\xdc"
            "\x94\x21\x19\xb2\x19\xc8\xf1\x43\x42\x40\x9e\x4e\x77\xb8\x5c"
            "\xbf\xf3"s;
        Condition const Prefix12Cond{
            Type::prefixSha256,
            3144,
            makeSlice(Prefix12CondConditionFingerprint),
            std::bitset<5>{1}};
        auto const Thresh16CondConditionFingerprint =
            "\x42\xac\xb3\xc9\x1b\xc3\xeb\x65\x74\x9a\xf5\xb7\x1f\x46\x4a"
            "\x98\xf2\xf9\x77\x7e\x5c\xac\x9a\xa8\x2d\x1c\xaa\x60\x31\xdd"
            "\x5d\x57"s;
        Condition const Thresh16Cond{
            Type::thresholdSha256,
            276480,
            makeSlice(Thresh16CondConditionFingerprint),
            std::bitset<5>{25}};

        auto preim2 =
            std::make_unique<PreimageSha256>(makeSlice(preim2Preimage));
        std::vector<std::unique_ptr<Fulfillment>> thresh1Subfulfillments;
        thresh1Subfulfillments.emplace_back(std::move(preim2));
        std::vector<Condition> thresh1Subconditions{
            {Preim3Cond, Rsa4Cond, Ed5Cond}};
        auto thresh1 = std::make_unique<ThresholdSha256>(
            std::move(thresh1Subfulfillments), std::move(thresh1Subconditions));
        auto preim6 =
            std::make_unique<PreimageSha256>(makeSlice(preim6Preimage));
        auto rsa7 = std::make_unique<RsaSha256>(
            makeSlice(rsa7PublicKey), makeSlice(rsa7Sig));
        auto ed8 = std::make_unique<Ed25519>(ed8PublicKey, ed8Sig);
        std::vector<std::unique_ptr<Fulfillment>> thresh0Subfulfillments;
        thresh0Subfulfillments.emplace_back(std::move(thresh1));
        thresh0Subfulfillments.emplace_back(std::move(preim6));
        thresh0Subfulfillments.emplace_back(std::move(rsa7));
        thresh0Subfulfillments.emplace_back(std::move(ed8));
        std::vector<Condition> thresh0Subconditions{
            {Preim9Cond, Rsa10Cond, Ed11Cond, Prefix12Cond, Thresh16Cond}};
        ThresholdSha256 const thresh0(
            std::move(thresh0Subfulfillments), std::move(thresh0Subconditions));
        {
            auto const thresh0EncodedFulfillment =
                "\xa2\x82\x03\xe5\xa0\x82\x03\x0c\xa0\x0b\x80\x09\x49\x20\x61"
                "\x6d\x20\x72\x6f\x6f\x74\xa2\x81\x8a\xa0\x0d\xa0\x0b\x80\x09"
                "\x49\x20\x61\x6d\x20\x72\x6f\x6f\x74\xa1\x79\xa0\x25\x80\x20"
                "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
                "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
                "\xeb\x4e\x81\x01\x09\xa3\x27\x80\x20\x3a\x82\x3b\x32\x38\xb1"
                "\x3c\x17\x87\x60\x62\xec\xcf\x91\xb0\xaf\xaa\xe5\x11\xe6\xfb"
                "\xe2\xb0\x3d\x70\x4d\x1d\xad\xd6\x7c\xee\xa6\x81\x03\x01\x00"
                "\x00\xa4\x27\x80\x20\x90\xce\xed\x45\x98\x68\xff\x19\x2b\x27"
                "\xc1\x2a\xa2\x6e\x2e\x82\xf3\xbd\x71\x13\x61\xb0\x76\x40\x4d"
                "\x48\xea\x16\xfb\x27\x57\xdc\x81\x03\x02\x00\x00\xa3\x82\x02"
                "\x08\x80\x82\x01\x00\xb5\x8b\xa2\xa1\xc0\x5b\xc3\xa3\x64\xe9"
                "\x88\xe3\x25\x89\xa0\x6d\x73\x8a\x46\x09\x58\xb4\x85\x66\x87"
                "\x56\x85\x39\xee\x6d\x77\xbb\x99\x57\x90\x0e\x9c\x9c\xd5\x40"
                "\xc4\x8b\x37\xb1\xfe\x78\xb7\xe1\xe8\xb7\x74\xee\x74\x9c\xe5"
                "\xa3\xdd\xb7\x87\x77\xb7\x14\x08\x71\xc4\xec\x85\xe2\xe3\xc1"
                "\x1e\x34\x14\x21\xe1\xac\xd3\x20\x0f\xb8\x11\x24\x69\xa3\x7d"
                "\x98\x35\x2a\xdf\x56\x7d\x30\xf7\x31\x64\x73\xcf\x0c\x9e\xa6"
                "\x3b\x7d\x93\xb1\xc4\xb6\x78\x39\x52\x3b\x4d\xb6\xb2\x55\x17"
                "\x95\x27\xbd\xd6\xc1\x28\x7b\x82\xbb\xeb\xea\xec\x7e\x48\x35"
                "\xb3\x4b\x78\x30\xc4\x66\x32\x39\x2d\xd6\x5f\x59\xeb\x81\x64"
                "\x68\xdb\x94\xf4\x8e\x5f\x34\x4f\x3b\x03\xe5\xa6\x1b\x30\x6c"
                "\xea\xe8\xc6\x36\xf8\xee\x0b\x0f\xb5\xd2\xe7\xa4\x0a\xbc\xef"
                "\x80\x7e\xb1\x9b\xda\xe6\x40\x4a\x3f\x6f\xd1\x5a\x64\x84\xb2"
                "\x5c\xd2\xf0\x38\x7c\xcb\xd1\xcd\xdd\x37\x3f\x76\xe7\x08\x25"
                "\xe5\xd3\xd9\xe3\x21\x1b\x88\x41\x3d\x2d\x32\xff\xd3\xfe\x4d"
                "\x40\x85\x1b\x0f\xd6\xab\x4e\xb7\x38\x68\xe9\x67\xc7\xb5\xd1"
                "\x38\xdb\x85\x2e\x2f\x76\xea\x4a\xce\xff\x08\x5e\x93\x87\x98"
                "\xf7\x95\xeb\x49\xf6\x8d\x81\x82\x01\x00\x9c\xbb\xd1\xd5\x38"
                "\x48\x28\xb8\xc5\x5d\xea\x5a\x97\x04\xc5\xe8\x81\x33\xf5\xd8"
                "\xc5\x6e\x41\x8b\xf6\x44\xcd\x4a\x6a\x40\x00\xa3\xb0\x8b\x21"
                "\x9f\xc5\x90\x24\x6b\x3b\x42\x2d\xa1\xbe\x6b\xf4\x30\x93\xa0"
                "\xc2\x39\x1f\x42\x5b\x2f\xb0\xb0\xae\x4d\xa6\x3a\xcc\x9a\x0d"
                "\x3f\x86\xd0\xa6\x40\x85\x2e\xf7\xd4\x5e\xd5\x5e\xf0\x12\x37"
                "\x4b\xee\xa7\xcb\xa2\x73\x6f\xe2\x8f\x1f\x8a\xdc\xfd\xd5\x2b"
                "\xd6\xeb\x45\x53\x19\x64\xe6\x4f\x28\x12\x0f\xa2\xbf\x5f\xff"
                "\xc4\xd1\x11\x4c\x30\xd1\xb9\x77\x39\x59\x5c\x6e\x48\x52\xd5"
                "\xd9\xc9\xcc\x5f\xe8\x14\x53\x90\xf1\x40\x58\x30\x86\xde\x22"
                "\xa6\x85\x5c\xfc\x55\x7d\x29\xc8\xd1\xcb\x51\x5f\xb6\x63\x4d"
                "\xf8\xb7\xbc\xc3\x03\x42\xdd\x43\x18\x83\xd3\xe6\x3b\x79\x87"
                "\x75\x5f\x70\x7c\x8b\x65\x54\xdf\xa9\x80\x7d\xea\xd7\xa3\xc7"
                "\x45\x8a\x7a\x1c\x25\x69\x09\x4a\x3b\xed\x3c\x8b\xbb\x9d\x32"
                "\xab\x1e\xf0\xec\xda\xfb\xe5\x28\x09\x66\x2d\xb1\xa5\xf8\xa2"
                "\x2c\xa0\xdf\x6d\x29\xc0\x62\xdf\x0d\xf3\x71\x8c\xfa\x40\x9f"
                "\xe3\xcc\x61\x48\xa6\xee\x96\xc5\xfd\xd7\xee\xaf\x13\x98\x4d"
                "\x1b\x4c\xf9\x80\xa0\x73\xa8\xf5\xc7\x82\x47\xa4\x64\x80\x20"
                "\xb6\x55\xc8\xa4\x14\x20\x73\x44\x12\x06\xf6\xf7\xd0\x03\x74"
                "\x53\xaa\x74\x6c\xf1\x84\x0e\x86\x1d\xb1\x97\x1a\x04\x91\x83"
                "\x3b\x49\x81\x40\x4d\xf6\x5a\x0e\xa4\x6f\x3d\xa0\x76\xe4\x3a"
                "\xea\x69\x1e\x3f\xe4\x45\x51\x97\xc8\x7e\x3c\xd6\x34\xc8\x7f"
                "\xa3\xf9\xd7\xfe\x0a\xf4\x86\x18\xc5\xfa\x1c\x73\x88\x37\x33"
                "\x3d\xd4\x8c\x08\xf9\xa5\xf0\x83\x37\x06\x5b\xd3\xfc\x20\x12"
                "\x42\x7a\x7a\xd7\x60\xc5\xd1\x0b\xa1\x81\xd2\xa0\x25\x80\x20"
                "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
                "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
                "\xeb\x4e\x81\x01\x09\xa1\x2a\x80\x20\xb1\x45\x93\xab\xca\x4f"
                "\xfc\xa3\x32\xd5\x73\x3d\x92\x93\xdc\x94\x21\x19\xb2\x19\xc8"
                "\xf1\x43\x42\x40\x9e\x4e\x77\xb8\x5c\xbf\xf3\x81\x02\x0c\x48"
                "\x82\x02\x07\x80\xa2\x2b\x80\x20\x42\xac\xb3\xc9\x1b\xc3\xeb"
                "\x65\x74\x9a\xf5\xb7\x1f\x46\x4a\x98\xf2\xf9\x77\x7e\x5c\xac"
                "\x9a\xa8\x2d\x1c\xaa\x60\x31\xdd\x5d\x57\x81\x03\x04\x38\x00"
                "\x82\x02\x03\x98\xa3\x27\x80\x20\x3c\x73\x38\xcf\x23\xc6\x31"
                "\x53\x28\xc4\x27\xf8\x95\x87\x99\x83\x2d\x35\x3c\x03\x9b\xd1"
                "\xff\xff\x2e\x53\x20\xe9\x5e\x62\xb9\xb7\x81\x03\x01\x00\x00"
                "\xa4\x27\x80\x20\x41\x80\x08\xb2\x60\x74\x57\x6d\xac\xed\x74"
                "\x7f\x54\xdb\x96\x18\x91\x06\x0a\x95\xa1\x49\x17\xc7\x65\xe3"
                "\x94\xc8\x5e\x2c\x92\x20\x81\x03\x02\x00\x00"s;
            auto const thresh0EncodedCondition =
                "\xa2\x2b\x80\x20\x2f\x4e\x6d\xd9\x8d\x01\x4c\x29\xc5\x2f\x93"
                "\xa1\xfe\xbc\xd9\x0f\x52\x3d\xf1\xe7\xf8\xcf\xdc\x3f\xc5\xa3"
                "\x03\xd0\x5d\x15\xb9\x00\x81\x03\x0a\x6c\x00\x82\x02\x03\xd8"s;
            auto const thresh0EncodedFingerprint =
                "\x30\x82\x01\x7f\x80\x01\x04\xa1\x82\x01\x78\xa0\x25\x80\x20"
                "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
                "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
                "\xeb\x4e\x81\x01\x09\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1"
                "\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21"
                "\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa1"
                "\x2a\x80\x20\xb1\x45\x93\xab\xca\x4f\xfc\xa3\x32\xd5\x73\x3d"
                "\x92\x93\xdc\x94\x21\x19\xb2\x19\xc8\xf1\x43\x42\x40\x9e\x4e"
                "\x77\xb8\x5c\xbf\xf3\x81\x02\x0c\x48\x82\x02\x07\x80\xa2\x2b"
                "\x80\x20\x42\xac\xb3\xc9\x1b\xc3\xeb\x65\x74\x9a\xf5\xb7\x1f"
                "\x46\x4a\x98\xf2\xf9\x77\x7e\x5c\xac\x9a\xa8\x2d\x1c\xaa\x60"
                "\x31\xdd\x5d\x57\x81\x03\x04\x38\x00\x82\x02\x03\x98\xa2\x2b"
                "\x80\x20\x46\x88\xe3\xe8\x80\xca\xd5\x79\x36\xe0\x73\xb0\xf6"
                "\xd8\xab\xdd\xf6\x17\xe4\x83\x5f\xc7\xdb\xe4\x55\x54\x89\x84"
                "\x92\xef\x96\x28\x81\x03\x02\x10\x00\x82\x02\x03\x98\xa3\x27"
                "\x80\x20\x3c\x73\x38\xcf\x23\xc6\x31\x53\x28\xc4\x27\xf8\x95"
                "\x87\x99\x83\x2d\x35\x3c\x03\x9b\xd1\xff\xff\x2e\x53\x20\xe9"
                "\x5e\x62\xb9\xb7\x81\x03\x01\x00\x00\xa3\x27\x80\x20\x6c\x7b"
                "\xea\x83\xa1\xf4\x82\x3d\x36\xe7\x6e\xae\x1a\xbc\xa0\xba\x90"
                "\x3d\x96\xc1\xe6\xad\x3a\x47\xa5\xcb\x88\xab\x3c\x5f\xcc\xd5"
                "\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x41\x80\x08\xb2\x60\x74"
                "\x57\x6d\xac\xed\x74\x7f\x54\xdb\x96\x18\x91\x06\x0a\x95\xa1"
                "\x49\x17\xc7\x65\xe3\x94\xc8\x5e\x2c\x92\x20\x81\x03\x02\x00"
                "\x00\xa4\x27\x80\x20\xf1\x68\x96\xa6\x2e\xef\x7f\x47\x06\x51"
                "\x4c\xc6\x7e\x24\xf7\x29\x84\x9c\xd6\xb0\xd9\x4b\xd9\x0f\xc9"
                "\x34\x01\x9d\x92\xeb\xbc\x0a\x81\x03\x02\x00\x00"s;
            check(
                &thresh0,
                thresh0Msg,
                thresh0EncodedFulfillment,
                thresh0EncodedCondition,
                thresh0EncodedFingerprint);
        }
    }

    void
    testThresh20()
    {
        testcase("Thresh20");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * thresh0
        // ** Preim17Cond
        // ** Rsa18Cond
        // ** Ed19Cond
        // ** thresh1
        // *** Preim8Cond
        // *** Rsa9Cond
        // *** Ed10Cond
        // *** preim2
        // *** thresh3
        // **** Preim5Cond
        // **** Rsa6Cond
        // **** Ed7Cond
        // **** preim4
        // ** prefix11
        // *** prefix12
        // **** thresh13
        // ***** preim14
        // ** thresh15
        // *** preim16

        auto const preim2Preimage = "I am root"s;
        auto const preim2Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const preim4Preimage = "I am root"s;
        auto const preim4Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const thresh3Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim5CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim5Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim5CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa6CondConditionFingerprint =
            "\xee\x75\xbe\xb3\x52\x54\xbd\x24\x06\x3f\xd9\x32\x48\x19\xe1"
            "\x5c\x70\x85\x92\x11\x6c\x3a\xc1\x4c\x9b\x83\xeb\x05\xa7\x59"
            "\xe2\xa0"s;
        Condition const Rsa6Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa6CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed7CondConditionFingerprint =
            "\x1e\x5a\xaf\x3e\x46\xf6\xd4\xdf\x4d\x70\xf0\xa1\xd1\x35\x6d"
            "\xf0\x8b\x86\x91\xac\xb2\xf2\x24\xf0\x1a\xd4\x23\xc0\x21\x8d"
            "\x42\xc0"s;
        Condition const Ed7Cond{Type::ed25519Sha256,
                                131072,
                                makeSlice(Ed7CondConditionFingerprint),
                                std::bitset<5>{0}};
        auto const thresh1Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim8CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim8Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim8CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa9CondConditionFingerprint =
            "\xe5\x15\x0a\xbd\xf6\x06\xbe\xaa\x6c\x81\xf1\x88\x7e\x70\x64"
            "\x51\xeb\x6f\x70\xb1\xdd\xc5\xf1\x20\x53\xf7\xcb\x9f\x7f\xc7"
            "\xe4\x52"s;
        Condition const Rsa9Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa9CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed10CondConditionFingerprint =
            "\x00\x8b\xe6\x62\xd4\x30\x65\x1e\x40\xb3\x23\x05\x52\x3a\xf3"
            "\x16\xda\x09\xbe\x79\x5f\x41\xc9\x03\x93\x34\x5b\x7c\x24\x87"
            "\x62\xfa"s;
        Condition const Ed10Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed10CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const preim14Preimage = "I am root"s;
        auto const preim14Msg = "P12P11abcdefghijklmnopqrstuvwxyz"s;
        auto const thresh13Msg = "P12P11abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix12Prefix = "P12"s;
        auto const prefix12Msg = "P11abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix12MaxMsgLength = 14;
        auto const prefix11Prefix = "P11"s;
        auto const prefix11Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix11MaxMsgLength = 14;
        auto const preim16Preimage = "I am root"s;
        auto const preim16Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const thresh15Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const thresh0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim17CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim17Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim17CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa18CondConditionFingerprint =
            "\x9d\xbe\x65\xf4\xae\x81\x90\x79\x09\x18\xa2\x66\x12\x9c\x10"
            "\x94\x66\x21\x94\x70\x60\x20\x4a\x3d\x5f\xb3\x62\xb6\x06\x46"
            "\x37\xfe"s;
        Condition const Rsa18Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa18CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed19CondConditionFingerprint =
            "\xe5\x88\xb7\x6e\xec\x2d\xaf\x47\xc7\xa2\xf4\x6e\xbf\x7f\x5e"
            "\x46\xd7\xfa\x33\x2c\x0a\x7e\x86\x1d\x8c\x38\xa8\x93\x52\xe8"
            "\x97\xe9"s;
        Condition const Ed19Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed19CondConditionFingerprint),
                                 std::bitset<5>{0}};

        auto preim2 =
            std::make_unique<PreimageSha256>(makeSlice(preim2Preimage));
        auto preim4 =
            std::make_unique<PreimageSha256>(makeSlice(preim4Preimage));
        std::vector<std::unique_ptr<Fulfillment>> thresh3Subfulfillments;
        thresh3Subfulfillments.emplace_back(std::move(preim4));
        std::vector<Condition> thresh3Subconditions{
            {Preim5Cond, Rsa6Cond, Ed7Cond}};
        auto thresh3 = std::make_unique<ThresholdSha256>(
            std::move(thresh3Subfulfillments), std::move(thresh3Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh1Subfulfillments;
        thresh1Subfulfillments.emplace_back(std::move(preim2));
        thresh1Subfulfillments.emplace_back(std::move(thresh3));
        std::vector<Condition> thresh1Subconditions{
            {Preim8Cond, Rsa9Cond, Ed10Cond}};
        auto thresh1 = std::make_unique<ThresholdSha256>(
            std::move(thresh1Subfulfillments), std::move(thresh1Subconditions));
        auto preim14 =
            std::make_unique<PreimageSha256>(makeSlice(preim14Preimage));
        std::vector<std::unique_ptr<Fulfillment>> thresh13Subfulfillments;
        thresh13Subfulfillments.emplace_back(std::move(preim14));
        std::vector<Condition> thresh13Subconditions{};
        auto thresh13 = std::make_unique<ThresholdSha256>(
            std::move(thresh13Subfulfillments),
            std::move(thresh13Subconditions));
        auto prefix12 = std::make_unique<PrefixSha256>(
            makeSlice(prefix12Prefix),
            prefix12MaxMsgLength,
            std::move(thresh13));
        auto prefix11 = std::make_unique<PrefixSha256>(
            makeSlice(prefix11Prefix),
            prefix11MaxMsgLength,
            std::move(prefix12));
        auto preim16 =
            std::make_unique<PreimageSha256>(makeSlice(preim16Preimage));
        std::vector<std::unique_ptr<Fulfillment>> thresh15Subfulfillments;
        thresh15Subfulfillments.emplace_back(std::move(preim16));
        std::vector<Condition> thresh15Subconditions{};
        auto thresh15 = std::make_unique<ThresholdSha256>(
            std::move(thresh15Subfulfillments),
            std::move(thresh15Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh0Subfulfillments;
        thresh0Subfulfillments.emplace_back(std::move(thresh1));
        thresh0Subfulfillments.emplace_back(std::move(prefix11));
        thresh0Subfulfillments.emplace_back(std::move(thresh15));
        std::vector<Condition> thresh0Subconditions{
            {Preim17Cond, Rsa18Cond, Ed19Cond}};
        ThresholdSha256 const thresh0(
            std::move(thresh0Subfulfillments), std::move(thresh0Subconditions));
        {
            auto const thresh0EncodedFulfillment =
                "\xa2\x82\x01\xd9\xa0\x82\x01\x5a\xa1\x29\x80\x03\x50\x31\x31"
                "\x81\x01\x0e\xa2\x1f\xa1\x1d\x80\x03\x50\x31\x32\x81\x01\x0e"
                "\xa2\x13\xa2\x11\xa0\x0d\xa0\x0b\x80\x09\x49\x20\x61\x6d\x20"
                "\x72\x6f\x6f\x74\xa1\x00\xa2\x11\xa0\x0d\xa0\x0b\x80\x09\x49"
                "\x20\x61\x6d\x20\x72\x6f\x6f\x74\xa1\x00\xa2\x82\x01\x18\xa0"
                "\x81\x9a\xa0\x0b\x80\x09\x49\x20\x61\x6d\x20\x72\x6f\x6f\x74"
                "\xa2\x81\x8a\xa0\x0d\xa0\x0b\x80\x09\x49\x20\x61\x6d\x20\x72"
                "\x6f\x6f\x74\xa1\x79\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1"
                "\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21"
                "\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa3"
                "\x27\x80\x20\xee\x75\xbe\xb3\x52\x54\xbd\x24\x06\x3f\xd9\x32"
                "\x48\x19\xe1\x5c\x70\x85\x92\x11\x6c\x3a\xc1\x4c\x9b\x83\xeb"
                "\x05\xa7\x59\xe2\xa0\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x1e"
                "\x5a\xaf\x3e\x46\xf6\xd4\xdf\x4d\x70\xf0\xa1\xd1\x35\x6d\xf0"
                "\x8b\x86\x91\xac\xb2\xf2\x24\xf0\x1a\xd4\x23\xc0\x21\x8d\x42"
                "\xc0\x81\x03\x02\x00\x00\xa1\x79\xa0\x25\x80\x20\x5d\xa0\x30"
                "\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c"
                "\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81"
                "\x01\x09\xa3\x27\x80\x20\xe5\x15\x0a\xbd\xf6\x06\xbe\xaa\x6c"
                "\x81\xf1\x88\x7e\x70\x64\x51\xeb\x6f\x70\xb1\xdd\xc5\xf1\x20"
                "\x53\xf7\xcb\x9f\x7f\xc7\xe4\x52\x81\x03\x01\x00\x00\xa4\x27"
                "\x80\x20\x00\x8b\xe6\x62\xd4\x30\x65\x1e\x40\xb3\x23\x05\x52"
                "\x3a\xf3\x16\xda\x09\xbe\x79\x5f\x41\xc9\x03\x93\x34\x5b\x7c"
                "\x24\x87\x62\xfa\x81\x03\x02\x00\x00\xa1\x79\xa0\x25\x80\x20"
                "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
                "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
                "\xeb\x4e\x81\x01\x09\xa3\x27\x80\x20\x9d\xbe\x65\xf4\xae\x81"
                "\x90\x79\x09\x18\xa2\x66\x12\x9c\x10\x94\x66\x21\x94\x70\x60"
                "\x20\x4a\x3d\x5f\xb3\x62\xb6\x06\x46\x37\xfe\x81\x03\x01\x00"
                "\x00\xa4\x27\x80\x20\xe5\x88\xb7\x6e\xec\x2d\xaf\x47\xc7\xa2"
                "\xf4\x6e\xbf\x7f\x5e\x46\xd7\xfa\x33\x2c\x0a\x7e\x86\x1d\x8c"
                "\x38\xa8\x93\x52\xe8\x97\xe9\x81\x03\x02\x00\x00"s;
            auto const thresh0EncodedCondition =
                "\xa2\x2b\x80\x20\x2f\xb3\x25\x72\x01\x2a\x01\x3c\xf1\x65\xd4"
                "\x31\x80\xbd\x1b\x5b\x74\xd0\x76\xbe\x31\x68\x8e\x9a\xa0\x11"
                "\xaa\x90\xd5\xf1\x85\xdf\x81\x03\x07\x3c\x00\x82\x02\x03\xd8"s;
            auto const thresh0EncodedFingerprint =
                "\x30\x82\x01\x04\x80\x01\x03\xa1\x81\xfe\xa0\x25\x80\x20\x5d"
                "\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b"
                "\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb"
                "\x4e\x81\x01\x09\xa1\x2a\x80\x20\x1b\xf7\xc7\x25\x93\xd2\xc6"
                "\xa2\xaf\xdd\xa9\xbb\x75\x31\x11\x09\xdf\xcc\x96\x81\x06\x4e"
                "\xee\xcb\xd0\xcc\xab\x74\x6b\x3e\x26\x0f\x81\x02\x0c\x2b\x82"
                "\x02\x05\xa0\xa2\x2a\x80\x20\x57\xb7\x93\x0b\xb8\xe2\x21\xe9"
                "\x42\x8c\x85\x8f\x27\x2d\x4c\xa0\x85\xa0\x40\x6c\x4c\xed\x25"
                "\x22\x0d\xef\x3f\x73\xd9\xcf\x02\xc9\x81\x02\x04\x09\x82\x02"
                "\x07\x80\xa2\x2b\x80\x20\x9c\x76\x66\xc0\x4b\x86\x50\x6c\x38"
                "\x0d\xe9\xd8\x43\xac\x79\xfe\x4a\x1f\x31\x6e\x2b\x7c\x23\x3e"
                "\xef\x6c\x5b\xc8\xef\x9a\x5e\x58\x81\x03\x04\x24\x00\x82\x02"
                "\x03\x98\xa3\x27\x80\x20\x9d\xbe\x65\xf4\xae\x81\x90\x79\x09"
                "\x18\xa2\x66\x12\x9c\x10\x94\x66\x21\x94\x70\x60\x20\x4a\x3d"
                "\x5f\xb3\x62\xb6\x06\x46\x37\xfe\x81\x03\x01\x00\x00\xa4\x27"
                "\x80\x20\xe5\x88\xb7\x6e\xec\x2d\xaf\x47\xc7\xa2\xf4\x6e\xbf"
                "\x7f\x5e\x46\xd7\xfa\x33\x2c\x0a\x7e\x86\x1d\x8c\x38\xa8\x93"
                "\x52\xe8\x97\xe9\x81\x03\x02\x00\x00"s;
            check(
                &thresh0,
                thresh0Msg,
                thresh0EncodedFulfillment,
                thresh0EncodedCondition,
                thresh0EncodedFingerprint);
        }
    }

    void
    testThresh21()
    {
        testcase("Thresh21");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * thresh0
        // ** Preim14Cond
        // ** Rsa15Cond
        // ** Ed16Cond
        // ** Prefix17Cond
        // ** Thresh21Cond
        // ** thresh1
        // *** Preim8Cond
        // *** Rsa9Cond
        // *** Ed10Cond
        // *** preim2
        // *** thresh3
        // **** Preim5Cond
        // **** Rsa6Cond
        // **** Ed7Cond
        // **** preim4
        // ** preim11
        // ** rsa12
        // ** ed13

        auto const preim2Preimage = "I am root"s;
        auto const preim2Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const preim4Preimage = "I am root"s;
        auto const preim4Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const thresh3Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim5CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim5Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim5CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa6CondConditionFingerprint =
            "\xee\x75\xbe\xb3\x52\x54\xbd\x24\x06\x3f\xd9\x32\x48\x19\xe1"
            "\x5c\x70\x85\x92\x11\x6c\x3a\xc1\x4c\x9b\x83\xeb\x05\xa7\x59"
            "\xe2\xa0"s;
        Condition const Rsa6Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa6CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed7CondConditionFingerprint =
            "\x1e\x5a\xaf\x3e\x46\xf6\xd4\xdf\x4d\x70\xf0\xa1\xd1\x35\x6d"
            "\xf0\x8b\x86\x91\xac\xb2\xf2\x24\xf0\x1a\xd4\x23\xc0\x21\x8d"
            "\x42\xc0"s;
        Condition const Ed7Cond{Type::ed25519Sha256,
                                131072,
                                makeSlice(Ed7CondConditionFingerprint),
                                std::bitset<5>{0}};
        auto const thresh1Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim8CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim8Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim8CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa9CondConditionFingerprint =
            "\xe5\x15\x0a\xbd\xf6\x06\xbe\xaa\x6c\x81\xf1\x88\x7e\x70\x64"
            "\x51\xeb\x6f\x70\xb1\xdd\xc5\xf1\x20\x53\xf7\xcb\x9f\x7f\xc7"
            "\xe4\x52"s;
        Condition const Rsa9Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa9CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed10CondConditionFingerprint =
            "\x00\x8b\xe6\x62\xd4\x30\x65\x1e\x40\xb3\x23\x05\x52\x3a\xf3"
            "\x16\xda\x09\xbe\x79\x5f\x41\xc9\x03\x93\x34\x5b\x7c\x24\x87"
            "\x62\xfa"s;
        Condition const Ed10Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed10CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const preim11Preimage = "I am root"s;
        auto const preim11Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const rsa12Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa12PublicKey{
            {0xd9, 0x25, 0xc3, 0xba, 0x0a, 0x46, 0x6e, 0xa9, 0x1d, 0x05, 0xd7,
             0x54, 0xf1, 0xff, 0xf4, 0xaf, 0xe5, 0x13, 0xcf, 0xd6, 0x74, 0xb0,
             0xcf, 0xc2, 0x8c, 0x68, 0x5c, 0xa9, 0xf3, 0x44, 0x4b, 0xfd, 0x4a,
             0x4d, 0x29, 0x64, 0xbc, 0xa8, 0x98, 0xf5, 0x35, 0x0a, 0x65, 0xe5,
             0xcd, 0x5d, 0x08, 0x9f, 0x58, 0x22, 0xed, 0x21, 0x78, 0x04, 0x4d,
             0x2a, 0xce, 0x80, 0x33, 0x19, 0x5b, 0x7a, 0xbd, 0xa6, 0x89, 0xfa,
             0x80, 0xa4, 0xf5, 0x32, 0xa6, 0xb1, 0x34, 0x61, 0x55, 0x5a, 0xbd,
             0x05, 0xaf, 0x4b, 0x4b, 0xdf, 0xe0, 0xa9, 0x3e, 0x1d, 0x2f, 0x3e,
             0xaf, 0x0c, 0x65, 0x32, 0xc6, 0xf2, 0xe0, 0x5c, 0x09, 0xc0, 0xa2,
             0x41, 0xe6, 0xc9, 0x96, 0x5e, 0x88, 0x62, 0x4a, 0x28, 0x4b, 0x23,
             0x2f, 0xcf, 0xb3, 0xb7, 0x1e, 0x11, 0x7f, 0xc4, 0x63, 0x1a, 0xe4,
             0x24, 0x29, 0x46, 0xf4, 0x48, 0xde, 0x30, 0x45, 0x97, 0xf8, 0x6c,
             0x8d, 0x4e, 0x4a, 0xce, 0x5e, 0x41, 0xb2, 0xb7, 0x5a, 0xd5, 0x94,
             0x42, 0x5a, 0x14, 0xd1, 0x11, 0x99, 0xc5, 0xeb, 0x66, 0xbe, 0xb1,
             0xc6, 0xc3, 0xdb, 0x2f, 0x8f, 0xa0, 0x6c, 0xa9, 0x27, 0x0f, 0xc0,
             0x92, 0x77, 0x0b, 0x8d, 0x66, 0xb8, 0x93, 0x0b, 0xc0, 0x5c, 0xcb,
             0x51, 0x4e, 0xa3, 0x83, 0xd2, 0xbd, 0x04, 0xd8, 0xc0, 0x0c, 0xb2,
             0xf7, 0x38, 0x4e, 0x6a, 0xec, 0xfe, 0x76, 0xd9, 0x71, 0x0b, 0x90,
             0x21, 0x7c, 0xbf, 0x07, 0xc4, 0xd8, 0x4c, 0x6d, 0xb9, 0x35, 0x48,
             0x5d, 0x82, 0xea, 0x61, 0xc5, 0x14, 0xff, 0x25, 0x50, 0x47, 0xaf,
             0x06, 0x58, 0xa9, 0x95, 0x2c, 0xdd, 0xe5, 0xbd, 0x95, 0x4a, 0x7b,
             0x27, 0xa1, 0x46, 0xe3, 0xf0, 0x16, 0xe8, 0xf9, 0xba, 0x43, 0xb8,
             0x77, 0xdc, 0x87, 0x81, 0x3a, 0xc0, 0xf2, 0xed, 0x3b, 0x03, 0x5e,
             0xe6, 0x89, 0x71}};
        std::array<std::uint8_t, 256> const rsa12Sig{
            {0x31, 0x20, 0x63, 0x0e, 0xa2, 0x43, 0xc4, 0x15, 0xda, 0xca, 0xf4,
             0xf1, 0xc6, 0x38, 0x4a, 0x1a, 0x70, 0xd2, 0x5d, 0x1f, 0x4b, 0xb1,
             0x77, 0xba, 0xf9, 0xbf, 0xbe, 0x50, 0x7f, 0x30, 0xde, 0xf4, 0xec,
             0xca, 0xc6, 0x59, 0x20, 0x87, 0xb2, 0x0f, 0xa2, 0x1c, 0xd1, 0xb4,
             0x87, 0x6f, 0xf9, 0x9a, 0x9d, 0xa0, 0x0e, 0xd4, 0x8b, 0x58, 0xa5,
             0xcf, 0x7e, 0x78, 0x28, 0xa5, 0xe2, 0xe5, 0x96, 0x76, 0xd7, 0x9a,
             0x81, 0x19, 0xa1, 0x14, 0x6a, 0xa6, 0xa1, 0x26, 0xda, 0xef, 0xc9,
             0x92, 0xd9, 0xb5, 0x76, 0x8f, 0xa1, 0xf6, 0x5d, 0xdc, 0x21, 0xbd,
             0xc6, 0xca, 0xcf, 0xa8, 0x71, 0xb4, 0x20, 0x8b, 0x11, 0xca, 0xd2,
             0x9d, 0x21, 0x83, 0x75, 0xa5, 0xb5, 0xb2, 0xb2, 0xdf, 0x4b, 0x57,
             0xd6, 0xd3, 0x53, 0xe2, 0x0e, 0x84, 0xbb, 0xde, 0xe5, 0x16, 0x3d,
             0xfc, 0x54, 0x62, 0x49, 0xe8, 0x87, 0x63, 0x2f, 0xa6, 0x57, 0x46,
             0x4e, 0x22, 0xb7, 0x67, 0xc3, 0x52, 0x28, 0x93, 0xf5, 0x2a, 0x70,
             0xac, 0x0a, 0x18, 0x32, 0x68, 0x55, 0x20, 0xba, 0xa0, 0x99, 0x84,
             0x8c, 0x37, 0x08, 0x6f, 0x49, 0xe9, 0x76, 0x20, 0x85, 0x26, 0x19,
             0x55, 0x89, 0x3d, 0xf0, 0xf2, 0xd6, 0x86, 0x4b, 0x03, 0x9e, 0x85,
             0x3c, 0x26, 0xf8, 0x5c, 0x6f, 0xb3, 0xbe, 0x5c, 0xbe, 0x37, 0xdc,
             0xee, 0x9f, 0x4f, 0x60, 0x1f, 0x07, 0x08, 0x09, 0xc4, 0x5e, 0xcc,
             0xa9, 0xe3, 0x27, 0xd0, 0x1e, 0xcf, 0x76, 0xc0, 0x0a, 0x7d, 0x72,
             0xe9, 0x10, 0xa7, 0x8c, 0x84, 0x22, 0x52, 0xc3, 0x69, 0xbd, 0xcd,
             0xc8, 0x28, 0x1c, 0x72, 0x9c, 0x3d, 0x14, 0x6e, 0x06, 0x02, 0x57,
             0x7a, 0x87, 0x9b, 0x7f, 0xdd, 0xd5, 0x42, 0xdc, 0x66, 0x04, 0x13,
             0x3b, 0x4a, 0x0d, 0x0f, 0xfd, 0x62, 0xfb, 0x8d, 0xd9, 0x9a, 0xba,
             0xe6, 0x93, 0xf4}};
        auto const ed13Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed13PublicKey{
            {0xe8, 0xb1, 0xe9, 0x04, 0xef, 0x8f, 0x78, 0x4c, 0x54, 0xf2, 0x45,
             0x60, 0x93, 0xb4, 0xc6, 0xa4, 0xc2, 0x9a, 0xa9, 0xb7, 0x5a, 0x0b,
             0x06, 0xf1, 0x78, 0xdc, 0xa9, 0x08, 0x12, 0xb2, 0x2f, 0xf4}};
        std::array<std::uint8_t, 64> const ed13Sig{
            {0x03, 0x17, 0xa0, 0x49, 0x7b, 0xee, 0x0d, 0x84, 0x64, 0xee, 0xa8,
             0xc1, 0xe6, 0x3e, 0xc6, 0xed, 0xd6, 0x25, 0x7e, 0x7d, 0xad, 0x96,
             0xf3, 0x82, 0x4a, 0xa6, 0xb1, 0x38, 0xf1, 0x2f, 0x54, 0x6a, 0x52,
             0x39, 0x26, 0x08, 0x2d, 0xe6, 0xfd, 0xb2, 0xfa, 0x23, 0xb3, 0x91,
             0x30, 0x07, 0x9a, 0x4b, 0x63, 0xbb, 0x6f, 0x55, 0xcb, 0x0a, 0xe9,
             0xb1, 0xfb, 0x40, 0x9e, 0x1f, 0x87, 0x70, 0x5a, 0x07}};
        std::array<std::uint8_t, 32> const ed13SigningKey{
            {0x0c, 0x45, 0x3e, 0x20, 0xe2, 0x12, 0x63, 0x6a, 0x7c, 0x36, 0x75,
             0xad, 0x2e, 0xd7, 0xc0, 0x39, 0x27, 0x7e, 0x38, 0x9a, 0xa2, 0xd3,
             0x3b, 0x24, 0x18, 0xf8, 0x68, 0x4e, 0x7f, 0xfa, 0x5d, 0xf3}};
        (void)ed13SigningKey;
        auto const thresh0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim14CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim14Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim14CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa15CondConditionFingerprint =
            "\x55\x6b\x6d\xe3\x00\xd4\xf3\x7e\x75\x3a\x68\xfc\x25\xdf\xf2"
            "\xf7\x18\x54\xa5\x55\x0c\xa5\xa9\x65\xbf\x66\x9e\x4e\x49\x56"
            "\x1e\xf1"s;
        Condition const Rsa15Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa15CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed16CondConditionFingerprint =
            "\xe4\x66\x69\x86\x87\x57\x0e\xac\xf1\xfd\x06\x81\x48\x90\x82"
            "\x42\x48\x50\x75\x8e\xd4\x2d\xf3\x02\x37\x89\x28\xc5\x68\xd7"
            "\xa0\x11"s;
        Condition const Ed16Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed16CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Prefix17CondConditionFingerprint =
            "\xbc\x27\x82\x04\x45\x26\xe1\x8c\xa2\x1a\x0f\xb7\xce\x61\x3d"
            "\x78\x75\x5e\x97\x13\x09\x57\xa6\x6f\x20\xf0\x02\x5b\x44\xc2"
            "\x8a\x39"s;
        Condition const Prefix17Cond{
            Type::prefixSha256,
            3123,
            makeSlice(Prefix17CondConditionFingerprint),
            std::bitset<5>{5}};
        auto const Thresh21CondConditionFingerprint =
            "\x57\xb7\x93\x0b\xb8\xe2\x21\xe9\x42\x8c\x85\x8f\x27\x2d\x4c"
            "\xa0\x85\xa0\x40\x6c\x4c\xed\x25\x22\x0d\xef\x3f\x73\xd9\xcf"
            "\x02\xc9"s;
        Condition const Thresh21Cond{
            Type::thresholdSha256,
            1033,
            makeSlice(Thresh21CondConditionFingerprint),
            std::bitset<5>{1}};

        auto preim2 =
            std::make_unique<PreimageSha256>(makeSlice(preim2Preimage));
        auto preim4 =
            std::make_unique<PreimageSha256>(makeSlice(preim4Preimage));
        std::vector<std::unique_ptr<Fulfillment>> thresh3Subfulfillments;
        thresh3Subfulfillments.emplace_back(std::move(preim4));
        std::vector<Condition> thresh3Subconditions{
            {Preim5Cond, Rsa6Cond, Ed7Cond}};
        auto thresh3 = std::make_unique<ThresholdSha256>(
            std::move(thresh3Subfulfillments), std::move(thresh3Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh1Subfulfillments;
        thresh1Subfulfillments.emplace_back(std::move(preim2));
        thresh1Subfulfillments.emplace_back(std::move(thresh3));
        std::vector<Condition> thresh1Subconditions{
            {Preim8Cond, Rsa9Cond, Ed10Cond}};
        auto thresh1 = std::make_unique<ThresholdSha256>(
            std::move(thresh1Subfulfillments), std::move(thresh1Subconditions));
        auto preim11 =
            std::make_unique<PreimageSha256>(makeSlice(preim11Preimage));
        auto rsa12 = std::make_unique<RsaSha256>(
            makeSlice(rsa12PublicKey), makeSlice(rsa12Sig));
        auto ed13 = std::make_unique<Ed25519>(ed13PublicKey, ed13Sig);
        std::vector<std::unique_ptr<Fulfillment>> thresh0Subfulfillments;
        thresh0Subfulfillments.emplace_back(std::move(thresh1));
        thresh0Subfulfillments.emplace_back(std::move(preim11));
        thresh0Subfulfillments.emplace_back(std::move(rsa12));
        thresh0Subfulfillments.emplace_back(std::move(ed13));
        std::vector<Condition> thresh0Subconditions{
            {Preim14Cond, Rsa15Cond, Ed16Cond, Prefix17Cond, Thresh21Cond}};
        ThresholdSha256 const thresh0(
            std::move(thresh0Subfulfillments), std::move(thresh0Subconditions));
        {
            auto const thresh0EncodedFulfillment =
                "\xa2\x82\x04\x73\xa0\x82\x03\x9b\xa0\x0b\x80\x09\x49\x20\x61"
                "\x6d\x20\x72\x6f\x6f\x74\xa2\x82\x01\x18\xa0\x81\x9a\xa0\x0b"
                "\x80\x09\x49\x20\x61\x6d\x20\x72\x6f\x6f\x74\xa2\x81\x8a\xa0"
                "\x0d\xa0\x0b\x80\x09\x49\x20\x61\x6d\x20\x72\x6f\x6f\x74\xa1"
                "\x79\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8"
                "\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc"
                "\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa3\x27\x80\x20\xee"
                "\x75\xbe\xb3\x52\x54\xbd\x24\x06\x3f\xd9\x32\x48\x19\xe1\x5c"
                "\x70\x85\x92\x11\x6c\x3a\xc1\x4c\x9b\x83\xeb\x05\xa7\x59\xe2"
                "\xa0\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x1e\x5a\xaf\x3e\x46"
                "\xf6\xd4\xdf\x4d\x70\xf0\xa1\xd1\x35\x6d\xf0\x8b\x86\x91\xac"
                "\xb2\xf2\x24\xf0\x1a\xd4\x23\xc0\x21\x8d\x42\xc0\x81\x03\x02"
                "\x00\x00\xa1\x79\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75"
                "\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c"
                "\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa3\x27"
                "\x80\x20\xe5\x15\x0a\xbd\xf6\x06\xbe\xaa\x6c\x81\xf1\x88\x7e"
                "\x70\x64\x51\xeb\x6f\x70\xb1\xdd\xc5\xf1\x20\x53\xf7\xcb\x9f"
                "\x7f\xc7\xe4\x52\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x00\x8b"
                "\xe6\x62\xd4\x30\x65\x1e\x40\xb3\x23\x05\x52\x3a\xf3\x16\xda"
                "\x09\xbe\x79\x5f\x41\xc9\x03\x93\x34\x5b\x7c\x24\x87\x62\xfa"
                "\x81\x03\x02\x00\x00\xa3\x82\x02\x08\x80\x82\x01\x00\xd9\x25"
                "\xc3\xba\x0a\x46\x6e\xa9\x1d\x05\xd7\x54\xf1\xff\xf4\xaf\xe5"
                "\x13\xcf\xd6\x74\xb0\xcf\xc2\x8c\x68\x5c\xa9\xf3\x44\x4b\xfd"
                "\x4a\x4d\x29\x64\xbc\xa8\x98\xf5\x35\x0a\x65\xe5\xcd\x5d\x08"
                "\x9f\x58\x22\xed\x21\x78\x04\x4d\x2a\xce\x80\x33\x19\x5b\x7a"
                "\xbd\xa6\x89\xfa\x80\xa4\xf5\x32\xa6\xb1\x34\x61\x55\x5a\xbd"
                "\x05\xaf\x4b\x4b\xdf\xe0\xa9\x3e\x1d\x2f\x3e\xaf\x0c\x65\x32"
                "\xc6\xf2\xe0\x5c\x09\xc0\xa2\x41\xe6\xc9\x96\x5e\x88\x62\x4a"
                "\x28\x4b\x23\x2f\xcf\xb3\xb7\x1e\x11\x7f\xc4\x63\x1a\xe4\x24"
                "\x29\x46\xf4\x48\xde\x30\x45\x97\xf8\x6c\x8d\x4e\x4a\xce\x5e"
                "\x41\xb2\xb7\x5a\xd5\x94\x42\x5a\x14\xd1\x11\x99\xc5\xeb\x66"
                "\xbe\xb1\xc6\xc3\xdb\x2f\x8f\xa0\x6c\xa9\x27\x0f\xc0\x92\x77"
                "\x0b\x8d\x66\xb8\x93\x0b\xc0\x5c\xcb\x51\x4e\xa3\x83\xd2\xbd"
                "\x04\xd8\xc0\x0c\xb2\xf7\x38\x4e\x6a\xec\xfe\x76\xd9\x71\x0b"
                "\x90\x21\x7c\xbf\x07\xc4\xd8\x4c\x6d\xb9\x35\x48\x5d\x82\xea"
                "\x61\xc5\x14\xff\x25\x50\x47\xaf\x06\x58\xa9\x95\x2c\xdd\xe5"
                "\xbd\x95\x4a\x7b\x27\xa1\x46\xe3\xf0\x16\xe8\xf9\xba\x43\xb8"
                "\x77\xdc\x87\x81\x3a\xc0\xf2\xed\x3b\x03\x5e\xe6\x89\x71\x81"
                "\x82\x01\x00\x31\x20\x63\x0e\xa2\x43\xc4\x15\xda\xca\xf4\xf1"
                "\xc6\x38\x4a\x1a\x70\xd2\x5d\x1f\x4b\xb1\x77\xba\xf9\xbf\xbe"
                "\x50\x7f\x30\xde\xf4\xec\xca\xc6\x59\x20\x87\xb2\x0f\xa2\x1c"
                "\xd1\xb4\x87\x6f\xf9\x9a\x9d\xa0\x0e\xd4\x8b\x58\xa5\xcf\x7e"
                "\x78\x28\xa5\xe2\xe5\x96\x76\xd7\x9a\x81\x19\xa1\x14\x6a\xa6"
                "\xa1\x26\xda\xef\xc9\x92\xd9\xb5\x76\x8f\xa1\xf6\x5d\xdc\x21"
                "\xbd\xc6\xca\xcf\xa8\x71\xb4\x20\x8b\x11\xca\xd2\x9d\x21\x83"
                "\x75\xa5\xb5\xb2\xb2\xdf\x4b\x57\xd6\xd3\x53\xe2\x0e\x84\xbb"
                "\xde\xe5\x16\x3d\xfc\x54\x62\x49\xe8\x87\x63\x2f\xa6\x57\x46"
                "\x4e\x22\xb7\x67\xc3\x52\x28\x93\xf5\x2a\x70\xac\x0a\x18\x32"
                "\x68\x55\x20\xba\xa0\x99\x84\x8c\x37\x08\x6f\x49\xe9\x76\x20"
                "\x85\x26\x19\x55\x89\x3d\xf0\xf2\xd6\x86\x4b\x03\x9e\x85\x3c"
                "\x26\xf8\x5c\x6f\xb3\xbe\x5c\xbe\x37\xdc\xee\x9f\x4f\x60\x1f"
                "\x07\x08\x09\xc4\x5e\xcc\xa9\xe3\x27\xd0\x1e\xcf\x76\xc0\x0a"
                "\x7d\x72\xe9\x10\xa7\x8c\x84\x22\x52\xc3\x69\xbd\xcd\xc8\x28"
                "\x1c\x72\x9c\x3d\x14\x6e\x06\x02\x57\x7a\x87\x9b\x7f\xdd\xd5"
                "\x42\xdc\x66\x04\x13\x3b\x4a\x0d\x0f\xfd\x62\xfb\x8d\xd9\x9a"
                "\xba\xe6\x93\xf4\xa4\x64\x80\x20\xe8\xb1\xe9\x04\xef\x8f\x78"
                "\x4c\x54\xf2\x45\x60\x93\xb4\xc6\xa4\xc2\x9a\xa9\xb7\x5a\x0b"
                "\x06\xf1\x78\xdc\xa9\x08\x12\xb2\x2f\xf4\x81\x40\x03\x17\xa0"
                "\x49\x7b\xee\x0d\x84\x64\xee\xa8\xc1\xe6\x3e\xc6\xed\xd6\x25"
                "\x7e\x7d\xad\x96\xf3\x82\x4a\xa6\xb1\x38\xf1\x2f\x54\x6a\x52"
                "\x39\x26\x08\x2d\xe6\xfd\xb2\xfa\x23\xb3\x91\x30\x07\x9a\x4b"
                "\x63\xbb\x6f\x55\xcb\x0a\xe9\xb1\xfb\x40\x9e\x1f\x87\x70\x5a"
                "\x07\xa1\x81\xd1\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75"
                "\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c"
                "\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa1\x2a"
                "\x80\x20\xbc\x27\x82\x04\x45\x26\xe1\x8c\xa2\x1a\x0f\xb7\xce"
                "\x61\x3d\x78\x75\x5e\x97\x13\x09\x57\xa6\x6f\x20\xf0\x02\x5b"
                "\x44\xc2\x8a\x39\x81\x02\x0c\x33\x82\x02\x05\xa0\xa2\x2a\x80"
                "\x20\x57\xb7\x93\x0b\xb8\xe2\x21\xe9\x42\x8c\x85\x8f\x27\x2d"
                "\x4c\xa0\x85\xa0\x40\x6c\x4c\xed\x25\x22\x0d\xef\x3f\x73\xd9"
                "\xcf\x02\xc9\x81\x02\x04\x09\x82\x02\x07\x80\xa3\x27\x80\x20"
                "\x55\x6b\x6d\xe3\x00\xd4\xf3\x7e\x75\x3a\x68\xfc\x25\xdf\xf2"
                "\xf7\x18\x54\xa5\x55\x0c\xa5\xa9\x65\xbf\x66\x9e\x4e\x49\x56"
                "\x1e\xf1\x81\x03\x01\x00\x00\xa4\x27\x80\x20\xe4\x66\x69\x86"
                "\x87\x57\x0e\xac\xf1\xfd\x06\x81\x48\x90\x82\x42\x48\x50\x75"
                "\x8e\xd4\x2d\xf3\x02\x37\x89\x28\xc5\x68\xd7\xa0\x11\x81\x03"
                "\x02\x00\x00"s;
            auto const thresh0EncodedCondition =
                "\xa2\x2b\x80\x20\xd1\x7e\x8f\x10\x3e\x84\x5b\x86\x46\x7b\x39"
                "\xf8\x77\xc3\x98\x30\x1d\xc1\xf7\x27\xcf\xf8\x40\x47\x07\xf6"
                "\xab\xcc\x64\x10\xed\xd7\x81\x03\x09\x48\x00\x82\x02\x03\xd8"s;
            auto const thresh0EncodedFingerprint =
                "\x30\x82\x01\x7e\x80\x01\x04\xa1\x82\x01\x77\xa0\x25\x80\x20"
                "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
                "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
                "\xeb\x4e\x81\x01\x09\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1"
                "\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21"
                "\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa1"
                "\x2a\x80\x20\xbc\x27\x82\x04\x45\x26\xe1\x8c\xa2\x1a\x0f\xb7"
                "\xce\x61\x3d\x78\x75\x5e\x97\x13\x09\x57\xa6\x6f\x20\xf0\x02"
                "\x5b\x44\xc2\x8a\x39\x81\x02\x0c\x33\x82\x02\x05\xa0\xa2\x2a"
                "\x80\x20\x57\xb7\x93\x0b\xb8\xe2\x21\xe9\x42\x8c\x85\x8f\x27"
                "\x2d\x4c\xa0\x85\xa0\x40\x6c\x4c\xed\x25\x22\x0d\xef\x3f\x73"
                "\xd9\xcf\x02\xc9\x81\x02\x04\x09\x82\x02\x07\x80\xa2\x2b\x80"
                "\x20\x9c\x76\x66\xc0\x4b\x86\x50\x6c\x38\x0d\xe9\xd8\x43\xac"
                "\x79\xfe\x4a\x1f\x31\x6e\x2b\x7c\x23\x3e\xef\x6c\x5b\xc8\xef"
                "\x9a\x5e\x58\x81\x03\x04\x24\x00\x82\x02\x03\x98\xa3\x27\x80"
                "\x20\x38\xb9\xf0\xeb\x68\x8b\x9f\x55\x37\x9a\xec\x07\xd4\xa2"
                "\x13\xac\x34\xa1\x67\x31\x34\xea\xc2\x2f\xef\x13\xe3\x5c\xcf"
                "\x8f\x90\x1e\x81\x03\x01\x00\x00\xa3\x27\x80\x20\x55\x6b\x6d"
                "\xe3\x00\xd4\xf3\x7e\x75\x3a\x68\xfc\x25\xdf\xf2\xf7\x18\x54"
                "\xa5\x55\x0c\xa5\xa9\x65\xbf\x66\x9e\x4e\x49\x56\x1e\xf1\x81"
                "\x03\x01\x00\x00\xa4\x27\x80\x20\x7c\x54\x6a\x6d\x7f\x00\x52"
                "\x31\x03\xe7\xb4\x5b\x1c\x9f\x72\xeb\x3c\x18\x08\xa3\x24\xb2"
                "\x63\x5f\x77\x55\x4a\x42\xdb\x1e\xff\x1e\x81\x03\x02\x00\x00"
                "\xa4\x27\x80\x20\xe4\x66\x69\x86\x87\x57\x0e\xac\xf1\xfd\x06"
                "\x81\x48\x90\x82\x42\x48\x50\x75\x8e\xd4\x2d\xf3\x02\x37\x89"
                "\x28\xc5\x68\xd7\xa0\x11\x81\x03\x02\x00\x00"s;
            check(
                &thresh0,
                thresh0Msg,
                thresh0EncodedFulfillment,
                thresh0EncodedCondition,
                thresh0EncodedFingerprint);
        }
    }

    void
    testThresh22()
    {
        testcase("Thresh22");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * thresh0
        // ** Preim28Cond
        // ** Rsa29Cond
        // ** Ed30Cond
        // ** thresh1
        // *** Preim8Cond
        // *** Rsa9Cond
        // *** Ed10Cond
        // *** Thresh11Cond
        // *** preim2
        // *** thresh3
        // **** Preim5Cond
        // **** Rsa6Cond
        // **** Ed7Cond
        // **** preim4
        // ** prefix16
        // *** prefix17
        // **** thresh18
        // ***** Preim20Cond
        // ***** Rsa21Cond
        // ***** Ed22Cond
        // ***** preim19
        // ** thresh23
        // *** Preim25Cond
        // *** Rsa26Cond
        // *** Ed27Cond
        // *** preim24

        auto const preim2Preimage = "I am root"s;
        auto const preim2Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const preim4Preimage = "I am root"s;
        auto const preim4Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const thresh3Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim5CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim5Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim5CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa6CondConditionFingerprint =
            "\xee\x75\xbe\xb3\x52\x54\xbd\x24\x06\x3f\xd9\x32\x48\x19\xe1"
            "\x5c\x70\x85\x92\x11\x6c\x3a\xc1\x4c\x9b\x83\xeb\x05\xa7\x59"
            "\xe2\xa0"s;
        Condition const Rsa6Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa6CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed7CondConditionFingerprint =
            "\x1e\x5a\xaf\x3e\x46\xf6\xd4\xdf\x4d\x70\xf0\xa1\xd1\x35\x6d"
            "\xf0\x8b\x86\x91\xac\xb2\xf2\x24\xf0\x1a\xd4\x23\xc0\x21\x8d"
            "\x42\xc0"s;
        Condition const Ed7Cond{Type::ed25519Sha256,
                                131072,
                                makeSlice(Ed7CondConditionFingerprint),
                                std::bitset<5>{0}};
        auto const thresh1Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim8CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim8Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim8CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa9CondConditionFingerprint =
            "\xe5\x15\x0a\xbd\xf6\x06\xbe\xaa\x6c\x81\xf1\x88\x7e\x70\x64"
            "\x51\xeb\x6f\x70\xb1\xdd\xc5\xf1\x20\x53\xf7\xcb\x9f\x7f\xc7"
            "\xe4\x52"s;
        Condition const Rsa9Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa9CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed10CondConditionFingerprint =
            "\x00\x8b\xe6\x62\xd4\x30\x65\x1e\x40\xb3\x23\x05\x52\x3a\xf3"
            "\x16\xda\x09\xbe\x79\x5f\x41\xc9\x03\x93\x34\x5b\x7c\x24\x87"
            "\x62\xfa"s;
        Condition const Ed10Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed10CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Thresh11CondConditionFingerprint =
            "\xe9\x51\x21\xbb\xea\xcc\x1a\x1a\xd1\xb1\x53\xfd\x74\x81\x54"
            "\xad\xb9\x95\x4b\xa7\x40\x7f\x11\xe9\xdc\xaf\x92\xf4\xea\xf4"
            "\xb6\x29"s;
        Condition const Thresh11Cond{
            Type::thresholdSha256,
            135168,
            makeSlice(Thresh11CondConditionFingerprint),
            std::bitset<5>{25}};
        auto const preim19Preimage = "I am root"s;
        auto const preim19Msg = "P17P16abcdefghijklmnopqrstuvwxyz"s;
        auto const thresh18Msg = "P17P16abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim20CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim20Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim20CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa21CondConditionFingerprint =
            "\x18\x13\xb3\x53\x3a\x10\x06\xee\xf9\x67\xa2\xcb\x27\x5e\xb8"
            "\x79\x5c\x09\xd1\x8f\xa0\xc7\xb3\x95\x59\x14\xf6\x24\x99\x6b"
            "\x1a\xdd"s;
        Condition const Rsa21Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa21CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed22CondConditionFingerprint =
            "\xce\xba\x65\x8f\x48\xe3\x35\x4b\x51\xb6\xfd\xe9\x57\xd7\xb9"
            "\xf0\x9b\x80\xb3\x6e\xdf\x73\x20\x22\x5c\x0a\xda\x13\xf8\xc0"
            "\xa7\x5d"s;
        Condition const Ed22Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed22CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const prefix17Prefix = "P17"s;
        auto const prefix17Msg = "P16abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix17MaxMsgLength = 14;
        auto const prefix16Prefix = "P16"s;
        auto const prefix16Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix16MaxMsgLength = 14;
        auto const preim24Preimage = "I am root"s;
        auto const preim24Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const thresh23Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim25CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim25Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim25CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa26CondConditionFingerprint =
            "\xd6\x40\x0d\x21\x44\x8a\xd4\x5a\xe6\x10\x3f\xd4\x3a\x14\x5a"
            "\x5b\x87\x86\x20\x3c\x43\x20\x9d\x9d\x0c\x75\x57\x80\x7d\xda"
            "\x9d\x06"s;
        Condition const Rsa26Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa26CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed27CondConditionFingerprint =
            "\x6a\x26\x73\x6f\xc3\xbf\x25\x73\x8e\x3b\x27\x79\x47\xa5\x37"
            "\x7c\x78\xa0\x72\xd8\x77\x91\xfc\x45\x87\x7f\x11\x57\xfe\x94"
            "\x57\x45"s;
        Condition const Ed27Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed27CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const thresh0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim28CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim28Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim28CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa29CondConditionFingerprint =
            "\x5c\xe1\xef\x71\xf6\x96\x65\x37\x01\x15\x1a\xdd\xfe\x28\x5d"
            "\xef\x33\x99\x1f\xe9\x6a\x51\x2d\x22\x62\x2c\x2e\x26\xb8\xda"
            "\x1e\xfa"s;
        Condition const Rsa29Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa29CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed30CondConditionFingerprint =
            "\xcc\x8a\x65\x38\xf7\x7c\xf9\x28\xc9\xdd\xf3\x0c\x26\x64\x02"
            "\xde\x89\xd0\x71\xde\x61\x3e\x31\x4d\x9b\x4e\x91\x6f\xcc\x36"
            "\x5c\xa3"s;
        Condition const Ed30Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed30CondConditionFingerprint),
                                 std::bitset<5>{0}};

        auto preim2 =
            std::make_unique<PreimageSha256>(makeSlice(preim2Preimage));
        auto preim4 =
            std::make_unique<PreimageSha256>(makeSlice(preim4Preimage));
        std::vector<std::unique_ptr<Fulfillment>> thresh3Subfulfillments;
        thresh3Subfulfillments.emplace_back(std::move(preim4));
        std::vector<Condition> thresh3Subconditions{
            {Preim5Cond, Rsa6Cond, Ed7Cond}};
        auto thresh3 = std::make_unique<ThresholdSha256>(
            std::move(thresh3Subfulfillments), std::move(thresh3Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh1Subfulfillments;
        thresh1Subfulfillments.emplace_back(std::move(preim2));
        thresh1Subfulfillments.emplace_back(std::move(thresh3));
        std::vector<Condition> thresh1Subconditions{
            {Preim8Cond, Rsa9Cond, Ed10Cond, Thresh11Cond}};
        auto thresh1 = std::make_unique<ThresholdSha256>(
            std::move(thresh1Subfulfillments), std::move(thresh1Subconditions));
        auto preim19 =
            std::make_unique<PreimageSha256>(makeSlice(preim19Preimage));
        std::vector<std::unique_ptr<Fulfillment>> thresh18Subfulfillments;
        thresh18Subfulfillments.emplace_back(std::move(preim19));
        std::vector<Condition> thresh18Subconditions{
            {Preim20Cond, Rsa21Cond, Ed22Cond}};
        auto thresh18 = std::make_unique<ThresholdSha256>(
            std::move(thresh18Subfulfillments),
            std::move(thresh18Subconditions));
        auto prefix17 = std::make_unique<PrefixSha256>(
            makeSlice(prefix17Prefix),
            prefix17MaxMsgLength,
            std::move(thresh18));
        auto prefix16 = std::make_unique<PrefixSha256>(
            makeSlice(prefix16Prefix),
            prefix16MaxMsgLength,
            std::move(prefix17));
        auto preim24 =
            std::make_unique<PreimageSha256>(makeSlice(preim24Preimage));
        std::vector<std::unique_ptr<Fulfillment>> thresh23Subfulfillments;
        thresh23Subfulfillments.emplace_back(std::move(preim24));
        std::vector<Condition> thresh23Subconditions{
            {Preim25Cond, Rsa26Cond, Ed27Cond}};
        auto thresh23 = std::make_unique<ThresholdSha256>(
            std::move(thresh23Subfulfillments),
            std::move(thresh23Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh0Subfulfillments;
        thresh0Subfulfillments.emplace_back(std::move(thresh1));
        thresh0Subfulfillments.emplace_back(std::move(prefix16));
        thresh0Subfulfillments.emplace_back(std::move(thresh23));
        std::vector<Condition> thresh0Subconditions{
            {Preim28Cond, Rsa29Cond, Ed30Cond}};
        ThresholdSha256 const thresh0(
            std::move(thresh0Subfulfillments), std::move(thresh0Subconditions));
        {
            auto const thresh0EncodedFulfillment =
                "\xa2\x82\x02\xff\xa0\x82\x02\x80\xa1\x81\xa6\x80\x03\x50\x31"
                "\x36\x81\x01\x0e\xa2\x81\x9b\xa1\x81\x98\x80\x03\x50\x31\x37"
                "\x81\x01\x0e\xa2\x81\x8d\xa2\x81\x8a\xa0\x0d\xa0\x0b\x80\x09"
                "\x49\x20\x61\x6d\x20\x72\x6f\x6f\x74\xa1\x79\xa0\x25\x80\x20"
                "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
                "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
                "\xeb\x4e\x81\x01\x09\xa3\x27\x80\x20\x18\x13\xb3\x53\x3a\x10"
                "\x06\xee\xf9\x67\xa2\xcb\x27\x5e\xb8\x79\x5c\x09\xd1\x8f\xa0"
                "\xc7\xb3\x95\x59\x14\xf6\x24\x99\x6b\x1a\xdd\x81\x03\x01\x00"
                "\x00\xa4\x27\x80\x20\xce\xba\x65\x8f\x48\xe3\x35\x4b\x51\xb6"
                "\xfd\xe9\x57\xd7\xb9\xf0\x9b\x80\xb3\x6e\xdf\x73\x20\x22\x5c"
                "\x0a\xda\x13\xf8\xc0\xa7\x5d\x81\x03\x02\x00\x00\xa2\x81\x8a"
                "\xa0\x0d\xa0\x0b\x80\x09\x49\x20\x61\x6d\x20\x72\x6f\x6f\x74"
                "\xa1\x79\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51"
                "\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68"
                "\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa3\x27\x80\x20"
                "\xd6\x40\x0d\x21\x44\x8a\xd4\x5a\xe6\x10\x3f\xd4\x3a\x14\x5a"
                "\x5b\x87\x86\x20\x3c\x43\x20\x9d\x9d\x0c\x75\x57\x80\x7d\xda"
                "\x9d\x06\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x6a\x26\x73\x6f"
                "\xc3\xbf\x25\x73\x8e\x3b\x27\x79\x47\xa5\x37\x7c\x78\xa0\x72"
                "\xd8\x77\x91\xfc\x45\x87\x7f\x11\x57\xfe\x94\x57\x45\x81\x03"
                "\x02\x00\x00\xa2\x82\x01\x46\xa0\x81\x9a\xa0\x0b\x80\x09\x49"
                "\x20\x61\x6d\x20\x72\x6f\x6f\x74\xa2\x81\x8a\xa0\x0d\xa0\x0b"
                "\x80\x09\x49\x20\x61\x6d\x20\x72\x6f\x6f\x74\xa1\x79\xa0\x25"
                "\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54"
                "\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee"
                "\x93\x58\xeb\x4e\x81\x01\x09\xa3\x27\x80\x20\xee\x75\xbe\xb3"
                "\x52\x54\xbd\x24\x06\x3f\xd9\x32\x48\x19\xe1\x5c\x70\x85\x92"
                "\x11\x6c\x3a\xc1\x4c\x9b\x83\xeb\x05\xa7\x59\xe2\xa0\x81\x03"
                "\x01\x00\x00\xa4\x27\x80\x20\x1e\x5a\xaf\x3e\x46\xf6\xd4\xdf"
                "\x4d\x70\xf0\xa1\xd1\x35\x6d\xf0\x8b\x86\x91\xac\xb2\xf2\x24"
                "\xf0\x1a\xd4\x23\xc0\x21\x8d\x42\xc0\x81\x03\x02\x00\x00\xa1"
                "\x81\xa6\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51"
                "\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68"
                "\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa2\x2b\x80\x20"
                "\xe9\x51\x21\xbb\xea\xcc\x1a\x1a\xd1\xb1\x53\xfd\x74\x81\x54"
                "\xad\xb9\x95\x4b\xa7\x40\x7f\x11\xe9\xdc\xaf\x92\xf4\xea\xf4"
                "\xb6\x29\x81\x03\x02\x10\x00\x82\x02\x03\x98\xa3\x27\x80\x20"
                "\xe5\x15\x0a\xbd\xf6\x06\xbe\xaa\x6c\x81\xf1\x88\x7e\x70\x64"
                "\x51\xeb\x6f\x70\xb1\xdd\xc5\xf1\x20\x53\xf7\xcb\x9f\x7f\xc7"
                "\xe4\x52\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x00\x8b\xe6\x62"
                "\xd4\x30\x65\x1e\x40\xb3\x23\x05\x52\x3a\xf3\x16\xda\x09\xbe"
                "\x79\x5f\x41\xc9\x03\x93\x34\x5b\x7c\x24\x87\x62\xfa\x81\x03"
                "\x02\x00\x00\xa1\x79\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1"
                "\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21"
                "\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa3"
                "\x27\x80\x20\x5c\xe1\xef\x71\xf6\x96\x65\x37\x01\x15\x1a\xdd"
                "\xfe\x28\x5d\xef\x33\x99\x1f\xe9\x6a\x51\x2d\x22\x62\x2c\x2e"
                "\x26\xb8\xda\x1e\xfa\x81\x03\x01\x00\x00\xa4\x27\x80\x20\xcc"
                "\x8a\x65\x38\xf7\x7c\xf9\x28\xc9\xdd\xf3\x0c\x26\x64\x02\xde"
                "\x89\xd0\x71\xde\x61\x3e\x31\x4d\x9b\x4e\x91\x6f\xcc\x36\x5c"
                "\xa3\x81\x03\x02\x00\x00"s;
            auto const thresh0EncodedCondition =
                "\xa2\x2b\x80\x20\x6c\xa5\xad\xa8\x18\xef\xf9\x76\xd1\xb5\xcd"
                "\x17\xcf\x65\x76\x8e\x85\x9b\x69\xab\x38\x8d\x65\x9a\x70\xf4"
                "\xfc\xf1\xd6\x39\x21\x47\x81\x03\x08\x78\x22\x82\x02\x03\xd8"s;
            auto const thresh0EncodedFingerprint =
                "\x30\x82\x01\x07\x80\x01\x03\xa1\x82\x01\x00\xa0\x25\x80\x20"
                "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
                "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
                "\xeb\x4e\x81\x01\x09\xa1\x2b\x80\x20\x71\x1c\x92\x12\xbd\xf9"
                "\x4e\x0f\x71\x7c\x6a\xf9\xaf\xe0\x7a\x9b\xa5\x36\x65\x80\x63"
                "\x1a\x9f\x53\xc1\x11\x0a\x52\x15\xd5\x10\x4e\x81\x03\x02\x18"
                "\x22\x82\x02\x03\xb8\xa2\x2b\x80\x20\x4c\xea\x4f\xb1\xec\x74"
                "\xd7\x9e\x52\x7e\x26\xcb\x42\x73\x31\x52\x01\x5c\x18\xef\x19"
                "\xfe\x64\x81\xd8\xb8\xba\xe1\xf4\x83\x0e\x0f\x81\x03\x02\x10"
                "\x00\x82\x02\x03\x98\xa2\x2b\x80\x20\x8a\x60\x28\x1e\x98\x5f"
                "\x3d\xda\xde\xaa\xa9\xe1\x8c\x39\x05\x89\xc4\x05\x23\x5b\xef"
                "\xd6\xec\xbc\xa7\x5d\x27\x7c\x38\x9c\x94\x18\x81\x03\x04\x38"
                "\x00\x82\x02\x03\x98\xa3\x27\x80\x20\x5c\xe1\xef\x71\xf6\x96"
                "\x65\x37\x01\x15\x1a\xdd\xfe\x28\x5d\xef\x33\x99\x1f\xe9\x6a"
                "\x51\x2d\x22\x62\x2c\x2e\x26\xb8\xda\x1e\xfa\x81\x03\x01\x00"
                "\x00\xa4\x27\x80\x20\xcc\x8a\x65\x38\xf7\x7c\xf9\x28\xc9\xdd"
                "\xf3\x0c\x26\x64\x02\xde\x89\xd0\x71\xde\x61\x3e\x31\x4d\x9b"
                "\x4e\x91\x6f\xcc\x36\x5c\xa3\x81\x03\x02\x00\x00"s;
            check(
                &thresh0,
                thresh0Msg,
                thresh0EncodedFulfillment,
                thresh0EncodedCondition,
                thresh0EncodedFingerprint);
        }
    }

    void
    testThresh23()
    {
        testcase("Thresh23");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * thresh0
        // ** Preim19Cond
        // ** Rsa20Cond
        // ** Ed21Cond
        // ** Prefix22Cond
        // ** Thresh29Cond
        // ** thresh1
        // *** Preim8Cond
        // *** Rsa9Cond
        // *** Ed10Cond
        // *** Thresh11Cond
        // *** preim2
        // *** thresh3
        // **** Preim5Cond
        // **** Rsa6Cond
        // **** Ed7Cond
        // **** preim4
        // ** preim16
        // ** rsa17
        // ** ed18

        auto const preim2Preimage = "I am root"s;
        auto const preim2Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const preim4Preimage = "I am root"s;
        auto const preim4Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const thresh3Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim5CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim5Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim5CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa6CondConditionFingerprint =
            "\xee\x75\xbe\xb3\x52\x54\xbd\x24\x06\x3f\xd9\x32\x48\x19\xe1"
            "\x5c\x70\x85\x92\x11\x6c\x3a\xc1\x4c\x9b\x83\xeb\x05\xa7\x59"
            "\xe2\xa0"s;
        Condition const Rsa6Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa6CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed7CondConditionFingerprint =
            "\x1e\x5a\xaf\x3e\x46\xf6\xd4\xdf\x4d\x70\xf0\xa1\xd1\x35\x6d"
            "\xf0\x8b\x86\x91\xac\xb2\xf2\x24\xf0\x1a\xd4\x23\xc0\x21\x8d"
            "\x42\xc0"s;
        Condition const Ed7Cond{Type::ed25519Sha256,
                                131072,
                                makeSlice(Ed7CondConditionFingerprint),
                                std::bitset<5>{0}};
        auto const thresh1Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim8CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim8Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim8CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa9CondConditionFingerprint =
            "\xe5\x15\x0a\xbd\xf6\x06\xbe\xaa\x6c\x81\xf1\x88\x7e\x70\x64"
            "\x51\xeb\x6f\x70\xb1\xdd\xc5\xf1\x20\x53\xf7\xcb\x9f\x7f\xc7"
            "\xe4\x52"s;
        Condition const Rsa9Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa9CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed10CondConditionFingerprint =
            "\x00\x8b\xe6\x62\xd4\x30\x65\x1e\x40\xb3\x23\x05\x52\x3a\xf3"
            "\x16\xda\x09\xbe\x79\x5f\x41\xc9\x03\x93\x34\x5b\x7c\x24\x87"
            "\x62\xfa"s;
        Condition const Ed10Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed10CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Thresh11CondConditionFingerprint =
            "\xe9\x51\x21\xbb\xea\xcc\x1a\x1a\xd1\xb1\x53\xfd\x74\x81\x54"
            "\xad\xb9\x95\x4b\xa7\x40\x7f\x11\xe9\xdc\xaf\x92\xf4\xea\xf4"
            "\xb6\x29"s;
        Condition const Thresh11Cond{
            Type::thresholdSha256,
            135168,
            makeSlice(Thresh11CondConditionFingerprint),
            std::bitset<5>{25}};
        auto const preim16Preimage = "I am root"s;
        auto const preim16Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const rsa17Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa17PublicKey{
            {0xb0, 0x41, 0xe9, 0x6e, 0xfe, 0x3b, 0xde, 0x46, 0x52, 0x56, 0x34,
             0x2a, 0x92, 0x83, 0x4d, 0x3a, 0x7b, 0x94, 0xe7, 0xc2, 0x06, 0x5b,
             0x8c, 0xf4, 0x9d, 0x71, 0x9d, 0x00, 0x73, 0xd9, 0x15, 0x81, 0x12,
             0x1a, 0x0c, 0x9e, 0xd8, 0xa6, 0xa6, 0xd8, 0x62, 0xbe, 0xfe, 0xa3,
             0x7c, 0xc5, 0xd0, 0x71, 0xdd, 0x83, 0xed, 0xcf, 0x71, 0xd8, 0xe5,
             0x72, 0x27, 0xcb, 0xce, 0xd7, 0x06, 0xda, 0xe8, 0x4b, 0xb8, 0x8d,
             0x45, 0xc0, 0x9c, 0xe3, 0x13, 0x27, 0xbf, 0x60, 0x50, 0x85, 0xbf,
             0xd1, 0xfc, 0x8c, 0x41, 0x75, 0x2d, 0x51, 0x83, 0x24, 0x06, 0xcb,
             0xe6, 0x98, 0x8e, 0x0d, 0x35, 0xfa, 0x58, 0x34, 0x43, 0x90, 0x55,
             0x6a, 0x40, 0xc9, 0x78, 0x31, 0xfb, 0x28, 0x8b, 0x10, 0x78, 0x46,
             0x59, 0x49, 0xf5, 0x89, 0x1c, 0x66, 0xc0, 0x6e, 0x6b, 0x73, 0x05,
             0x75, 0x83, 0x2b, 0x86, 0x78, 0x02, 0xc1, 0xb0, 0xf1, 0x2a, 0x6e,
             0x7e, 0xf6, 0x65, 0x8f, 0xe3, 0xc2, 0x02, 0x6d, 0xae, 0x03, 0xc5,
             0xef, 0x41, 0x03, 0x3a, 0x6b, 0xeb, 0xb0, 0xab, 0x6a, 0x27, 0x2e,
             0xcb, 0x13, 0xf5, 0xd3, 0xae, 0x11, 0x18, 0x33, 0x6a, 0xc3, 0x08,
             0x7a, 0xf8, 0xb9, 0xd7, 0xf3, 0x37, 0xee, 0x05, 0x32, 0xd9, 0xb5,
             0xa4, 0xb9, 0xeb, 0x67, 0xa8, 0x84, 0xeb, 0xb2, 0xc3, 0x2f, 0x8a,
             0x8f, 0xa7, 0x24, 0xac, 0x9a, 0x24, 0x91, 0x11, 0x70, 0xab, 0xc5,
             0x05, 0x25, 0xa9, 0xd3, 0x93, 0x17, 0x6d, 0x70, 0xb1, 0x67, 0x60,
             0x6b, 0x50, 0x69, 0xdd, 0x22, 0x8b, 0x6a, 0xa9, 0x11, 0x7e, 0x5e,
             0x09, 0xa8, 0xaa, 0xdc, 0x4a, 0xc8, 0x09, 0x4c, 0x1a, 0xe7, 0x4c,
             0x1e, 0x42, 0xb2, 0x27, 0x9d, 0xa9, 0x1b, 0xa3, 0x59, 0x14, 0xcb,
             0x0b, 0xca, 0xff, 0x6e, 0x8d, 0x8e, 0x38, 0xf6, 0x19, 0xb1, 0x81,
             0x5f, 0xf4, 0x7d}};
        std::array<std::uint8_t, 256> const rsa17Sig{
            {0x9a, 0xef, 0x6e, 0x0a, 0xf1, 0xb5, 0xb5, 0x5a, 0x0a, 0x72, 0x00,
             0xff, 0x27, 0xb2, 0x81, 0xd1, 0x52, 0x49, 0x65, 0x4a, 0x10, 0xfb,
             0x80, 0x40, 0xef, 0x36, 0x78, 0x56, 0x4f, 0xe0, 0x27, 0xe1, 0x2a,
             0xde, 0x1e, 0xea, 0xb5, 0xc9, 0x4d, 0xeb, 0xe6, 0xfd, 0xd0, 0x68,
             0x00, 0x92, 0xeb, 0xa7, 0x02, 0x5d, 0xc4, 0xea, 0x2e, 0x45, 0x3f,
             0xdb, 0x14, 0x7d, 0x9a, 0x74, 0x57, 0xdd, 0x6c, 0x88, 0x26, 0xdc,
             0x7b, 0x97, 0x27, 0xad, 0x8f, 0xac, 0x68, 0x23, 0xe0, 0xf6, 0xec,
             0xee, 0xd5, 0x21, 0x98, 0xf8, 0x42, 0x3c, 0x20, 0x64, 0xb3, 0x00,
             0x7a, 0x9f, 0x3d, 0xd0, 0x6f, 0x9a, 0x4e, 0x10, 0x4f, 0x31, 0x40,
             0x5b, 0x8f, 0x97, 0x3c, 0x3b, 0x78, 0x11, 0x60, 0x64, 0x33, 0xf5,
             0x48, 0xb7, 0xc6, 0x1b, 0xb7, 0x03, 0x8a, 0xd6, 0xc8, 0xf9, 0x91,
             0xeb, 0xa3, 0x20, 0x7d, 0x4d, 0xb0, 0xe3, 0x74, 0x94, 0x92, 0xbf,
             0xd1, 0xc0, 0x27, 0x92, 0x08, 0x51, 0x08, 0xc4, 0x3e, 0x00, 0x3f,
             0xe4, 0xb2, 0xae, 0xee, 0x6f, 0xc4, 0x57, 0xea, 0x59, 0x4c, 0x54,
             0x07, 0x40, 0x6f, 0x99, 0x36, 0x71, 0x52, 0xd2, 0x7b, 0xaf, 0x24,
             0x34, 0xe5, 0xc3, 0xd1, 0x7a, 0xcf, 0x1b, 0xe8, 0xf6, 0x5d, 0x04,
             0x65, 0x9b, 0x0f, 0x63, 0x54, 0xe2, 0x89, 0xa5, 0xa1, 0x95, 0x9b,
             0xbc, 0xdf, 0xb0, 0xa0, 0x0b, 0xd9, 0x41, 0xd5, 0xe9, 0xf9, 0x28,
             0x52, 0x9c, 0x76, 0xd4, 0xd1, 0x4a, 0xfa, 0xb9, 0x98, 0xf4, 0x9b,
             0x1e, 0x3c, 0x7a, 0x51, 0x7d, 0xb0, 0xdc, 0x26, 0x93, 0x4c, 0xad,
             0x40, 0x48, 0x22, 0x8b, 0x7d, 0x00, 0x5a, 0xd1, 0x44, 0xe1, 0x11,
             0x8a, 0xd3, 0x37, 0x05, 0x31, 0x54, 0xbe, 0xf6, 0x17, 0x2d, 0x0c,
             0xd9, 0x55, 0x47, 0x91, 0x90, 0x62, 0x46, 0xdd, 0x88, 0x93, 0xc4,
             0xd7, 0x8a, 0x47}};
        auto const ed18Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed18PublicKey{
            {0x3b, 0x07, 0x0f, 0xe5, 0x29, 0x34, 0xd9, 0x17, 0xf5, 0x06, 0x00,
             0xb8, 0x87, 0x2f, 0xcf, 0x89, 0x52, 0x70, 0xcc, 0x04, 0x92, 0xe1,
             0x67, 0xcb, 0xba, 0xbb, 0x10, 0xa6, 0x2d, 0x06, 0xa4, 0x6b}};
        std::array<std::uint8_t, 64> const ed18Sig{
            {0x09, 0xc4, 0x1d, 0xc3, 0x8e, 0x6c, 0xd6, 0x04, 0xb7, 0x9e, 0x8c,
             0x8b, 0x30, 0x65, 0x88, 0x43, 0xc7, 0xc6, 0xe5, 0xa0, 0xb0, 0x4c,
             0x60, 0xee, 0xb7, 0x1d, 0x69, 0x2a, 0xb7, 0x5d, 0x5f, 0x16, 0x53,
             0xd1, 0xe6, 0x6a, 0x74, 0x5d, 0x63, 0xc0, 0x41, 0x30, 0x6a, 0x58,
             0xce, 0x52, 0xf2, 0xdb, 0x41, 0x03, 0x78, 0xfd, 0x7f, 0x0e, 0xa5,
             0xc1, 0xe4, 0xd2, 0x50, 0x8d, 0x97, 0x1d, 0xf9, 0x06}};
        std::array<std::uint8_t, 32> const ed18SigningKey{
            {0x59, 0x73, 0xbb, 0x41, 0xb0, 0xe0, 0xce, 0xc2, 0xa9, 0x85, 0xaa,
             0x05, 0xa4, 0x7e, 0x3b, 0x51, 0x09, 0x8d, 0x3e, 0x47, 0xb7, 0x75,
             0xda, 0x81, 0x39, 0xa0, 0xe1, 0xd5, 0x9f, 0xb0, 0x9c, 0x5a}};
        (void)ed18SigningKey;
        auto const thresh0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim19CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim19Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim19CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa20CondConditionFingerprint =
            "\x8d\xb0\x2c\xb1\x28\xc3\xf4\x97\x50\x84\x64\x57\xca\xf4\x9d"
            "\x63\x08\x73\xfc\xde\x2f\x90\xf0\xf2\xec\x79\xa9\xc6\xa3\xf1"
            "\x33\xfd"s;
        Condition const Rsa20Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa20CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed21CondConditionFingerprint =
            "\x95\x3c\x86\x65\x91\x76\x69\x6b\x72\x61\xaa\x76\x15\x2a\xd7"
            "\x25\x4f\x32\xb7\x73\x7a\xb2\x49\x0c\x0b\xdf\xb5\x4e\x4a\x8b"
            "\xf7\x65"s;
        Condition const Ed21Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed21CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Prefix22CondConditionFingerprint =
            "\x87\xa9\x11\x1a\xad\xad\xf2\xf8\xa0\x9a\x80\x97\x71\x5f\x63"
            "\x20\x21\xee\x8f\xb6\xba\x17\x9e\x31\x34\x35\x67\x04\xa9\x8c"
            "\x7b\x06"s;
        Condition const Prefix22Cond{
            Type::prefixSha256,
            137258,
            makeSlice(Prefix22CondConditionFingerprint),
            std::bitset<5>{29}};
        auto const Thresh29CondConditionFingerprint =
            "\x78\xe2\x68\xfe\xbe\xe5\x81\xd5\x98\x62\x9a\x0c\x8e\x66\xba"
            "\xea\x74\x70\xb2\x5d\xd2\xd4\x0b\xf2\xbc\xd1\x9f\xea\x3e\x1d"
            "\x19\x84"s;
        Condition const Thresh29Cond{
            Type::thresholdSha256,
            135168,
            makeSlice(Thresh29CondConditionFingerprint),
            std::bitset<5>{25}};

        auto preim2 =
            std::make_unique<PreimageSha256>(makeSlice(preim2Preimage));
        auto preim4 =
            std::make_unique<PreimageSha256>(makeSlice(preim4Preimage));
        std::vector<std::unique_ptr<Fulfillment>> thresh3Subfulfillments;
        thresh3Subfulfillments.emplace_back(std::move(preim4));
        std::vector<Condition> thresh3Subconditions{
            {Preim5Cond, Rsa6Cond, Ed7Cond}};
        auto thresh3 = std::make_unique<ThresholdSha256>(
            std::move(thresh3Subfulfillments), std::move(thresh3Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh1Subfulfillments;
        thresh1Subfulfillments.emplace_back(std::move(preim2));
        thresh1Subfulfillments.emplace_back(std::move(thresh3));
        std::vector<Condition> thresh1Subconditions{
            {Preim8Cond, Rsa9Cond, Ed10Cond, Thresh11Cond}};
        auto thresh1 = std::make_unique<ThresholdSha256>(
            std::move(thresh1Subfulfillments), std::move(thresh1Subconditions));
        auto preim16 =
            std::make_unique<PreimageSha256>(makeSlice(preim16Preimage));
        auto rsa17 = std::make_unique<RsaSha256>(
            makeSlice(rsa17PublicKey), makeSlice(rsa17Sig));
        auto ed18 = std::make_unique<Ed25519>(ed18PublicKey, ed18Sig);
        std::vector<std::unique_ptr<Fulfillment>> thresh0Subfulfillments;
        thresh0Subfulfillments.emplace_back(std::move(thresh1));
        thresh0Subfulfillments.emplace_back(std::move(preim16));
        thresh0Subfulfillments.emplace_back(std::move(rsa17));
        thresh0Subfulfillments.emplace_back(std::move(ed18));
        std::vector<Condition> thresh0Subconditions{
            {Preim19Cond, Rsa20Cond, Ed21Cond, Prefix22Cond, Thresh29Cond}};
        ThresholdSha256 const thresh0(
            std::move(thresh0Subfulfillments), std::move(thresh0Subconditions));
        {
            auto const thresh0EncodedFulfillment =
                "\xa2\x82\x04\xa3\xa0\x82\x03\xc9\xa0\x0b\x80\x09\x49\x20\x61"
                "\x6d\x20\x72\x6f\x6f\x74\xa2\x82\x01\x46\xa0\x81\x9a\xa0\x0b"
                "\x80\x09\x49\x20\x61\x6d\x20\x72\x6f\x6f\x74\xa2\x81\x8a\xa0"
                "\x0d\xa0\x0b\x80\x09\x49\x20\x61\x6d\x20\x72\x6f\x6f\x74\xa1"
                "\x79\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8"
                "\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc"
                "\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa3\x27\x80\x20\xee"
                "\x75\xbe\xb3\x52\x54\xbd\x24\x06\x3f\xd9\x32\x48\x19\xe1\x5c"
                "\x70\x85\x92\x11\x6c\x3a\xc1\x4c\x9b\x83\xeb\x05\xa7\x59\xe2"
                "\xa0\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x1e\x5a\xaf\x3e\x46"
                "\xf6\xd4\xdf\x4d\x70\xf0\xa1\xd1\x35\x6d\xf0\x8b\x86\x91\xac"
                "\xb2\xf2\x24\xf0\x1a\xd4\x23\xc0\x21\x8d\x42\xc0\x81\x03\x02"
                "\x00\x00\xa1\x81\xa6\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1"
                "\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21"
                "\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa2"
                "\x2b\x80\x20\xe9\x51\x21\xbb\xea\xcc\x1a\x1a\xd1\xb1\x53\xfd"
                "\x74\x81\x54\xad\xb9\x95\x4b\xa7\x40\x7f\x11\xe9\xdc\xaf\x92"
                "\xf4\xea\xf4\xb6\x29\x81\x03\x02\x10\x00\x82\x02\x03\x98\xa3"
                "\x27\x80\x20\xe5\x15\x0a\xbd\xf6\x06\xbe\xaa\x6c\x81\xf1\x88"
                "\x7e\x70\x64\x51\xeb\x6f\x70\xb1\xdd\xc5\xf1\x20\x53\xf7\xcb"
                "\x9f\x7f\xc7\xe4\x52\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x00"
                "\x8b\xe6\x62\xd4\x30\x65\x1e\x40\xb3\x23\x05\x52\x3a\xf3\x16"
                "\xda\x09\xbe\x79\x5f\x41\xc9\x03\x93\x34\x5b\x7c\x24\x87\x62"
                "\xfa\x81\x03\x02\x00\x00\xa3\x82\x02\x08\x80\x82\x01\x00\xb0"
                "\x41\xe9\x6e\xfe\x3b\xde\x46\x52\x56\x34\x2a\x92\x83\x4d\x3a"
                "\x7b\x94\xe7\xc2\x06\x5b\x8c\xf4\x9d\x71\x9d\x00\x73\xd9\x15"
                "\x81\x12\x1a\x0c\x9e\xd8\xa6\xa6\xd8\x62\xbe\xfe\xa3\x7c\xc5"
                "\xd0\x71\xdd\x83\xed\xcf\x71\xd8\xe5\x72\x27\xcb\xce\xd7\x06"
                "\xda\xe8\x4b\xb8\x8d\x45\xc0\x9c\xe3\x13\x27\xbf\x60\x50\x85"
                "\xbf\xd1\xfc\x8c\x41\x75\x2d\x51\x83\x24\x06\xcb\xe6\x98\x8e"
                "\x0d\x35\xfa\x58\x34\x43\x90\x55\x6a\x40\xc9\x78\x31\xfb\x28"
                "\x8b\x10\x78\x46\x59\x49\xf5\x89\x1c\x66\xc0\x6e\x6b\x73\x05"
                "\x75\x83\x2b\x86\x78\x02\xc1\xb0\xf1\x2a\x6e\x7e\xf6\x65\x8f"
                "\xe3\xc2\x02\x6d\xae\x03\xc5\xef\x41\x03\x3a\x6b\xeb\xb0\xab"
                "\x6a\x27\x2e\xcb\x13\xf5\xd3\xae\x11\x18\x33\x6a\xc3\x08\x7a"
                "\xf8\xb9\xd7\xf3\x37\xee\x05\x32\xd9\xb5\xa4\xb9\xeb\x67\xa8"
                "\x84\xeb\xb2\xc3\x2f\x8a\x8f\xa7\x24\xac\x9a\x24\x91\x11\x70"
                "\xab\xc5\x05\x25\xa9\xd3\x93\x17\x6d\x70\xb1\x67\x60\x6b\x50"
                "\x69\xdd\x22\x8b\x6a\xa9\x11\x7e\x5e\x09\xa8\xaa\xdc\x4a\xc8"
                "\x09\x4c\x1a\xe7\x4c\x1e\x42\xb2\x27\x9d\xa9\x1b\xa3\x59\x14"
                "\xcb\x0b\xca\xff\x6e\x8d\x8e\x38\xf6\x19\xb1\x81\x5f\xf4\x7d"
                "\x81\x82\x01\x00\x9a\xef\x6e\x0a\xf1\xb5\xb5\x5a\x0a\x72\x00"
                "\xff\x27\xb2\x81\xd1\x52\x49\x65\x4a\x10\xfb\x80\x40\xef\x36"
                "\x78\x56\x4f\xe0\x27\xe1\x2a\xde\x1e\xea\xb5\xc9\x4d\xeb\xe6"
                "\xfd\xd0\x68\x00\x92\xeb\xa7\x02\x5d\xc4\xea\x2e\x45\x3f\xdb"
                "\x14\x7d\x9a\x74\x57\xdd\x6c\x88\x26\xdc\x7b\x97\x27\xad\x8f"
                "\xac\x68\x23\xe0\xf6\xec\xee\xd5\x21\x98\xf8\x42\x3c\x20\x64"
                "\xb3\x00\x7a\x9f\x3d\xd0\x6f\x9a\x4e\x10\x4f\x31\x40\x5b\x8f"
                "\x97\x3c\x3b\x78\x11\x60\x64\x33\xf5\x48\xb7\xc6\x1b\xb7\x03"
                "\x8a\xd6\xc8\xf9\x91\xeb\xa3\x20\x7d\x4d\xb0\xe3\x74\x94\x92"
                "\xbf\xd1\xc0\x27\x92\x08\x51\x08\xc4\x3e\x00\x3f\xe4\xb2\xae"
                "\xee\x6f\xc4\x57\xea\x59\x4c\x54\x07\x40\x6f\x99\x36\x71\x52"
                "\xd2\x7b\xaf\x24\x34\xe5\xc3\xd1\x7a\xcf\x1b\xe8\xf6\x5d\x04"
                "\x65\x9b\x0f\x63\x54\xe2\x89\xa5\xa1\x95\x9b\xbc\xdf\xb0\xa0"
                "\x0b\xd9\x41\xd5\xe9\xf9\x28\x52\x9c\x76\xd4\xd1\x4a\xfa\xb9"
                "\x98\xf4\x9b\x1e\x3c\x7a\x51\x7d\xb0\xdc\x26\x93\x4c\xad\x40"
                "\x48\x22\x8b\x7d\x00\x5a\xd1\x44\xe1\x11\x8a\xd3\x37\x05\x31"
                "\x54\xbe\xf6\x17\x2d\x0c\xd9\x55\x47\x91\x90\x62\x46\xdd\x88"
                "\x93\xc4\xd7\x8a\x47\xa4\x64\x80\x20\x3b\x07\x0f\xe5\x29\x34"
                "\xd9\x17\xf5\x06\x00\xb8\x87\x2f\xcf\x89\x52\x70\xcc\x04\x92"
                "\xe1\x67\xcb\xba\xbb\x10\xa6\x2d\x06\xa4\x6b\x81\x40\x09\xc4"
                "\x1d\xc3\x8e\x6c\xd6\x04\xb7\x9e\x8c\x8b\x30\x65\x88\x43\xc7"
                "\xc6\xe5\xa0\xb0\x4c\x60\xee\xb7\x1d\x69\x2a\xb7\x5d\x5f\x16"
                "\x53\xd1\xe6\x6a\x74\x5d\x63\xc0\x41\x30\x6a\x58\xce\x52\xf2"
                "\xdb\x41\x03\x78\xfd\x7f\x0e\xa5\xc1\xe4\xd2\x50\x8d\x97\x1d"
                "\xf9\x06\xa1\x81\xd3\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1"
                "\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21"
                "\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa1"
                "\x2b\x80\x20\x87\xa9\x11\x1a\xad\xad\xf2\xf8\xa0\x9a\x80\x97"
                "\x71\x5f\x63\x20\x21\xee\x8f\xb6\xba\x17\x9e\x31\x34\x35\x67"
                "\x04\xa9\x8c\x7b\x06\x81\x03\x02\x18\x2a\x82\x02\x03\xb8\xa2"
                "\x2b\x80\x20\x78\xe2\x68\xfe\xbe\xe5\x81\xd5\x98\x62\x9a\x0c"
                "\x8e\x66\xba\xea\x74\x70\xb2\x5d\xd2\xd4\x0b\xf2\xbc\xd1\x9f"
                "\xea\x3e\x1d\x19\x84\x81\x03\x02\x10\x00\x82\x02\x03\x98\xa3"
                "\x27\x80\x20\x8d\xb0\x2c\xb1\x28\xc3\xf4\x97\x50\x84\x64\x57"
                "\xca\xf4\x9d\x63\x08\x73\xfc\xde\x2f\x90\xf0\xf2\xec\x79\xa9"
                "\xc6\xa3\xf1\x33\xfd\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x95"
                "\x3c\x86\x65\x91\x76\x69\x6b\x72\x61\xaa\x76\x15\x2a\xd7\x25"
                "\x4f\x32\xb7\x73\x7a\xb2\x49\x0c\x0b\xdf\xb5\x4e\x4a\x8b\xf7"
                "\x65\x81\x03\x02\x00\x00"s;
            auto const thresh0EncodedCondition =
                "\xa2\x2b\x80\x20\x91\xdc\x02\x77\x6d\x3b\xd2\x40\x7b\x82\x71"
                "\xd9\x75\x8d\x3f\xf0\x4b\x89\x8c\x0e\xd4\x95\xe4\xef\xdb\x4f"
                "\x6c\x34\x76\x3d\xb4\x20\x81\x03\x0a\x84\x2a\x82\x02\x03\xd8"s;
            auto const thresh0EncodedFingerprint =
                "\x30\x82\x01\x80\x80\x01\x04\xa1\x82\x01\x79\xa0\x25\x80\x20"
                "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
                "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
                "\xeb\x4e\x81\x01\x09\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1"
                "\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21"
                "\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa1"
                "\x2b\x80\x20\x87\xa9\x11\x1a\xad\xad\xf2\xf8\xa0\x9a\x80\x97"
                "\x71\x5f\x63\x20\x21\xee\x8f\xb6\xba\x17\x9e\x31\x34\x35\x67"
                "\x04\xa9\x8c\x7b\x06\x81\x03\x02\x18\x2a\x82\x02\x03\xb8\xa2"
                "\x2b\x80\x20\x78\xe2\x68\xfe\xbe\xe5\x81\xd5\x98\x62\x9a\x0c"
                "\x8e\x66\xba\xea\x74\x70\xb2\x5d\xd2\xd4\x0b\xf2\xbc\xd1\x9f"
                "\xea\x3e\x1d\x19\x84\x81\x03\x02\x10\x00\x82\x02\x03\x98\xa2"
                "\x2b\x80\x20\x8a\x60\x28\x1e\x98\x5f\x3d\xda\xde\xaa\xa9\xe1"
                "\x8c\x39\x05\x89\xc4\x05\x23\x5b\xef\xd6\xec\xbc\xa7\x5d\x27"
                "\x7c\x38\x9c\x94\x18\x81\x03\x04\x38\x00\x82\x02\x03\x98\xa3"
                "\x27\x80\x20\x78\xe3\x04\xf4\xa6\x16\x68\x4c\x1b\xcf\x3a\x32"
                "\xff\xbc\x75\x1a\xe6\x08\x9b\xff\xba\x79\xf4\x39\x7a\xfc\xe1"
                "\x6f\xff\x3e\xb3\x75\x81\x03\x01\x00\x00\xa3\x27\x80\x20\x8d"
                "\xb0\x2c\xb1\x28\xc3\xf4\x97\x50\x84\x64\x57\xca\xf4\x9d\x63"
                "\x08\x73\xfc\xde\x2f\x90\xf0\xf2\xec\x79\xa9\xc6\xa3\xf1\x33"
                "\xfd\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x0d\xea\xc5\x16\x5c"
                "\x62\xb8\xd1\xa4\xe7\x5a\x07\x58\x00\x79\x51\x88\x21\xe9\x4d"
                "\xba\x73\x7b\xad\x60\x9c\x5c\x26\x00\x2e\xd1\x51\x81\x03\x02"
                "\x00\x00\xa4\x27\x80\x20\x95\x3c\x86\x65\x91\x76\x69\x6b\x72"
                "\x61\xaa\x76\x15\x2a\xd7\x25\x4f\x32\xb7\x73\x7a\xb2\x49\x0c"
                "\x0b\xdf\xb5\x4e\x4a\x8b\xf7\x65\x81\x03\x02\x00\x00"s;
            check(
                &thresh0,
                thresh0Msg,
                thresh0EncodedFulfillment,
                thresh0EncodedCondition,
                thresh0EncodedFingerprint);
        }
    }

    void
    testRsa0()
    {
        testcase("Rsa0");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * rsa0

        auto const rsa0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa0PublicKey{
            {0xa7, 0x6c, 0x6f, 0x92, 0x15, 0x7c, 0x56, 0xe8, 0xad, 0x03, 0x9a,
             0x2b, 0x04, 0x6c, 0xb6, 0x41, 0x02, 0x4a, 0x73, 0x12, 0x87, 0x86,
             0xc2, 0x58, 0x3c, 0xd0, 0x04, 0xa4, 0x8c, 0x98, 0xa7, 0x7b, 0x79,
             0x21, 0xba, 0xde, 0x38, 0xca, 0x67, 0xef, 0xdd, 0xb4, 0x9e, 0x37,
             0x8b, 0x65, 0xf5, 0x5a, 0xce, 0xfe, 0x16, 0xfd, 0xad, 0x62, 0x7b,
             0xa7, 0xba, 0x5e, 0x2c, 0x10, 0x99, 0x40, 0x30, 0xf6, 0xee, 0x26,
             0x49, 0x27, 0x3b, 0xc5, 0xb8, 0x21, 0x30, 0x5c, 0x3e, 0x46, 0xb6,
             0x02, 0x15, 0xc4, 0x0f, 0x18, 0x24, 0xf2, 0xcb, 0x38, 0x8b, 0x47,
             0x77, 0x31, 0x63, 0x71, 0x48, 0xee, 0x76, 0xb3, 0xfd, 0xb6, 0xa2,
             0xa0, 0x8e, 0x5a, 0x01, 0x73, 0x32, 0x35, 0xbf, 0x98, 0x39, 0x3e,
             0x1a, 0xab, 0x87, 0xda, 0xbf, 0x82, 0x0c, 0x71, 0x2e, 0xb5, 0x8a,
             0x54, 0xcc, 0x7f, 0xc2, 0xbf, 0xb4, 0x7f, 0xe2, 0xe5, 0xb9, 0x0f,
             0x6e, 0xee, 0x4a, 0x2f, 0x8b, 0x20, 0xb1, 0xea, 0xaa, 0xdc, 0x89,
             0x59, 0x34, 0x7c, 0xba, 0x9b, 0x3a, 0xa5, 0xe1, 0x57, 0x70, 0x64,
             0x68, 0xf1, 0xbb, 0xae, 0x40, 0xf6, 0xf8, 0x90, 0x63, 0x55, 0x75,
             0x3a, 0x3a, 0x9e, 0x71, 0x6a, 0x93, 0x50, 0x8d, 0x62, 0xfd, 0xaf,
             0x89, 0x8a, 0x1f, 0x27, 0x57, 0xdd, 0x30, 0xd3, 0xca, 0x7d, 0x8f,
             0xa5, 0x59, 0xca, 0x4e, 0xe4, 0xec, 0x9d, 0x25, 0x20, 0xa7, 0x81,
             0x6a, 0x06, 0xa6, 0xbb, 0xb2, 0xf1, 0x75, 0xf9, 0x6b, 0x29, 0xc7,
             0x75, 0xc0, 0x9f, 0xcc, 0x87, 0x42, 0x19, 0x9f, 0x8b, 0xb5, 0x2b,
             0xa6, 0x9a, 0xc3, 0x61, 0x88, 0x74, 0x82, 0x91, 0x76, 0xf5, 0x46,
             0x8c, 0xe7, 0x81, 0xf5, 0x2c, 0x25, 0x6d, 0x5d, 0x50, 0x18, 0x03,
             0xd6, 0x1d, 0xed, 0x8d, 0x74, 0x7f, 0x05, 0xae, 0xbb, 0x35, 0xb9,
             0xe7, 0x6f, 0xe1}};
        std::array<std::uint8_t, 256> const rsa0Sig{
            {0x84, 0x7e, 0x67, 0xc4, 0x91, 0xee, 0xed, 0x64, 0x33, 0xad, 0xb3,
             0xc0, 0x2f, 0xdf, 0xa3, 0xac, 0x04, 0x5d, 0x47, 0xe1, 0xc7, 0x39,
             0xe6, 0x41, 0x29, 0x56, 0xec, 0x99, 0x5a, 0xc9, 0xdb, 0x15, 0x58,
             0xce, 0x94, 0xa3, 0x96, 0xf9, 0x96, 0x2a, 0x59, 0xf7, 0xbf, 0x18,
             0xba, 0xcd, 0x53, 0x3f, 0x57, 0x75, 0x71, 0xc5, 0x06, 0x66, 0xf1,
             0xf6, 0xcb, 0x45, 0x93, 0x2f, 0x2f, 0xa6, 0xf2, 0xb5, 0x22, 0xe6,
             0xd1, 0x61, 0x0f, 0x1b, 0xbb, 0x28, 0xad, 0xf4, 0xd7, 0x7b, 0xc2,
             0xc1, 0xe6, 0xa4, 0xa3, 0x15, 0x4e, 0x55, 0xe7, 0x1a, 0x43, 0xb8,
             0xef, 0x2c, 0x1a, 0xec, 0xc7, 0x50, 0x7b, 0x2b, 0x61, 0x3e, 0xe2,
             0x38, 0xc0, 0x3d, 0x23, 0x77, 0x81, 0x65, 0xb9, 0x6e, 0x8a, 0xed,
             0x09, 0xe3, 0x5b, 0x5e, 0x03, 0x52, 0xd8, 0xd3, 0xb2, 0x93, 0x9a,
             0x71, 0xcb, 0x38, 0x86, 0x53, 0xce, 0xb5, 0xcd, 0x20, 0x1a, 0xa1,
             0x7c, 0x13, 0x6c, 0x4c, 0x53, 0x9f, 0xd6, 0xb9, 0x18, 0xed, 0xa3,
             0xd5, 0x00, 0x76, 0xe0, 0x75, 0xb8, 0xc2, 0xf0, 0x1e, 0x69, 0xa5,
             0xb6, 0x42, 0xa4, 0xd8, 0xc6, 0x2d, 0x4d, 0x41, 0x63, 0x34, 0x03,
             0x83, 0x08, 0xf0, 0xd5, 0xdc, 0x0b, 0xa6, 0x9d, 0x44, 0x40, 0x2c,
             0x3d, 0x9e, 0xd4, 0xcb, 0xd8, 0xa7, 0x76, 0x9d, 0x83, 0x20, 0xa7,
             0x5d, 0x58, 0x43, 0xf8, 0xde, 0xd4, 0xa5, 0x3e, 0xf6, 0x04, 0xf1,
             0x8f, 0x31, 0x4b, 0xd6, 0x5f, 0xd2, 0xae, 0xfc, 0x78, 0x80, 0xf0,
             0x56, 0x17, 0x48, 0xde, 0x18, 0x0a, 0x98, 0x9e, 0x88, 0x4f, 0x2c,
             0xde, 0xd4, 0xfc, 0x2b, 0x0b, 0xd3, 0x0d, 0x08, 0xfd, 0x2f, 0xcc,
             0xae, 0x4d, 0x8d, 0x4c, 0x8c, 0xe6, 0xf9, 0xac, 0x21, 0xe3, 0x80,
             0xed, 0x23, 0x39, 0x3e, 0x8d, 0x1a, 0x90, 0xad, 0x29, 0xa6, 0x16,
             0xeb, 0xe5, 0xe2}};

        RsaSha256 const rsa0(makeSlice(rsa0PublicKey), makeSlice(rsa0Sig));
        {
            auto const rsa0EncodedFulfillment =
                "\xa3\x82\x02\x08\x80\x82\x01\x00\xa7\x6c\x6f\x92\x15\x7c\x56"
                "\xe8\xad\x03\x9a\x2b\x04\x6c\xb6\x41\x02\x4a\x73\x12\x87\x86"
                "\xc2\x58\x3c\xd0\x04\xa4\x8c\x98\xa7\x7b\x79\x21\xba\xde\x38"
                "\xca\x67\xef\xdd\xb4\x9e\x37\x8b\x65\xf5\x5a\xce\xfe\x16\xfd"
                "\xad\x62\x7b\xa7\xba\x5e\x2c\x10\x99\x40\x30\xf6\xee\x26\x49"
                "\x27\x3b\xc5\xb8\x21\x30\x5c\x3e\x46\xb6\x02\x15\xc4\x0f\x18"
                "\x24\xf2\xcb\x38\x8b\x47\x77\x31\x63\x71\x48\xee\x76\xb3\xfd"
                "\xb6\xa2\xa0\x8e\x5a\x01\x73\x32\x35\xbf\x98\x39\x3e\x1a\xab"
                "\x87\xda\xbf\x82\x0c\x71\x2e\xb5\x8a\x54\xcc\x7f\xc2\xbf\xb4"
                "\x7f\xe2\xe5\xb9\x0f\x6e\xee\x4a\x2f\x8b\x20\xb1\xea\xaa\xdc"
                "\x89\x59\x34\x7c\xba\x9b\x3a\xa5\xe1\x57\x70\x64\x68\xf1\xbb"
                "\xae\x40\xf6\xf8\x90\x63\x55\x75\x3a\x3a\x9e\x71\x6a\x93\x50"
                "\x8d\x62\xfd\xaf\x89\x8a\x1f\x27\x57\xdd\x30\xd3\xca\x7d\x8f"
                "\xa5\x59\xca\x4e\xe4\xec\x9d\x25\x20\xa7\x81\x6a\x06\xa6\xbb"
                "\xb2\xf1\x75\xf9\x6b\x29\xc7\x75\xc0\x9f\xcc\x87\x42\x19\x9f"
                "\x8b\xb5\x2b\xa6\x9a\xc3\x61\x88\x74\x82\x91\x76\xf5\x46\x8c"
                "\xe7\x81\xf5\x2c\x25\x6d\x5d\x50\x18\x03\xd6\x1d\xed\x8d\x74"
                "\x7f\x05\xae\xbb\x35\xb9\xe7\x6f\xe1\x81\x82\x01\x00\x84\x7e"
                "\x67\xc4\x91\xee\xed\x64\x33\xad\xb3\xc0\x2f\xdf\xa3\xac\x04"
                "\x5d\x47\xe1\xc7\x39\xe6\x41\x29\x56\xec\x99\x5a\xc9\xdb\x15"
                "\x58\xce\x94\xa3\x96\xf9\x96\x2a\x59\xf7\xbf\x18\xba\xcd\x53"
                "\x3f\x57\x75\x71\xc5\x06\x66\xf1\xf6\xcb\x45\x93\x2f\x2f\xa6"
                "\xf2\xb5\x22\xe6\xd1\x61\x0f\x1b\xbb\x28\xad\xf4\xd7\x7b\xc2"
                "\xc1\xe6\xa4\xa3\x15\x4e\x55\xe7\x1a\x43\xb8\xef\x2c\x1a\xec"
                "\xc7\x50\x7b\x2b\x61\x3e\xe2\x38\xc0\x3d\x23\x77\x81\x65\xb9"
                "\x6e\x8a\xed\x09\xe3\x5b\x5e\x03\x52\xd8\xd3\xb2\x93\x9a\x71"
                "\xcb\x38\x86\x53\xce\xb5\xcd\x20\x1a\xa1\x7c\x13\x6c\x4c\x53"
                "\x9f\xd6\xb9\x18\xed\xa3\xd5\x00\x76\xe0\x75\xb8\xc2\xf0\x1e"
                "\x69\xa5\xb6\x42\xa4\xd8\xc6\x2d\x4d\x41\x63\x34\x03\x83\x08"
                "\xf0\xd5\xdc\x0b\xa6\x9d\x44\x40\x2c\x3d\x9e\xd4\xcb\xd8\xa7"
                "\x76\x9d\x83\x20\xa7\x5d\x58\x43\xf8\xde\xd4\xa5\x3e\xf6\x04"
                "\xf1\x8f\x31\x4b\xd6\x5f\xd2\xae\xfc\x78\x80\xf0\x56\x17\x48"
                "\xde\x18\x0a\x98\x9e\x88\x4f\x2c\xde\xd4\xfc\x2b\x0b\xd3\x0d"
                "\x08\xfd\x2f\xcc\xae\x4d\x8d\x4c\x8c\xe6\xf9\xac\x21\xe3\x80"
                "\xed\x23\x39\x3e\x8d\x1a\x90\xad\x29\xa6\x16\xeb\xe5\xe2"s;
            auto const rsa0EncodedCondition =
                "\xa3\x27\x80\x20\x07\x62\xb2\xf0\x74\x9d\x30\xf9\xaa\xf6\x56"
                "\x29\x05\x9d\xb1\x00\x4b\xd6\x8f\x1e\x1d\xa7\x38\xb0\x34\x9c"
                "\x27\xaa\x3a\xfa\x12\x09\x81\x03\x01\x00\x00"s;
            auto const rsa0EncodedFingerprint =
                "\x30\x82\x01\x04\x80\x82\x01\x00\xa7\x6c\x6f\x92\x15\x7c\x56"
                "\xe8\xad\x03\x9a\x2b\x04\x6c\xb6\x41\x02\x4a\x73\x12\x87\x86"
                "\xc2\x58\x3c\xd0\x04\xa4\x8c\x98\xa7\x7b\x79\x21\xba\xde\x38"
                "\xca\x67\xef\xdd\xb4\x9e\x37\x8b\x65\xf5\x5a\xce\xfe\x16\xfd"
                "\xad\x62\x7b\xa7\xba\x5e\x2c\x10\x99\x40\x30\xf6\xee\x26\x49"
                "\x27\x3b\xc5\xb8\x21\x30\x5c\x3e\x46\xb6\x02\x15\xc4\x0f\x18"
                "\x24\xf2\xcb\x38\x8b\x47\x77\x31\x63\x71\x48\xee\x76\xb3\xfd"
                "\xb6\xa2\xa0\x8e\x5a\x01\x73\x32\x35\xbf\x98\x39\x3e\x1a\xab"
                "\x87\xda\xbf\x82\x0c\x71\x2e\xb5\x8a\x54\xcc\x7f\xc2\xbf\xb4"
                "\x7f\xe2\xe5\xb9\x0f\x6e\xee\x4a\x2f\x8b\x20\xb1\xea\xaa\xdc"
                "\x89\x59\x34\x7c\xba\x9b\x3a\xa5\xe1\x57\x70\x64\x68\xf1\xbb"
                "\xae\x40\xf6\xf8\x90\x63\x55\x75\x3a\x3a\x9e\x71\x6a\x93\x50"
                "\x8d\x62\xfd\xaf\x89\x8a\x1f\x27\x57\xdd\x30\xd3\xca\x7d\x8f"
                "\xa5\x59\xca\x4e\xe4\xec\x9d\x25\x20\xa7\x81\x6a\x06\xa6\xbb"
                "\xb2\xf1\x75\xf9\x6b\x29\xc7\x75\xc0\x9f\xcc\x87\x42\x19\x9f"
                "\x8b\xb5\x2b\xa6\x9a\xc3\x61\x88\x74\x82\x91\x76\xf5\x46\x8c"
                "\xe7\x81\xf5\x2c\x25\x6d\x5d\x50\x18\x03\xd6\x1d\xed\x8d\x74"
                "\x7f\x05\xae\xbb\x35\xb9\xe7\x6f\xe1"s;
            check(
                &rsa0,
                rsa0Msg,
                rsa0EncodedFulfillment,
                rsa0EncodedCondition,
                rsa0EncodedFingerprint);
        }
    }

    void
    testPrefix7()
    {
        testcase("Prefix7");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * prefix0
        // ** rsa1

        auto const rsa1Msg = "P0abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa1PublicKey{
            {0xc4, 0x1b, 0xc9, 0x7a, 0x96, 0x81, 0xce, 0x2e, 0xf2, 0x53, 0xc0,
             0xd4, 0xa8, 0xb9, 0xa8, 0x12, 0x92, 0x45, 0x06, 0xf1, 0xf4, 0xcd,
             0x27, 0x7d, 0xff, 0xc1, 0x65, 0x75, 0xae, 0xb7, 0xc4, 0x98, 0x53,
             0xd8, 0xfa, 0x6d, 0x86, 0x63, 0xd8, 0x4e, 0xf5, 0x20, 0xe2, 0x9e,
             0x96, 0x04, 0x36, 0x0c, 0x3f, 0xac, 0x7d, 0x09, 0x42, 0x11, 0x13,
             0x30, 0x2d, 0x7f, 0x60, 0x2c, 0xec, 0x2a, 0x34, 0xc3, 0xd8, 0xba,
             0x6d, 0x14, 0x75, 0x28, 0x56, 0xdc, 0x73, 0x6c, 0xb7, 0xd6, 0xba,
             0x8a, 0xa3, 0x9e, 0x09, 0x0e, 0xa4, 0xf3, 0x6b, 0x5d, 0x12, 0xc6,
             0xe4, 0xdd, 0x8c, 0xb1, 0x98, 0xcd, 0xde, 0xca, 0xad, 0xff, 0x86,
             0xb6, 0x06, 0x25, 0x9b, 0x71, 0x84, 0xa0, 0x9b, 0x19, 0x14, 0x88,
             0xd0, 0xc7, 0x55, 0x99, 0xe0, 0x1e, 0x0e, 0x39, 0x67, 0x74, 0xdf,
             0xf6, 0x29, 0xfa, 0x92, 0xb6, 0xbb, 0xe6, 0xe1, 0x1c, 0xd9, 0xee,
             0x65, 0xda, 0x13, 0xec, 0x50, 0x6a, 0x11, 0x7e, 0xae, 0xb4, 0xac,
             0x85, 0xa5, 0xc7, 0xcb, 0x43, 0x42, 0x36, 0x73, 0x34, 0x31, 0xb6,
             0x0b, 0x5e, 0xf0, 0x9e, 0x80, 0x49, 0xab, 0xc7, 0x79, 0xc5, 0xa7,
             0xe3, 0x16, 0x35, 0x3a, 0x48, 0xe6, 0xc0, 0x69, 0xe2, 0x70, 0x30,
             0x20, 0x74, 0x47, 0x3e, 0x3a, 0x51, 0x01, 0x21, 0x60, 0x15, 0x53,
             0x40, 0x68, 0x6e, 0xe7, 0x9f, 0x73, 0xb6, 0x98, 0x3b, 0x6e, 0x50,
             0xb8, 0xb2, 0xe7, 0x42, 0x90, 0x77, 0x61, 0xd4, 0x22, 0x6c, 0x0b,
             0x3d, 0x66, 0xe0, 0x1b, 0x7d, 0xb0, 0xa1, 0xa9, 0xa9, 0xea, 0x0e,
             0xf2, 0xab, 0xe0, 0x32, 0xf4, 0x49, 0x44, 0xcb, 0xae, 0x60, 0x1d,
             0xe1, 0xac, 0xd3, 0x34, 0x2b, 0x03, 0x97, 0x98, 0x2d, 0xda, 0xf8,
             0xe8, 0x0b, 0x81, 0x94, 0x98, 0x3a, 0xbd, 0x6d, 0x17, 0x18, 0x42,
             0x58, 0x0c, 0xa3}};
        std::array<std::uint8_t, 256> const rsa1Sig{
            {0x99, 0xd1, 0x4a, 0x96, 0x33, 0x53, 0xbe, 0x8f, 0x9e, 0x2b, 0xd5,
             0xdf, 0x3e, 0xd8, 0x51, 0x73, 0x76, 0x95, 0x43, 0xea, 0xf8, 0xa5,
             0xde, 0xa6, 0xfd, 0x07, 0x05, 0x94, 0xd3, 0x64, 0x61, 0xc2, 0xbf,
             0x28, 0x3e, 0x62, 0x18, 0xdb, 0xee, 0xee, 0x87, 0x6c, 0x94, 0x29,
             0x48, 0xd2, 0xe3, 0x44, 0x05, 0x61, 0xa7, 0xb2, 0x25, 0x92, 0xb2,
             0x24, 0x88, 0x6e, 0x11, 0xa8, 0xe9, 0x0c, 0xbd, 0x0e, 0x91, 0xfa,
             0x47, 0xf9, 0x4c, 0x91, 0x09, 0xaa, 0xf3, 0x19, 0xaf, 0x72, 0x20,
             0x19, 0xd6, 0x56, 0x27, 0xe6, 0x74, 0x2f, 0x4c, 0x97, 0xed, 0x5c,
             0x32, 0xbf, 0x23, 0x92, 0xab, 0x55, 0x24, 0x60, 0x3c, 0xa3, 0x82,
             0x24, 0xd4, 0xe3, 0xe8, 0xf7, 0x1b, 0x09, 0xaa, 0x3b, 0xf2, 0x33,
             0x5d, 0x14, 0x5c, 0xc4, 0x3a, 0xf1, 0xdf, 0x11, 0x75, 0x25, 0x0b,
             0x65, 0x8c, 0x23, 0x3f, 0x2e, 0x8c, 0x8a, 0xc0, 0xa1, 0xad, 0x81,
             0x38, 0x6d, 0x61, 0x32, 0x7b, 0xc7, 0x77, 0x2e, 0x56, 0x0e, 0x5d,
             0x53, 0xb7, 0x9c, 0x3a, 0x0f, 0x19, 0x24, 0x0f, 0xcc, 0x16, 0x00,
             0x30, 0x9e, 0x5a, 0xcc, 0xab, 0x52, 0x86, 0x87, 0xaa, 0x8d, 0x30,
             0xdd, 0x32, 0xe5, 0xee, 0x44, 0x67, 0x88, 0x13, 0x7b, 0xe5, 0x51,
             0xb8, 0xa0, 0xfa, 0xf9, 0x3b, 0x4d, 0xb4, 0x55, 0x22, 0x25, 0xab,
             0xf4, 0xf5, 0xf4, 0xf9, 0x6c, 0xb7, 0x7b, 0xb4, 0x10, 0x02, 0x3e,
             0x69, 0x77, 0x11, 0xab, 0xa0, 0x7d, 0xc6, 0x6b, 0x7c, 0xa6, 0x72,
             0x70, 0x2f, 0x46, 0xc6, 0xe3, 0xd6, 0x67, 0x0b, 0xb8, 0x82, 0x79,
             0xdd, 0x2d, 0x23, 0xaf, 0xc0, 0x05, 0x4c, 0x9c, 0x90, 0x4c, 0x30,
             0xce, 0xf1, 0xaa, 0xf7, 0xb0, 0x34, 0x0e, 0x87, 0xaf, 0x70, 0xc9,
             0x5c, 0x44, 0x56, 0xce, 0x80, 0x66, 0x41, 0x02, 0xd2, 0xcd, 0x32,
             0x2f, 0x30, 0x8d}};
        auto const prefix0Prefix = "P0"s;
        auto const prefix0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix0MaxMsgLength = 14;

        auto rsa1 = std::make_unique<RsaSha256>(
            makeSlice(rsa1PublicKey), makeSlice(rsa1Sig));
        PrefixSha256 const prefix0(
            makeSlice(prefix0Prefix), prefix0MaxMsgLength, std::move(rsa1));
        {
            auto const prefix0EncodedFulfillment =
                "\xa1\x82\x02\x17\x80\x02\x50\x30\x81\x01\x0e\xa2\x82\x02\x0c"
                "\xa3\x82\x02\x08\x80\x82\x01\x00\xc4\x1b\xc9\x7a\x96\x81\xce"
                "\x2e\xf2\x53\xc0\xd4\xa8\xb9\xa8\x12\x92\x45\x06\xf1\xf4\xcd"
                "\x27\x7d\xff\xc1\x65\x75\xae\xb7\xc4\x98\x53\xd8\xfa\x6d\x86"
                "\x63\xd8\x4e\xf5\x20\xe2\x9e\x96\x04\x36\x0c\x3f\xac\x7d\x09"
                "\x42\x11\x13\x30\x2d\x7f\x60\x2c\xec\x2a\x34\xc3\xd8\xba\x6d"
                "\x14\x75\x28\x56\xdc\x73\x6c\xb7\xd6\xba\x8a\xa3\x9e\x09\x0e"
                "\xa4\xf3\x6b\x5d\x12\xc6\xe4\xdd\x8c\xb1\x98\xcd\xde\xca\xad"
                "\xff\x86\xb6\x06\x25\x9b\x71\x84\xa0\x9b\x19\x14\x88\xd0\xc7"
                "\x55\x99\xe0\x1e\x0e\x39\x67\x74\xdf\xf6\x29\xfa\x92\xb6\xbb"
                "\xe6\xe1\x1c\xd9\xee\x65\xda\x13\xec\x50\x6a\x11\x7e\xae\xb4"
                "\xac\x85\xa5\xc7\xcb\x43\x42\x36\x73\x34\x31\xb6\x0b\x5e\xf0"
                "\x9e\x80\x49\xab\xc7\x79\xc5\xa7\xe3\x16\x35\x3a\x48\xe6\xc0"
                "\x69\xe2\x70\x30\x20\x74\x47\x3e\x3a\x51\x01\x21\x60\x15\x53"
                "\x40\x68\x6e\xe7\x9f\x73\xb6\x98\x3b\x6e\x50\xb8\xb2\xe7\x42"
                "\x90\x77\x61\xd4\x22\x6c\x0b\x3d\x66\xe0\x1b\x7d\xb0\xa1\xa9"
                "\xa9\xea\x0e\xf2\xab\xe0\x32\xf4\x49\x44\xcb\xae\x60\x1d\xe1"
                "\xac\xd3\x34\x2b\x03\x97\x98\x2d\xda\xf8\xe8\x0b\x81\x94\x98"
                "\x3a\xbd\x6d\x17\x18\x42\x58\x0c\xa3\x81\x82\x01\x00\x99\xd1"
                "\x4a\x96\x33\x53\xbe\x8f\x9e\x2b\xd5\xdf\x3e\xd8\x51\x73\x76"
                "\x95\x43\xea\xf8\xa5\xde\xa6\xfd\x07\x05\x94\xd3\x64\x61\xc2"
                "\xbf\x28\x3e\x62\x18\xdb\xee\xee\x87\x6c\x94\x29\x48\xd2\xe3"
                "\x44\x05\x61\xa7\xb2\x25\x92\xb2\x24\x88\x6e\x11\xa8\xe9\x0c"
                "\xbd\x0e\x91\xfa\x47\xf9\x4c\x91\x09\xaa\xf3\x19\xaf\x72\x20"
                "\x19\xd6\x56\x27\xe6\x74\x2f\x4c\x97\xed\x5c\x32\xbf\x23\x92"
                "\xab\x55\x24\x60\x3c\xa3\x82\x24\xd4\xe3\xe8\xf7\x1b\x09\xaa"
                "\x3b\xf2\x33\x5d\x14\x5c\xc4\x3a\xf1\xdf\x11\x75\x25\x0b\x65"
                "\x8c\x23\x3f\x2e\x8c\x8a\xc0\xa1\xad\x81\x38\x6d\x61\x32\x7b"
                "\xc7\x77\x2e\x56\x0e\x5d\x53\xb7\x9c\x3a\x0f\x19\x24\x0f\xcc"
                "\x16\x00\x30\x9e\x5a\xcc\xab\x52\x86\x87\xaa\x8d\x30\xdd\x32"
                "\xe5\xee\x44\x67\x88\x13\x7b\xe5\x51\xb8\xa0\xfa\xf9\x3b\x4d"
                "\xb4\x55\x22\x25\xab\xf4\xf5\xf4\xf9\x6c\xb7\x7b\xb4\x10\x02"
                "\x3e\x69\x77\x11\xab\xa0\x7d\xc6\x6b\x7c\xa6\x72\x70\x2f\x46"
                "\xc6\xe3\xd6\x67\x0b\xb8\x82\x79\xdd\x2d\x23\xaf\xc0\x05\x4c"
                "\x9c\x90\x4c\x30\xce\xf1\xaa\xf7\xb0\x34\x0e\x87\xaf\x70\xc9"
                "\x5c\x44\x56\xce\x80\x66\x41\x02\xd2\xcd\x32\x2f\x30\x8d"s;
            auto const prefix0EncodedCondition =
                "\xa1\x2b\x80\x20\x4d\x51\x18\x04\xa1\x5d\x3a\xf4\x26\xc3\x0a"
                "\x98\x43\x35\xe4\xf5\xa0\x9d\x26\x5a\xec\xe7\x5e\xfe\x13\x74"
                "\x61\x99\xb6\x92\xb9\x83\x81\x03\x01\x04\x10\x82\x02\x04\x10"s;
            auto const prefix0EncodedFingerprint =
                "\x30\x32\x80\x02\x50\x30\x81\x01\x0e\xa2\x29\xa3\x27\x80\x20"
                "\x23\xc9\xfd\x99\xdc\xf3\x74\x06\xe3\x11\x57\x5e\x7a\x90\x4b"
                "\x0d\x0c\x36\xa7\x8d\x25\xbc\xd5\x5f\x0d\x1f\x25\x08\x2e\x4f"
                "\xca\x1a\x81\x03\x01\x00\x00"s;
            check(
                &prefix0,
                prefix0Msg,
                prefix0EncodedFulfillment,
                prefix0EncodedCondition,
                prefix0EncodedFingerprint);
        }
    }

    void
    testThresh24()
    {
        testcase("Thresh24");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * thresh0
        // ** rsa1

        auto const rsa1Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa1PublicKey{
            {0xc4, 0x1b, 0xc9, 0x7a, 0x96, 0x81, 0xce, 0x2e, 0xf2, 0x53, 0xc0,
             0xd4, 0xa8, 0xb9, 0xa8, 0x12, 0x92, 0x45, 0x06, 0xf1, 0xf4, 0xcd,
             0x27, 0x7d, 0xff, 0xc1, 0x65, 0x75, 0xae, 0xb7, 0xc4, 0x98, 0x53,
             0xd8, 0xfa, 0x6d, 0x86, 0x63, 0xd8, 0x4e, 0xf5, 0x20, 0xe2, 0x9e,
             0x96, 0x04, 0x36, 0x0c, 0x3f, 0xac, 0x7d, 0x09, 0x42, 0x11, 0x13,
             0x30, 0x2d, 0x7f, 0x60, 0x2c, 0xec, 0x2a, 0x34, 0xc3, 0xd8, 0xba,
             0x6d, 0x14, 0x75, 0x28, 0x56, 0xdc, 0x73, 0x6c, 0xb7, 0xd6, 0xba,
             0x8a, 0xa3, 0x9e, 0x09, 0x0e, 0xa4, 0xf3, 0x6b, 0x5d, 0x12, 0xc6,
             0xe4, 0xdd, 0x8c, 0xb1, 0x98, 0xcd, 0xde, 0xca, 0xad, 0xff, 0x86,
             0xb6, 0x06, 0x25, 0x9b, 0x71, 0x84, 0xa0, 0x9b, 0x19, 0x14, 0x88,
             0xd0, 0xc7, 0x55, 0x99, 0xe0, 0x1e, 0x0e, 0x39, 0x67, 0x74, 0xdf,
             0xf6, 0x29, 0xfa, 0x92, 0xb6, 0xbb, 0xe6, 0xe1, 0x1c, 0xd9, 0xee,
             0x65, 0xda, 0x13, 0xec, 0x50, 0x6a, 0x11, 0x7e, 0xae, 0xb4, 0xac,
             0x85, 0xa5, 0xc7, 0xcb, 0x43, 0x42, 0x36, 0x73, 0x34, 0x31, 0xb6,
             0x0b, 0x5e, 0xf0, 0x9e, 0x80, 0x49, 0xab, 0xc7, 0x79, 0xc5, 0xa7,
             0xe3, 0x16, 0x35, 0x3a, 0x48, 0xe6, 0xc0, 0x69, 0xe2, 0x70, 0x30,
             0x20, 0x74, 0x47, 0x3e, 0x3a, 0x51, 0x01, 0x21, 0x60, 0x15, 0x53,
             0x40, 0x68, 0x6e, 0xe7, 0x9f, 0x73, 0xb6, 0x98, 0x3b, 0x6e, 0x50,
             0xb8, 0xb2, 0xe7, 0x42, 0x90, 0x77, 0x61, 0xd4, 0x22, 0x6c, 0x0b,
             0x3d, 0x66, 0xe0, 0x1b, 0x7d, 0xb0, 0xa1, 0xa9, 0xa9, 0xea, 0x0e,
             0xf2, 0xab, 0xe0, 0x32, 0xf4, 0x49, 0x44, 0xcb, 0xae, 0x60, 0x1d,
             0xe1, 0xac, 0xd3, 0x34, 0x2b, 0x03, 0x97, 0x98, 0x2d, 0xda, 0xf8,
             0xe8, 0x0b, 0x81, 0x94, 0x98, 0x3a, 0xbd, 0x6d, 0x17, 0x18, 0x42,
             0x58, 0x0c, 0xa3}};
        std::array<std::uint8_t, 256> const rsa1Sig{
            {0x5c, 0xa0, 0x48, 0xfe, 0x6f, 0xab, 0x0e, 0x85, 0xf9, 0xef, 0xa2,
             0x01, 0x87, 0x9d, 0x60, 0xb5, 0x6b, 0x83, 0x22, 0x0f, 0x0d, 0x83,
             0xac, 0x7a, 0xbb, 0xe1, 0xc1, 0x1b, 0x6c, 0x99, 0xbe, 0x5b, 0xe7,
             0xa2, 0x01, 0x6f, 0x76, 0x3a, 0x44, 0x5d, 0xee, 0x05, 0xde, 0x48,
             0xfc, 0xfb, 0x60, 0x26, 0x37, 0x75, 0x9b, 0x6e, 0x8d, 0xd5, 0x54,
             0xde, 0x61, 0x51, 0x97, 0xc9, 0x31, 0x0f, 0x5d, 0x5b, 0xe1, 0x34,
             0x79, 0x61, 0xa7, 0xc8, 0x0a, 0x28, 0x6d, 0xf8, 0xc8, 0x07, 0x9b,
             0x98, 0x77, 0xa6, 0x51, 0xfa, 0x6e, 0x35, 0x4d, 0xea, 0x8d, 0xf9,
             0x0b, 0xac, 0x1a, 0xcf, 0x90, 0x27, 0x0d, 0xb0, 0x75, 0x1e, 0x54,
             0x4d, 0x2b, 0x57, 0xd1, 0xc3, 0xea, 0xb2, 0xc2, 0x9d, 0x2f, 0x6e,
             0x54, 0x53, 0x53, 0xea, 0x4b, 0xa5, 0x52, 0xb7, 0x73, 0x61, 0xa5,
             0x27, 0x55, 0x1d, 0xf1, 0x91, 0xe0, 0xba, 0x27, 0x0c, 0x5f, 0x26,
             0xd2, 0xeb, 0x43, 0x52, 0x55, 0xd7, 0xb0, 0xa9, 0x29, 0xea, 0x63,
             0x4d, 0xf6, 0x95, 0xaf, 0x91, 0xbc, 0x7a, 0x22, 0x3a, 0x94, 0x0f,
             0xa4, 0x51, 0x4d, 0x83, 0xe8, 0x13, 0xdb, 0x41, 0x34, 0xbd, 0xa6,
             0xc0, 0xf4, 0x83, 0x24, 0xbd, 0xf2, 0x29, 0x79, 0x78, 0x46, 0xd3,
             0x99, 0xd9, 0x66, 0x82, 0x4b, 0x75, 0x0c, 0x4c, 0xdb, 0x3f, 0xb0,
             0x75, 0xb5, 0xdf, 0x11, 0xc2, 0xdf, 0x0a, 0xa4, 0xa2, 0x93, 0x53,
             0x29, 0x04, 0x91, 0x47, 0xf8, 0x63, 0x5a, 0x97, 0xb6, 0x02, 0x40,
             0x84, 0x66, 0x5b, 0xf7, 0xe4, 0x04, 0xe9, 0x5a, 0x52, 0x2e, 0x15,
             0x23, 0x20, 0xe5, 0x7b, 0x6a, 0x7b, 0x8d, 0x1f, 0x82, 0x29, 0x49,
             0x22, 0x6d, 0x49, 0x91, 0x60, 0x3e, 0xcc, 0xbf, 0x69, 0x19, 0x01,
             0x03, 0x78, 0xbe, 0x0c, 0x82, 0xed, 0xb7, 0x3a, 0x4e, 0x32, 0xaf,
             0xb6, 0x0d, 0x92}};
        auto const thresh0Msg = "abcdefghijklmnopqrstuvwxyz"s;

        auto rsa1 = std::make_unique<RsaSha256>(
            makeSlice(rsa1PublicKey), makeSlice(rsa1Sig));
        std::vector<std::unique_ptr<Fulfillment>> thresh0Subfulfillments;
        thresh0Subfulfillments.emplace_back(std::move(rsa1));
        std::vector<Condition> thresh0Subconditions{};
        ThresholdSha256 const thresh0(
            std::move(thresh0Subfulfillments), std::move(thresh0Subconditions));
        {
            auto const thresh0EncodedFulfillment =
                "\xa2\x82\x02\x12\xa0\x82\x02\x0c\xa3\x82\x02\x08\x80\x82\x01"
                "\x00\xc4\x1b\xc9\x7a\x96\x81\xce\x2e\xf2\x53\xc0\xd4\xa8\xb9"
                "\xa8\x12\x92\x45\x06\xf1\xf4\xcd\x27\x7d\xff\xc1\x65\x75\xae"
                "\xb7\xc4\x98\x53\xd8\xfa\x6d\x86\x63\xd8\x4e\xf5\x20\xe2\x9e"
                "\x96\x04\x36\x0c\x3f\xac\x7d\x09\x42\x11\x13\x30\x2d\x7f\x60"
                "\x2c\xec\x2a\x34\xc3\xd8\xba\x6d\x14\x75\x28\x56\xdc\x73\x6c"
                "\xb7\xd6\xba\x8a\xa3\x9e\x09\x0e\xa4\xf3\x6b\x5d\x12\xc6\xe4"
                "\xdd\x8c\xb1\x98\xcd\xde\xca\xad\xff\x86\xb6\x06\x25\x9b\x71"
                "\x84\xa0\x9b\x19\x14\x88\xd0\xc7\x55\x99\xe0\x1e\x0e\x39\x67"
                "\x74\xdf\xf6\x29\xfa\x92\xb6\xbb\xe6\xe1\x1c\xd9\xee\x65\xda"
                "\x13\xec\x50\x6a\x11\x7e\xae\xb4\xac\x85\xa5\xc7\xcb\x43\x42"
                "\x36\x73\x34\x31\xb6\x0b\x5e\xf0\x9e\x80\x49\xab\xc7\x79\xc5"
                "\xa7\xe3\x16\x35\x3a\x48\xe6\xc0\x69\xe2\x70\x30\x20\x74\x47"
                "\x3e\x3a\x51\x01\x21\x60\x15\x53\x40\x68\x6e\xe7\x9f\x73\xb6"
                "\x98\x3b\x6e\x50\xb8\xb2\xe7\x42\x90\x77\x61\xd4\x22\x6c\x0b"
                "\x3d\x66\xe0\x1b\x7d\xb0\xa1\xa9\xa9\xea\x0e\xf2\xab\xe0\x32"
                "\xf4\x49\x44\xcb\xae\x60\x1d\xe1\xac\xd3\x34\x2b\x03\x97\x98"
                "\x2d\xda\xf8\xe8\x0b\x81\x94\x98\x3a\xbd\x6d\x17\x18\x42\x58"
                "\x0c\xa3\x81\x82\x01\x00\x5c\xa0\x48\xfe\x6f\xab\x0e\x85\xf9"
                "\xef\xa2\x01\x87\x9d\x60\xb5\x6b\x83\x22\x0f\x0d\x83\xac\x7a"
                "\xbb\xe1\xc1\x1b\x6c\x99\xbe\x5b\xe7\xa2\x01\x6f\x76\x3a\x44"
                "\x5d\xee\x05\xde\x48\xfc\xfb\x60\x26\x37\x75\x9b\x6e\x8d\xd5"
                "\x54\xde\x61\x51\x97\xc9\x31\x0f\x5d\x5b\xe1\x34\x79\x61\xa7"
                "\xc8\x0a\x28\x6d\xf8\xc8\x07\x9b\x98\x77\xa6\x51\xfa\x6e\x35"
                "\x4d\xea\x8d\xf9\x0b\xac\x1a\xcf\x90\x27\x0d\xb0\x75\x1e\x54"
                "\x4d\x2b\x57\xd1\xc3\xea\xb2\xc2\x9d\x2f\x6e\x54\x53\x53\xea"
                "\x4b\xa5\x52\xb7\x73\x61\xa5\x27\x55\x1d\xf1\x91\xe0\xba\x27"
                "\x0c\x5f\x26\xd2\xeb\x43\x52\x55\xd7\xb0\xa9\x29\xea\x63\x4d"
                "\xf6\x95\xaf\x91\xbc\x7a\x22\x3a\x94\x0f\xa4\x51\x4d\x83\xe8"
                "\x13\xdb\x41\x34\xbd\xa6\xc0\xf4\x83\x24\xbd\xf2\x29\x79\x78"
                "\x46\xd3\x99\xd9\x66\x82\x4b\x75\x0c\x4c\xdb\x3f\xb0\x75\xb5"
                "\xdf\x11\xc2\xdf\x0a\xa4\xa2\x93\x53\x29\x04\x91\x47\xf8\x63"
                "\x5a\x97\xb6\x02\x40\x84\x66\x5b\xf7\xe4\x04\xe9\x5a\x52\x2e"
                "\x15\x23\x20\xe5\x7b\x6a\x7b\x8d\x1f\x82\x29\x49\x22\x6d\x49"
                "\x91\x60\x3e\xcc\xbf\x69\x19\x01\x03\x78\xbe\x0c\x82\xed\xb7"
                "\x3a\x4e\x32\xaf\xb6\x0d\x92\xa1\x00"s;
            auto const thresh0EncodedCondition =
                "\xa2\x2b\x80\x20\xb5\x0e\x55\xf3\xb5\xb2\x5f\xea\xa9\x99\x79"
                "\x50\x68\xaa\x99\x8f\x3b\x20\xaa\x20\xa3\x95\x27\x07\xfd\x64"
                "\xeb\xa6\xcb\x76\x2b\x8e\x81\x03\x01\x04\x00\x82\x02\x04\x10"s;
            auto const thresh0EncodedFingerprint =
                "\x30\x2e\x80\x01\x01\xa1\x29\xa3\x27\x80\x20\x23\xc9\xfd\x99"
                "\xdc\xf3\x74\x06\xe3\x11\x57\x5e\x7a\x90\x4b\x0d\x0c\x36\xa7"
                "\x8d\x25\xbc\xd5\x5f\x0d\x1f\x25\x08\x2e\x4f\xca\x1a\x81\x03"
                "\x01\x00\x00"s;
            check(
                &thresh0,
                thresh0Msg,
                thresh0EncodedFulfillment,
                thresh0EncodedCondition,
                thresh0EncodedFingerprint);
        }
    }

    void
    testThresh25()
    {
        testcase("Thresh25");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * thresh0
        // ** Preim2Cond
        // ** Rsa3Cond
        // ** Ed4Cond
        // ** rsa1

        auto const rsa1Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa1PublicKey{
            {0xc4, 0x1b, 0xc9, 0x7a, 0x96, 0x81, 0xce, 0x2e, 0xf2, 0x53, 0xc0,
             0xd4, 0xa8, 0xb9, 0xa8, 0x12, 0x92, 0x45, 0x06, 0xf1, 0xf4, 0xcd,
             0x27, 0x7d, 0xff, 0xc1, 0x65, 0x75, 0xae, 0xb7, 0xc4, 0x98, 0x53,
             0xd8, 0xfa, 0x6d, 0x86, 0x63, 0xd8, 0x4e, 0xf5, 0x20, 0xe2, 0x9e,
             0x96, 0x04, 0x36, 0x0c, 0x3f, 0xac, 0x7d, 0x09, 0x42, 0x11, 0x13,
             0x30, 0x2d, 0x7f, 0x60, 0x2c, 0xec, 0x2a, 0x34, 0xc3, 0xd8, 0xba,
             0x6d, 0x14, 0x75, 0x28, 0x56, 0xdc, 0x73, 0x6c, 0xb7, 0xd6, 0xba,
             0x8a, 0xa3, 0x9e, 0x09, 0x0e, 0xa4, 0xf3, 0x6b, 0x5d, 0x12, 0xc6,
             0xe4, 0xdd, 0x8c, 0xb1, 0x98, 0xcd, 0xde, 0xca, 0xad, 0xff, 0x86,
             0xb6, 0x06, 0x25, 0x9b, 0x71, 0x84, 0xa0, 0x9b, 0x19, 0x14, 0x88,
             0xd0, 0xc7, 0x55, 0x99, 0xe0, 0x1e, 0x0e, 0x39, 0x67, 0x74, 0xdf,
             0xf6, 0x29, 0xfa, 0x92, 0xb6, 0xbb, 0xe6, 0xe1, 0x1c, 0xd9, 0xee,
             0x65, 0xda, 0x13, 0xec, 0x50, 0x6a, 0x11, 0x7e, 0xae, 0xb4, 0xac,
             0x85, 0xa5, 0xc7, 0xcb, 0x43, 0x42, 0x36, 0x73, 0x34, 0x31, 0xb6,
             0x0b, 0x5e, 0xf0, 0x9e, 0x80, 0x49, 0xab, 0xc7, 0x79, 0xc5, 0xa7,
             0xe3, 0x16, 0x35, 0x3a, 0x48, 0xe6, 0xc0, 0x69, 0xe2, 0x70, 0x30,
             0x20, 0x74, 0x47, 0x3e, 0x3a, 0x51, 0x01, 0x21, 0x60, 0x15, 0x53,
             0x40, 0x68, 0x6e, 0xe7, 0x9f, 0x73, 0xb6, 0x98, 0x3b, 0x6e, 0x50,
             0xb8, 0xb2, 0xe7, 0x42, 0x90, 0x77, 0x61, 0xd4, 0x22, 0x6c, 0x0b,
             0x3d, 0x66, 0xe0, 0x1b, 0x7d, 0xb0, 0xa1, 0xa9, 0xa9, 0xea, 0x0e,
             0xf2, 0xab, 0xe0, 0x32, 0xf4, 0x49, 0x44, 0xcb, 0xae, 0x60, 0x1d,
             0xe1, 0xac, 0xd3, 0x34, 0x2b, 0x03, 0x97, 0x98, 0x2d, 0xda, 0xf8,
             0xe8, 0x0b, 0x81, 0x94, 0x98, 0x3a, 0xbd, 0x6d, 0x17, 0x18, 0x42,
             0x58, 0x0c, 0xa3}};
        std::array<std::uint8_t, 256> const rsa1Sig{
            {0x16, 0x5b, 0x14, 0x0d, 0x7a, 0x87, 0x25, 0x8f, 0xed, 0xb3, 0xe4,
             0xc8, 0x25, 0x24, 0xcd, 0x2c, 0x47, 0x1a, 0x71, 0xf7, 0xa3, 0xe1,
             0x55, 0xf8, 0xe1, 0xc7, 0xdf, 0x22, 0x88, 0x0d, 0xe7, 0x83, 0x74,
             0xd2, 0x56, 0xc4, 0xc2, 0x7c, 0x4a, 0xa7, 0x0b, 0x1c, 0x7d, 0x52,
             0x9f, 0xec, 0xbb, 0xdf, 0xeb, 0x90, 0x34, 0xaf, 0x92, 0x71, 0x06,
             0x32, 0xd1, 0xc3, 0x3b, 0x86, 0x0f, 0x0e, 0x97, 0xdc, 0x73, 0x49,
             0xda, 0x38, 0xdd, 0xa4, 0xa3, 0xd9, 0xab, 0xc4, 0xe9, 0xc6, 0x0a,
             0xa3, 0xcb, 0x34, 0xbb, 0x71, 0xf8, 0x0e, 0x2d, 0xbb, 0x81, 0x4a,
             0xc7, 0xb8, 0x27, 0x14, 0x28, 0x84, 0xd8, 0xcb, 0x4c, 0xc5, 0x17,
             0x42, 0x01, 0xc6, 0x16, 0xbe, 0xaa, 0x59, 0x9f, 0xab, 0x08, 0xba,
             0xe1, 0x23, 0xe3, 0x75, 0xf3, 0xe5, 0x1b, 0x59, 0xe9, 0xf3, 0xa1,
             0x98, 0x57, 0x42, 0xd7, 0xa2, 0xd0, 0x88, 0x30, 0xbc, 0xd9, 0x4f,
             0x37, 0x26, 0x4c, 0x4c, 0x36, 0x8a, 0xf8, 0xed, 0x6f, 0x95, 0x79,
             0xad, 0x0f, 0x78, 0x90, 0x5a, 0xdd, 0x35, 0x61, 0x2c, 0xba, 0x49,
             0x10, 0x71, 0xa4, 0x8b, 0x64, 0x9b, 0x16, 0xf7, 0x69, 0xfc, 0x80,
             0x5d, 0xed, 0x89, 0xc0, 0xfc, 0xde, 0x27, 0x1e, 0xca, 0xd0, 0x0e,
             0x9d, 0xb1, 0x4d, 0xaa, 0xc5, 0x81, 0x38, 0x74, 0x3b, 0xc9, 0x63,
             0xbf, 0xb2, 0xbd, 0x82, 0xa1, 0x45, 0x5c, 0xd2, 0x34, 0x5b, 0xb7,
             0x4b, 0x2c, 0x7a, 0x99, 0x59, 0x7b, 0xa0, 0xfc, 0xc3, 0x7e, 0x4b,
             0xce, 0x10, 0x91, 0xcd, 0x50, 0x06, 0x66, 0x32, 0xdd, 0x7f, 0x42,
             0xff, 0xe1, 0xc4, 0x13, 0xaf, 0x31, 0x04, 0x7c, 0x0f, 0xed, 0xe1,
             0x1c, 0xa1, 0x43, 0x36, 0xc9, 0x55, 0xac, 0xbf, 0x0c, 0x40, 0x5e,
             0x28, 0xc9, 0x2f, 0x6a, 0x69, 0xdb, 0x73, 0x40, 0xc1, 0x2a, 0xde,
             0x69, 0xf6, 0xa0}};
        auto const thresh0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim2CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim2Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim2CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa3CondConditionFingerprint =
            "\xc2\x20\xd2\xd9\x00\x97\x9f\xb2\x4d\x72\x2b\x28\x34\x99\xf6"
            "\xb5\x51\xee\x40\x07\x1b\x8d\x96\x78\x14\xe2\x64\x1e\xea\x05"
            "\x71\xfb"s;
        Condition const Rsa3Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa3CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed4CondConditionFingerprint =
            "\xfa\xa5\xd8\x25\xe0\xb2\x1e\x1b\x7f\x79\xa8\xfe\x46\x2d\xb1"
            "\xc0\x14\x91\xcb\x33\x9e\x03\xe7\x48\x13\x41\xa9\xe3\x58\x0e"
            "\x5d\xdd"s;
        Condition const Ed4Cond{Type::ed25519Sha256,
                                131072,
                                makeSlice(Ed4CondConditionFingerprint),
                                std::bitset<5>{0}};

        auto rsa1 = std::make_unique<RsaSha256>(
            makeSlice(rsa1PublicKey), makeSlice(rsa1Sig));
        std::vector<std::unique_ptr<Fulfillment>> thresh0Subfulfillments;
        thresh0Subfulfillments.emplace_back(std::move(rsa1));
        std::vector<Condition> thresh0Subconditions{
            {Preim2Cond, Rsa3Cond, Ed4Cond}};
        ThresholdSha256 const thresh0(
            std::move(thresh0Subfulfillments), std::move(thresh0Subconditions));
        {
            auto const thresh0EncodedFulfillment =
                "\xa2\x82\x02\x8b\xa0\x82\x02\x0c\xa3\x82\x02\x08\x80\x82\x01"
                "\x00\xc4\x1b\xc9\x7a\x96\x81\xce\x2e\xf2\x53\xc0\xd4\xa8\xb9"
                "\xa8\x12\x92\x45\x06\xf1\xf4\xcd\x27\x7d\xff\xc1\x65\x75\xae"
                "\xb7\xc4\x98\x53\xd8\xfa\x6d\x86\x63\xd8\x4e\xf5\x20\xe2\x9e"
                "\x96\x04\x36\x0c\x3f\xac\x7d\x09\x42\x11\x13\x30\x2d\x7f\x60"
                "\x2c\xec\x2a\x34\xc3\xd8\xba\x6d\x14\x75\x28\x56\xdc\x73\x6c"
                "\xb7\xd6\xba\x8a\xa3\x9e\x09\x0e\xa4\xf3\x6b\x5d\x12\xc6\xe4"
                "\xdd\x8c\xb1\x98\xcd\xde\xca\xad\xff\x86\xb6\x06\x25\x9b\x71"
                "\x84\xa0\x9b\x19\x14\x88\xd0\xc7\x55\x99\xe0\x1e\x0e\x39\x67"
                "\x74\xdf\xf6\x29\xfa\x92\xb6\xbb\xe6\xe1\x1c\xd9\xee\x65\xda"
                "\x13\xec\x50\x6a\x11\x7e\xae\xb4\xac\x85\xa5\xc7\xcb\x43\x42"
                "\x36\x73\x34\x31\xb6\x0b\x5e\xf0\x9e\x80\x49\xab\xc7\x79\xc5"
                "\xa7\xe3\x16\x35\x3a\x48\xe6\xc0\x69\xe2\x70\x30\x20\x74\x47"
                "\x3e\x3a\x51\x01\x21\x60\x15\x53\x40\x68\x6e\xe7\x9f\x73\xb6"
                "\x98\x3b\x6e\x50\xb8\xb2\xe7\x42\x90\x77\x61\xd4\x22\x6c\x0b"
                "\x3d\x66\xe0\x1b\x7d\xb0\xa1\xa9\xa9\xea\x0e\xf2\xab\xe0\x32"
                "\xf4\x49\x44\xcb\xae\x60\x1d\xe1\xac\xd3\x34\x2b\x03\x97\x98"
                "\x2d\xda\xf8\xe8\x0b\x81\x94\x98\x3a\xbd\x6d\x17\x18\x42\x58"
                "\x0c\xa3\x81\x82\x01\x00\x16\x5b\x14\x0d\x7a\x87\x25\x8f\xed"
                "\xb3\xe4\xc8\x25\x24\xcd\x2c\x47\x1a\x71\xf7\xa3\xe1\x55\xf8"
                "\xe1\xc7\xdf\x22\x88\x0d\xe7\x83\x74\xd2\x56\xc4\xc2\x7c\x4a"
                "\xa7\x0b\x1c\x7d\x52\x9f\xec\xbb\xdf\xeb\x90\x34\xaf\x92\x71"
                "\x06\x32\xd1\xc3\x3b\x86\x0f\x0e\x97\xdc\x73\x49\xda\x38\xdd"
                "\xa4\xa3\xd9\xab\xc4\xe9\xc6\x0a\xa3\xcb\x34\xbb\x71\xf8\x0e"
                "\x2d\xbb\x81\x4a\xc7\xb8\x27\x14\x28\x84\xd8\xcb\x4c\xc5\x17"
                "\x42\x01\xc6\x16\xbe\xaa\x59\x9f\xab\x08\xba\xe1\x23\xe3\x75"
                "\xf3\xe5\x1b\x59\xe9\xf3\xa1\x98\x57\x42\xd7\xa2\xd0\x88\x30"
                "\xbc\xd9\x4f\x37\x26\x4c\x4c\x36\x8a\xf8\xed\x6f\x95\x79\xad"
                "\x0f\x78\x90\x5a\xdd\x35\x61\x2c\xba\x49\x10\x71\xa4\x8b\x64"
                "\x9b\x16\xf7\x69\xfc\x80\x5d\xed\x89\xc0\xfc\xde\x27\x1e\xca"
                "\xd0\x0e\x9d\xb1\x4d\xaa\xc5\x81\x38\x74\x3b\xc9\x63\xbf\xb2"
                "\xbd\x82\xa1\x45\x5c\xd2\x34\x5b\xb7\x4b\x2c\x7a\x99\x59\x7b"
                "\xa0\xfc\xc3\x7e\x4b\xce\x10\x91\xcd\x50\x06\x66\x32\xdd\x7f"
                "\x42\xff\xe1\xc4\x13\xaf\x31\x04\x7c\x0f\xed\xe1\x1c\xa1\x43"
                "\x36\xc9\x55\xac\xbf\x0c\x40\x5e\x28\xc9\x2f\x6a\x69\xdb\x73"
                "\x40\xc1\x2a\xde\x69\xf6\xa0\xa1\x79\xa0\x25\x80\x20\x5d\xa0"
                "\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1"
                "\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e"
                "\x81\x01\x09\xa3\x27\x80\x20\xc2\x20\xd2\xd9\x00\x97\x9f\xb2"
                "\x4d\x72\x2b\x28\x34\x99\xf6\xb5\x51\xee\x40\x07\x1b\x8d\x96"
                "\x78\x14\xe2\x64\x1e\xea\x05\x71\xfb\x81\x03\x01\x00\x00\xa4"
                "\x27\x80\x20\xfa\xa5\xd8\x25\xe0\xb2\x1e\x1b\x7f\x79\xa8\xfe"
                "\x46\x2d\xb1\xc0\x14\x91\xcb\x33\x9e\x03\xe7\x48\x13\x41\xa9"
                "\xe3\x58\x0e\x5d\xdd\x81\x03\x02\x00\x00"s;
            auto const thresh0EncodedCondition =
                "\xa2\x2b\x80\x20\xfc\x2c\xde\x5b\xcd\xa1\xb1\xcd\xac\x6a\x7b"
                "\xd9\xd4\x93\x8b\xa3\x94\x97\x9e\x0c\x80\x6d\x8d\x47\xec\x03"
                "\x4a\x32\x6c\xfe\x15\x9c\x81\x03\x02\x10\x00\x82\x02\x03\x98"s;
            auto const thresh0EncodedFingerprint =
                "\x30\x81\xa8\x80\x01\x01\xa1\x81\xa2\xa0\x25\x80\x20\x5d\xa0"
                "\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1"
                "\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e"
                "\x81\x01\x09\xa3\x27\x80\x20\x23\xc9\xfd\x99\xdc\xf3\x74\x06"
                "\xe3\x11\x57\x5e\x7a\x90\x4b\x0d\x0c\x36\xa7\x8d\x25\xbc\xd5"
                "\x5f\x0d\x1f\x25\x08\x2e\x4f\xca\x1a\x81\x03\x01\x00\x00\xa3"
                "\x27\x80\x20\xc2\x20\xd2\xd9\x00\x97\x9f\xb2\x4d\x72\x2b\x28"
                "\x34\x99\xf6\xb5\x51\xee\x40\x07\x1b\x8d\x96\x78\x14\xe2\x64"
                "\x1e\xea\x05\x71\xfb\x81\x03\x01\x00\x00\xa4\x27\x80\x20\xfa"
                "\xa5\xd8\x25\xe0\xb2\x1e\x1b\x7f\x79\xa8\xfe\x46\x2d\xb1\xc0"
                "\x14\x91\xcb\x33\x9e\x03\xe7\x48\x13\x41\xa9\xe3\x58\x0e\x5d"
                "\xdd\x81\x03\x02\x00\x00"s;
            check(
                &thresh0,
                thresh0Msg,
                thresh0EncodedFulfillment,
                thresh0EncodedCondition,
                thresh0EncodedFingerprint);
        }
    }

    void
    testThresh26()
    {
        testcase("Thresh26");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * thresh0
        // ** Preim7Cond
        // ** Rsa8Cond
        // ** Ed9Cond
        // ** rsa1
        // ** thresh2
        // *** Preim4Cond
        // *** Rsa5Cond
        // *** Ed6Cond
        // *** rsa3

        auto const rsa1Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa1PublicKey{
            {0xc4, 0x1b, 0xc9, 0x7a, 0x96, 0x81, 0xce, 0x2e, 0xf2, 0x53, 0xc0,
             0xd4, 0xa8, 0xb9, 0xa8, 0x12, 0x92, 0x45, 0x06, 0xf1, 0xf4, 0xcd,
             0x27, 0x7d, 0xff, 0xc1, 0x65, 0x75, 0xae, 0xb7, 0xc4, 0x98, 0x53,
             0xd8, 0xfa, 0x6d, 0x86, 0x63, 0xd8, 0x4e, 0xf5, 0x20, 0xe2, 0x9e,
             0x96, 0x04, 0x36, 0x0c, 0x3f, 0xac, 0x7d, 0x09, 0x42, 0x11, 0x13,
             0x30, 0x2d, 0x7f, 0x60, 0x2c, 0xec, 0x2a, 0x34, 0xc3, 0xd8, 0xba,
             0x6d, 0x14, 0x75, 0x28, 0x56, 0xdc, 0x73, 0x6c, 0xb7, 0xd6, 0xba,
             0x8a, 0xa3, 0x9e, 0x09, 0x0e, 0xa4, 0xf3, 0x6b, 0x5d, 0x12, 0xc6,
             0xe4, 0xdd, 0x8c, 0xb1, 0x98, 0xcd, 0xde, 0xca, 0xad, 0xff, 0x86,
             0xb6, 0x06, 0x25, 0x9b, 0x71, 0x84, 0xa0, 0x9b, 0x19, 0x14, 0x88,
             0xd0, 0xc7, 0x55, 0x99, 0xe0, 0x1e, 0x0e, 0x39, 0x67, 0x74, 0xdf,
             0xf6, 0x29, 0xfa, 0x92, 0xb6, 0xbb, 0xe6, 0xe1, 0x1c, 0xd9, 0xee,
             0x65, 0xda, 0x13, 0xec, 0x50, 0x6a, 0x11, 0x7e, 0xae, 0xb4, 0xac,
             0x85, 0xa5, 0xc7, 0xcb, 0x43, 0x42, 0x36, 0x73, 0x34, 0x31, 0xb6,
             0x0b, 0x5e, 0xf0, 0x9e, 0x80, 0x49, 0xab, 0xc7, 0x79, 0xc5, 0xa7,
             0xe3, 0x16, 0x35, 0x3a, 0x48, 0xe6, 0xc0, 0x69, 0xe2, 0x70, 0x30,
             0x20, 0x74, 0x47, 0x3e, 0x3a, 0x51, 0x01, 0x21, 0x60, 0x15, 0x53,
             0x40, 0x68, 0x6e, 0xe7, 0x9f, 0x73, 0xb6, 0x98, 0x3b, 0x6e, 0x50,
             0xb8, 0xb2, 0xe7, 0x42, 0x90, 0x77, 0x61, 0xd4, 0x22, 0x6c, 0x0b,
             0x3d, 0x66, 0xe0, 0x1b, 0x7d, 0xb0, 0xa1, 0xa9, 0xa9, 0xea, 0x0e,
             0xf2, 0xab, 0xe0, 0x32, 0xf4, 0x49, 0x44, 0xcb, 0xae, 0x60, 0x1d,
             0xe1, 0xac, 0xd3, 0x34, 0x2b, 0x03, 0x97, 0x98, 0x2d, 0xda, 0xf8,
             0xe8, 0x0b, 0x81, 0x94, 0x98, 0x3a, 0xbd, 0x6d, 0x17, 0x18, 0x42,
             0x58, 0x0c, 0xa3}};
        std::array<std::uint8_t, 256> const rsa1Sig{
            {0x4d, 0xd5, 0x35, 0xb7, 0xe2, 0x62, 0x9a, 0xfd, 0x14, 0x22, 0x80,
             0xf2, 0x0e, 0x76, 0x05, 0x20, 0xd5, 0x4d, 0x5c, 0xb4, 0xde, 0xd4,
             0x1d, 0x45, 0x34, 0xdf, 0x0a, 0x1e, 0x4d, 0xbc, 0xe0, 0x05, 0xc5,
             0x73, 0xf6, 0x37, 0x70, 0x99, 0xcb, 0xcc, 0xf7, 0xa7, 0xf3, 0xe2,
             0xa7, 0x63, 0x5f, 0xe8, 0xf2, 0xbd, 0x43, 0x8d, 0xa5, 0x2b, 0xbd,
             0x51, 0x9c, 0xb1, 0xe0, 0x30, 0x51, 0x5b, 0x6c, 0x04, 0x5f, 0xf5,
             0xef, 0x55, 0xe5, 0x8c, 0x91, 0x38, 0x0a, 0x31, 0xce, 0xd9, 0x7d,
             0xe0, 0x72, 0x9e, 0x05, 0xc2, 0x41, 0x9e, 0x9d, 0x15, 0xc1, 0x20,
             0xa5, 0x7d, 0x61, 0x1a, 0xa2, 0x05, 0x80, 0x2f, 0x61, 0xbb, 0xf5,
             0xb3, 0x3a, 0xc6, 0x9b, 0x4b, 0xcf, 0x67, 0x13, 0x57, 0xd9, 0x93,
             0xa8, 0xce, 0x3d, 0x28, 0x5c, 0x80, 0x48, 0xae, 0xef, 0xe3, 0xb9,
             0x61, 0x41, 0x65, 0x12, 0xad, 0x19, 0xfc, 0x8e, 0xc6, 0x56, 0x30,
             0xd0, 0x7a, 0xf7, 0xea, 0x24, 0xdb, 0xb6, 0xdc, 0x37, 0x2b, 0x28,
             0xc6, 0x04, 0x41, 0x1f, 0xc3, 0xae, 0xf0, 0xc8, 0x27, 0x69, 0x1d,
             0xb5, 0x1b, 0x47, 0x69, 0x65, 0xee, 0xd0, 0xf7, 0x91, 0x06, 0x82,
             0x5c, 0xc9, 0xe1, 0x1e, 0x4a, 0x34, 0x7f, 0x4c, 0x46, 0xf1, 0xb9,
             0x1e, 0xbb, 0x4d, 0x36, 0x3f, 0x0f, 0x7d, 0x69, 0xb4, 0xde, 0x89,
             0x0b, 0xa8, 0x03, 0xa1, 0x55, 0x19, 0xb7, 0xce, 0x58, 0x8e, 0x9f,
             0xc2, 0x23, 0xde, 0x6d, 0x48, 0xb0, 0xa5, 0x98, 0x98, 0xee, 0xb0,
             0x4e, 0x45, 0xa1, 0x43, 0x7a, 0x1d, 0x3d, 0xb4, 0xac, 0x9e, 0x46,
             0x10, 0x00, 0xa6, 0x07, 0x2b, 0x33, 0xb3, 0xef, 0xd6, 0x9b, 0xed,
             0x17, 0x22, 0x4e, 0xc4, 0x73, 0x6d, 0x31, 0x76, 0xd0, 0x78, 0x87,
             0xc6, 0x33, 0xbd, 0x1e, 0x37, 0x2e, 0x61, 0xe5, 0x5e, 0x52, 0xf8,
             0xde, 0x2b, 0xf0}};
        auto const rsa3Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa3PublicKey{
            {0xbd, 0xd1, 0xc7, 0xf0, 0xb0, 0x3a, 0xa5, 0x5b, 0x3e, 0x49, 0x8d,
             0x4e, 0x00, 0x54, 0x89, 0xb9, 0x89, 0xcd, 0x4b, 0x43, 0xde, 0x59,
             0xf6, 0x7a, 0x67, 0x5c, 0x3a, 0xc6, 0xcf, 0x82, 0x3f, 0x35, 0x9c,
             0xcc, 0xda, 0xcd, 0xd3, 0x97, 0x86, 0x5b, 0xe9, 0xf6, 0x05, 0x55,
             0x0b, 0x26, 0xef, 0x1e, 0x88, 0xd5, 0xb6, 0xba, 0x14, 0x0a, 0xb2,
             0x76, 0xb9, 0xb3, 0x46, 0x0c, 0xc0, 0x80, 0x17, 0x13, 0x68, 0x23,
             0xdc, 0xec, 0x10, 0x18, 0xfc, 0xaa, 0xbe, 0xb3, 0xc4, 0xc7, 0xa9,
             0x84, 0xa6, 0x4e, 0x5c, 0x08, 0x6b, 0x7b, 0x4c, 0x81, 0x91, 0x79,
             0x5d, 0x90, 0x06, 0x15, 0xbb, 0x76, 0x2f, 0x5c, 0x53, 0x60, 0x0f,
             0xac, 0xf3, 0x7c, 0x49, 0xc5, 0x47, 0xec, 0xb3, 0xda, 0x93, 0x87,
             0xc1, 0xb9, 0xcf, 0x2c, 0xb5, 0xf0, 0x85, 0xad, 0xb4, 0x38, 0x67,
             0x88, 0xda, 0x3d, 0xfa, 0x01, 0xb7, 0x54, 0xd9, 0x41, 0x0b, 0x7b,
             0x8a, 0x09, 0xe0, 0x84, 0x7d, 0xbb, 0x89, 0xb2, 0xfc, 0x0b, 0x70,
             0x36, 0x93, 0x56, 0x62, 0xcc, 0xb4, 0xfc, 0xf9, 0x1f, 0x37, 0x92,
             0x9b, 0x3a, 0x4e, 0x7c, 0xad, 0x4b, 0xa6, 0x76, 0x6f, 0xda, 0xc4,
             0x2f, 0x83, 0x53, 0xbd, 0x93, 0xa9, 0x76, 0x89, 0x53, 0xe1, 0x4d,
             0xee, 0x27, 0x11, 0x6f, 0xbc, 0x21, 0xad, 0x42, 0x9f, 0x29, 0xf6,
             0x03, 0xdd, 0xec, 0xfa, 0xa1, 0x78, 0xd2, 0xde, 0x29, 0x2e, 0xd8,
             0x3a, 0x7f, 0xe9, 0x9b, 0x5d, 0xeb, 0x37, 0xb8, 0xb0, 0xa0, 0x66,
             0x3f, 0x02, 0xcd, 0x2a, 0x6e, 0xd3, 0x1c, 0xa5, 0x65, 0xdc, 0x73,
             0xbe, 0x93, 0x54, 0x9a, 0x2b, 0xf8, 0x32, 0x8b, 0xe8, 0xce, 0x9a,
             0x59, 0xd0, 0x05, 0xeb, 0xbb, 0xac, 0xfc, 0x4c, 0x4b, 0x2e, 0xac,
             0x2a, 0xc3, 0x0f, 0x0a, 0xd7, 0x46, 0xaf, 0xfd, 0x22, 0x0d, 0x0d,
             0x54, 0xcc, 0x2f}};
        std::array<std::uint8_t, 256> const rsa3Sig{
            {0x1a, 0xcd, 0x9d, 0xae, 0xf2, 0x6b, 0x90, 0xe6, 0xfb, 0x17, 0xdc,
             0xc5, 0x10, 0xd8, 0x7a, 0xa6, 0x9a, 0x6e, 0xa9, 0xd9, 0x78, 0xb0,
             0x9d, 0x89, 0x11, 0xa6, 0x32, 0xcc, 0x26, 0xb6, 0xed, 0x4b, 0x5c,
             0x32, 0x26, 0x14, 0xf9, 0x57, 0xc8, 0x04, 0xb4, 0x66, 0x73, 0xab,
             0x71, 0xf0, 0x36, 0x03, 0xe5, 0xc4, 0xa6, 0xac, 0x9a, 0xa7, 0x0c,
             0xe3, 0x69, 0xe2, 0x35, 0x0e, 0x72, 0x7c, 0x02, 0xb1, 0x73, 0x7d,
             0xdc, 0x66, 0x6e, 0x68, 0xf9, 0x7e, 0x93, 0x25, 0x80, 0xb2, 0x67,
             0xdd, 0xd4, 0xbe, 0xec, 0x56, 0x47, 0x2d, 0x8c, 0xa7, 0xd4, 0xe1,
             0x02, 0x13, 0x84, 0xe7, 0x86, 0x81, 0x51, 0x34, 0x67, 0xf1, 0xa5,
             0x5b, 0xa0, 0x42, 0xd9, 0x92, 0xfd, 0x44, 0x0f, 0xc6, 0xc9, 0x73,
             0xba, 0x14, 0x3f, 0x16, 0x59, 0x3a, 0xfd, 0x2b, 0x9e, 0xa7, 0x36,
             0x66, 0xaa, 0xea, 0x82, 0x04, 0x96, 0x7f, 0x8c, 0xd6, 0x15, 0xec,
             0xcc, 0x18, 0xb2, 0xf8, 0x5b, 0x21, 0x98, 0x38, 0x35, 0x5c, 0xff,
             0x42, 0x9a, 0x65, 0x58, 0xff, 0xdc, 0x07, 0x25, 0x60, 0xea, 0x8e,
             0x11, 0x33, 0xcf, 0x4c, 0xd1, 0x52, 0xa2, 0x11, 0xc3, 0x80, 0x77,
             0x06, 0xab, 0x5e, 0x4f, 0x01, 0xfe, 0x8f, 0x2d, 0x15, 0xd2, 0x9e,
             0x7b, 0x9d, 0xb8, 0x68, 0x11, 0x26, 0xaf, 0xd3, 0xea, 0x90, 0x8f,
             0xdc, 0xff, 0x1e, 0x58, 0xd5, 0x93, 0xa8, 0x7e, 0x5b, 0xe2, 0x99,
             0x5a, 0xe2, 0xce, 0x8a, 0x9f, 0xdf, 0x3b, 0xd1, 0xef, 0x7a, 0x33,
             0x90, 0x7d, 0xaa, 0x84, 0xe6, 0x4a, 0x69, 0x1a, 0xe6, 0x87, 0xd4,
             0x3f, 0xcd, 0x30, 0xee, 0x5c, 0xca, 0x65, 0x01, 0x87, 0x9d, 0x64,
             0xad, 0x50, 0x5f, 0xd8, 0x59, 0xc7, 0xee, 0x06, 0x56, 0xec, 0xdf,
             0x59, 0x35, 0x4a, 0xa0, 0x3b, 0x73, 0x61, 0x91, 0xef, 0xbd, 0x7e,
             0x0d, 0x78, 0x2d}};
        auto const thresh2Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim4CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim4Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim4CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa5CondConditionFingerprint =
            "\x99\xfb\x0b\x38\x94\x4d\x20\x85\xc8\xda\x3a\x64\x31\x44\x6f"
            "\x6c\x3b\x46\x25\x50\xd7\x7f\xdf\xee\x75\x72\x71\xf9\x61\x40"
            "\x63\xfa"s;
        Condition const Rsa5Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa5CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed6CondConditionFingerprint =
            "\x00\xd3\xc9\x24\x3f\x2d\x2e\x64\x93\xa8\x49\x29\x82\x75\xea"
            "\xbf\xe3\x53\x7f\x8e\x45\x16\xdb\x5e\xc6\xdf\x39\xd2\xcb\xea"
            "\x62\xfb"s;
        Condition const Ed6Cond{Type::ed25519Sha256,
                                131072,
                                makeSlice(Ed6CondConditionFingerprint),
                                std::bitset<5>{0}};
        auto const thresh0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim7CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim7Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim7CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa8CondConditionFingerprint =
            "\xd1\xb5\x1d\x35\x99\x9d\xb4\xc1\xaa\x81\x4d\xd7\x0e\xa9\x2a"
            "\x20\x7f\xe5\x5c\x75\xe8\x57\x8b\xbf\xe8\xd7\x1c\x7e\xb2\xbc"
            "\x91\x16"s;
        Condition const Rsa8Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa8CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed9CondConditionFingerprint =
            "\x92\xfa\xfc\xc6\x2f\xe2\x8d\x8d\x25\x7c\xd4\x46\xab\xea\x82"
            "\xd0\x3f\x36\xbe\x1d\x11\x2b\xa0\xfe\xfe\xd4\x00\xd5\x7d\x9b"
            "\xf6\xc9"s;
        Condition const Ed9Cond{Type::ed25519Sha256,
                                131072,
                                makeSlice(Ed9CondConditionFingerprint),
                                std::bitset<5>{0}};

        auto rsa1 = std::make_unique<RsaSha256>(
            makeSlice(rsa1PublicKey), makeSlice(rsa1Sig));
        auto rsa3 = std::make_unique<RsaSha256>(
            makeSlice(rsa3PublicKey), makeSlice(rsa3Sig));
        std::vector<std::unique_ptr<Fulfillment>> thresh2Subfulfillments;
        thresh2Subfulfillments.emplace_back(std::move(rsa3));
        std::vector<Condition> thresh2Subconditions{
            {Preim4Cond, Rsa5Cond, Ed6Cond}};
        auto thresh2 = std::make_unique<ThresholdSha256>(
            std::move(thresh2Subfulfillments), std::move(thresh2Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh0Subfulfillments;
        thresh0Subfulfillments.emplace_back(std::move(rsa1));
        thresh0Subfulfillments.emplace_back(std::move(thresh2));
        std::vector<Condition> thresh0Subconditions{
            {Preim7Cond, Rsa8Cond, Ed9Cond}};
        ThresholdSha256 const thresh0(
            std::move(thresh0Subfulfillments), std::move(thresh0Subconditions));
        {
            auto const thresh0EncodedFulfillment =
                "\xa2\x82\x05\x1a\xa0\x82\x04\x9b\xa2\x82\x02\x8b\xa0\x82\x02"
                "\x0c\xa3\x82\x02\x08\x80\x82\x01\x00\xbd\xd1\xc7\xf0\xb0\x3a"
                "\xa5\x5b\x3e\x49\x8d\x4e\x00\x54\x89\xb9\x89\xcd\x4b\x43\xde"
                "\x59\xf6\x7a\x67\x5c\x3a\xc6\xcf\x82\x3f\x35\x9c\xcc\xda\xcd"
                "\xd3\x97\x86\x5b\xe9\xf6\x05\x55\x0b\x26\xef\x1e\x88\xd5\xb6"
                "\xba\x14\x0a\xb2\x76\xb9\xb3\x46\x0c\xc0\x80\x17\x13\x68\x23"
                "\xdc\xec\x10\x18\xfc\xaa\xbe\xb3\xc4\xc7\xa9\x84\xa6\x4e\x5c"
                "\x08\x6b\x7b\x4c\x81\x91\x79\x5d\x90\x06\x15\xbb\x76\x2f\x5c"
                "\x53\x60\x0f\xac\xf3\x7c\x49\xc5\x47\xec\xb3\xda\x93\x87\xc1"
                "\xb9\xcf\x2c\xb5\xf0\x85\xad\xb4\x38\x67\x88\xda\x3d\xfa\x01"
                "\xb7\x54\xd9\x41\x0b\x7b\x8a\x09\xe0\x84\x7d\xbb\x89\xb2\xfc"
                "\x0b\x70\x36\x93\x56\x62\xcc\xb4\xfc\xf9\x1f\x37\x92\x9b\x3a"
                "\x4e\x7c\xad\x4b\xa6\x76\x6f\xda\xc4\x2f\x83\x53\xbd\x93\xa9"
                "\x76\x89\x53\xe1\x4d\xee\x27\x11\x6f\xbc\x21\xad\x42\x9f\x29"
                "\xf6\x03\xdd\xec\xfa\xa1\x78\xd2\xde\x29\x2e\xd8\x3a\x7f\xe9"
                "\x9b\x5d\xeb\x37\xb8\xb0\xa0\x66\x3f\x02\xcd\x2a\x6e\xd3\x1c"
                "\xa5\x65\xdc\x73\xbe\x93\x54\x9a\x2b\xf8\x32\x8b\xe8\xce\x9a"
                "\x59\xd0\x05\xeb\xbb\xac\xfc\x4c\x4b\x2e\xac\x2a\xc3\x0f\x0a"
                "\xd7\x46\xaf\xfd\x22\x0d\x0d\x54\xcc\x2f\x81\x82\x01\x00\x1a"
                "\xcd\x9d\xae\xf2\x6b\x90\xe6\xfb\x17\xdc\xc5\x10\xd8\x7a\xa6"
                "\x9a\x6e\xa9\xd9\x78\xb0\x9d\x89\x11\xa6\x32\xcc\x26\xb6\xed"
                "\x4b\x5c\x32\x26\x14\xf9\x57\xc8\x04\xb4\x66\x73\xab\x71\xf0"
                "\x36\x03\xe5\xc4\xa6\xac\x9a\xa7\x0c\xe3\x69\xe2\x35\x0e\x72"
                "\x7c\x02\xb1\x73\x7d\xdc\x66\x6e\x68\xf9\x7e\x93\x25\x80\xb2"
                "\x67\xdd\xd4\xbe\xec\x56\x47\x2d\x8c\xa7\xd4\xe1\x02\x13\x84"
                "\xe7\x86\x81\x51\x34\x67\xf1\xa5\x5b\xa0\x42\xd9\x92\xfd\x44"
                "\x0f\xc6\xc9\x73\xba\x14\x3f\x16\x59\x3a\xfd\x2b\x9e\xa7\x36"
                "\x66\xaa\xea\x82\x04\x96\x7f\x8c\xd6\x15\xec\xcc\x18\xb2\xf8"
                "\x5b\x21\x98\x38\x35\x5c\xff\x42\x9a\x65\x58\xff\xdc\x07\x25"
                "\x60\xea\x8e\x11\x33\xcf\x4c\xd1\x52\xa2\x11\xc3\x80\x77\x06"
                "\xab\x5e\x4f\x01\xfe\x8f\x2d\x15\xd2\x9e\x7b\x9d\xb8\x68\x11"
                "\x26\xaf\xd3\xea\x90\x8f\xdc\xff\x1e\x58\xd5\x93\xa8\x7e\x5b"
                "\xe2\x99\x5a\xe2\xce\x8a\x9f\xdf\x3b\xd1\xef\x7a\x33\x90\x7d"
                "\xaa\x84\xe6\x4a\x69\x1a\xe6\x87\xd4\x3f\xcd\x30\xee\x5c\xca"
                "\x65\x01\x87\x9d\x64\xad\x50\x5f\xd8\x59\xc7\xee\x06\x56\xec"
                "\xdf\x59\x35\x4a\xa0\x3b\x73\x61\x91\xef\xbd\x7e\x0d\x78\x2d"
                "\xa1\x79\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51"
                "\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68"
                "\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa3\x27\x80\x20"
                "\x99\xfb\x0b\x38\x94\x4d\x20\x85\xc8\xda\x3a\x64\x31\x44\x6f"
                "\x6c\x3b\x46\x25\x50\xd7\x7f\xdf\xee\x75\x72\x71\xf9\x61\x40"
                "\x63\xfa\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x00\xd3\xc9\x24"
                "\x3f\x2d\x2e\x64\x93\xa8\x49\x29\x82\x75\xea\xbf\xe3\x53\x7f"
                "\x8e\x45\x16\xdb\x5e\xc6\xdf\x39\xd2\xcb\xea\x62\xfb\x81\x03"
                "\x02\x00\x00\xa3\x82\x02\x08\x80\x82\x01\x00\xc4\x1b\xc9\x7a"
                "\x96\x81\xce\x2e\xf2\x53\xc0\xd4\xa8\xb9\xa8\x12\x92\x45\x06"
                "\xf1\xf4\xcd\x27\x7d\xff\xc1\x65\x75\xae\xb7\xc4\x98\x53\xd8"
                "\xfa\x6d\x86\x63\xd8\x4e\xf5\x20\xe2\x9e\x96\x04\x36\x0c\x3f"
                "\xac\x7d\x09\x42\x11\x13\x30\x2d\x7f\x60\x2c\xec\x2a\x34\xc3"
                "\xd8\xba\x6d\x14\x75\x28\x56\xdc\x73\x6c\xb7\xd6\xba\x8a\xa3"
                "\x9e\x09\x0e\xa4\xf3\x6b\x5d\x12\xc6\xe4\xdd\x8c\xb1\x98\xcd"
                "\xde\xca\xad\xff\x86\xb6\x06\x25\x9b\x71\x84\xa0\x9b\x19\x14"
                "\x88\xd0\xc7\x55\x99\xe0\x1e\x0e\x39\x67\x74\xdf\xf6\x29\xfa"
                "\x92\xb6\xbb\xe6\xe1\x1c\xd9\xee\x65\xda\x13\xec\x50\x6a\x11"
                "\x7e\xae\xb4\xac\x85\xa5\xc7\xcb\x43\x42\x36\x73\x34\x31\xb6"
                "\x0b\x5e\xf0\x9e\x80\x49\xab\xc7\x79\xc5\xa7\xe3\x16\x35\x3a"
                "\x48\xe6\xc0\x69\xe2\x70\x30\x20\x74\x47\x3e\x3a\x51\x01\x21"
                "\x60\x15\x53\x40\x68\x6e\xe7\x9f\x73\xb6\x98\x3b\x6e\x50\xb8"
                "\xb2\xe7\x42\x90\x77\x61\xd4\x22\x6c\x0b\x3d\x66\xe0\x1b\x7d"
                "\xb0\xa1\xa9\xa9\xea\x0e\xf2\xab\xe0\x32\xf4\x49\x44\xcb\xae"
                "\x60\x1d\xe1\xac\xd3\x34\x2b\x03\x97\x98\x2d\xda\xf8\xe8\x0b"
                "\x81\x94\x98\x3a\xbd\x6d\x17\x18\x42\x58\x0c\xa3\x81\x82\x01"
                "\x00\x4d\xd5\x35\xb7\xe2\x62\x9a\xfd\x14\x22\x80\xf2\x0e\x76"
                "\x05\x20\xd5\x4d\x5c\xb4\xde\xd4\x1d\x45\x34\xdf\x0a\x1e\x4d"
                "\xbc\xe0\x05\xc5\x73\xf6\x37\x70\x99\xcb\xcc\xf7\xa7\xf3\xe2"
                "\xa7\x63\x5f\xe8\xf2\xbd\x43\x8d\xa5\x2b\xbd\x51\x9c\xb1\xe0"
                "\x30\x51\x5b\x6c\x04\x5f\xf5\xef\x55\xe5\x8c\x91\x38\x0a\x31"
                "\xce\xd9\x7d\xe0\x72\x9e\x05\xc2\x41\x9e\x9d\x15\xc1\x20\xa5"
                "\x7d\x61\x1a\xa2\x05\x80\x2f\x61\xbb\xf5\xb3\x3a\xc6\x9b\x4b"
                "\xcf\x67\x13\x57\xd9\x93\xa8\xce\x3d\x28\x5c\x80\x48\xae\xef"
                "\xe3\xb9\x61\x41\x65\x12\xad\x19\xfc\x8e\xc6\x56\x30\xd0\x7a"
                "\xf7\xea\x24\xdb\xb6\xdc\x37\x2b\x28\xc6\x04\x41\x1f\xc3\xae"
                "\xf0\xc8\x27\x69\x1d\xb5\x1b\x47\x69\x65\xee\xd0\xf7\x91\x06"
                "\x82\x5c\xc9\xe1\x1e\x4a\x34\x7f\x4c\x46\xf1\xb9\x1e\xbb\x4d"
                "\x36\x3f\x0f\x7d\x69\xb4\xde\x89\x0b\xa8\x03\xa1\x55\x19\xb7"
                "\xce\x58\x8e\x9f\xc2\x23\xde\x6d\x48\xb0\xa5\x98\x98\xee\xb0"
                "\x4e\x45\xa1\x43\x7a\x1d\x3d\xb4\xac\x9e\x46\x10\x00\xa6\x07"
                "\x2b\x33\xb3\xef\xd6\x9b\xed\x17\x22\x4e\xc4\x73\x6d\x31\x76"
                "\xd0\x78\x87\xc6\x33\xbd\x1e\x37\x2e\x61\xe5\x5e\x52\xf8\xde"
                "\x2b\xf0\xa1\x79\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75"
                "\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c"
                "\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa3\x27"
                "\x80\x20\xd1\xb5\x1d\x35\x99\x9d\xb4\xc1\xaa\x81\x4d\xd7\x0e"
                "\xa9\x2a\x20\x7f\xe5\x5c\x75\xe8\x57\x8b\xbf\xe8\xd7\x1c\x7e"
                "\xb2\xbc\x91\x16\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x92\xfa"
                "\xfc\xc6\x2f\xe2\x8d\x8d\x25\x7c\xd4\x46\xab\xea\x82\xd0\x3f"
                "\x36\xbe\x1d\x11\x2b\xa0\xfe\xfe\xd4\x00\xd5\x7d\x9b\xf6\xc9"
                "\x81\x03\x02\x00\x00"s;
            auto const thresh0EncodedCondition =
                "\xa2\x2b\x80\x20\x03\xdb\x6c\x3b\x95\xb7\x3d\x38\x34\x95\x9e"
                "\x8b\xad\xc6\xbb\xb9\x54\xe0\xdb\x29\x13\xa0\xa8\x82\x89\x11"
                "\xe6\xa5\xf2\xf2\xcf\x51\x81\x03\x04\x24\x00\x82\x02\x03\x98"s;
            auto const thresh0EncodedFingerprint =
                "\x30\x81\xd5\x80\x01\x02\xa1\x81\xcf\xa0\x25\x80\x20\x5d\xa0"
                "\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1"
                "\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e"
                "\x81\x01\x09\xa2\x2b\x80\x20\xd4\x46\x35\xa3\xe4\x89\x30\xbe"
                "\xab\xa5\xb3\xb6\x82\xb6\xa2\xb4\xc8\x19\x3f\xf9\xf4\xb4\xf8"
                "\x6f\x3c\xd9\x80\x19\xd7\x1a\x0f\xad\x81\x03\x02\x10\x00\x82"
                "\x02\x03\x98\xa3\x27\x80\x20\x23\xc9\xfd\x99\xdc\xf3\x74\x06"
                "\xe3\x11\x57\x5e\x7a\x90\x4b\x0d\x0c\x36\xa7\x8d\x25\xbc\xd5"
                "\x5f\x0d\x1f\x25\x08\x2e\x4f\xca\x1a\x81\x03\x01\x00\x00\xa3"
                "\x27\x80\x20\xd1\xb5\x1d\x35\x99\x9d\xb4\xc1\xaa\x81\x4d\xd7"
                "\x0e\xa9\x2a\x20\x7f\xe5\x5c\x75\xe8\x57\x8b\xbf\xe8\xd7\x1c"
                "\x7e\xb2\xbc\x91\x16\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x92"
                "\xfa\xfc\xc6\x2f\xe2\x8d\x8d\x25\x7c\xd4\x46\xab\xea\x82\xd0"
                "\x3f\x36\xbe\x1d\x11\x2b\xa0\xfe\xfe\xd4\x00\xd5\x7d\x9b\xf6"
                "\xc9\x81\x03\x02\x00\x00"s;
            check(
                &thresh0,
                thresh0Msg,
                thresh0EncodedFulfillment,
                thresh0EncodedCondition,
                thresh0EncodedFingerprint);
        }
    }

    void
    testThresh27()
    {
        testcase("Thresh27");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * thresh0
        // ** Preim7Cond
        // ** Rsa8Cond
        // ** Ed9Cond
        // ** Thresh10Cond
        // ** rsa1
        // ** thresh2
        // *** Preim4Cond
        // *** Rsa5Cond
        // *** Ed6Cond
        // *** rsa3

        auto const rsa1Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa1PublicKey{
            {0xc4, 0x1b, 0xc9, 0x7a, 0x96, 0x81, 0xce, 0x2e, 0xf2, 0x53, 0xc0,
             0xd4, 0xa8, 0xb9, 0xa8, 0x12, 0x92, 0x45, 0x06, 0xf1, 0xf4, 0xcd,
             0x27, 0x7d, 0xff, 0xc1, 0x65, 0x75, 0xae, 0xb7, 0xc4, 0x98, 0x53,
             0xd8, 0xfa, 0x6d, 0x86, 0x63, 0xd8, 0x4e, 0xf5, 0x20, 0xe2, 0x9e,
             0x96, 0x04, 0x36, 0x0c, 0x3f, 0xac, 0x7d, 0x09, 0x42, 0x11, 0x13,
             0x30, 0x2d, 0x7f, 0x60, 0x2c, 0xec, 0x2a, 0x34, 0xc3, 0xd8, 0xba,
             0x6d, 0x14, 0x75, 0x28, 0x56, 0xdc, 0x73, 0x6c, 0xb7, 0xd6, 0xba,
             0x8a, 0xa3, 0x9e, 0x09, 0x0e, 0xa4, 0xf3, 0x6b, 0x5d, 0x12, 0xc6,
             0xe4, 0xdd, 0x8c, 0xb1, 0x98, 0xcd, 0xde, 0xca, 0xad, 0xff, 0x86,
             0xb6, 0x06, 0x25, 0x9b, 0x71, 0x84, 0xa0, 0x9b, 0x19, 0x14, 0x88,
             0xd0, 0xc7, 0x55, 0x99, 0xe0, 0x1e, 0x0e, 0x39, 0x67, 0x74, 0xdf,
             0xf6, 0x29, 0xfa, 0x92, 0xb6, 0xbb, 0xe6, 0xe1, 0x1c, 0xd9, 0xee,
             0x65, 0xda, 0x13, 0xec, 0x50, 0x6a, 0x11, 0x7e, 0xae, 0xb4, 0xac,
             0x85, 0xa5, 0xc7, 0xcb, 0x43, 0x42, 0x36, 0x73, 0x34, 0x31, 0xb6,
             0x0b, 0x5e, 0xf0, 0x9e, 0x80, 0x49, 0xab, 0xc7, 0x79, 0xc5, 0xa7,
             0xe3, 0x16, 0x35, 0x3a, 0x48, 0xe6, 0xc0, 0x69, 0xe2, 0x70, 0x30,
             0x20, 0x74, 0x47, 0x3e, 0x3a, 0x51, 0x01, 0x21, 0x60, 0x15, 0x53,
             0x40, 0x68, 0x6e, 0xe7, 0x9f, 0x73, 0xb6, 0x98, 0x3b, 0x6e, 0x50,
             0xb8, 0xb2, 0xe7, 0x42, 0x90, 0x77, 0x61, 0xd4, 0x22, 0x6c, 0x0b,
             0x3d, 0x66, 0xe0, 0x1b, 0x7d, 0xb0, 0xa1, 0xa9, 0xa9, 0xea, 0x0e,
             0xf2, 0xab, 0xe0, 0x32, 0xf4, 0x49, 0x44, 0xcb, 0xae, 0x60, 0x1d,
             0xe1, 0xac, 0xd3, 0x34, 0x2b, 0x03, 0x97, 0x98, 0x2d, 0xda, 0xf8,
             0xe8, 0x0b, 0x81, 0x94, 0x98, 0x3a, 0xbd, 0x6d, 0x17, 0x18, 0x42,
             0x58, 0x0c, 0xa3}};
        std::array<std::uint8_t, 256> const rsa1Sig{
            {0x26, 0x2c, 0x7b, 0xa3, 0x3d, 0x48, 0xc0, 0xe9, 0x21, 0xec, 0xc8,
             0xf9, 0x7c, 0xf9, 0x55, 0xee, 0xda, 0x08, 0x6a, 0xf5, 0x77, 0xf0,
             0x69, 0x86, 0xfc, 0x3e, 0x1a, 0x74, 0x75, 0x93, 0x60, 0x4e, 0x73,
             0xc7, 0x18, 0x9b, 0x92, 0xff, 0x70, 0x94, 0xd6, 0xb1, 0x2d, 0x00,
             0x21, 0x78, 0xdb, 0xfa, 0x1b, 0x20, 0x9f, 0xe5, 0x25, 0xa8, 0x63,
             0xb9, 0xf7, 0xae, 0x76, 0x5d, 0x08, 0x25, 0xd5, 0xf9, 0xb7, 0x99,
             0x79, 0xa5, 0xb3, 0xad, 0x37, 0x85, 0x99, 0xc1, 0x6e, 0xf7, 0x26,
             0xda, 0x78, 0x0f, 0xb6, 0x47, 0x3d, 0xeb, 0x96, 0x3d, 0xf0, 0xda,
             0x61, 0xbb, 0x35, 0x92, 0x23, 0xc7, 0xdd, 0x3d, 0xa8, 0xbd, 0xde,
             0xb9, 0xe0, 0xb7, 0x62, 0xf4, 0x5c, 0xc5, 0x2b, 0xbd, 0xf5, 0xac,
             0x87, 0xee, 0x22, 0xae, 0xe6, 0x0b, 0x27, 0x5f, 0x53, 0x10, 0x03,
             0x2e, 0x96, 0xc0, 0x02, 0x5d, 0xa9, 0x4f, 0x17, 0x03, 0x60, 0x7b,
             0xb9, 0xb1, 0x58, 0xa8, 0x02, 0x6a, 0xca, 0x1d, 0x20, 0x3b, 0xc3,
             0x83, 0xf1, 0xff, 0x07, 0x69, 0xc2, 0x18, 0x6e, 0xdb, 0xf4, 0xba,
             0x87, 0x0d, 0x82, 0xb3, 0x68, 0xcb, 0xaa, 0xeb, 0x33, 0xf4, 0xde,
             0xf8, 0x34, 0x10, 0xe1, 0x79, 0xdf, 0xb0, 0x1f, 0x30, 0xc9, 0x26,
             0x95, 0x79, 0x91, 0xb4, 0xac, 0x59, 0x15, 0x2d, 0x1c, 0x41, 0x2b,
             0xa9, 0x33, 0xb2, 0xfa, 0x1c, 0x81, 0xd7, 0x86, 0xc2, 0x99, 0x92,
             0xad, 0x29, 0x78, 0xa4, 0xef, 0x84, 0x08, 0x31, 0x90, 0x50, 0x30,
             0x23, 0x22, 0xb8, 0x88, 0x1a, 0x2a, 0xa0, 0xa5, 0xa6, 0x85, 0x5e,
             0x92, 0xc7, 0xe6, 0xd8, 0x4d, 0x6e, 0xc5, 0x3d, 0x4f, 0x3c, 0x2a,
             0xd2, 0x36, 0x41, 0x16, 0x6d, 0xd2, 0xe4, 0x26, 0x53, 0x0b, 0x9e,
             0x19, 0x76, 0x6e, 0x63, 0x82, 0x94, 0xda, 0x80, 0xa2, 0xf7, 0xfc,
             0xf0, 0x80, 0x11}};
        auto const rsa3Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa3PublicKey{
            {0xbd, 0xd1, 0xc7, 0xf0, 0xb0, 0x3a, 0xa5, 0x5b, 0x3e, 0x49, 0x8d,
             0x4e, 0x00, 0x54, 0x89, 0xb9, 0x89, 0xcd, 0x4b, 0x43, 0xde, 0x59,
             0xf6, 0x7a, 0x67, 0x5c, 0x3a, 0xc6, 0xcf, 0x82, 0x3f, 0x35, 0x9c,
             0xcc, 0xda, 0xcd, 0xd3, 0x97, 0x86, 0x5b, 0xe9, 0xf6, 0x05, 0x55,
             0x0b, 0x26, 0xef, 0x1e, 0x88, 0xd5, 0xb6, 0xba, 0x14, 0x0a, 0xb2,
             0x76, 0xb9, 0xb3, 0x46, 0x0c, 0xc0, 0x80, 0x17, 0x13, 0x68, 0x23,
             0xdc, 0xec, 0x10, 0x18, 0xfc, 0xaa, 0xbe, 0xb3, 0xc4, 0xc7, 0xa9,
             0x84, 0xa6, 0x4e, 0x5c, 0x08, 0x6b, 0x7b, 0x4c, 0x81, 0x91, 0x79,
             0x5d, 0x90, 0x06, 0x15, 0xbb, 0x76, 0x2f, 0x5c, 0x53, 0x60, 0x0f,
             0xac, 0xf3, 0x7c, 0x49, 0xc5, 0x47, 0xec, 0xb3, 0xda, 0x93, 0x87,
             0xc1, 0xb9, 0xcf, 0x2c, 0xb5, 0xf0, 0x85, 0xad, 0xb4, 0x38, 0x67,
             0x88, 0xda, 0x3d, 0xfa, 0x01, 0xb7, 0x54, 0xd9, 0x41, 0x0b, 0x7b,
             0x8a, 0x09, 0xe0, 0x84, 0x7d, 0xbb, 0x89, 0xb2, 0xfc, 0x0b, 0x70,
             0x36, 0x93, 0x56, 0x62, 0xcc, 0xb4, 0xfc, 0xf9, 0x1f, 0x37, 0x92,
             0x9b, 0x3a, 0x4e, 0x7c, 0xad, 0x4b, 0xa6, 0x76, 0x6f, 0xda, 0xc4,
             0x2f, 0x83, 0x53, 0xbd, 0x93, 0xa9, 0x76, 0x89, 0x53, 0xe1, 0x4d,
             0xee, 0x27, 0x11, 0x6f, 0xbc, 0x21, 0xad, 0x42, 0x9f, 0x29, 0xf6,
             0x03, 0xdd, 0xec, 0xfa, 0xa1, 0x78, 0xd2, 0xde, 0x29, 0x2e, 0xd8,
             0x3a, 0x7f, 0xe9, 0x9b, 0x5d, 0xeb, 0x37, 0xb8, 0xb0, 0xa0, 0x66,
             0x3f, 0x02, 0xcd, 0x2a, 0x6e, 0xd3, 0x1c, 0xa5, 0x65, 0xdc, 0x73,
             0xbe, 0x93, 0x54, 0x9a, 0x2b, 0xf8, 0x32, 0x8b, 0xe8, 0xce, 0x9a,
             0x59, 0xd0, 0x05, 0xeb, 0xbb, 0xac, 0xfc, 0x4c, 0x4b, 0x2e, 0xac,
             0x2a, 0xc3, 0x0f, 0x0a, 0xd7, 0x46, 0xaf, 0xfd, 0x22, 0x0d, 0x0d,
             0x54, 0xcc, 0x2f}};
        std::array<std::uint8_t, 256> const rsa3Sig{
            {0x14, 0x1b, 0x20, 0x6b, 0xc3, 0x1a, 0xf5, 0x61, 0x36, 0x68, 0xe3,
             0xe8, 0xdd, 0x48, 0x38, 0xdf, 0x9c, 0xb7, 0xa3, 0x44, 0xdf, 0x7b,
             0x87, 0x53, 0x55, 0xaf, 0xc7, 0xc0, 0x4e, 0xb1, 0xaf, 0xec, 0x68,
             0xdd, 0x92, 0x58, 0x04, 0x8e, 0x4d, 0xdb, 0xd7, 0x4a, 0x64, 0x62,
             0x38, 0x3b, 0xe2, 0x33, 0x26, 0x80, 0x83, 0xb4, 0x5b, 0xfe, 0xdc,
             0x2b, 0x54, 0x69, 0xf3, 0x3a, 0x63, 0x91, 0x67, 0x1e, 0x8d, 0x43,
             0xc6, 0xf3, 0x32, 0x35, 0x30, 0xc8, 0x29, 0x8c, 0x7f, 0xd2, 0xdf,
             0xe9, 0x9e, 0xf0, 0x83, 0x15, 0x79, 0x34, 0x9f, 0xd1, 0x98, 0x8b,
             0x52, 0x88, 0x54, 0x2e, 0xe4, 0x38, 0x3e, 0x67, 0x11, 0x5b, 0x78,
             0xa0, 0x38, 0xe7, 0x0a, 0x1d, 0x59, 0xb2, 0x1b, 0x30, 0x73, 0x2b,
             0x92, 0x30, 0x62, 0x1b, 0xb5, 0xb9, 0x92, 0x9d, 0x04, 0x3b, 0xc3,
             0x8e, 0x94, 0xf6, 0x0e, 0xc2, 0xc3, 0x36, 0x57, 0x0f, 0x97, 0xe3,
             0x7b, 0xe3, 0xcf, 0x0a, 0x28, 0x9c, 0xa0, 0x82, 0x60, 0x53, 0xf3,
             0xc0, 0x4e, 0xc4, 0x8c, 0x2e, 0x0b, 0xec, 0x28, 0x06, 0xb5, 0x1d,
             0x6f, 0x00, 0x31, 0xf2, 0x9e, 0x90, 0x28, 0xaf, 0x3a, 0x3e, 0xc9,
             0x53, 0xb7, 0x3b, 0x63, 0x97, 0x53, 0x2c, 0xc5, 0x38, 0x0d, 0x37,
             0x16, 0x6d, 0x24, 0xff, 0xd7, 0xce, 0xe6, 0xec, 0x68, 0xce, 0x01,
             0xc6, 0x8a, 0x3b, 0xc1, 0xee, 0xb7, 0x3e, 0x20, 0x66, 0xdb, 0x2f,
             0xf6, 0x93, 0x7b, 0x4e, 0x09, 0x5f, 0x01, 0xf0, 0xb6, 0x7b, 0x20,
             0xef, 0x09, 0x71, 0xc0, 0x65, 0x96, 0xf1, 0x98, 0x05, 0x22, 0x97,
             0xbf, 0x06, 0xc9, 0x1a, 0xbc, 0x02, 0xf5, 0xb3, 0xd0, 0xc4, 0xbb,
             0xa1, 0x21, 0x50, 0xe8, 0x2e, 0xa3, 0xbf, 0x4f, 0x44, 0x60, 0x7b,
             0xce, 0xdc, 0x9d, 0xbb, 0x03, 0x65, 0x8c, 0xb4, 0xcf, 0x62, 0xa4,
             0x14, 0x06, 0x8d}};
        auto const thresh2Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim4CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim4Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim4CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa5CondConditionFingerprint =
            "\x99\xfb\x0b\x38\x94\x4d\x20\x85\xc8\xda\x3a\x64\x31\x44\x6f"
            "\x6c\x3b\x46\x25\x50\xd7\x7f\xdf\xee\x75\x72\x71\xf9\x61\x40"
            "\x63\xfa"s;
        Condition const Rsa5Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa5CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed6CondConditionFingerprint =
            "\x00\xd3\xc9\x24\x3f\x2d\x2e\x64\x93\xa8\x49\x29\x82\x75\xea"
            "\xbf\xe3\x53\x7f\x8e\x45\x16\xdb\x5e\xc6\xdf\x39\xd2\xcb\xea"
            "\x62\xfb"s;
        Condition const Ed6Cond{Type::ed25519Sha256,
                                131072,
                                makeSlice(Ed6CondConditionFingerprint),
                                std::bitset<5>{0}};
        auto const thresh0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim7CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim7Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim7CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa8CondConditionFingerprint =
            "\xd1\xb5\x1d\x35\x99\x9d\xb4\xc1\xaa\x81\x4d\xd7\x0e\xa9\x2a"
            "\x20\x7f\xe5\x5c\x75\xe8\x57\x8b\xbf\xe8\xd7\x1c\x7e\xb2\xbc"
            "\x91\x16"s;
        Condition const Rsa8Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa8CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed9CondConditionFingerprint =
            "\x92\xfa\xfc\xc6\x2f\xe2\x8d\x8d\x25\x7c\xd4\x46\xab\xea\x82"
            "\xd0\x3f\x36\xbe\x1d\x11\x2b\xa0\xfe\xfe\xd4\x00\xd5\x7d\x9b"
            "\xf6\xc9"s;
        Condition const Ed9Cond{Type::ed25519Sha256,
                                131072,
                                makeSlice(Ed9CondConditionFingerprint),
                                std::bitset<5>{0}};
        auto const Thresh10CondConditionFingerprint =
            "\x10\xb9\xab\xba\x33\x4f\x94\xea\xb3\x05\x2b\x43\x30\x38\x4d"
            "\x9b\x28\x34\x90\x9f\xa4\x3b\x33\x96\xf3\x3c\x5c\x0d\x3b\x10"
            "\xf8\x22"s;
        Condition const Thresh10Cond{
            Type::thresholdSha256,
            135168,
            makeSlice(Thresh10CondConditionFingerprint),
            std::bitset<5>{25}};

        auto rsa1 = std::make_unique<RsaSha256>(
            makeSlice(rsa1PublicKey), makeSlice(rsa1Sig));
        auto rsa3 = std::make_unique<RsaSha256>(
            makeSlice(rsa3PublicKey), makeSlice(rsa3Sig));
        std::vector<std::unique_ptr<Fulfillment>> thresh2Subfulfillments;
        thresh2Subfulfillments.emplace_back(std::move(rsa3));
        std::vector<Condition> thresh2Subconditions{
            {Preim4Cond, Rsa5Cond, Ed6Cond}};
        auto thresh2 = std::make_unique<ThresholdSha256>(
            std::move(thresh2Subfulfillments), std::move(thresh2Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh0Subfulfillments;
        thresh0Subfulfillments.emplace_back(std::move(rsa1));
        thresh0Subfulfillments.emplace_back(std::move(thresh2));
        std::vector<Condition> thresh0Subconditions{
            {Preim7Cond, Rsa8Cond, Ed9Cond, Thresh10Cond}};
        ThresholdSha256 const thresh0(
            std::move(thresh0Subfulfillments), std::move(thresh0Subconditions));
        {
            auto const thresh0EncodedFulfillment =
                "\xa2\x82\x05\x48\xa0\x82\x04\x9b\xa2\x82\x02\x8b\xa0\x82\x02"
                "\x0c\xa3\x82\x02\x08\x80\x82\x01\x00\xbd\xd1\xc7\xf0\xb0\x3a"
                "\xa5\x5b\x3e\x49\x8d\x4e\x00\x54\x89\xb9\x89\xcd\x4b\x43\xde"
                "\x59\xf6\x7a\x67\x5c\x3a\xc6\xcf\x82\x3f\x35\x9c\xcc\xda\xcd"
                "\xd3\x97\x86\x5b\xe9\xf6\x05\x55\x0b\x26\xef\x1e\x88\xd5\xb6"
                "\xba\x14\x0a\xb2\x76\xb9\xb3\x46\x0c\xc0\x80\x17\x13\x68\x23"
                "\xdc\xec\x10\x18\xfc\xaa\xbe\xb3\xc4\xc7\xa9\x84\xa6\x4e\x5c"
                "\x08\x6b\x7b\x4c\x81\x91\x79\x5d\x90\x06\x15\xbb\x76\x2f\x5c"
                "\x53\x60\x0f\xac\xf3\x7c\x49\xc5\x47\xec\xb3\xda\x93\x87\xc1"
                "\xb9\xcf\x2c\xb5\xf0\x85\xad\xb4\x38\x67\x88\xda\x3d\xfa\x01"
                "\xb7\x54\xd9\x41\x0b\x7b\x8a\x09\xe0\x84\x7d\xbb\x89\xb2\xfc"
                "\x0b\x70\x36\x93\x56\x62\xcc\xb4\xfc\xf9\x1f\x37\x92\x9b\x3a"
                "\x4e\x7c\xad\x4b\xa6\x76\x6f\xda\xc4\x2f\x83\x53\xbd\x93\xa9"
                "\x76\x89\x53\xe1\x4d\xee\x27\x11\x6f\xbc\x21\xad\x42\x9f\x29"
                "\xf6\x03\xdd\xec\xfa\xa1\x78\xd2\xde\x29\x2e\xd8\x3a\x7f\xe9"
                "\x9b\x5d\xeb\x37\xb8\xb0\xa0\x66\x3f\x02\xcd\x2a\x6e\xd3\x1c"
                "\xa5\x65\xdc\x73\xbe\x93\x54\x9a\x2b\xf8\x32\x8b\xe8\xce\x9a"
                "\x59\xd0\x05\xeb\xbb\xac\xfc\x4c\x4b\x2e\xac\x2a\xc3\x0f\x0a"
                "\xd7\x46\xaf\xfd\x22\x0d\x0d\x54\xcc\x2f\x81\x82\x01\x00\x14"
                "\x1b\x20\x6b\xc3\x1a\xf5\x61\x36\x68\xe3\xe8\xdd\x48\x38\xdf"
                "\x9c\xb7\xa3\x44\xdf\x7b\x87\x53\x55\xaf\xc7\xc0\x4e\xb1\xaf"
                "\xec\x68\xdd\x92\x58\x04\x8e\x4d\xdb\xd7\x4a\x64\x62\x38\x3b"
                "\xe2\x33\x26\x80\x83\xb4\x5b\xfe\xdc\x2b\x54\x69\xf3\x3a\x63"
                "\x91\x67\x1e\x8d\x43\xc6\xf3\x32\x35\x30\xc8\x29\x8c\x7f\xd2"
                "\xdf\xe9\x9e\xf0\x83\x15\x79\x34\x9f\xd1\x98\x8b\x52\x88\x54"
                "\x2e\xe4\x38\x3e\x67\x11\x5b\x78\xa0\x38\xe7\x0a\x1d\x59\xb2"
                "\x1b\x30\x73\x2b\x92\x30\x62\x1b\xb5\xb9\x92\x9d\x04\x3b\xc3"
                "\x8e\x94\xf6\x0e\xc2\xc3\x36\x57\x0f\x97\xe3\x7b\xe3\xcf\x0a"
                "\x28\x9c\xa0\x82\x60\x53\xf3\xc0\x4e\xc4\x8c\x2e\x0b\xec\x28"
                "\x06\xb5\x1d\x6f\x00\x31\xf2\x9e\x90\x28\xaf\x3a\x3e\xc9\x53"
                "\xb7\x3b\x63\x97\x53\x2c\xc5\x38\x0d\x37\x16\x6d\x24\xff\xd7"
                "\xce\xe6\xec\x68\xce\x01\xc6\x8a\x3b\xc1\xee\xb7\x3e\x20\x66"
                "\xdb\x2f\xf6\x93\x7b\x4e\x09\x5f\x01\xf0\xb6\x7b\x20\xef\x09"
                "\x71\xc0\x65\x96\xf1\x98\x05\x22\x97\xbf\x06\xc9\x1a\xbc\x02"
                "\xf5\xb3\xd0\xc4\xbb\xa1\x21\x50\xe8\x2e\xa3\xbf\x4f\x44\x60"
                "\x7b\xce\xdc\x9d\xbb\x03\x65\x8c\xb4\xcf\x62\xa4\x14\x06\x8d"
                "\xa1\x79\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51"
                "\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68"
                "\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa3\x27\x80\x20"
                "\x99\xfb\x0b\x38\x94\x4d\x20\x85\xc8\xda\x3a\x64\x31\x44\x6f"
                "\x6c\x3b\x46\x25\x50\xd7\x7f\xdf\xee\x75\x72\x71\xf9\x61\x40"
                "\x63\xfa\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x00\xd3\xc9\x24"
                "\x3f\x2d\x2e\x64\x93\xa8\x49\x29\x82\x75\xea\xbf\xe3\x53\x7f"
                "\x8e\x45\x16\xdb\x5e\xc6\xdf\x39\xd2\xcb\xea\x62\xfb\x81\x03"
                "\x02\x00\x00\xa3\x82\x02\x08\x80\x82\x01\x00\xc4\x1b\xc9\x7a"
                "\x96\x81\xce\x2e\xf2\x53\xc0\xd4\xa8\xb9\xa8\x12\x92\x45\x06"
                "\xf1\xf4\xcd\x27\x7d\xff\xc1\x65\x75\xae\xb7\xc4\x98\x53\xd8"
                "\xfa\x6d\x86\x63\xd8\x4e\xf5\x20\xe2\x9e\x96\x04\x36\x0c\x3f"
                "\xac\x7d\x09\x42\x11\x13\x30\x2d\x7f\x60\x2c\xec\x2a\x34\xc3"
                "\xd8\xba\x6d\x14\x75\x28\x56\xdc\x73\x6c\xb7\xd6\xba\x8a\xa3"
                "\x9e\x09\x0e\xa4\xf3\x6b\x5d\x12\xc6\xe4\xdd\x8c\xb1\x98\xcd"
                "\xde\xca\xad\xff\x86\xb6\x06\x25\x9b\x71\x84\xa0\x9b\x19\x14"
                "\x88\xd0\xc7\x55\x99\xe0\x1e\x0e\x39\x67\x74\xdf\xf6\x29\xfa"
                "\x92\xb6\xbb\xe6\xe1\x1c\xd9\xee\x65\xda\x13\xec\x50\x6a\x11"
                "\x7e\xae\xb4\xac\x85\xa5\xc7\xcb\x43\x42\x36\x73\x34\x31\xb6"
                "\x0b\x5e\xf0\x9e\x80\x49\xab\xc7\x79\xc5\xa7\xe3\x16\x35\x3a"
                "\x48\xe6\xc0\x69\xe2\x70\x30\x20\x74\x47\x3e\x3a\x51\x01\x21"
                "\x60\x15\x53\x40\x68\x6e\xe7\x9f\x73\xb6\x98\x3b\x6e\x50\xb8"
                "\xb2\xe7\x42\x90\x77\x61\xd4\x22\x6c\x0b\x3d\x66\xe0\x1b\x7d"
                "\xb0\xa1\xa9\xa9\xea\x0e\xf2\xab\xe0\x32\xf4\x49\x44\xcb\xae"
                "\x60\x1d\xe1\xac\xd3\x34\x2b\x03\x97\x98\x2d\xda\xf8\xe8\x0b"
                "\x81\x94\x98\x3a\xbd\x6d\x17\x18\x42\x58\x0c\xa3\x81\x82\x01"
                "\x00\x26\x2c\x7b\xa3\x3d\x48\xc0\xe9\x21\xec\xc8\xf9\x7c\xf9"
                "\x55\xee\xda\x08\x6a\xf5\x77\xf0\x69\x86\xfc\x3e\x1a\x74\x75"
                "\x93\x60\x4e\x73\xc7\x18\x9b\x92\xff\x70\x94\xd6\xb1\x2d\x00"
                "\x21\x78\xdb\xfa\x1b\x20\x9f\xe5\x25\xa8\x63\xb9\xf7\xae\x76"
                "\x5d\x08\x25\xd5\xf9\xb7\x99\x79\xa5\xb3\xad\x37\x85\x99\xc1"
                "\x6e\xf7\x26\xda\x78\x0f\xb6\x47\x3d\xeb\x96\x3d\xf0\xda\x61"
                "\xbb\x35\x92\x23\xc7\xdd\x3d\xa8\xbd\xde\xb9\xe0\xb7\x62\xf4"
                "\x5c\xc5\x2b\xbd\xf5\xac\x87\xee\x22\xae\xe6\x0b\x27\x5f\x53"
                "\x10\x03\x2e\x96\xc0\x02\x5d\xa9\x4f\x17\x03\x60\x7b\xb9\xb1"
                "\x58\xa8\x02\x6a\xca\x1d\x20\x3b\xc3\x83\xf1\xff\x07\x69\xc2"
                "\x18\x6e\xdb\xf4\xba\x87\x0d\x82\xb3\x68\xcb\xaa\xeb\x33\xf4"
                "\xde\xf8\x34\x10\xe1\x79\xdf\xb0\x1f\x30\xc9\x26\x95\x79\x91"
                "\xb4\xac\x59\x15\x2d\x1c\x41\x2b\xa9\x33\xb2\xfa\x1c\x81\xd7"
                "\x86\xc2\x99\x92\xad\x29\x78\xa4\xef\x84\x08\x31\x90\x50\x30"
                "\x23\x22\xb8\x88\x1a\x2a\xa0\xa5\xa6\x85\x5e\x92\xc7\xe6\xd8"
                "\x4d\x6e\xc5\x3d\x4f\x3c\x2a\xd2\x36\x41\x16\x6d\xd2\xe4\x26"
                "\x53\x0b\x9e\x19\x76\x6e\x63\x82\x94\xda\x80\xa2\xf7\xfc\xf0"
                "\x80\x11\xa1\x81\xa6\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1"
                "\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21"
                "\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa2"
                "\x2b\x80\x20\x10\xb9\xab\xba\x33\x4f\x94\xea\xb3\x05\x2b\x43"
                "\x30\x38\x4d\x9b\x28\x34\x90\x9f\xa4\x3b\x33\x96\xf3\x3c\x5c"
                "\x0d\x3b\x10\xf8\x22\x81\x03\x02\x10\x00\x82\x02\x03\x98\xa3"
                "\x27\x80\x20\xd1\xb5\x1d\x35\x99\x9d\xb4\xc1\xaa\x81\x4d\xd7"
                "\x0e\xa9\x2a\x20\x7f\xe5\x5c\x75\xe8\x57\x8b\xbf\xe8\xd7\x1c"
                "\x7e\xb2\xbc\x91\x16\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x92"
                "\xfa\xfc\xc6\x2f\xe2\x8d\x8d\x25\x7c\xd4\x46\xab\xea\x82\xd0"
                "\x3f\x36\xbe\x1d\x11\x2b\xa0\xfe\xfe\xd4\x00\xd5\x7d\x9b\xf6"
                "\xc9\x81\x03\x02\x00\x00"s;
            auto const thresh0EncodedCondition =
                "\xa2\x2b\x80\x20\x2e\xfe\x11\x1f\x52\x42\x7b\x9e\x8b\x2b\xbf"
                "\x2a\x2c\x8c\x22\xfc\xdb\xe8\xed\xd0\x3e\x12\xfa\x3f\x50\x3f"
                "\xcb\xdc\x3e\xbb\x49\x53\x81\x03\x04\x38\x00\x82\x02\x03\x98"s;
            auto const thresh0EncodedFingerprint =
                "\x30\x82\x01\x02\x80\x01\x02\xa1\x81\xfc\xa0\x25\x80\x20\x5d"
                "\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b"
                "\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb"
                "\x4e\x81\x01\x09\xa2\x2b\x80\x20\x10\xb9\xab\xba\x33\x4f\x94"
                "\xea\xb3\x05\x2b\x43\x30\x38\x4d\x9b\x28\x34\x90\x9f\xa4\x3b"
                "\x33\x96\xf3\x3c\x5c\x0d\x3b\x10\xf8\x22\x81\x03\x02\x10\x00"
                "\x82\x02\x03\x98\xa2\x2b\x80\x20\xd4\x46\x35\xa3\xe4\x89\x30"
                "\xbe\xab\xa5\xb3\xb6\x82\xb6\xa2\xb4\xc8\x19\x3f\xf9\xf4\xb4"
                "\xf8\x6f\x3c\xd9\x80\x19\xd7\x1a\x0f\xad\x81\x03\x02\x10\x00"
                "\x82\x02\x03\x98\xa3\x27\x80\x20\x23\xc9\xfd\x99\xdc\xf3\x74"
                "\x06\xe3\x11\x57\x5e\x7a\x90\x4b\x0d\x0c\x36\xa7\x8d\x25\xbc"
                "\xd5\x5f\x0d\x1f\x25\x08\x2e\x4f\xca\x1a\x81\x03\x01\x00\x00"
                "\xa3\x27\x80\x20\xd1\xb5\x1d\x35\x99\x9d\xb4\xc1\xaa\x81\x4d"
                "\xd7\x0e\xa9\x2a\x20\x7f\xe5\x5c\x75\xe8\x57\x8b\xbf\xe8\xd7"
                "\x1c\x7e\xb2\xbc\x91\x16\x81\x03\x01\x00\x00\xa4\x27\x80\x20"
                "\x92\xfa\xfc\xc6\x2f\xe2\x8d\x8d\x25\x7c\xd4\x46\xab\xea\x82"
                "\xd0\x3f\x36\xbe\x1d\x11\x2b\xa0\xfe\xfe\xd4\x00\xd5\x7d\x9b"
                "\xf6\xc9\x81\x03\x02\x00\x00"s;
            check(
                &thresh0,
                thresh0Msg,
                thresh0EncodedFulfillment,
                thresh0EncodedCondition,
                thresh0EncodedFingerprint);
        }
    }

    void
    testPrefix8()
    {
        testcase("Prefix8");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * prefix0
        // ** prefix1
        // *** rsa2

        auto const rsa2Msg = "P1P0abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa2PublicKey{
            {0xba, 0x2c, 0x3b, 0x50, 0xb6, 0xbf, 0xf9, 0x0f, 0x1d, 0xd7, 0x32,
             0x4c, 0x01, 0x5f, 0xff, 0x2f, 0x2a, 0xf6, 0x33, 0xd0, 0xfb, 0xea,
             0x1f, 0xa4, 0xf2, 0x2d, 0x22, 0x8a, 0x19, 0x95, 0xa9, 0x17, 0xb7,
             0x4f, 0x17, 0xcf, 0x55, 0xcd, 0x1a, 0x3a, 0x5f, 0x07, 0x73, 0xcc,
             0xaa, 0x21, 0x70, 0x64, 0xb3, 0xa0, 0xf4, 0xb7, 0x30, 0xa3, 0x82,
             0x37, 0x93, 0xc6, 0x59, 0xde, 0x1b, 0xa1, 0x16, 0x90, 0x5a, 0x1a,
             0xf6, 0x73, 0xab, 0x92, 0xc8, 0x2f, 0xf4, 0x6f, 0x5c, 0xf2, 0x22,
             0x1d, 0x30, 0xf8, 0x03, 0xd8, 0x9b, 0x5f, 0x73, 0x72, 0x8e, 0x5f,
             0xd5, 0x37, 0x4b, 0x43, 0xda, 0xfe, 0x84, 0x21, 0x67, 0xe8, 0xe3,
             0xd7, 0x91, 0x3f, 0x24, 0x1d, 0xfb, 0x1f, 0x12, 0x6e, 0xcb, 0xfc,
             0xb7, 0x5b, 0x0a, 0x35, 0x73, 0x3b, 0xce, 0x44, 0x34, 0x8e, 0xcd,
             0x53, 0xa4, 0xcf, 0xa7, 0x63, 0x73, 0xcd, 0x31, 0x0f, 0xe0, 0x75,
             0x8d, 0xe4, 0xa9, 0xdc, 0xfe, 0xf0, 0xc9, 0x3d, 0x26, 0xaf, 0xbf,
             0x7b, 0x0f, 0x0e, 0x17, 0xb9, 0xd0, 0x4a, 0x32, 0x80, 0x64, 0x6b,
             0x54, 0x73, 0x5a, 0x50, 0xc7, 0x31, 0x59, 0xf9, 0x73, 0x72, 0xa5,
             0x79, 0xba, 0xdb, 0xa1, 0x14, 0x8d, 0x77, 0x67, 0x3e, 0xc0, 0x5b,
             0xec, 0x6f, 0x0b, 0xf7, 0xc5, 0xee, 0x5a, 0xa6, 0x8d, 0x49, 0x63,
             0x81, 0xbb, 0xd1, 0xf9, 0x9e, 0xbb, 0xed, 0xb2, 0xa9, 0x18, 0x60,
             0xa7, 0xee, 0xeb, 0x30, 0xa1, 0x92, 0x93, 0xe8, 0xd8, 0x34, 0x9e,
             0xac, 0xd6, 0x23, 0xfc, 0x7f, 0xcb, 0xe7, 0xfe, 0xa7, 0xe6, 0x42,
             0xac, 0x77, 0x11, 0xc0, 0x67, 0x77, 0xd1, 0xaa, 0x5e, 0xed, 0x3b,
             0xd5, 0xa5, 0x8d, 0x34, 0x7c, 0xd9, 0x57, 0x44, 0xa7, 0xc5, 0x44,
             0x2e, 0x1e, 0xe7, 0x63, 0xd8, 0x53, 0x1b, 0x9a, 0xd9, 0x67, 0x02,
             0x13, 0x32, 0x61}};
        std::array<std::uint8_t, 256> const rsa2Sig{
            {0x44, 0x5e, 0xa7, 0x40, 0x12, 0x5d, 0x55, 0xdb, 0x6c, 0x45, 0x91,
             0x0f, 0x71, 0xcc, 0x6e, 0x12, 0x32, 0xac, 0xee, 0x00, 0x77, 0xa4,
             0x6f, 0x5e, 0x6f, 0x5e, 0xc0, 0x98, 0xdc, 0x08, 0x79, 0xcb, 0xe8,
             0xbf, 0x33, 0xc6, 0xd0, 0x05, 0xd4, 0x95, 0x56, 0x7d, 0x12, 0xdf,
             0x64, 0xca, 0xc5, 0xf4, 0x31, 0x04, 0x5f, 0xac, 0xb9, 0x87, 0x7c,
             0x8b, 0x7f, 0x8f, 0x0c, 0x5d, 0x33, 0xa5, 0x57, 0xc3, 0x10, 0x13,
             0x60, 0x59, 0xe2, 0x99, 0x66, 0x73, 0x36, 0x45, 0x75, 0x62, 0x8a,
             0x1e, 0x26, 0x98, 0xe9, 0xe2, 0xc6, 0x03, 0xd5, 0x1c, 0xa4, 0x25,
             0x49, 0x71, 0x5b, 0xd6, 0x38, 0xee, 0x2a, 0xb5, 0x06, 0xaf, 0x4a,
             0x32, 0x32, 0x32, 0xc1, 0x32, 0x18, 0xc5, 0x76, 0x9b, 0xa1, 0x11,
             0x3f, 0x8a, 0x9f, 0x02, 0x41, 0xa1, 0xa0, 0xc3, 0x99, 0x44, 0x32,
             0xf3, 0x60, 0x18, 0xc1, 0x06, 0x3d, 0x9a, 0x4e, 0x05, 0x99, 0xbb,
             0xd3, 0xad, 0x7c, 0x6e, 0x35, 0x9a, 0x96, 0x75, 0xac, 0x86, 0xca,
             0xe5, 0x48, 0x42, 0x76, 0xd7, 0xb5, 0x9c, 0x37, 0x0e, 0xde, 0x3f,
             0xe8, 0x28, 0xc4, 0xaf, 0xe5, 0xc2, 0x65, 0x6e, 0x64, 0xcb, 0xcf,
             0xeb, 0x8d, 0xb2, 0x3f, 0xf0, 0x19, 0x31, 0x31, 0x6c, 0x2a, 0x5a,
             0x92, 0x0e, 0x6e, 0x81, 0xeb, 0x75, 0xbc, 0xf5, 0x73, 0x76, 0x41,
             0x43, 0xb0, 0xf5, 0xe0, 0x4e, 0x27, 0x5e, 0xa4, 0x21, 0xb6, 0x44,
             0x60, 0xbc, 0x78, 0xaa, 0x42, 0xb0, 0x95, 0x37, 0xc0, 0xb0, 0x88,
             0xe0, 0x3f, 0x71, 0x33, 0xff, 0x88, 0x39, 0x94, 0x89, 0x6b, 0xec,
             0x2d, 0x7e, 0x20, 0x23, 0x5a, 0x7d, 0xbe, 0x1f, 0xbb, 0x3c, 0xce,
             0x54, 0xda, 0x47, 0x14, 0x58, 0xfa, 0x50, 0xdf, 0x40, 0x5c, 0x23,
             0x28, 0xc3, 0x27, 0x04, 0x01, 0x73, 0xce, 0x1c, 0xee, 0x86, 0x2a,
             0xce, 0xd1, 0x36}};
        auto const prefix1Prefix = "P1"s;
        auto const prefix1Msg = "P0abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix1MaxMsgLength = 14;
        auto const prefix0Prefix = "P0"s;
        auto const prefix0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix0MaxMsgLength = 14;

        auto rsa2 = std::make_unique<RsaSha256>(
            makeSlice(rsa2PublicKey), makeSlice(rsa2Sig));
        auto prefix1 = std::make_unique<PrefixSha256>(
            makeSlice(prefix1Prefix), prefix1MaxMsgLength, std::move(rsa2));
        PrefixSha256 const prefix0(
            makeSlice(prefix0Prefix), prefix0MaxMsgLength, std::move(prefix1));
        {
            auto const prefix0EncodedFulfillment =
                "\xa1\x82\x02\x26\x80\x02\x50\x30\x81\x01\x0e\xa2\x82\x02\x1b"
                "\xa1\x82\x02\x17\x80\x02\x50\x31\x81\x01\x0e\xa2\x82\x02\x0c"
                "\xa3\x82\x02\x08\x80\x82\x01\x00\xba\x2c\x3b\x50\xb6\xbf\xf9"
                "\x0f\x1d\xd7\x32\x4c\x01\x5f\xff\x2f\x2a\xf6\x33\xd0\xfb\xea"
                "\x1f\xa4\xf2\x2d\x22\x8a\x19\x95\xa9\x17\xb7\x4f\x17\xcf\x55"
                "\xcd\x1a\x3a\x5f\x07\x73\xcc\xaa\x21\x70\x64\xb3\xa0\xf4\xb7"
                "\x30\xa3\x82\x37\x93\xc6\x59\xde\x1b\xa1\x16\x90\x5a\x1a\xf6"
                "\x73\xab\x92\xc8\x2f\xf4\x6f\x5c\xf2\x22\x1d\x30\xf8\x03\xd8"
                "\x9b\x5f\x73\x72\x8e\x5f\xd5\x37\x4b\x43\xda\xfe\x84\x21\x67"
                "\xe8\xe3\xd7\x91\x3f\x24\x1d\xfb\x1f\x12\x6e\xcb\xfc\xb7\x5b"
                "\x0a\x35\x73\x3b\xce\x44\x34\x8e\xcd\x53\xa4\xcf\xa7\x63\x73"
                "\xcd\x31\x0f\xe0\x75\x8d\xe4\xa9\xdc\xfe\xf0\xc9\x3d\x26\xaf"
                "\xbf\x7b\x0f\x0e\x17\xb9\xd0\x4a\x32\x80\x64\x6b\x54\x73\x5a"
                "\x50\xc7\x31\x59\xf9\x73\x72\xa5\x79\xba\xdb\xa1\x14\x8d\x77"
                "\x67\x3e\xc0\x5b\xec\x6f\x0b\xf7\xc5\xee\x5a\xa6\x8d\x49\x63"
                "\x81\xbb\xd1\xf9\x9e\xbb\xed\xb2\xa9\x18\x60\xa7\xee\xeb\x30"
                "\xa1\x92\x93\xe8\xd8\x34\x9e\xac\xd6\x23\xfc\x7f\xcb\xe7\xfe"
                "\xa7\xe6\x42\xac\x77\x11\xc0\x67\x77\xd1\xaa\x5e\xed\x3b\xd5"
                "\xa5\x8d\x34\x7c\xd9\x57\x44\xa7\xc5\x44\x2e\x1e\xe7\x63\xd8"
                "\x53\x1b\x9a\xd9\x67\x02\x13\x32\x61\x81\x82\x01\x00\x44\x5e"
                "\xa7\x40\x12\x5d\x55\xdb\x6c\x45\x91\x0f\x71\xcc\x6e\x12\x32"
                "\xac\xee\x00\x77\xa4\x6f\x5e\x6f\x5e\xc0\x98\xdc\x08\x79\xcb"
                "\xe8\xbf\x33\xc6\xd0\x05\xd4\x95\x56\x7d\x12\xdf\x64\xca\xc5"
                "\xf4\x31\x04\x5f\xac\xb9\x87\x7c\x8b\x7f\x8f\x0c\x5d\x33\xa5"
                "\x57\xc3\x10\x13\x60\x59\xe2\x99\x66\x73\x36\x45\x75\x62\x8a"
                "\x1e\x26\x98\xe9\xe2\xc6\x03\xd5\x1c\xa4\x25\x49\x71\x5b\xd6"
                "\x38\xee\x2a\xb5\x06\xaf\x4a\x32\x32\x32\xc1\x32\x18\xc5\x76"
                "\x9b\xa1\x11\x3f\x8a\x9f\x02\x41\xa1\xa0\xc3\x99\x44\x32\xf3"
                "\x60\x18\xc1\x06\x3d\x9a\x4e\x05\x99\xbb\xd3\xad\x7c\x6e\x35"
                "\x9a\x96\x75\xac\x86\xca\xe5\x48\x42\x76\xd7\xb5\x9c\x37\x0e"
                "\xde\x3f\xe8\x28\xc4\xaf\xe5\xc2\x65\x6e\x64\xcb\xcf\xeb\x8d"
                "\xb2\x3f\xf0\x19\x31\x31\x6c\x2a\x5a\x92\x0e\x6e\x81\xeb\x75"
                "\xbc\xf5\x73\x76\x41\x43\xb0\xf5\xe0\x4e\x27\x5e\xa4\x21\xb6"
                "\x44\x60\xbc\x78\xaa\x42\xb0\x95\x37\xc0\xb0\x88\xe0\x3f\x71"
                "\x33\xff\x88\x39\x94\x89\x6b\xec\x2d\x7e\x20\x23\x5a\x7d\xbe"
                "\x1f\xbb\x3c\xce\x54\xda\x47\x14\x58\xfa\x50\xdf\x40\x5c\x23"
                "\x28\xc3\x27\x04\x01\x73\xce\x1c\xee\x86\x2a\xce\xd1\x36"s;
            auto const prefix0EncodedCondition =
                "\xa1\x2b\x80\x20\x11\x64\x40\xd9\xd3\x5e\x9b\xe8\x11\x62\x00"
                "\x00\x46\x04\xf3\x3d\xbc\x44\x83\x15\x64\xae\xb8\x83\xa4\x84"
                "\x9d\xed\x01\xfe\x6b\x04\x81\x03\x01\x08\x20\x82\x02\x04\x10"s;
            auto const prefix0EncodedFingerprint =
                "\x30\x36\x80\x02\x50\x30\x81\x01\x0e\xa2\x2d\xa1\x2b\x80\x20"
                "\x1d\x7f\xae\x40\x60\x6d\x72\x35\xc5\xea\xe7\x2f\x5b\xeb\xaa"
                "\xb2\x87\x12\xe2\x89\x91\x28\x8e\xc9\xc2\xb1\x12\x1a\xe9\xa8"
                "\x76\xc8\x81\x03\x01\x04\x10\x82\x02\x04\x10"s;
            check(
                &prefix0,
                prefix0Msg,
                prefix0EncodedFulfillment,
                prefix0EncodedCondition,
                prefix0EncodedFingerprint);
        }
    }

    void
    testPrefix9()
    {
        testcase("Prefix9");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * prefix0
        // ** prefix1
        // *** prefix2
        // **** rsa3

        auto const rsa3Msg = "P2P1P0abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa3PublicKey{
            {0xbd, 0xd1, 0xc7, 0xf0, 0xb0, 0x3a, 0xa5, 0x5b, 0x3e, 0x49, 0x8d,
             0x4e, 0x00, 0x54, 0x89, 0xb9, 0x89, 0xcd, 0x4b, 0x43, 0xde, 0x59,
             0xf6, 0x7a, 0x67, 0x5c, 0x3a, 0xc6, 0xcf, 0x82, 0x3f, 0x35, 0x9c,
             0xcc, 0xda, 0xcd, 0xd3, 0x97, 0x86, 0x5b, 0xe9, 0xf6, 0x05, 0x55,
             0x0b, 0x26, 0xef, 0x1e, 0x88, 0xd5, 0xb6, 0xba, 0x14, 0x0a, 0xb2,
             0x76, 0xb9, 0xb3, 0x46, 0x0c, 0xc0, 0x80, 0x17, 0x13, 0x68, 0x23,
             0xdc, 0xec, 0x10, 0x18, 0xfc, 0xaa, 0xbe, 0xb3, 0xc4, 0xc7, 0xa9,
             0x84, 0xa6, 0x4e, 0x5c, 0x08, 0x6b, 0x7b, 0x4c, 0x81, 0x91, 0x79,
             0x5d, 0x90, 0x06, 0x15, 0xbb, 0x76, 0x2f, 0x5c, 0x53, 0x60, 0x0f,
             0xac, 0xf3, 0x7c, 0x49, 0xc5, 0x47, 0xec, 0xb3, 0xda, 0x93, 0x87,
             0xc1, 0xb9, 0xcf, 0x2c, 0xb5, 0xf0, 0x85, 0xad, 0xb4, 0x38, 0x67,
             0x88, 0xda, 0x3d, 0xfa, 0x01, 0xb7, 0x54, 0xd9, 0x41, 0x0b, 0x7b,
             0x8a, 0x09, 0xe0, 0x84, 0x7d, 0xbb, 0x89, 0xb2, 0xfc, 0x0b, 0x70,
             0x36, 0x93, 0x56, 0x62, 0xcc, 0xb4, 0xfc, 0xf9, 0x1f, 0x37, 0x92,
             0x9b, 0x3a, 0x4e, 0x7c, 0xad, 0x4b, 0xa6, 0x76, 0x6f, 0xda, 0xc4,
             0x2f, 0x83, 0x53, 0xbd, 0x93, 0xa9, 0x76, 0x89, 0x53, 0xe1, 0x4d,
             0xee, 0x27, 0x11, 0x6f, 0xbc, 0x21, 0xad, 0x42, 0x9f, 0x29, 0xf6,
             0x03, 0xdd, 0xec, 0xfa, 0xa1, 0x78, 0xd2, 0xde, 0x29, 0x2e, 0xd8,
             0x3a, 0x7f, 0xe9, 0x9b, 0x5d, 0xeb, 0x37, 0xb8, 0xb0, 0xa0, 0x66,
             0x3f, 0x02, 0xcd, 0x2a, 0x6e, 0xd3, 0x1c, 0xa5, 0x65, 0xdc, 0x73,
             0xbe, 0x93, 0x54, 0x9a, 0x2b, 0xf8, 0x32, 0x8b, 0xe8, 0xce, 0x9a,
             0x59, 0xd0, 0x05, 0xeb, 0xbb, 0xac, 0xfc, 0x4c, 0x4b, 0x2e, 0xac,
             0x2a, 0xc3, 0x0f, 0x0a, 0xd7, 0x46, 0xaf, 0xfd, 0x22, 0x0d, 0x0d,
             0x54, 0xcc, 0x2f}};
        std::array<std::uint8_t, 256> const rsa3Sig{
            {0x7c, 0x10, 0xbc, 0xb0, 0x9e, 0x50, 0x81, 0x5f, 0x32, 0xa5, 0xff,
             0x36, 0x76, 0x65, 0xe1, 0x49, 0xe8, 0x18, 0x8c, 0x4d, 0xb3, 0x57,
             0x3a, 0xe6, 0xe9, 0xe2, 0x49, 0x12, 0xd7, 0x9a, 0x24, 0xc6, 0x22,
             0xca, 0x55, 0xf3, 0x1a, 0xa0, 0xb1, 0xca, 0x0f, 0x19, 0xbf, 0x1c,
             0x4b, 0x32, 0xf8, 0x8e, 0xdb, 0x1a, 0x1b, 0xae, 0x57, 0x76, 0xff,
             0x5a, 0x47, 0x69, 0x3c, 0xdc, 0x88, 0x6f, 0xcb, 0xbe, 0x5b, 0x45,
             0x84, 0x94, 0x84, 0x2a, 0x6e, 0x00, 0xfe, 0xa7, 0x7b, 0x59, 0x1f,
             0xe0, 0x20, 0x11, 0x82, 0x02, 0x51, 0x08, 0x8d, 0xf1, 0x0c, 0xc5,
             0x72, 0x86, 0x64, 0x3e, 0x23, 0x31, 0x0f, 0xe8, 0x64, 0x10, 0x99,
             0xf6, 0x14, 0xcc, 0x43, 0x82, 0x6b, 0x0a, 0x9c, 0xab, 0x69, 0x35,
             0x00, 0x29, 0xef, 0x14, 0xce, 0xfb, 0x61, 0x85, 0x60, 0x42, 0xbf,
             0xda, 0xe1, 0x95, 0xee, 0x26, 0xb2, 0x14, 0x0f, 0x0a, 0x85, 0x08,
             0x45, 0xff, 0x80, 0x2e, 0xca, 0x42, 0xb9, 0xf1, 0xf9, 0x4d, 0x4c,
             0x6a, 0x42, 0x21, 0xb5, 0x56, 0xa8, 0x9f, 0x8b, 0xf2, 0x06, 0xf5,
             0x6b, 0xe4, 0x65, 0x83, 0xd1, 0x94, 0xc4, 0x03, 0x66, 0x78, 0x28,
             0x4d, 0x44, 0x26, 0x5d, 0x2a, 0x9f, 0x66, 0x1b, 0xba, 0x83, 0xf6,
             0x66, 0xf7, 0xab, 0xc1, 0x59, 0x2b, 0xee, 0x34, 0xf9, 0x63, 0x8a,
             0x14, 0xa6, 0x9d, 0x19, 0xfb, 0x32, 0x59, 0xd8, 0xfa, 0x33, 0x2d,
             0xb0, 0x2b, 0x82, 0x9c, 0x82, 0x38, 0xb8, 0x11, 0x2e, 0x93, 0xa1,
             0xd4, 0x7e, 0xe4, 0x18, 0x95, 0xbb, 0x4a, 0xe9, 0x38, 0x66, 0x48,
             0x62, 0x27, 0x82, 0xf3, 0xa1, 0xf7, 0xd7, 0xdc, 0x69, 0x25, 0x1a,
             0xc0, 0x26, 0xb5, 0xa3, 0x0c, 0x82, 0xe7, 0xb6, 0x89, 0xdb, 0xde,
             0xe8, 0x2d, 0x4e, 0x01, 0xb5, 0xd4, 0x1e, 0xdc, 0x57, 0xa7, 0xca,
             0x3e, 0xec, 0xb0}};
        auto const prefix2Prefix = "P2"s;
        auto const prefix2Msg = "P1P0abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix2MaxMsgLength = 14;
        auto const prefix1Prefix = "P1"s;
        auto const prefix1Msg = "P0abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix1MaxMsgLength = 14;
        auto const prefix0Prefix = "P0"s;
        auto const prefix0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix0MaxMsgLength = 14;

        auto rsa3 = std::make_unique<RsaSha256>(
            makeSlice(rsa3PublicKey), makeSlice(rsa3Sig));
        auto prefix2 = std::make_unique<PrefixSha256>(
            makeSlice(prefix2Prefix), prefix2MaxMsgLength, std::move(rsa3));
        auto prefix1 = std::make_unique<PrefixSha256>(
            makeSlice(prefix1Prefix), prefix1MaxMsgLength, std::move(prefix2));
        PrefixSha256 const prefix0(
            makeSlice(prefix0Prefix), prefix0MaxMsgLength, std::move(prefix1));
        {
            auto const prefix0EncodedFulfillment =
                "\xa1\x82\x02\x35\x80\x02\x50\x30\x81\x01\x0e\xa2\x82\x02\x2a"
                "\xa1\x82\x02\x26\x80\x02\x50\x31\x81\x01\x0e\xa2\x82\x02\x1b"
                "\xa1\x82\x02\x17\x80\x02\x50\x32\x81\x01\x0e\xa2\x82\x02\x0c"
                "\xa3\x82\x02\x08\x80\x82\x01\x00\xbd\xd1\xc7\xf0\xb0\x3a\xa5"
                "\x5b\x3e\x49\x8d\x4e\x00\x54\x89\xb9\x89\xcd\x4b\x43\xde\x59"
                "\xf6\x7a\x67\x5c\x3a\xc6\xcf\x82\x3f\x35\x9c\xcc\xda\xcd\xd3"
                "\x97\x86\x5b\xe9\xf6\x05\x55\x0b\x26\xef\x1e\x88\xd5\xb6\xba"
                "\x14\x0a\xb2\x76\xb9\xb3\x46\x0c\xc0\x80\x17\x13\x68\x23\xdc"
                "\xec\x10\x18\xfc\xaa\xbe\xb3\xc4\xc7\xa9\x84\xa6\x4e\x5c\x08"
                "\x6b\x7b\x4c\x81\x91\x79\x5d\x90\x06\x15\xbb\x76\x2f\x5c\x53"
                "\x60\x0f\xac\xf3\x7c\x49\xc5\x47\xec\xb3\xda\x93\x87\xc1\xb9"
                "\xcf\x2c\xb5\xf0\x85\xad\xb4\x38\x67\x88\xda\x3d\xfa\x01\xb7"
                "\x54\xd9\x41\x0b\x7b\x8a\x09\xe0\x84\x7d\xbb\x89\xb2\xfc\x0b"
                "\x70\x36\x93\x56\x62\xcc\xb4\xfc\xf9\x1f\x37\x92\x9b\x3a\x4e"
                "\x7c\xad\x4b\xa6\x76\x6f\xda\xc4\x2f\x83\x53\xbd\x93\xa9\x76"
                "\x89\x53\xe1\x4d\xee\x27\x11\x6f\xbc\x21\xad\x42\x9f\x29\xf6"
                "\x03\xdd\xec\xfa\xa1\x78\xd2\xde\x29\x2e\xd8\x3a\x7f\xe9\x9b"
                "\x5d\xeb\x37\xb8\xb0\xa0\x66\x3f\x02\xcd\x2a\x6e\xd3\x1c\xa5"
                "\x65\xdc\x73\xbe\x93\x54\x9a\x2b\xf8\x32\x8b\xe8\xce\x9a\x59"
                "\xd0\x05\xeb\xbb\xac\xfc\x4c\x4b\x2e\xac\x2a\xc3\x0f\x0a\xd7"
                "\x46\xaf\xfd\x22\x0d\x0d\x54\xcc\x2f\x81\x82\x01\x00\x7c\x10"
                "\xbc\xb0\x9e\x50\x81\x5f\x32\xa5\xff\x36\x76\x65\xe1\x49\xe8"
                "\x18\x8c\x4d\xb3\x57\x3a\xe6\xe9\xe2\x49\x12\xd7\x9a\x24\xc6"
                "\x22\xca\x55\xf3\x1a\xa0\xb1\xca\x0f\x19\xbf\x1c\x4b\x32\xf8"
                "\x8e\xdb\x1a\x1b\xae\x57\x76\xff\x5a\x47\x69\x3c\xdc\x88\x6f"
                "\xcb\xbe\x5b\x45\x84\x94\x84\x2a\x6e\x00\xfe\xa7\x7b\x59\x1f"
                "\xe0\x20\x11\x82\x02\x51\x08\x8d\xf1\x0c\xc5\x72\x86\x64\x3e"
                "\x23\x31\x0f\xe8\x64\x10\x99\xf6\x14\xcc\x43\x82\x6b\x0a\x9c"
                "\xab\x69\x35\x00\x29\xef\x14\xce\xfb\x61\x85\x60\x42\xbf\xda"
                "\xe1\x95\xee\x26\xb2\x14\x0f\x0a\x85\x08\x45\xff\x80\x2e\xca"
                "\x42\xb9\xf1\xf9\x4d\x4c\x6a\x42\x21\xb5\x56\xa8\x9f\x8b\xf2"
                "\x06\xf5\x6b\xe4\x65\x83\xd1\x94\xc4\x03\x66\x78\x28\x4d\x44"
                "\x26\x5d\x2a\x9f\x66\x1b\xba\x83\xf6\x66\xf7\xab\xc1\x59\x2b"
                "\xee\x34\xf9\x63\x8a\x14\xa6\x9d\x19\xfb\x32\x59\xd8\xfa\x33"
                "\x2d\xb0\x2b\x82\x9c\x82\x38\xb8\x11\x2e\x93\xa1\xd4\x7e\xe4"
                "\x18\x95\xbb\x4a\xe9\x38\x66\x48\x62\x27\x82\xf3\xa1\xf7\xd7"
                "\xdc\x69\x25\x1a\xc0\x26\xb5\xa3\x0c\x82\xe7\xb6\x89\xdb\xde"
                "\xe8\x2d\x4e\x01\xb5\xd4\x1e\xdc\x57\xa7\xca\x3e\xec\xb0"s;
            auto const prefix0EncodedCondition =
                "\xa1\x2b\x80\x20\x36\x2d\x6a\xce\xb6\x9b\x67\xb0\x32\x85\x53"
                "\x05\x7b\x69\xb9\x21\x5e\x96\xd1\x42\x22\x8e\xfa\x00\x3f\x32"
                "\x55\x21\x7b\xd6\xe1\xf9\x81\x03\x01\x0c\x30\x82\x02\x04\x10"s;
            auto const prefix0EncodedFingerprint =
                "\x30\x36\x80\x02\x50\x30\x81\x01\x0e\xa2\x2d\xa1\x2b\x80\x20"
                "\xf7\x5d\xa2\x8c\x5a\x93\x5f\x41\xca\x1c\xb4\xb3\x8c\xae\x0f"
                "\x3d\x22\x58\x1e\xb3\x37\x76\x7d\xf6\xce\x6b\xdc\x5d\x16\x57"
                "\xf4\xc6\x81\x03\x01\x08\x20\x82\x02\x04\x10"s;
            check(
                &prefix0,
                prefix0Msg,
                prefix0EncodedFulfillment,
                prefix0EncodedCondition,
                prefix0EncodedFingerprint);
        }
    }

    void
    testPrefix10()
    {
        testcase("Prefix10");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * prefix0
        // ** prefix1
        // *** thresh2
        // **** rsa3

        auto const rsa3Msg = "P1P0abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa3PublicKey{
            {0xbd, 0xd1, 0xc7, 0xf0, 0xb0, 0x3a, 0xa5, 0x5b, 0x3e, 0x49, 0x8d,
             0x4e, 0x00, 0x54, 0x89, 0xb9, 0x89, 0xcd, 0x4b, 0x43, 0xde, 0x59,
             0xf6, 0x7a, 0x67, 0x5c, 0x3a, 0xc6, 0xcf, 0x82, 0x3f, 0x35, 0x9c,
             0xcc, 0xda, 0xcd, 0xd3, 0x97, 0x86, 0x5b, 0xe9, 0xf6, 0x05, 0x55,
             0x0b, 0x26, 0xef, 0x1e, 0x88, 0xd5, 0xb6, 0xba, 0x14, 0x0a, 0xb2,
             0x76, 0xb9, 0xb3, 0x46, 0x0c, 0xc0, 0x80, 0x17, 0x13, 0x68, 0x23,
             0xdc, 0xec, 0x10, 0x18, 0xfc, 0xaa, 0xbe, 0xb3, 0xc4, 0xc7, 0xa9,
             0x84, 0xa6, 0x4e, 0x5c, 0x08, 0x6b, 0x7b, 0x4c, 0x81, 0x91, 0x79,
             0x5d, 0x90, 0x06, 0x15, 0xbb, 0x76, 0x2f, 0x5c, 0x53, 0x60, 0x0f,
             0xac, 0xf3, 0x7c, 0x49, 0xc5, 0x47, 0xec, 0xb3, 0xda, 0x93, 0x87,
             0xc1, 0xb9, 0xcf, 0x2c, 0xb5, 0xf0, 0x85, 0xad, 0xb4, 0x38, 0x67,
             0x88, 0xda, 0x3d, 0xfa, 0x01, 0xb7, 0x54, 0xd9, 0x41, 0x0b, 0x7b,
             0x8a, 0x09, 0xe0, 0x84, 0x7d, 0xbb, 0x89, 0xb2, 0xfc, 0x0b, 0x70,
             0x36, 0x93, 0x56, 0x62, 0xcc, 0xb4, 0xfc, 0xf9, 0x1f, 0x37, 0x92,
             0x9b, 0x3a, 0x4e, 0x7c, 0xad, 0x4b, 0xa6, 0x76, 0x6f, 0xda, 0xc4,
             0x2f, 0x83, 0x53, 0xbd, 0x93, 0xa9, 0x76, 0x89, 0x53, 0xe1, 0x4d,
             0xee, 0x27, 0x11, 0x6f, 0xbc, 0x21, 0xad, 0x42, 0x9f, 0x29, 0xf6,
             0x03, 0xdd, 0xec, 0xfa, 0xa1, 0x78, 0xd2, 0xde, 0x29, 0x2e, 0xd8,
             0x3a, 0x7f, 0xe9, 0x9b, 0x5d, 0xeb, 0x37, 0xb8, 0xb0, 0xa0, 0x66,
             0x3f, 0x02, 0xcd, 0x2a, 0x6e, 0xd3, 0x1c, 0xa5, 0x65, 0xdc, 0x73,
             0xbe, 0x93, 0x54, 0x9a, 0x2b, 0xf8, 0x32, 0x8b, 0xe8, 0xce, 0x9a,
             0x59, 0xd0, 0x05, 0xeb, 0xbb, 0xac, 0xfc, 0x4c, 0x4b, 0x2e, 0xac,
             0x2a, 0xc3, 0x0f, 0x0a, 0xd7, 0x46, 0xaf, 0xfd, 0x22, 0x0d, 0x0d,
             0x54, 0xcc, 0x2f}};
        std::array<std::uint8_t, 256> const rsa3Sig{
            {0x85, 0x3e, 0x08, 0xf3, 0x19, 0x00, 0x70, 0x10, 0xe0, 0xea, 0x34,
             0xf1, 0x9f, 0x1c, 0xa3, 0x97, 0x5f, 0x31, 0x53, 0xf4, 0x89, 0x1d,
             0x8a, 0x5b, 0xc9, 0xe1, 0xfe, 0x5d, 0x51, 0xf7, 0x45, 0x8b, 0xc2,
             0x3b, 0x00, 0x64, 0x3c, 0xf9, 0xa2, 0xf2, 0xca, 0xa8, 0xc2, 0x93,
             0x19, 0x83, 0x3a, 0x05, 0x0d, 0x35, 0xfa, 0xfc, 0x9c, 0x8e, 0xfb,
             0x4a, 0x7f, 0x55, 0x17, 0x30, 0x36, 0x75, 0x52, 0x52, 0xd2, 0x71,
             0xb5, 0xa7, 0xdf, 0x26, 0x38, 0x8c, 0x33, 0x9b, 0x48, 0xca, 0xf0,
             0x9e, 0x08, 0xc2, 0xbc, 0xa7, 0x46, 0xeb, 0xa5, 0x7e, 0x97, 0xc6,
             0x49, 0x69, 0x86, 0x47, 0xfd, 0xe7, 0x49, 0x85, 0x2d, 0x16, 0x83,
             0x8e, 0x91, 0x1a, 0x0c, 0xa9, 0x8d, 0x48, 0x69, 0xe7, 0xe1, 0x37,
             0x0c, 0xbb, 0x75, 0xb9, 0x0e, 0x5f, 0x69, 0xd8, 0xa3, 0x7d, 0xf0,
             0xc1, 0xc6, 0x79, 0x46, 0xa9, 0x4a, 0x16, 0x79, 0x59, 0xc0, 0x10,
             0x26, 0x2b, 0xe6, 0xc5, 0xfa, 0xe2, 0x29, 0x28, 0x8a, 0x8c, 0xeb,
             0x12, 0xf9, 0x65, 0xfe, 0x92, 0x15, 0xac, 0x8b, 0xa0, 0x94, 0x94,
             0x3e, 0x41, 0xc1, 0x5f, 0x15, 0xbb, 0x6d, 0xe4, 0x85, 0x33, 0x87,
             0x01, 0x50, 0x81, 0xeb, 0x8a, 0xd5, 0xd8, 0xa9, 0x9a, 0x09, 0x5c,
             0x6a, 0x24, 0xd6, 0xc7, 0x0b, 0xa8, 0xd9, 0x6f, 0xf1, 0x84, 0x4b,
             0x75, 0x6d, 0x31, 0xa4, 0xfe, 0xbe, 0xe3, 0x6f, 0x85, 0x95, 0x37,
             0x55, 0xd3, 0xa8, 0x47, 0x4e, 0xa1, 0x64, 0x6b, 0xad, 0xdf, 0x65,
             0x76, 0x55, 0x83, 0xb5, 0xd5, 0x21, 0x4b, 0xad, 0xd3, 0xed, 0x5c,
             0x7e, 0xff, 0xe8, 0xd1, 0xe3, 0x1e, 0x0b, 0x3f, 0x59, 0xcf, 0x31,
             0x8c, 0xc7, 0x5b, 0x9f, 0x7a, 0x19, 0xaf, 0x3e, 0x6c, 0x76, 0x9f,
             0xce, 0x29, 0x44, 0x97, 0x10, 0xa4, 0x20, 0x31, 0x2a, 0x5c, 0x0c,
             0x93, 0xa6, 0x8c}};
        auto const thresh2Msg = "P1P0abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix1Prefix = "P1"s;
        auto const prefix1Msg = "P0abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix1MaxMsgLength = 14;
        auto const prefix0Prefix = "P0"s;
        auto const prefix0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix0MaxMsgLength = 14;

        auto rsa3 = std::make_unique<RsaSha256>(
            makeSlice(rsa3PublicKey), makeSlice(rsa3Sig));
        std::vector<std::unique_ptr<Fulfillment>> thresh2Subfulfillments;
        thresh2Subfulfillments.emplace_back(std::move(rsa3));
        std::vector<Condition> thresh2Subconditions{};
        auto thresh2 = std::make_unique<ThresholdSha256>(
            std::move(thresh2Subfulfillments), std::move(thresh2Subconditions));
        auto prefix1 = std::make_unique<PrefixSha256>(
            makeSlice(prefix1Prefix), prefix1MaxMsgLength, std::move(thresh2));
        PrefixSha256 const prefix0(
            makeSlice(prefix0Prefix), prefix0MaxMsgLength, std::move(prefix1));
        {
            auto const prefix0EncodedFulfillment =
                "\xa1\x82\x02\x30\x80\x02\x50\x30\x81\x01\x0e\xa2\x82\x02\x25"
                "\xa1\x82\x02\x21\x80\x02\x50\x31\x81\x01\x0e\xa2\x82\x02\x16"
                "\xa2\x82\x02\x12\xa0\x82\x02\x0c\xa3\x82\x02\x08\x80\x82\x01"
                "\x00\xbd\xd1\xc7\xf0\xb0\x3a\xa5\x5b\x3e\x49\x8d\x4e\x00\x54"
                "\x89\xb9\x89\xcd\x4b\x43\xde\x59\xf6\x7a\x67\x5c\x3a\xc6\xcf"
                "\x82\x3f\x35\x9c\xcc\xda\xcd\xd3\x97\x86\x5b\xe9\xf6\x05\x55"
                "\x0b\x26\xef\x1e\x88\xd5\xb6\xba\x14\x0a\xb2\x76\xb9\xb3\x46"
                "\x0c\xc0\x80\x17\x13\x68\x23\xdc\xec\x10\x18\xfc\xaa\xbe\xb3"
                "\xc4\xc7\xa9\x84\xa6\x4e\x5c\x08\x6b\x7b\x4c\x81\x91\x79\x5d"
                "\x90\x06\x15\xbb\x76\x2f\x5c\x53\x60\x0f\xac\xf3\x7c\x49\xc5"
                "\x47\xec\xb3\xda\x93\x87\xc1\xb9\xcf\x2c\xb5\xf0\x85\xad\xb4"
                "\x38\x67\x88\xda\x3d\xfa\x01\xb7\x54\xd9\x41\x0b\x7b\x8a\x09"
                "\xe0\x84\x7d\xbb\x89\xb2\xfc\x0b\x70\x36\x93\x56\x62\xcc\xb4"
                "\xfc\xf9\x1f\x37\x92\x9b\x3a\x4e\x7c\xad\x4b\xa6\x76\x6f\xda"
                "\xc4\x2f\x83\x53\xbd\x93\xa9\x76\x89\x53\xe1\x4d\xee\x27\x11"
                "\x6f\xbc\x21\xad\x42\x9f\x29\xf6\x03\xdd\xec\xfa\xa1\x78\xd2"
                "\xde\x29\x2e\xd8\x3a\x7f\xe9\x9b\x5d\xeb\x37\xb8\xb0\xa0\x66"
                "\x3f\x02\xcd\x2a\x6e\xd3\x1c\xa5\x65\xdc\x73\xbe\x93\x54\x9a"
                "\x2b\xf8\x32\x8b\xe8\xce\x9a\x59\xd0\x05\xeb\xbb\xac\xfc\x4c"
                "\x4b\x2e\xac\x2a\xc3\x0f\x0a\xd7\x46\xaf\xfd\x22\x0d\x0d\x54"
                "\xcc\x2f\x81\x82\x01\x00\x85\x3e\x08\xf3\x19\x00\x70\x10\xe0"
                "\xea\x34\xf1\x9f\x1c\xa3\x97\x5f\x31\x53\xf4\x89\x1d\x8a\x5b"
                "\xc9\xe1\xfe\x5d\x51\xf7\x45\x8b\xc2\x3b\x00\x64\x3c\xf9\xa2"
                "\xf2\xca\xa8\xc2\x93\x19\x83\x3a\x05\x0d\x35\xfa\xfc\x9c\x8e"
                "\xfb\x4a\x7f\x55\x17\x30\x36\x75\x52\x52\xd2\x71\xb5\xa7\xdf"
                "\x26\x38\x8c\x33\x9b\x48\xca\xf0\x9e\x08\xc2\xbc\xa7\x46\xeb"
                "\xa5\x7e\x97\xc6\x49\x69\x86\x47\xfd\xe7\x49\x85\x2d\x16\x83"
                "\x8e\x91\x1a\x0c\xa9\x8d\x48\x69\xe7\xe1\x37\x0c\xbb\x75\xb9"
                "\x0e\x5f\x69\xd8\xa3\x7d\xf0\xc1\xc6\x79\x46\xa9\x4a\x16\x79"
                "\x59\xc0\x10\x26\x2b\xe6\xc5\xfa\xe2\x29\x28\x8a\x8c\xeb\x12"
                "\xf9\x65\xfe\x92\x15\xac\x8b\xa0\x94\x94\x3e\x41\xc1\x5f\x15"
                "\xbb\x6d\xe4\x85\x33\x87\x01\x50\x81\xeb\x8a\xd5\xd8\xa9\x9a"
                "\x09\x5c\x6a\x24\xd6\xc7\x0b\xa8\xd9\x6f\xf1\x84\x4b\x75\x6d"
                "\x31\xa4\xfe\xbe\xe3\x6f\x85\x95\x37\x55\xd3\xa8\x47\x4e\xa1"
                "\x64\x6b\xad\xdf\x65\x76\x55\x83\xb5\xd5\x21\x4b\xad\xd3\xed"
                "\x5c\x7e\xff\xe8\xd1\xe3\x1e\x0b\x3f\x59\xcf\x31\x8c\xc7\x5b"
                "\x9f\x7a\x19\xaf\x3e\x6c\x76\x9f\xce\x29\x44\x97\x10\xa4\x20"
                "\x31\x2a\x5c\x0c\x93\xa6\x8c\xa1\x00"s;
            auto const prefix0EncodedCondition =
                "\xa1\x2b\x80\x20\x9c\x64\x9a\x7e\x08\xe1\x71\xc7\x71\x0d\xb6"
                "\x81\x70\x30\x2b\x57\x14\xef\xde\x06\x37\x89\xe5\xeb\xe9\x25"
                "\xd3\xaf\xa4\x57\xfc\x61\x81\x03\x01\x0c\x20\x82\x02\x04\x30"s;
            auto const prefix0EncodedFingerprint =
                "\x30\x36\x80\x02\x50\x30\x81\x01\x0e\xa2\x2d\xa1\x2b\x80\x20"
                "\xa3\x6e\x68\x3b\xd7\x6f\xed\x39\xe6\x37\xc8\xf0\xa8\xfe\x25"
                "\x1f\x71\xff\x98\x39\x3c\xdb\xd3\xae\x39\x58\x2a\x99\x2a\x57"
                "\xf3\xcd\x81\x03\x01\x08\x10\x82\x02\x04\x30"s;
            check(
                &prefix0,
                prefix0Msg,
                prefix0EncodedFulfillment,
                prefix0EncodedCondition,
                prefix0EncodedFingerprint);
        }
    }

    void
    testPrefix11()
    {
        testcase("Prefix11");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * prefix0
        // ** prefix1
        // *** thresh2
        // **** Preim4Cond
        // **** Rsa5Cond
        // **** Ed6Cond
        // **** rsa3

        auto const rsa3Msg = "P1P0abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa3PublicKey{
            {0xbd, 0xd1, 0xc7, 0xf0, 0xb0, 0x3a, 0xa5, 0x5b, 0x3e, 0x49, 0x8d,
             0x4e, 0x00, 0x54, 0x89, 0xb9, 0x89, 0xcd, 0x4b, 0x43, 0xde, 0x59,
             0xf6, 0x7a, 0x67, 0x5c, 0x3a, 0xc6, 0xcf, 0x82, 0x3f, 0x35, 0x9c,
             0xcc, 0xda, 0xcd, 0xd3, 0x97, 0x86, 0x5b, 0xe9, 0xf6, 0x05, 0x55,
             0x0b, 0x26, 0xef, 0x1e, 0x88, 0xd5, 0xb6, 0xba, 0x14, 0x0a, 0xb2,
             0x76, 0xb9, 0xb3, 0x46, 0x0c, 0xc0, 0x80, 0x17, 0x13, 0x68, 0x23,
             0xdc, 0xec, 0x10, 0x18, 0xfc, 0xaa, 0xbe, 0xb3, 0xc4, 0xc7, 0xa9,
             0x84, 0xa6, 0x4e, 0x5c, 0x08, 0x6b, 0x7b, 0x4c, 0x81, 0x91, 0x79,
             0x5d, 0x90, 0x06, 0x15, 0xbb, 0x76, 0x2f, 0x5c, 0x53, 0x60, 0x0f,
             0xac, 0xf3, 0x7c, 0x49, 0xc5, 0x47, 0xec, 0xb3, 0xda, 0x93, 0x87,
             0xc1, 0xb9, 0xcf, 0x2c, 0xb5, 0xf0, 0x85, 0xad, 0xb4, 0x38, 0x67,
             0x88, 0xda, 0x3d, 0xfa, 0x01, 0xb7, 0x54, 0xd9, 0x41, 0x0b, 0x7b,
             0x8a, 0x09, 0xe0, 0x84, 0x7d, 0xbb, 0x89, 0xb2, 0xfc, 0x0b, 0x70,
             0x36, 0x93, 0x56, 0x62, 0xcc, 0xb4, 0xfc, 0xf9, 0x1f, 0x37, 0x92,
             0x9b, 0x3a, 0x4e, 0x7c, 0xad, 0x4b, 0xa6, 0x76, 0x6f, 0xda, 0xc4,
             0x2f, 0x83, 0x53, 0xbd, 0x93, 0xa9, 0x76, 0x89, 0x53, 0xe1, 0x4d,
             0xee, 0x27, 0x11, 0x6f, 0xbc, 0x21, 0xad, 0x42, 0x9f, 0x29, 0xf6,
             0x03, 0xdd, 0xec, 0xfa, 0xa1, 0x78, 0xd2, 0xde, 0x29, 0x2e, 0xd8,
             0x3a, 0x7f, 0xe9, 0x9b, 0x5d, 0xeb, 0x37, 0xb8, 0xb0, 0xa0, 0x66,
             0x3f, 0x02, 0xcd, 0x2a, 0x6e, 0xd3, 0x1c, 0xa5, 0x65, 0xdc, 0x73,
             0xbe, 0x93, 0x54, 0x9a, 0x2b, 0xf8, 0x32, 0x8b, 0xe8, 0xce, 0x9a,
             0x59, 0xd0, 0x05, 0xeb, 0xbb, 0xac, 0xfc, 0x4c, 0x4b, 0x2e, 0xac,
             0x2a, 0xc3, 0x0f, 0x0a, 0xd7, 0x46, 0xaf, 0xfd, 0x22, 0x0d, 0x0d,
             0x54, 0xcc, 0x2f}};
        std::array<std::uint8_t, 256> const rsa3Sig{
            {0x76, 0x2a, 0x01, 0xf0, 0xd5, 0x4a, 0x71, 0x74, 0xb6, 0x1e, 0x3d,
             0xa9, 0xb8, 0x57, 0xb7, 0x03, 0xae, 0x84, 0x2a, 0x0b, 0x48, 0xe8,
             0xd8, 0xb2, 0xc6, 0xea, 0x2b, 0x74, 0x75, 0x78, 0x8b, 0x45, 0xdf,
             0xaf, 0x0f, 0xb1, 0x2d, 0x1b, 0x48, 0x49, 0x1a, 0x77, 0x4f, 0x69,
             0xac, 0xd3, 0x31, 0x18, 0xc8, 0xcf, 0x2f, 0x57, 0x92, 0xec, 0x5e,
             0xbf, 0xf1, 0x13, 0x27, 0x6f, 0x37, 0xfc, 0x07, 0x29, 0xd2, 0xeb,
             0x4c, 0x1d, 0x28, 0x7b, 0xc3, 0xe8, 0x45, 0x66, 0x3e, 0x87, 0x14,
             0xa7, 0x69, 0x7d, 0x59, 0xd9, 0x64, 0x10, 0xd6, 0x08, 0x4d, 0xe9,
             0x3c, 0xd6, 0xe5, 0x82, 0x39, 0x76, 0x38, 0x05, 0xfd, 0x2a, 0xe5,
             0xf7, 0x23, 0x82, 0x2d, 0x82, 0xe1, 0x9b, 0x10, 0xba, 0x28, 0xe6,
             0x4f, 0x88, 0x52, 0x17, 0x43, 0x86, 0xcd, 0x2f, 0xab, 0xd7, 0xe5,
             0x15, 0xc1, 0xeb, 0xf0, 0xcd, 0x1d, 0x92, 0xf1, 0xc7, 0x64, 0xc4,
             0xbc, 0x34, 0xc5, 0x23, 0x6f, 0x74, 0x75, 0x26, 0xcd, 0x6e, 0x9b,
             0x58, 0x51, 0x47, 0xef, 0x40, 0xd0, 0x48, 0x64, 0x3f, 0xfb, 0x7a,
             0x0d, 0x53, 0xad, 0x0b, 0xae, 0xfb, 0x59, 0x1a, 0xe2, 0x72, 0x6f,
             0x3e, 0x5e, 0x6a, 0xbf, 0x8b, 0x19, 0x55, 0xd6, 0x39, 0xe0, 0x18,
             0x06, 0x13, 0xb5, 0xd4, 0x23, 0x62, 0x1f, 0x5a, 0x11, 0x9e, 0x28,
             0x71, 0xdb, 0x14, 0x03, 0xdd, 0xb2, 0xc9, 0xe7, 0xe4, 0xf1, 0x4a,
             0x07, 0xe3, 0xc8, 0x6d, 0x6e, 0x0b, 0xdb, 0x2a, 0xf0, 0x78, 0x76,
             0xf4, 0xa1, 0x28, 0x48, 0x8b, 0x0d, 0x68, 0xfb, 0xf1, 0xda, 0x98,
             0xd0, 0x77, 0x84, 0x44, 0x39, 0x23, 0xe0, 0x72, 0xc1, 0x80, 0xf3,
             0x6e, 0x14, 0x52, 0xfa, 0xfb, 0xfa, 0xf0, 0x0d, 0xa1, 0xac, 0x52,
             0x9f, 0x61, 0x47, 0xf9, 0xde, 0x26, 0x50, 0x59, 0x03, 0x62, 0x58,
             0x68, 0x1f, 0x9b}};
        auto const thresh2Msg = "P1P0abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim4CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim4Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim4CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa5CondConditionFingerprint =
            "\x99\xfb\x0b\x38\x94\x4d\x20\x85\xc8\xda\x3a\x64\x31\x44\x6f"
            "\x6c\x3b\x46\x25\x50\xd7\x7f\xdf\xee\x75\x72\x71\xf9\x61\x40"
            "\x63\xfa"s;
        Condition const Rsa5Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa5CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed6CondConditionFingerprint =
            "\x00\xd3\xc9\x24\x3f\x2d\x2e\x64\x93\xa8\x49\x29\x82\x75\xea"
            "\xbf\xe3\x53\x7f\x8e\x45\x16\xdb\x5e\xc6\xdf\x39\xd2\xcb\xea"
            "\x62\xfb"s;
        Condition const Ed6Cond{Type::ed25519Sha256,
                                131072,
                                makeSlice(Ed6CondConditionFingerprint),
                                std::bitset<5>{0}};
        auto const prefix1Prefix = "P1"s;
        auto const prefix1Msg = "P0abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix1MaxMsgLength = 14;
        auto const prefix0Prefix = "P0"s;
        auto const prefix0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix0MaxMsgLength = 14;

        auto rsa3 = std::make_unique<RsaSha256>(
            makeSlice(rsa3PublicKey), makeSlice(rsa3Sig));
        std::vector<std::unique_ptr<Fulfillment>> thresh2Subfulfillments;
        thresh2Subfulfillments.emplace_back(std::move(rsa3));
        std::vector<Condition> thresh2Subconditions{
            {Preim4Cond, Rsa5Cond, Ed6Cond}};
        auto thresh2 = std::make_unique<ThresholdSha256>(
            std::move(thresh2Subfulfillments), std::move(thresh2Subconditions));
        auto prefix1 = std::make_unique<PrefixSha256>(
            makeSlice(prefix1Prefix), prefix1MaxMsgLength, std::move(thresh2));
        PrefixSha256 const prefix0(
            makeSlice(prefix0Prefix), prefix0MaxMsgLength, std::move(prefix1));
        {
            auto const prefix0EncodedFulfillment =
                "\xa1\x82\x02\xa9\x80\x02\x50\x30\x81\x01\x0e\xa2\x82\x02\x9e"
                "\xa1\x82\x02\x9a\x80\x02\x50\x31\x81\x01\x0e\xa2\x82\x02\x8f"
                "\xa2\x82\x02\x8b\xa0\x82\x02\x0c\xa3\x82\x02\x08\x80\x82\x01"
                "\x00\xbd\xd1\xc7\xf0\xb0\x3a\xa5\x5b\x3e\x49\x8d\x4e\x00\x54"
                "\x89\xb9\x89\xcd\x4b\x43\xde\x59\xf6\x7a\x67\x5c\x3a\xc6\xcf"
                "\x82\x3f\x35\x9c\xcc\xda\xcd\xd3\x97\x86\x5b\xe9\xf6\x05\x55"
                "\x0b\x26\xef\x1e\x88\xd5\xb6\xba\x14\x0a\xb2\x76\xb9\xb3\x46"
                "\x0c\xc0\x80\x17\x13\x68\x23\xdc\xec\x10\x18\xfc\xaa\xbe\xb3"
                "\xc4\xc7\xa9\x84\xa6\x4e\x5c\x08\x6b\x7b\x4c\x81\x91\x79\x5d"
                "\x90\x06\x15\xbb\x76\x2f\x5c\x53\x60\x0f\xac\xf3\x7c\x49\xc5"
                "\x47\xec\xb3\xda\x93\x87\xc1\xb9\xcf\x2c\xb5\xf0\x85\xad\xb4"
                "\x38\x67\x88\xda\x3d\xfa\x01\xb7\x54\xd9\x41\x0b\x7b\x8a\x09"
                "\xe0\x84\x7d\xbb\x89\xb2\xfc\x0b\x70\x36\x93\x56\x62\xcc\xb4"
                "\xfc\xf9\x1f\x37\x92\x9b\x3a\x4e\x7c\xad\x4b\xa6\x76\x6f\xda"
                "\xc4\x2f\x83\x53\xbd\x93\xa9\x76\x89\x53\xe1\x4d\xee\x27\x11"
                "\x6f\xbc\x21\xad\x42\x9f\x29\xf6\x03\xdd\xec\xfa\xa1\x78\xd2"
                "\xde\x29\x2e\xd8\x3a\x7f\xe9\x9b\x5d\xeb\x37\xb8\xb0\xa0\x66"
                "\x3f\x02\xcd\x2a\x6e\xd3\x1c\xa5\x65\xdc\x73\xbe\x93\x54\x9a"
                "\x2b\xf8\x32\x8b\xe8\xce\x9a\x59\xd0\x05\xeb\xbb\xac\xfc\x4c"
                "\x4b\x2e\xac\x2a\xc3\x0f\x0a\xd7\x46\xaf\xfd\x22\x0d\x0d\x54"
                "\xcc\x2f\x81\x82\x01\x00\x76\x2a\x01\xf0\xd5\x4a\x71\x74\xb6"
                "\x1e\x3d\xa9\xb8\x57\xb7\x03\xae\x84\x2a\x0b\x48\xe8\xd8\xb2"
                "\xc6\xea\x2b\x74\x75\x78\x8b\x45\xdf\xaf\x0f\xb1\x2d\x1b\x48"
                "\x49\x1a\x77\x4f\x69\xac\xd3\x31\x18\xc8\xcf\x2f\x57\x92\xec"
                "\x5e\xbf\xf1\x13\x27\x6f\x37\xfc\x07\x29\xd2\xeb\x4c\x1d\x28"
                "\x7b\xc3\xe8\x45\x66\x3e\x87\x14\xa7\x69\x7d\x59\xd9\x64\x10"
                "\xd6\x08\x4d\xe9\x3c\xd6\xe5\x82\x39\x76\x38\x05\xfd\x2a\xe5"
                "\xf7\x23\x82\x2d\x82\xe1\x9b\x10\xba\x28\xe6\x4f\x88\x52\x17"
                "\x43\x86\xcd\x2f\xab\xd7\xe5\x15\xc1\xeb\xf0\xcd\x1d\x92\xf1"
                "\xc7\x64\xc4\xbc\x34\xc5\x23\x6f\x74\x75\x26\xcd\x6e\x9b\x58"
                "\x51\x47\xef\x40\xd0\x48\x64\x3f\xfb\x7a\x0d\x53\xad\x0b\xae"
                "\xfb\x59\x1a\xe2\x72\x6f\x3e\x5e\x6a\xbf\x8b\x19\x55\xd6\x39"
                "\xe0\x18\x06\x13\xb5\xd4\x23\x62\x1f\x5a\x11\x9e\x28\x71\xdb"
                "\x14\x03\xdd\xb2\xc9\xe7\xe4\xf1\x4a\x07\xe3\xc8\x6d\x6e\x0b"
                "\xdb\x2a\xf0\x78\x76\xf4\xa1\x28\x48\x8b\x0d\x68\xfb\xf1\xda"
                "\x98\xd0\x77\x84\x44\x39\x23\xe0\x72\xc1\x80\xf3\x6e\x14\x52"
                "\xfa\xfb\xfa\xf0\x0d\xa1\xac\x52\x9f\x61\x47\xf9\xde\x26\x50"
                "\x59\x03\x62\x58\x68\x1f\x9b\xa1\x79\xa0\x25\x80\x20\x5d\xa0"
                "\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1"
                "\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e"
                "\x81\x01\x09\xa3\x27\x80\x20\x99\xfb\x0b\x38\x94\x4d\x20\x85"
                "\xc8\xda\x3a\x64\x31\x44\x6f\x6c\x3b\x46\x25\x50\xd7\x7f\xdf"
                "\xee\x75\x72\x71\xf9\x61\x40\x63\xfa\x81\x03\x01\x00\x00\xa4"
                "\x27\x80\x20\x00\xd3\xc9\x24\x3f\x2d\x2e\x64\x93\xa8\x49\x29"
                "\x82\x75\xea\xbf\xe3\x53\x7f\x8e\x45\x16\xdb\x5e\xc6\xdf\x39"
                "\xd2\xcb\xea\x62\xfb\x81\x03\x02\x00\x00"s;
            auto const prefix0EncodedCondition =
                "\xa1\x2b\x80\x20\xe9\x2c\x6f\xeb\xd7\xfe\x00\x7f\x20\x26\x5f"
                "\x19\x4d\x16\xd6\x16\x42\x34\xbb\xba\x09\x82\x2f\x2d\xff\x6f"
                "\x7a\xe7\x82\x9f\x5b\x06\x81\x03\x02\x18\x20\x82\x02\x03\xb8"s;
            auto const prefix0EncodedFingerprint =
                "\x30\x36\x80\x02\x50\x30\x81\x01\x0e\xa2\x2d\xa1\x2b\x80\x20"
                "\xf1\xf8\xd6\xe7\x27\x30\xca\x4d\x49\xe2\x26\xef\xdf\xaf\x77"
                "\xbb\x01\xd8\x93\x03\xb5\x2e\xf4\xa1\x54\x6e\xa9\x6b\x53\x4e"
                "\xf4\x68\x81\x03\x02\x14\x10\x82\x02\x03\xb8"s;
            check(
                &prefix0,
                prefix0Msg,
                prefix0EncodedFulfillment,
                prefix0EncodedCondition,
                prefix0EncodedFingerprint);
        }
    }

    void
    testPrefix12()
    {
        testcase("Prefix12");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * prefix0
        // ** prefix1
        // *** thresh2
        // **** Preim9Cond
        // **** Rsa10Cond
        // **** Ed11Cond
        // **** rsa3
        // **** thresh4
        // ***** Preim6Cond
        // ***** Rsa7Cond
        // ***** Ed8Cond
        // ***** rsa5

        auto const rsa3Msg = "P1P0abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa3PublicKey{
            {0xbd, 0xd1, 0xc7, 0xf0, 0xb0, 0x3a, 0xa5, 0x5b, 0x3e, 0x49, 0x8d,
             0x4e, 0x00, 0x54, 0x89, 0xb9, 0x89, 0xcd, 0x4b, 0x43, 0xde, 0x59,
             0xf6, 0x7a, 0x67, 0x5c, 0x3a, 0xc6, 0xcf, 0x82, 0x3f, 0x35, 0x9c,
             0xcc, 0xda, 0xcd, 0xd3, 0x97, 0x86, 0x5b, 0xe9, 0xf6, 0x05, 0x55,
             0x0b, 0x26, 0xef, 0x1e, 0x88, 0xd5, 0xb6, 0xba, 0x14, 0x0a, 0xb2,
             0x76, 0xb9, 0xb3, 0x46, 0x0c, 0xc0, 0x80, 0x17, 0x13, 0x68, 0x23,
             0xdc, 0xec, 0x10, 0x18, 0xfc, 0xaa, 0xbe, 0xb3, 0xc4, 0xc7, 0xa9,
             0x84, 0xa6, 0x4e, 0x5c, 0x08, 0x6b, 0x7b, 0x4c, 0x81, 0x91, 0x79,
             0x5d, 0x90, 0x06, 0x15, 0xbb, 0x76, 0x2f, 0x5c, 0x53, 0x60, 0x0f,
             0xac, 0xf3, 0x7c, 0x49, 0xc5, 0x47, 0xec, 0xb3, 0xda, 0x93, 0x87,
             0xc1, 0xb9, 0xcf, 0x2c, 0xb5, 0xf0, 0x85, 0xad, 0xb4, 0x38, 0x67,
             0x88, 0xda, 0x3d, 0xfa, 0x01, 0xb7, 0x54, 0xd9, 0x41, 0x0b, 0x7b,
             0x8a, 0x09, 0xe0, 0x84, 0x7d, 0xbb, 0x89, 0xb2, 0xfc, 0x0b, 0x70,
             0x36, 0x93, 0x56, 0x62, 0xcc, 0xb4, 0xfc, 0xf9, 0x1f, 0x37, 0x92,
             0x9b, 0x3a, 0x4e, 0x7c, 0xad, 0x4b, 0xa6, 0x76, 0x6f, 0xda, 0xc4,
             0x2f, 0x83, 0x53, 0xbd, 0x93, 0xa9, 0x76, 0x89, 0x53, 0xe1, 0x4d,
             0xee, 0x27, 0x11, 0x6f, 0xbc, 0x21, 0xad, 0x42, 0x9f, 0x29, 0xf6,
             0x03, 0xdd, 0xec, 0xfa, 0xa1, 0x78, 0xd2, 0xde, 0x29, 0x2e, 0xd8,
             0x3a, 0x7f, 0xe9, 0x9b, 0x5d, 0xeb, 0x37, 0xb8, 0xb0, 0xa0, 0x66,
             0x3f, 0x02, 0xcd, 0x2a, 0x6e, 0xd3, 0x1c, 0xa5, 0x65, 0xdc, 0x73,
             0xbe, 0x93, 0x54, 0x9a, 0x2b, 0xf8, 0x32, 0x8b, 0xe8, 0xce, 0x9a,
             0x59, 0xd0, 0x05, 0xeb, 0xbb, 0xac, 0xfc, 0x4c, 0x4b, 0x2e, 0xac,
             0x2a, 0xc3, 0x0f, 0x0a, 0xd7, 0x46, 0xaf, 0xfd, 0x22, 0x0d, 0x0d,
             0x54, 0xcc, 0x2f}};
        std::array<std::uint8_t, 256> const rsa3Sig{
            {0x95, 0xcc, 0x9d, 0x9a, 0xfe, 0x11, 0xf3, 0x5a, 0x7f, 0x5f, 0xab,
             0x3f, 0x75, 0x7f, 0x64, 0xd6, 0x33, 0x68, 0x08, 0xce, 0xbe, 0xbd,
             0x8d, 0xc8, 0xbe, 0x8f, 0x5b, 0xcf, 0x5a, 0x31, 0x00, 0xee, 0xd4,
             0x1b, 0x70, 0xc3, 0xcd, 0x67, 0xea, 0x45, 0xd7, 0x7c, 0x55, 0xf9,
             0x70, 0x38, 0xfa, 0x1d, 0x73, 0xa0, 0xe0, 0xa1, 0x39, 0x7d, 0x73,
             0x21, 0x10, 0x45, 0xfe, 0x52, 0x37, 0xb8, 0x9c, 0x0d, 0x56, 0xaf,
             0x12, 0xad, 0xe8, 0xfe, 0x9e, 0x82, 0x82, 0xaf, 0x14, 0xf6, 0x22,
             0x83, 0x06, 0xcc, 0x93, 0x3b, 0x8e, 0xef, 0x24, 0x5e, 0xaf, 0x2b,
             0x34, 0x76, 0xee, 0x2a, 0x01, 0x98, 0x2a, 0x06, 0xff, 0x05, 0xaf,
             0xa8, 0x63, 0x4e, 0xf7, 0xa9, 0xa2, 0x34, 0x3b, 0xfc, 0x8e, 0x80,
             0x79, 0x6d, 0x9e, 0xdd, 0x9a, 0x7c, 0x6c, 0x0c, 0x89, 0xaa, 0xa4,
             0x8e, 0xc0, 0xba, 0x6a, 0x2d, 0x43, 0x3b, 0x1c, 0x5f, 0xf8, 0xc5,
             0x71, 0xbe, 0x9c, 0x0d, 0x3f, 0xbd, 0x33, 0x7f, 0x6a, 0x68, 0x5c,
             0x87, 0x47, 0xa6, 0x57, 0x79, 0x5b, 0x8f, 0xe5, 0x71, 0x67, 0x32,
             0x5a, 0x6e, 0xf6, 0x87, 0x22, 0xe9, 0xa6, 0x5a, 0xe2, 0x8a, 0x97,
             0x92, 0x78, 0x6c, 0x16, 0x1e, 0xc2, 0x7b, 0xb1, 0x6b, 0x6f, 0x3b,
             0x1e, 0x76, 0xa1, 0x7f, 0x44, 0x00, 0xf1, 0xe4, 0x73, 0x03, 0xe6,
             0x9b, 0xad, 0x5c, 0x1a, 0x6f, 0x25, 0x79, 0x93, 0x8b, 0x85, 0x2a,
             0xa7, 0xb2, 0xc9, 0xf7, 0xc1, 0x89, 0x02, 0x97, 0x58, 0x21, 0xf0,
             0x8d, 0x23, 0x31, 0xc5, 0x78, 0x9b, 0x6b, 0x09, 0x34, 0x0d, 0x44,
             0x6a, 0x66, 0x7f, 0x58, 0x68, 0xca, 0xd2, 0xf7, 0x3f, 0x90, 0xb2,
             0xfb, 0x76, 0xe7, 0x32, 0xa0, 0x7e, 0xef, 0xf4, 0x4f, 0x25, 0xee,
             0xef, 0x54, 0xc8, 0x17, 0x97, 0xb2, 0xa3, 0x0e, 0x8e, 0xf1, 0x5a,
             0xde, 0xd4, 0x2c}};
        auto const rsa5Msg = "P1P0abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa5PublicKey{
            {0xc0, 0x00, 0xef, 0x8f, 0x4b, 0x81, 0x10, 0x1e, 0x52, 0xe0, 0x07,
             0x9f, 0x68, 0xe7, 0x2f, 0x92, 0xd4, 0x77, 0x3c, 0x1f, 0xa3, 0xff,
             0x72, 0x64, 0x5b, 0x37, 0xf1, 0xf3, 0xa3, 0xc5, 0xfb, 0xcd, 0xfb,
             0xda, 0xcc, 0x8b, 0x52, 0xe1, 0xde, 0xbc, 0x28, 0x8d, 0xe5, 0xad,
             0xab, 0x86, 0x61, 0x45, 0x97, 0x65, 0x37, 0x68, 0x26, 0x21, 0x92,
             0x17, 0xa3, 0xb0, 0x74, 0x5c, 0x8a, 0x45, 0x8d, 0x87, 0x5b, 0x9b,
             0xd1, 0x7b, 0x07, 0xc4, 0x8c, 0x67, 0xa0, 0xe9, 0x82, 0x0c, 0xe0,
             0x6b, 0xea, 0x91, 0x5c, 0xba, 0xe3, 0xd9, 0x9d, 0x39, 0xfd, 0x77,
             0xac, 0xcb, 0x33, 0x9b, 0x28, 0x51, 0x8d, 0xbf, 0x3e, 0xe4, 0x94,
             0x1c, 0x9a, 0x60, 0x71, 0x4b, 0x34, 0x07, 0x30, 0xda, 0x42, 0x46,
             0x0e, 0xb8, 0xb7, 0x2c, 0xf5, 0x2f, 0x4b, 0x9e, 0xe7, 0x64, 0x81,
             0xa1, 0xa2, 0x05, 0x66, 0x92, 0xe6, 0x75, 0x9f, 0x37, 0xae, 0x40,
             0xa9, 0x16, 0x08, 0x19, 0xe8, 0xdc, 0x47, 0xd6, 0x03, 0x29, 0xab,
             0xcc, 0x58, 0xa2, 0x37, 0x2a, 0x32, 0xb8, 0x15, 0xc7, 0x51, 0x91,
             0x73, 0xb9, 0x1d, 0xc6, 0xd0, 0x4f, 0x85, 0x86, 0xd5, 0xb3, 0x21,
             0x1a, 0x2a, 0x6c, 0xeb, 0x7f, 0xfe, 0x84, 0x17, 0x10, 0x2d, 0x0e,
             0xb4, 0xe1, 0xc2, 0x48, 0x4c, 0x3f, 0x61, 0xc7, 0x59, 0x75, 0xa7,
             0xc1, 0x75, 0xce, 0x67, 0x17, 0x42, 0x2a, 0x2f, 0x96, 0xef, 0x8a,
             0x2d, 0x74, 0xd2, 0x13, 0x68, 0xe1, 0xe9, 0xea, 0xfb, 0x73, 0x68,
             0xed, 0x8d, 0xd3, 0xac, 0x49, 0x09, 0xf9, 0xec, 0x62, 0xdf, 0x53,
             0xab, 0xfe, 0x90, 0x64, 0x4b, 0x92, 0x60, 0x0d, 0xdd, 0x00, 0xfe,
             0x02, 0xe6, 0xf3, 0x9b, 0x2b, 0xac, 0x4f, 0x70, 0xe8, 0x5b, 0x69,
             0x9c, 0x40, 0xd3, 0xeb, 0x37, 0xad, 0x6f, 0x37, 0xab, 0xf3, 0x79,
             0x8e, 0xcb, 0x1d}};
        std::array<std::uint8_t, 256> const rsa5Sig{
            {0x45, 0x08, 0x35, 0x36, 0x39, 0x85, 0xc4, 0x9c, 0xe2, 0x25, 0xb2,
             0x07, 0xed, 0x42, 0xf9, 0x8f, 0x6f, 0xf1, 0xf0, 0x02, 0x47, 0xf4,
             0xef, 0xe9, 0x24, 0x47, 0xb7, 0x3a, 0x40, 0x90, 0x93, 0x55, 0x12,
             0x1c, 0xb1, 0x14, 0xc0, 0x21, 0xd7, 0xb1, 0xfc, 0xcd, 0x98, 0x0c,
             0xbe, 0x50, 0x18, 0xdd, 0xf2, 0x03, 0xed, 0x72, 0x82, 0xff, 0xce,
             0xfd, 0x8a, 0xe3, 0x6c, 0x5d, 0x6a, 0x3b, 0x5b, 0x6c, 0xbc, 0x97,
             0xea, 0x15, 0xaa, 0x23, 0x38, 0x87, 0xe5, 0x28, 0x59, 0x4d, 0x50,
             0x21, 0x25, 0x9f, 0xf6, 0x5e, 0x6e, 0x1f, 0x1e, 0x59, 0x07, 0x88,
             0x3e, 0xa1, 0x97, 0x69, 0xb7, 0x02, 0xf6, 0xe6, 0xd9, 0x51, 0x21,
             0x28, 0x03, 0xac, 0x0e, 0xfe, 0x0c, 0x2b, 0x5b, 0xec, 0x94, 0xc0,
             0x2b, 0x74, 0x17, 0xde, 0x55, 0x3a, 0xcd, 0x8c, 0xa7, 0x78, 0xbd,
             0xed, 0x41, 0x67, 0xee, 0x05, 0xc7, 0xdd, 0xcb, 0x87, 0xe1, 0xb7,
             0x6c, 0x05, 0x54, 0xaf, 0xaa, 0x90, 0xcd, 0x1b, 0xc0, 0x1d, 0xa2,
             0x32, 0x91, 0xc1, 0x28, 0x5e, 0xd6, 0x13, 0xfd, 0xf3, 0xa1, 0x85,
             0xb4, 0xea, 0xf5, 0xa9, 0x4e, 0xd0, 0xcb, 0x64, 0xe8, 0x67, 0x25,
             0x9b, 0x30, 0x31, 0xb0, 0x9e, 0x29, 0x85, 0xe9, 0x07, 0xdc, 0xc6,
             0x00, 0xf6, 0xf5, 0x89, 0xf1, 0x6c, 0x7b, 0xc9, 0xd1, 0x0e, 0x02,
             0x0c, 0xa0, 0x19, 0x50, 0x86, 0x88, 0x7a, 0x8f, 0xc4, 0xa1, 0xcc,
             0x23, 0xf9, 0x1d, 0x6e, 0xde, 0xea, 0x19, 0x0f, 0x16, 0xc8, 0xbd,
             0xc1, 0xfd, 0xd6, 0xdf, 0x28, 0xb9, 0x8a, 0xcd, 0xe4, 0xc8, 0xef,
             0xa6, 0xd3, 0x8f, 0xe6, 0x03, 0x01, 0xb7, 0xdb, 0x2c, 0xb0, 0x80,
             0x9d, 0x6a, 0x87, 0x1a, 0x4f, 0x96, 0x6c, 0xda, 0xa6, 0x42, 0x48,
             0xef, 0xe0, 0x0c, 0x33, 0x54, 0xf9, 0x3f, 0x13, 0x6f, 0x39, 0x12,
             0x6d, 0x79, 0xd5}};
        auto const thresh4Msg = "P1P0abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim6CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim6Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim6CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa7CondConditionFingerprint =
            "\x6c\x7b\xea\x83\xa1\xf4\x82\x3d\x36\xe7\x6e\xae\x1a\xbc\xa0"
            "\xba\x90\x3d\x96\xc1\xe6\xad\x3a\x47\xa5\xcb\x88\xab\x3c\x5f"
            "\xcc\xd5"s;
        Condition const Rsa7Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa7CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed8CondConditionFingerprint =
            "\xf1\x68\x96\xa6\x2e\xef\x7f\x47\x06\x51\x4c\xc6\x7e\x24\xf7"
            "\x29\x84\x9c\xd6\xb0\xd9\x4b\xd9\x0f\xc9\x34\x01\x9d\x92\xeb"
            "\xbc\x0a"s;
        Condition const Ed8Cond{Type::ed25519Sha256,
                                131072,
                                makeSlice(Ed8CondConditionFingerprint),
                                std::bitset<5>{0}};
        auto const thresh2Msg = "P1P0abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim9CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim9Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim9CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa10CondConditionFingerprint =
            "\x3c\x73\x38\xcf\x23\xc6\x31\x53\x28\xc4\x27\xf8\x95\x87\x99"
            "\x83\x2d\x35\x3c\x03\x9b\xd1\xff\xff\x2e\x53\x20\xe9\x5e\x62"
            "\xb9\xb7"s;
        Condition const Rsa10Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa10CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed11CondConditionFingerprint =
            "\x41\x80\x08\xb2\x60\x74\x57\x6d\xac\xed\x74\x7f\x54\xdb\x96"
            "\x18\x91\x06\x0a\x95\xa1\x49\x17\xc7\x65\xe3\x94\xc8\x5e\x2c"
            "\x92\x20"s;
        Condition const Ed11Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed11CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const prefix1Prefix = "P1"s;
        auto const prefix1Msg = "P0abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix1MaxMsgLength = 14;
        auto const prefix0Prefix = "P0"s;
        auto const prefix0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix0MaxMsgLength = 14;

        auto rsa3 = std::make_unique<RsaSha256>(
            makeSlice(rsa3PublicKey), makeSlice(rsa3Sig));
        auto rsa5 = std::make_unique<RsaSha256>(
            makeSlice(rsa5PublicKey), makeSlice(rsa5Sig));
        std::vector<std::unique_ptr<Fulfillment>> thresh4Subfulfillments;
        thresh4Subfulfillments.emplace_back(std::move(rsa5));
        std::vector<Condition> thresh4Subconditions{
            {Preim6Cond, Rsa7Cond, Ed8Cond}};
        auto thresh4 = std::make_unique<ThresholdSha256>(
            std::move(thresh4Subfulfillments), std::move(thresh4Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh2Subfulfillments;
        thresh2Subfulfillments.emplace_back(std::move(rsa3));
        thresh2Subfulfillments.emplace_back(std::move(thresh4));
        std::vector<Condition> thresh2Subconditions{
            {Preim9Cond, Rsa10Cond, Ed11Cond}};
        auto thresh2 = std::make_unique<ThresholdSha256>(
            std::move(thresh2Subfulfillments), std::move(thresh2Subconditions));
        auto prefix1 = std::make_unique<PrefixSha256>(
            makeSlice(prefix1Prefix), prefix1MaxMsgLength, std::move(thresh2));
        PrefixSha256 const prefix0(
            makeSlice(prefix0Prefix), prefix0MaxMsgLength, std::move(prefix1));
        {
            auto const prefix0EncodedFulfillment =
                "\xa1\x82\x05\x38\x80\x02\x50\x30\x81\x01\x0e\xa2\x82\x05\x2d"
                "\xa1\x82\x05\x29\x80\x02\x50\x31\x81\x01\x0e\xa2\x82\x05\x1e"
                "\xa2\x82\x05\x1a\xa0\x82\x04\x9b\xa2\x82\x02\x8b\xa0\x82\x02"
                "\x0c\xa3\x82\x02\x08\x80\x82\x01\x00\xc0\x00\xef\x8f\x4b\x81"
                "\x10\x1e\x52\xe0\x07\x9f\x68\xe7\x2f\x92\xd4\x77\x3c\x1f\xa3"
                "\xff\x72\x64\x5b\x37\xf1\xf3\xa3\xc5\xfb\xcd\xfb\xda\xcc\x8b"
                "\x52\xe1\xde\xbc\x28\x8d\xe5\xad\xab\x86\x61\x45\x97\x65\x37"
                "\x68\x26\x21\x92\x17\xa3\xb0\x74\x5c\x8a\x45\x8d\x87\x5b\x9b"
                "\xd1\x7b\x07\xc4\x8c\x67\xa0\xe9\x82\x0c\xe0\x6b\xea\x91\x5c"
                "\xba\xe3\xd9\x9d\x39\xfd\x77\xac\xcb\x33\x9b\x28\x51\x8d\xbf"
                "\x3e\xe4\x94\x1c\x9a\x60\x71\x4b\x34\x07\x30\xda\x42\x46\x0e"
                "\xb8\xb7\x2c\xf5\x2f\x4b\x9e\xe7\x64\x81\xa1\xa2\x05\x66\x92"
                "\xe6\x75\x9f\x37\xae\x40\xa9\x16\x08\x19\xe8\xdc\x47\xd6\x03"
                "\x29\xab\xcc\x58\xa2\x37\x2a\x32\xb8\x15\xc7\x51\x91\x73\xb9"
                "\x1d\xc6\xd0\x4f\x85\x86\xd5\xb3\x21\x1a\x2a\x6c\xeb\x7f\xfe"
                "\x84\x17\x10\x2d\x0e\xb4\xe1\xc2\x48\x4c\x3f\x61\xc7\x59\x75"
                "\xa7\xc1\x75\xce\x67\x17\x42\x2a\x2f\x96\xef\x8a\x2d\x74\xd2"
                "\x13\x68\xe1\xe9\xea\xfb\x73\x68\xed\x8d\xd3\xac\x49\x09\xf9"
                "\xec\x62\xdf\x53\xab\xfe\x90\x64\x4b\x92\x60\x0d\xdd\x00\xfe"
                "\x02\xe6\xf3\x9b\x2b\xac\x4f\x70\xe8\x5b\x69\x9c\x40\xd3\xeb"
                "\x37\xad\x6f\x37\xab\xf3\x79\x8e\xcb\x1d\x81\x82\x01\x00\x45"
                "\x08\x35\x36\x39\x85\xc4\x9c\xe2\x25\xb2\x07\xed\x42\xf9\x8f"
                "\x6f\xf1\xf0\x02\x47\xf4\xef\xe9\x24\x47\xb7\x3a\x40\x90\x93"
                "\x55\x12\x1c\xb1\x14\xc0\x21\xd7\xb1\xfc\xcd\x98\x0c\xbe\x50"
                "\x18\xdd\xf2\x03\xed\x72\x82\xff\xce\xfd\x8a\xe3\x6c\x5d\x6a"
                "\x3b\x5b\x6c\xbc\x97\xea\x15\xaa\x23\x38\x87\xe5\x28\x59\x4d"
                "\x50\x21\x25\x9f\xf6\x5e\x6e\x1f\x1e\x59\x07\x88\x3e\xa1\x97"
                "\x69\xb7\x02\xf6\xe6\xd9\x51\x21\x28\x03\xac\x0e\xfe\x0c\x2b"
                "\x5b\xec\x94\xc0\x2b\x74\x17\xde\x55\x3a\xcd\x8c\xa7\x78\xbd"
                "\xed\x41\x67\xee\x05\xc7\xdd\xcb\x87\xe1\xb7\x6c\x05\x54\xaf"
                "\xaa\x90\xcd\x1b\xc0\x1d\xa2\x32\x91\xc1\x28\x5e\xd6\x13\xfd"
                "\xf3\xa1\x85\xb4\xea\xf5\xa9\x4e\xd0\xcb\x64\xe8\x67\x25\x9b"
                "\x30\x31\xb0\x9e\x29\x85\xe9\x07\xdc\xc6\x00\xf6\xf5\x89\xf1"
                "\x6c\x7b\xc9\xd1\x0e\x02\x0c\xa0\x19\x50\x86\x88\x7a\x8f\xc4"
                "\xa1\xcc\x23\xf9\x1d\x6e\xde\xea\x19\x0f\x16\xc8\xbd\xc1\xfd"
                "\xd6\xdf\x28\xb9\x8a\xcd\xe4\xc8\xef\xa6\xd3\x8f\xe6\x03\x01"
                "\xb7\xdb\x2c\xb0\x80\x9d\x6a\x87\x1a\x4f\x96\x6c\xda\xa6\x42"
                "\x48\xef\xe0\x0c\x33\x54\xf9\x3f\x13\x6f\x39\x12\x6d\x79\xd5"
                "\xa1\x79\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51"
                "\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68"
                "\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa3\x27\x80\x20"
                "\x6c\x7b\xea\x83\xa1\xf4\x82\x3d\x36\xe7\x6e\xae\x1a\xbc\xa0"
                "\xba\x90\x3d\x96\xc1\xe6\xad\x3a\x47\xa5\xcb\x88\xab\x3c\x5f"
                "\xcc\xd5\x81\x03\x01\x00\x00\xa4\x27\x80\x20\xf1\x68\x96\xa6"
                "\x2e\xef\x7f\x47\x06\x51\x4c\xc6\x7e\x24\xf7\x29\x84\x9c\xd6"
                "\xb0\xd9\x4b\xd9\x0f\xc9\x34\x01\x9d\x92\xeb\xbc\x0a\x81\x03"
                "\x02\x00\x00\xa3\x82\x02\x08\x80\x82\x01\x00\xbd\xd1\xc7\xf0"
                "\xb0\x3a\xa5\x5b\x3e\x49\x8d\x4e\x00\x54\x89\xb9\x89\xcd\x4b"
                "\x43\xde\x59\xf6\x7a\x67\x5c\x3a\xc6\xcf\x82\x3f\x35\x9c\xcc"
                "\xda\xcd\xd3\x97\x86\x5b\xe9\xf6\x05\x55\x0b\x26\xef\x1e\x88"
                "\xd5\xb6\xba\x14\x0a\xb2\x76\xb9\xb3\x46\x0c\xc0\x80\x17\x13"
                "\x68\x23\xdc\xec\x10\x18\xfc\xaa\xbe\xb3\xc4\xc7\xa9\x84\xa6"
                "\x4e\x5c\x08\x6b\x7b\x4c\x81\x91\x79\x5d\x90\x06\x15\xbb\x76"
                "\x2f\x5c\x53\x60\x0f\xac\xf3\x7c\x49\xc5\x47\xec\xb3\xda\x93"
                "\x87\xc1\xb9\xcf\x2c\xb5\xf0\x85\xad\xb4\x38\x67\x88\xda\x3d"
                "\xfa\x01\xb7\x54\xd9\x41\x0b\x7b\x8a\x09\xe0\x84\x7d\xbb\x89"
                "\xb2\xfc\x0b\x70\x36\x93\x56\x62\xcc\xb4\xfc\xf9\x1f\x37\x92"
                "\x9b\x3a\x4e\x7c\xad\x4b\xa6\x76\x6f\xda\xc4\x2f\x83\x53\xbd"
                "\x93\xa9\x76\x89\x53\xe1\x4d\xee\x27\x11\x6f\xbc\x21\xad\x42"
                "\x9f\x29\xf6\x03\xdd\xec\xfa\xa1\x78\xd2\xde\x29\x2e\xd8\x3a"
                "\x7f\xe9\x9b\x5d\xeb\x37\xb8\xb0\xa0\x66\x3f\x02\xcd\x2a\x6e"
                "\xd3\x1c\xa5\x65\xdc\x73\xbe\x93\x54\x9a\x2b\xf8\x32\x8b\xe8"
                "\xce\x9a\x59\xd0\x05\xeb\xbb\xac\xfc\x4c\x4b\x2e\xac\x2a\xc3"
                "\x0f\x0a\xd7\x46\xaf\xfd\x22\x0d\x0d\x54\xcc\x2f\x81\x82\x01"
                "\x00\x95\xcc\x9d\x9a\xfe\x11\xf3\x5a\x7f\x5f\xab\x3f\x75\x7f"
                "\x64\xd6\x33\x68\x08\xce\xbe\xbd\x8d\xc8\xbe\x8f\x5b\xcf\x5a"
                "\x31\x00\xee\xd4\x1b\x70\xc3\xcd\x67\xea\x45\xd7\x7c\x55\xf9"
                "\x70\x38\xfa\x1d\x73\xa0\xe0\xa1\x39\x7d\x73\x21\x10\x45\xfe"
                "\x52\x37\xb8\x9c\x0d\x56\xaf\x12\xad\xe8\xfe\x9e\x82\x82\xaf"
                "\x14\xf6\x22\x83\x06\xcc\x93\x3b\x8e\xef\x24\x5e\xaf\x2b\x34"
                "\x76\xee\x2a\x01\x98\x2a\x06\xff\x05\xaf\xa8\x63\x4e\xf7\xa9"
                "\xa2\x34\x3b\xfc\x8e\x80\x79\x6d\x9e\xdd\x9a\x7c\x6c\x0c\x89"
                "\xaa\xa4\x8e\xc0\xba\x6a\x2d\x43\x3b\x1c\x5f\xf8\xc5\x71\xbe"
                "\x9c\x0d\x3f\xbd\x33\x7f\x6a\x68\x5c\x87\x47\xa6\x57\x79\x5b"
                "\x8f\xe5\x71\x67\x32\x5a\x6e\xf6\x87\x22\xe9\xa6\x5a\xe2\x8a"
                "\x97\x92\x78\x6c\x16\x1e\xc2\x7b\xb1\x6b\x6f\x3b\x1e\x76\xa1"
                "\x7f\x44\x00\xf1\xe4\x73\x03\xe6\x9b\xad\x5c\x1a\x6f\x25\x79"
                "\x93\x8b\x85\x2a\xa7\xb2\xc9\xf7\xc1\x89\x02\x97\x58\x21\xf0"
                "\x8d\x23\x31\xc5\x78\x9b\x6b\x09\x34\x0d\x44\x6a\x66\x7f\x58"
                "\x68\xca\xd2\xf7\x3f\x90\xb2\xfb\x76\xe7\x32\xa0\x7e\xef\xf4"
                "\x4f\x25\xee\xef\x54\xc8\x17\x97\xb2\xa3\x0e\x8e\xf1\x5a\xde"
                "\xd4\x2c\xa1\x79\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75"
                "\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c"
                "\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa3\x27"
                "\x80\x20\x3c\x73\x38\xcf\x23\xc6\x31\x53\x28\xc4\x27\xf8\x95"
                "\x87\x99\x83\x2d\x35\x3c\x03\x9b\xd1\xff\xff\x2e\x53\x20\xe9"
                "\x5e\x62\xb9\xb7\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x41\x80"
                "\x08\xb2\x60\x74\x57\x6d\xac\xed\x74\x7f\x54\xdb\x96\x18\x91"
                "\x06\x0a\x95\xa1\x49\x17\xc7\x65\xe3\x94\xc8\x5e\x2c\x92\x20"
                "\x81\x03\x02\x00\x00"s;
            auto const prefix0EncodedCondition =
                "\xa1\x2b\x80\x20\x3d\x2d\x3f\x23\xc6\xf1\x4c\x82\xa4\x27\x52"
                "\xfa\xd8\x0a\x14\xe4\x38\x8d\x13\x31\x42\x35\xda\x1f\x48\x09"
                "\x85\x07\x5e\x2b\x19\x49\x81\x03\x04\x2c\x20\x82\x02\x03\xb8"s;
            auto const prefix0EncodedFingerprint =
                "\x30\x36\x80\x02\x50\x30\x81\x01\x0e\xa2\x2d\xa1\x2b\x80\x20"
                "\xfc\x57\x44\x31\xba\xd7\x2d\x95\xfa\xeb\xfc\x0c\x3a\x5c\x94"
                "\xfd\x56\xe0\x8d\x57\x03\xce\xd5\xac\x29\xf6\x8c\x2e\xbf\x5c"
                "\xe3\x38\x81\x03\x04\x28\x10\x82\x02\x03\xb8"s;
            check(
                &prefix0,
                prefix0Msg,
                prefix0EncodedFulfillment,
                prefix0EncodedCondition,
                prefix0EncodedFingerprint);
        }
    }

    void
    testPrefix13()
    {
        testcase("Prefix13");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * prefix0
        // ** prefix1
        // *** thresh2
        // **** Preim9Cond
        // **** Rsa10Cond
        // **** Ed11Cond
        // **** Thresh12Cond
        // **** rsa3
        // **** thresh4
        // ***** Preim6Cond
        // ***** Rsa7Cond
        // ***** Ed8Cond
        // ***** rsa5

        auto const rsa3Msg = "P1P0abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa3PublicKey{
            {0xbd, 0xd1, 0xc7, 0xf0, 0xb0, 0x3a, 0xa5, 0x5b, 0x3e, 0x49, 0x8d,
             0x4e, 0x00, 0x54, 0x89, 0xb9, 0x89, 0xcd, 0x4b, 0x43, 0xde, 0x59,
             0xf6, 0x7a, 0x67, 0x5c, 0x3a, 0xc6, 0xcf, 0x82, 0x3f, 0x35, 0x9c,
             0xcc, 0xda, 0xcd, 0xd3, 0x97, 0x86, 0x5b, 0xe9, 0xf6, 0x05, 0x55,
             0x0b, 0x26, 0xef, 0x1e, 0x88, 0xd5, 0xb6, 0xba, 0x14, 0x0a, 0xb2,
             0x76, 0xb9, 0xb3, 0x46, 0x0c, 0xc0, 0x80, 0x17, 0x13, 0x68, 0x23,
             0xdc, 0xec, 0x10, 0x18, 0xfc, 0xaa, 0xbe, 0xb3, 0xc4, 0xc7, 0xa9,
             0x84, 0xa6, 0x4e, 0x5c, 0x08, 0x6b, 0x7b, 0x4c, 0x81, 0x91, 0x79,
             0x5d, 0x90, 0x06, 0x15, 0xbb, 0x76, 0x2f, 0x5c, 0x53, 0x60, 0x0f,
             0xac, 0xf3, 0x7c, 0x49, 0xc5, 0x47, 0xec, 0xb3, 0xda, 0x93, 0x87,
             0xc1, 0xb9, 0xcf, 0x2c, 0xb5, 0xf0, 0x85, 0xad, 0xb4, 0x38, 0x67,
             0x88, 0xda, 0x3d, 0xfa, 0x01, 0xb7, 0x54, 0xd9, 0x41, 0x0b, 0x7b,
             0x8a, 0x09, 0xe0, 0x84, 0x7d, 0xbb, 0x89, 0xb2, 0xfc, 0x0b, 0x70,
             0x36, 0x93, 0x56, 0x62, 0xcc, 0xb4, 0xfc, 0xf9, 0x1f, 0x37, 0x92,
             0x9b, 0x3a, 0x4e, 0x7c, 0xad, 0x4b, 0xa6, 0x76, 0x6f, 0xda, 0xc4,
             0x2f, 0x83, 0x53, 0xbd, 0x93, 0xa9, 0x76, 0x89, 0x53, 0xe1, 0x4d,
             0xee, 0x27, 0x11, 0x6f, 0xbc, 0x21, 0xad, 0x42, 0x9f, 0x29, 0xf6,
             0x03, 0xdd, 0xec, 0xfa, 0xa1, 0x78, 0xd2, 0xde, 0x29, 0x2e, 0xd8,
             0x3a, 0x7f, 0xe9, 0x9b, 0x5d, 0xeb, 0x37, 0xb8, 0xb0, 0xa0, 0x66,
             0x3f, 0x02, 0xcd, 0x2a, 0x6e, 0xd3, 0x1c, 0xa5, 0x65, 0xdc, 0x73,
             0xbe, 0x93, 0x54, 0x9a, 0x2b, 0xf8, 0x32, 0x8b, 0xe8, 0xce, 0x9a,
             0x59, 0xd0, 0x05, 0xeb, 0xbb, 0xac, 0xfc, 0x4c, 0x4b, 0x2e, 0xac,
             0x2a, 0xc3, 0x0f, 0x0a, 0xd7, 0x46, 0xaf, 0xfd, 0x22, 0x0d, 0x0d,
             0x54, 0xcc, 0x2f}};
        std::array<std::uint8_t, 256> const rsa3Sig{
            {0x99, 0x8e, 0xff, 0x5b, 0x04, 0x7f, 0x70, 0xe4, 0x2c, 0x73, 0xa6,
             0x20, 0x94, 0xa9, 0xe7, 0xa1, 0x6a, 0x9b, 0xd7, 0x45, 0xc8, 0x94,
             0x7c, 0x91, 0x6a, 0x59, 0x97, 0x6c, 0xcf, 0x05, 0x60, 0x87, 0x12,
             0x1d, 0x4c, 0x25, 0x93, 0x09, 0x03, 0x56, 0x95, 0xb0, 0xe9, 0x8a,
             0xd5, 0x67, 0xc2, 0xef, 0x33, 0x03, 0x74, 0x40, 0x43, 0x2a, 0x41,
             0xcf, 0x2c, 0xbe, 0xa4, 0x65, 0x29, 0x93, 0xce, 0xd4, 0x7e, 0x59,
             0x4d, 0x34, 0xd3, 0xcc, 0x07, 0x8c, 0xd5, 0x8c, 0xd6, 0x4c, 0xb1,
             0x9b, 0x61, 0xee, 0x5d, 0x4c, 0x2c, 0xb5, 0x1a, 0x5b, 0x43, 0xa6,
             0x09, 0x29, 0x28, 0xa4, 0xe5, 0xeb, 0x8e, 0x40, 0x59, 0xd4, 0x28,
             0x3a, 0x59, 0xd8, 0x84, 0xb4, 0x89, 0x46, 0xc2, 0x73, 0xb7, 0x37,
             0x7b, 0x6a, 0xf6, 0xbe, 0x5d, 0xe8, 0x71, 0x8b, 0x2f, 0x06, 0xb3,
             0x74, 0xa2, 0xd8, 0x16, 0x5a, 0x8f, 0xa2, 0x27, 0xa8, 0xe5, 0x37,
             0xc0, 0xc7, 0x03, 0x59, 0x90, 0x40, 0x1f, 0xa0, 0x55, 0x07, 0xac,
             0xc7, 0x8a, 0xea, 0x1d, 0x64, 0xa7, 0x59, 0x2c, 0x9e, 0x34, 0x5c,
             0x98, 0xea, 0xb0, 0x58, 0xe2, 0x38, 0xed, 0x2c, 0xae, 0x6a, 0xd8,
             0xbb, 0xc5, 0x4f, 0x0c, 0x2d, 0x52, 0xe9, 0x2e, 0xde, 0x06, 0xa4,
             0x99, 0x2e, 0x5a, 0xb0, 0x6d, 0x2e, 0x82, 0xd7, 0xb4, 0x9e, 0x09,
             0x43, 0x19, 0xaa, 0x3f, 0x17, 0x9f, 0x0c, 0x63, 0xb9, 0xb2, 0xa1,
             0x87, 0x9f, 0xd0, 0x1a, 0x21, 0xa0, 0xf6, 0x6b, 0xb0, 0x3a, 0xbe,
             0xfe, 0xf0, 0xc0, 0xc9, 0xc7, 0x81, 0xae, 0x63, 0x7f, 0xcc, 0x1b,
             0xb4, 0x45, 0x31, 0x94, 0xeb, 0x66, 0x4f, 0x38, 0x09, 0xeb, 0xc6,
             0xbd, 0x65, 0xb6, 0x4a, 0xeb, 0x42, 0x27, 0xd0, 0x2a, 0x84, 0x79,
             0x67, 0x85, 0x25, 0xe5, 0x3d, 0x11, 0x14, 0x30, 0xe4, 0x74, 0x7c,
             0x56, 0xcb, 0x48}};
        auto const rsa5Msg = "P1P0abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa5PublicKey{
            {0xc0, 0x00, 0xef, 0x8f, 0x4b, 0x81, 0x10, 0x1e, 0x52, 0xe0, 0x07,
             0x9f, 0x68, 0xe7, 0x2f, 0x92, 0xd4, 0x77, 0x3c, 0x1f, 0xa3, 0xff,
             0x72, 0x64, 0x5b, 0x37, 0xf1, 0xf3, 0xa3, 0xc5, 0xfb, 0xcd, 0xfb,
             0xda, 0xcc, 0x8b, 0x52, 0xe1, 0xde, 0xbc, 0x28, 0x8d, 0xe5, 0xad,
             0xab, 0x86, 0x61, 0x45, 0x97, 0x65, 0x37, 0x68, 0x26, 0x21, 0x92,
             0x17, 0xa3, 0xb0, 0x74, 0x5c, 0x8a, 0x45, 0x8d, 0x87, 0x5b, 0x9b,
             0xd1, 0x7b, 0x07, 0xc4, 0x8c, 0x67, 0xa0, 0xe9, 0x82, 0x0c, 0xe0,
             0x6b, 0xea, 0x91, 0x5c, 0xba, 0xe3, 0xd9, 0x9d, 0x39, 0xfd, 0x77,
             0xac, 0xcb, 0x33, 0x9b, 0x28, 0x51, 0x8d, 0xbf, 0x3e, 0xe4, 0x94,
             0x1c, 0x9a, 0x60, 0x71, 0x4b, 0x34, 0x07, 0x30, 0xda, 0x42, 0x46,
             0x0e, 0xb8, 0xb7, 0x2c, 0xf5, 0x2f, 0x4b, 0x9e, 0xe7, 0x64, 0x81,
             0xa1, 0xa2, 0x05, 0x66, 0x92, 0xe6, 0x75, 0x9f, 0x37, 0xae, 0x40,
             0xa9, 0x16, 0x08, 0x19, 0xe8, 0xdc, 0x47, 0xd6, 0x03, 0x29, 0xab,
             0xcc, 0x58, 0xa2, 0x37, 0x2a, 0x32, 0xb8, 0x15, 0xc7, 0x51, 0x91,
             0x73, 0xb9, 0x1d, 0xc6, 0xd0, 0x4f, 0x85, 0x86, 0xd5, 0xb3, 0x21,
             0x1a, 0x2a, 0x6c, 0xeb, 0x7f, 0xfe, 0x84, 0x17, 0x10, 0x2d, 0x0e,
             0xb4, 0xe1, 0xc2, 0x48, 0x4c, 0x3f, 0x61, 0xc7, 0x59, 0x75, 0xa7,
             0xc1, 0x75, 0xce, 0x67, 0x17, 0x42, 0x2a, 0x2f, 0x96, 0xef, 0x8a,
             0x2d, 0x74, 0xd2, 0x13, 0x68, 0xe1, 0xe9, 0xea, 0xfb, 0x73, 0x68,
             0xed, 0x8d, 0xd3, 0xac, 0x49, 0x09, 0xf9, 0xec, 0x62, 0xdf, 0x53,
             0xab, 0xfe, 0x90, 0x64, 0x4b, 0x92, 0x60, 0x0d, 0xdd, 0x00, 0xfe,
             0x02, 0xe6, 0xf3, 0x9b, 0x2b, 0xac, 0x4f, 0x70, 0xe8, 0x5b, 0x69,
             0x9c, 0x40, 0xd3, 0xeb, 0x37, 0xad, 0x6f, 0x37, 0xab, 0xf3, 0x79,
             0x8e, 0xcb, 0x1d}};
        std::array<std::uint8_t, 256> const rsa5Sig{
            {0x29, 0x36, 0xdb, 0xae, 0x23, 0x43, 0x87, 0xfe, 0x9d, 0xc2, 0xf7,
             0xf6, 0x40, 0x26, 0xf8, 0x78, 0xed, 0x3f, 0xbf, 0x86, 0x51, 0x62,
             0x9a, 0x74, 0x16, 0xf7, 0x25, 0xd1, 0x23, 0x86, 0xe8, 0x31, 0x4f,
             0x2e, 0xbd, 0x06, 0x25, 0x0f, 0x55, 0xb1, 0x31, 0xc3, 0xb4, 0xfb,
             0xc7, 0x56, 0x4b, 0x5b, 0xa8, 0x31, 0x40, 0x63, 0x79, 0x06, 0xf0,
             0xae, 0xe1, 0xf6, 0xb8, 0xf1, 0xf4, 0x68, 0x9b, 0x24, 0x55, 0xcd,
             0x5b, 0xd3, 0x17, 0xd8, 0x6d, 0xed, 0xe9, 0x03, 0xde, 0xe7, 0x63,
             0x1e, 0xc5, 0x7f, 0x4c, 0x84, 0x23, 0x5e, 0x06, 0x76, 0xf5, 0xb0,
             0xc1, 0x43, 0x03, 0xc7, 0x94, 0x14, 0x91, 0x27, 0x2c, 0x52, 0xa8,
             0xda, 0xc6, 0x90, 0x7e, 0xf7, 0x71, 0x74, 0xb4, 0x24, 0x5f, 0xdd,
             0x25, 0x87, 0xff, 0x20, 0xe4, 0x1f, 0x3e, 0xf6, 0x76, 0x46, 0x70,
             0x7d, 0x94, 0x1a, 0x28, 0x3f, 0x06, 0xec, 0x22, 0x6b, 0xc5, 0x46,
             0xe6, 0xad, 0x72, 0x65, 0x08, 0x24, 0x5b, 0x26, 0x2c, 0x68, 0x97,
             0xa9, 0xce, 0xf6, 0x93, 0xcb, 0xe4, 0x6c, 0x66, 0x00, 0x3d, 0x4a,
             0xef, 0xb1, 0x43, 0xf5, 0x0e, 0xa5, 0xa1, 0xa6, 0x94, 0x17, 0xaa,
             0x71, 0xf4, 0x52, 0xf4, 0x49, 0x72, 0x1f, 0x33, 0x96, 0xf0, 0x64,
             0x03, 0x49, 0x0f, 0x3b, 0xce, 0x00, 0x3f, 0x5e, 0x9a, 0x6d, 0xb9,
             0xf7, 0x84, 0x81, 0x8a, 0xd6, 0x0f, 0x3e, 0x7f, 0xa3, 0xe5, 0x15,
             0x97, 0x1e, 0x71, 0x08, 0xad, 0x9e, 0xde, 0x2e, 0xa1, 0xe2, 0x0e,
             0xf7, 0x0c, 0x86, 0x78, 0x08, 0xb0, 0xbb, 0xd4, 0x8a, 0x41, 0x2d,
             0xd3, 0xca, 0x9a, 0x7a, 0x38, 0xcc, 0xd9, 0x30, 0xf2, 0x7e, 0x01,
             0xa3, 0x04, 0x8f, 0xab, 0xc5, 0xae, 0xc7, 0x0f, 0xc3, 0x44, 0x28,
             0xbc, 0x57, 0x60, 0xb1, 0xa6, 0x36, 0x16, 0x85, 0xfd, 0x85, 0x9d,
             0x4b, 0x84, 0xa9}};
        auto const thresh4Msg = "P1P0abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim6CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim6Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim6CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa7CondConditionFingerprint =
            "\x6c\x7b\xea\x83\xa1\xf4\x82\x3d\x36\xe7\x6e\xae\x1a\xbc\xa0"
            "\xba\x90\x3d\x96\xc1\xe6\xad\x3a\x47\xa5\xcb\x88\xab\x3c\x5f"
            "\xcc\xd5"s;
        Condition const Rsa7Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa7CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed8CondConditionFingerprint =
            "\xf1\x68\x96\xa6\x2e\xef\x7f\x47\x06\x51\x4c\xc6\x7e\x24\xf7"
            "\x29\x84\x9c\xd6\xb0\xd9\x4b\xd9\x0f\xc9\x34\x01\x9d\x92\xeb"
            "\xbc\x0a"s;
        Condition const Ed8Cond{Type::ed25519Sha256,
                                131072,
                                makeSlice(Ed8CondConditionFingerprint),
                                std::bitset<5>{0}};
        auto const thresh2Msg = "P1P0abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim9CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim9Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim9CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa10CondConditionFingerprint =
            "\x3c\x73\x38\xcf\x23\xc6\x31\x53\x28\xc4\x27\xf8\x95\x87\x99"
            "\x83\x2d\x35\x3c\x03\x9b\xd1\xff\xff\x2e\x53\x20\xe9\x5e\x62"
            "\xb9\xb7"s;
        Condition const Rsa10Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa10CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed11CondConditionFingerprint =
            "\x41\x80\x08\xb2\x60\x74\x57\x6d\xac\xed\x74\x7f\x54\xdb\x96"
            "\x18\x91\x06\x0a\x95\xa1\x49\x17\xc7\x65\xe3\x94\xc8\x5e\x2c"
            "\x92\x20"s;
        Condition const Ed11Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed11CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Thresh12CondConditionFingerprint =
            "\x03\xb7\x57\xb9\x56\x68\xc6\x36\x20\x05\x2b\xd6\x6f\x92\x23"
            "\x03\x30\xa8\x6f\x6e\xd9\x64\x9c\xd0\xc2\x02\x89\xc3\xcf\xe9"
            "\xce\x85"s;
        Condition const Thresh12Cond{
            Type::thresholdSha256,
            135168,
            makeSlice(Thresh12CondConditionFingerprint),
            std::bitset<5>{25}};
        auto const prefix1Prefix = "P1"s;
        auto const prefix1Msg = "P0abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix1MaxMsgLength = 14;
        auto const prefix0Prefix = "P0"s;
        auto const prefix0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix0MaxMsgLength = 14;

        auto rsa3 = std::make_unique<RsaSha256>(
            makeSlice(rsa3PublicKey), makeSlice(rsa3Sig));
        auto rsa5 = std::make_unique<RsaSha256>(
            makeSlice(rsa5PublicKey), makeSlice(rsa5Sig));
        std::vector<std::unique_ptr<Fulfillment>> thresh4Subfulfillments;
        thresh4Subfulfillments.emplace_back(std::move(rsa5));
        std::vector<Condition> thresh4Subconditions{
            {Preim6Cond, Rsa7Cond, Ed8Cond}};
        auto thresh4 = std::make_unique<ThresholdSha256>(
            std::move(thresh4Subfulfillments), std::move(thresh4Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh2Subfulfillments;
        thresh2Subfulfillments.emplace_back(std::move(rsa3));
        thresh2Subfulfillments.emplace_back(std::move(thresh4));
        std::vector<Condition> thresh2Subconditions{
            {Preim9Cond, Rsa10Cond, Ed11Cond, Thresh12Cond}};
        auto thresh2 = std::make_unique<ThresholdSha256>(
            std::move(thresh2Subfulfillments), std::move(thresh2Subconditions));
        auto prefix1 = std::make_unique<PrefixSha256>(
            makeSlice(prefix1Prefix), prefix1MaxMsgLength, std::move(thresh2));
        PrefixSha256 const prefix0(
            makeSlice(prefix0Prefix), prefix0MaxMsgLength, std::move(prefix1));
        {
            auto const prefix0EncodedFulfillment =
                "\xa1\x82\x05\x66\x80\x02\x50\x30\x81\x01\x0e\xa2\x82\x05\x5b"
                "\xa1\x82\x05\x57\x80\x02\x50\x31\x81\x01\x0e\xa2\x82\x05\x4c"
                "\xa2\x82\x05\x48\xa0\x82\x04\x9b\xa2\x82\x02\x8b\xa0\x82\x02"
                "\x0c\xa3\x82\x02\x08\x80\x82\x01\x00\xc0\x00\xef\x8f\x4b\x81"
                "\x10\x1e\x52\xe0\x07\x9f\x68\xe7\x2f\x92\xd4\x77\x3c\x1f\xa3"
                "\xff\x72\x64\x5b\x37\xf1\xf3\xa3\xc5\xfb\xcd\xfb\xda\xcc\x8b"
                "\x52\xe1\xde\xbc\x28\x8d\xe5\xad\xab\x86\x61\x45\x97\x65\x37"
                "\x68\x26\x21\x92\x17\xa3\xb0\x74\x5c\x8a\x45\x8d\x87\x5b\x9b"
                "\xd1\x7b\x07\xc4\x8c\x67\xa0\xe9\x82\x0c\xe0\x6b\xea\x91\x5c"
                "\xba\xe3\xd9\x9d\x39\xfd\x77\xac\xcb\x33\x9b\x28\x51\x8d\xbf"
                "\x3e\xe4\x94\x1c\x9a\x60\x71\x4b\x34\x07\x30\xda\x42\x46\x0e"
                "\xb8\xb7\x2c\xf5\x2f\x4b\x9e\xe7\x64\x81\xa1\xa2\x05\x66\x92"
                "\xe6\x75\x9f\x37\xae\x40\xa9\x16\x08\x19\xe8\xdc\x47\xd6\x03"
                "\x29\xab\xcc\x58\xa2\x37\x2a\x32\xb8\x15\xc7\x51\x91\x73\xb9"
                "\x1d\xc6\xd0\x4f\x85\x86\xd5\xb3\x21\x1a\x2a\x6c\xeb\x7f\xfe"
                "\x84\x17\x10\x2d\x0e\xb4\xe1\xc2\x48\x4c\x3f\x61\xc7\x59\x75"
                "\xa7\xc1\x75\xce\x67\x17\x42\x2a\x2f\x96\xef\x8a\x2d\x74\xd2"
                "\x13\x68\xe1\xe9\xea\xfb\x73\x68\xed\x8d\xd3\xac\x49\x09\xf9"
                "\xec\x62\xdf\x53\xab\xfe\x90\x64\x4b\x92\x60\x0d\xdd\x00\xfe"
                "\x02\xe6\xf3\x9b\x2b\xac\x4f\x70\xe8\x5b\x69\x9c\x40\xd3\xeb"
                "\x37\xad\x6f\x37\xab\xf3\x79\x8e\xcb\x1d\x81\x82\x01\x00\x29"
                "\x36\xdb\xae\x23\x43\x87\xfe\x9d\xc2\xf7\xf6\x40\x26\xf8\x78"
                "\xed\x3f\xbf\x86\x51\x62\x9a\x74\x16\xf7\x25\xd1\x23\x86\xe8"
                "\x31\x4f\x2e\xbd\x06\x25\x0f\x55\xb1\x31\xc3\xb4\xfb\xc7\x56"
                "\x4b\x5b\xa8\x31\x40\x63\x79\x06\xf0\xae\xe1\xf6\xb8\xf1\xf4"
                "\x68\x9b\x24\x55\xcd\x5b\xd3\x17\xd8\x6d\xed\xe9\x03\xde\xe7"
                "\x63\x1e\xc5\x7f\x4c\x84\x23\x5e\x06\x76\xf5\xb0\xc1\x43\x03"
                "\xc7\x94\x14\x91\x27\x2c\x52\xa8\xda\xc6\x90\x7e\xf7\x71\x74"
                "\xb4\x24\x5f\xdd\x25\x87\xff\x20\xe4\x1f\x3e\xf6\x76\x46\x70"
                "\x7d\x94\x1a\x28\x3f\x06\xec\x22\x6b\xc5\x46\xe6\xad\x72\x65"
                "\x08\x24\x5b\x26\x2c\x68\x97\xa9\xce\xf6\x93\xcb\xe4\x6c\x66"
                "\x00\x3d\x4a\xef\xb1\x43\xf5\x0e\xa5\xa1\xa6\x94\x17\xaa\x71"
                "\xf4\x52\xf4\x49\x72\x1f\x33\x96\xf0\x64\x03\x49\x0f\x3b\xce"
                "\x00\x3f\x5e\x9a\x6d\xb9\xf7\x84\x81\x8a\xd6\x0f\x3e\x7f\xa3"
                "\xe5\x15\x97\x1e\x71\x08\xad\x9e\xde\x2e\xa1\xe2\x0e\xf7\x0c"
                "\x86\x78\x08\xb0\xbb\xd4\x8a\x41\x2d\xd3\xca\x9a\x7a\x38\xcc"
                "\xd9\x30\xf2\x7e\x01\xa3\x04\x8f\xab\xc5\xae\xc7\x0f\xc3\x44"
                "\x28\xbc\x57\x60\xb1\xa6\x36\x16\x85\xfd\x85\x9d\x4b\x84\xa9"
                "\xa1\x79\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51"
                "\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68"
                "\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa3\x27\x80\x20"
                "\x6c\x7b\xea\x83\xa1\xf4\x82\x3d\x36\xe7\x6e\xae\x1a\xbc\xa0"
                "\xba\x90\x3d\x96\xc1\xe6\xad\x3a\x47\xa5\xcb\x88\xab\x3c\x5f"
                "\xcc\xd5\x81\x03\x01\x00\x00\xa4\x27\x80\x20\xf1\x68\x96\xa6"
                "\x2e\xef\x7f\x47\x06\x51\x4c\xc6\x7e\x24\xf7\x29\x84\x9c\xd6"
                "\xb0\xd9\x4b\xd9\x0f\xc9\x34\x01\x9d\x92\xeb\xbc\x0a\x81\x03"
                "\x02\x00\x00\xa3\x82\x02\x08\x80\x82\x01\x00\xbd\xd1\xc7\xf0"
                "\xb0\x3a\xa5\x5b\x3e\x49\x8d\x4e\x00\x54\x89\xb9\x89\xcd\x4b"
                "\x43\xde\x59\xf6\x7a\x67\x5c\x3a\xc6\xcf\x82\x3f\x35\x9c\xcc"
                "\xda\xcd\xd3\x97\x86\x5b\xe9\xf6\x05\x55\x0b\x26\xef\x1e\x88"
                "\xd5\xb6\xba\x14\x0a\xb2\x76\xb9\xb3\x46\x0c\xc0\x80\x17\x13"
                "\x68\x23\xdc\xec\x10\x18\xfc\xaa\xbe\xb3\xc4\xc7\xa9\x84\xa6"
                "\x4e\x5c\x08\x6b\x7b\x4c\x81\x91\x79\x5d\x90\x06\x15\xbb\x76"
                "\x2f\x5c\x53\x60\x0f\xac\xf3\x7c\x49\xc5\x47\xec\xb3\xda\x93"
                "\x87\xc1\xb9\xcf\x2c\xb5\xf0\x85\xad\xb4\x38\x67\x88\xda\x3d"
                "\xfa\x01\xb7\x54\xd9\x41\x0b\x7b\x8a\x09\xe0\x84\x7d\xbb\x89"
                "\xb2\xfc\x0b\x70\x36\x93\x56\x62\xcc\xb4\xfc\xf9\x1f\x37\x92"
                "\x9b\x3a\x4e\x7c\xad\x4b\xa6\x76\x6f\xda\xc4\x2f\x83\x53\xbd"
                "\x93\xa9\x76\x89\x53\xe1\x4d\xee\x27\x11\x6f\xbc\x21\xad\x42"
                "\x9f\x29\xf6\x03\xdd\xec\xfa\xa1\x78\xd2\xde\x29\x2e\xd8\x3a"
                "\x7f\xe9\x9b\x5d\xeb\x37\xb8\xb0\xa0\x66\x3f\x02\xcd\x2a\x6e"
                "\xd3\x1c\xa5\x65\xdc\x73\xbe\x93\x54\x9a\x2b\xf8\x32\x8b\xe8"
                "\xce\x9a\x59\xd0\x05\xeb\xbb\xac\xfc\x4c\x4b\x2e\xac\x2a\xc3"
                "\x0f\x0a\xd7\x46\xaf\xfd\x22\x0d\x0d\x54\xcc\x2f\x81\x82\x01"
                "\x00\x99\x8e\xff\x5b\x04\x7f\x70\xe4\x2c\x73\xa6\x20\x94\xa9"
                "\xe7\xa1\x6a\x9b\xd7\x45\xc8\x94\x7c\x91\x6a\x59\x97\x6c\xcf"
                "\x05\x60\x87\x12\x1d\x4c\x25\x93\x09\x03\x56\x95\xb0\xe9\x8a"
                "\xd5\x67\xc2\xef\x33\x03\x74\x40\x43\x2a\x41\xcf\x2c\xbe\xa4"
                "\x65\x29\x93\xce\xd4\x7e\x59\x4d\x34\xd3\xcc\x07\x8c\xd5\x8c"
                "\xd6\x4c\xb1\x9b\x61\xee\x5d\x4c\x2c\xb5\x1a\x5b\x43\xa6\x09"
                "\x29\x28\xa4\xe5\xeb\x8e\x40\x59\xd4\x28\x3a\x59\xd8\x84\xb4"
                "\x89\x46\xc2\x73\xb7\x37\x7b\x6a\xf6\xbe\x5d\xe8\x71\x8b\x2f"
                "\x06\xb3\x74\xa2\xd8\x16\x5a\x8f\xa2\x27\xa8\xe5\x37\xc0\xc7"
                "\x03\x59\x90\x40\x1f\xa0\x55\x07\xac\xc7\x8a\xea\x1d\x64\xa7"
                "\x59\x2c\x9e\x34\x5c\x98\xea\xb0\x58\xe2\x38\xed\x2c\xae\x6a"
                "\xd8\xbb\xc5\x4f\x0c\x2d\x52\xe9\x2e\xde\x06\xa4\x99\x2e\x5a"
                "\xb0\x6d\x2e\x82\xd7\xb4\x9e\x09\x43\x19\xaa\x3f\x17\x9f\x0c"
                "\x63\xb9\xb2\xa1\x87\x9f\xd0\x1a\x21\xa0\xf6\x6b\xb0\x3a\xbe"
                "\xfe\xf0\xc0\xc9\xc7\x81\xae\x63\x7f\xcc\x1b\xb4\x45\x31\x94"
                "\xeb\x66\x4f\x38\x09\xeb\xc6\xbd\x65\xb6\x4a\xeb\x42\x27\xd0"
                "\x2a\x84\x79\x67\x85\x25\xe5\x3d\x11\x14\x30\xe4\x74\x7c\x56"
                "\xcb\x48\xa1\x81\xa6\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1"
                "\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21"
                "\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa2"
                "\x2b\x80\x20\x03\xb7\x57\xb9\x56\x68\xc6\x36\x20\x05\x2b\xd6"
                "\x6f\x92\x23\x03\x30\xa8\x6f\x6e\xd9\x64\x9c\xd0\xc2\x02\x89"
                "\xc3\xcf\xe9\xce\x85\x81\x03\x02\x10\x00\x82\x02\x03\x98\xa3"
                "\x27\x80\x20\x3c\x73\x38\xcf\x23\xc6\x31\x53\x28\xc4\x27\xf8"
                "\x95\x87\x99\x83\x2d\x35\x3c\x03\x9b\xd1\xff\xff\x2e\x53\x20"
                "\xe9\x5e\x62\xb9\xb7\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x41"
                "\x80\x08\xb2\x60\x74\x57\x6d\xac\xed\x74\x7f\x54\xdb\x96\x18"
                "\x91\x06\x0a\x95\xa1\x49\x17\xc7\x65\xe3\x94\xc8\x5e\x2c\x92"
                "\x20\x81\x03\x02\x00\x00"s;
            auto const prefix0EncodedCondition =
                "\xa1\x2b\x80\x20\x95\x13\xee\x55\x02\x8a\x6c\x0d\xc9\x1c\x2c"
                "\xaf\xa3\x5f\x06\xf2\x9d\x46\xe6\xfe\x3f\x9f\x63\x66\xff\x0a"
                "\x5a\x28\x91\x1f\xe5\xca\x81\x03\x04\x40\x20\x82\x02\x03\xb8"s;
            auto const prefix0EncodedFingerprint =
                "\x30\x36\x80\x02\x50\x30\x81\x01\x0e\xa2\x2d\xa1\x2b\x80\x20"
                "\x01\xc0\xb5\xd8\xa7\x80\x84\x80\x29\xa9\xbe\x52\x62\xaf\xb6"
                "\x50\xa6\x3e\x77\xc1\xb2\xc4\x17\x4f\x50\xda\x3e\x8b\x12\xd1"
                "\xc7\xaa\x81\x03\x04\x3c\x10\x82\x02\x03\xb8"s;
            check(
                &prefix0,
                prefix0Msg,
                prefix0EncodedFulfillment,
                prefix0EncodedCondition,
                prefix0EncodedFingerprint);
        }
    }

    void
    testThresh28()
    {
        testcase("Thresh28");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * thresh0
        // ** Preim9Cond
        // ** Rsa10Cond
        // ** Ed11Cond
        // ** prefix1
        // *** prefix2
        // **** rsa3
        // ** prefix4
        // *** prefix5
        // **** rsa6
        // ** thresh7
        // *** rsa8

        auto const rsa3Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa3PublicKey{
            {0xbd, 0xd1, 0xc7, 0xf0, 0xb0, 0x3a, 0xa5, 0x5b, 0x3e, 0x49, 0x8d,
             0x4e, 0x00, 0x54, 0x89, 0xb9, 0x89, 0xcd, 0x4b, 0x43, 0xde, 0x59,
             0xf6, 0x7a, 0x67, 0x5c, 0x3a, 0xc6, 0xcf, 0x82, 0x3f, 0x35, 0x9c,
             0xcc, 0xda, 0xcd, 0xd3, 0x97, 0x86, 0x5b, 0xe9, 0xf6, 0x05, 0x55,
             0x0b, 0x26, 0xef, 0x1e, 0x88, 0xd5, 0xb6, 0xba, 0x14, 0x0a, 0xb2,
             0x76, 0xb9, 0xb3, 0x46, 0x0c, 0xc0, 0x80, 0x17, 0x13, 0x68, 0x23,
             0xdc, 0xec, 0x10, 0x18, 0xfc, 0xaa, 0xbe, 0xb3, 0xc4, 0xc7, 0xa9,
             0x84, 0xa6, 0x4e, 0x5c, 0x08, 0x6b, 0x7b, 0x4c, 0x81, 0x91, 0x79,
             0x5d, 0x90, 0x06, 0x15, 0xbb, 0x76, 0x2f, 0x5c, 0x53, 0x60, 0x0f,
             0xac, 0xf3, 0x7c, 0x49, 0xc5, 0x47, 0xec, 0xb3, 0xda, 0x93, 0x87,
             0xc1, 0xb9, 0xcf, 0x2c, 0xb5, 0xf0, 0x85, 0xad, 0xb4, 0x38, 0x67,
             0x88, 0xda, 0x3d, 0xfa, 0x01, 0xb7, 0x54, 0xd9, 0x41, 0x0b, 0x7b,
             0x8a, 0x09, 0xe0, 0x84, 0x7d, 0xbb, 0x89, 0xb2, 0xfc, 0x0b, 0x70,
             0x36, 0x93, 0x56, 0x62, 0xcc, 0xb4, 0xfc, 0xf9, 0x1f, 0x37, 0x92,
             0x9b, 0x3a, 0x4e, 0x7c, 0xad, 0x4b, 0xa6, 0x76, 0x6f, 0xda, 0xc4,
             0x2f, 0x83, 0x53, 0xbd, 0x93, 0xa9, 0x76, 0x89, 0x53, 0xe1, 0x4d,
             0xee, 0x27, 0x11, 0x6f, 0xbc, 0x21, 0xad, 0x42, 0x9f, 0x29, 0xf6,
             0x03, 0xdd, 0xec, 0xfa, 0xa1, 0x78, 0xd2, 0xde, 0x29, 0x2e, 0xd8,
             0x3a, 0x7f, 0xe9, 0x9b, 0x5d, 0xeb, 0x37, 0xb8, 0xb0, 0xa0, 0x66,
             0x3f, 0x02, 0xcd, 0x2a, 0x6e, 0xd3, 0x1c, 0xa5, 0x65, 0xdc, 0x73,
             0xbe, 0x93, 0x54, 0x9a, 0x2b, 0xf8, 0x32, 0x8b, 0xe8, 0xce, 0x9a,
             0x59, 0xd0, 0x05, 0xeb, 0xbb, 0xac, 0xfc, 0x4c, 0x4b, 0x2e, 0xac,
             0x2a, 0xc3, 0x0f, 0x0a, 0xd7, 0x46, 0xaf, 0xfd, 0x22, 0x0d, 0x0d,
             0x54, 0xcc, 0x2f}};
        std::array<std::uint8_t, 256> const rsa3Sig{
            {0xba, 0xb1, 0xb1, 0x0c, 0x8f, 0x93, 0x55, 0x37, 0x65, 0x43, 0x29,
             0xfe, 0x29, 0x90, 0x40, 0x47, 0x4f, 0x8b, 0xef, 0xc4, 0x23, 0xa8,
             0x2d, 0x20, 0x60, 0x84, 0xb2, 0xd0, 0x28, 0xa1, 0x1f, 0xbe, 0x3e,
             0xe5, 0x4c, 0xa3, 0xe5, 0x91, 0xda, 0xd0, 0x86, 0xf4, 0x1c, 0x06,
             0xe1, 0xec, 0x2f, 0xd5, 0x18, 0xa6, 0x01, 0x49, 0x4a, 0x8f, 0x34,
             0x7c, 0xab, 0x65, 0x22, 0xef, 0xab, 0xec, 0x55, 0xf4, 0x1e, 0xcf,
             0xdd, 0xae, 0xd7, 0x4f, 0x64, 0x84, 0x9e, 0xe1, 0x1b, 0x89, 0x16,
             0x39, 0x88, 0x31, 0xea, 0xe5, 0x40, 0x9b, 0xd2, 0x49, 0x20, 0x4b,
             0x0c, 0x0c, 0x3c, 0x53, 0x3c, 0x82, 0xf2, 0x38, 0xd5, 0x39, 0x8b,
             0x68, 0xa1, 0xb2, 0x5e, 0xd6, 0x14, 0xc5, 0xfe, 0x22, 0x2f, 0x31,
             0xba, 0x9b, 0x5f, 0x23, 0xb2, 0xc0, 0xab, 0x61, 0x55, 0xe4, 0xbf,
             0x8f, 0x85, 0xb1, 0x67, 0x6a, 0xc4, 0x2a, 0x88, 0x9c, 0xf0, 0x85,
             0xce, 0x74, 0x8a, 0xf9, 0xbc, 0xf1, 0x96, 0xd7, 0x2d, 0xb0, 0x42,
             0xbd, 0x49, 0xea, 0x2f, 0x68, 0x66, 0xa7, 0xf9, 0xca, 0xf3, 0x07,
             0x48, 0x84, 0x5e, 0xf9, 0x82, 0xdd, 0x05, 0x62, 0x19, 0x1b, 0xac,
             0x70, 0xba, 0xaf, 0x3f, 0x8b, 0x88, 0x83, 0x8f, 0x9d, 0xb0, 0x9c,
             0xd5, 0x56, 0xff, 0xba, 0x61, 0xcd, 0xe9, 0xcd, 0x7e, 0x5c, 0x28,
             0x9f, 0x37, 0x5c, 0xd6, 0x24, 0xbe, 0x4e, 0x9e, 0x44, 0x1b, 0xa9,
             0xae, 0x31, 0xc6, 0x44, 0x51, 0xec, 0x71, 0xfc, 0x42, 0x91, 0xaf,
             0xdc, 0xf8, 0xa0, 0xe6, 0xa0, 0xc5, 0x7d, 0x6e, 0xf1, 0x15, 0x08,
             0x7c, 0x5f, 0x2e, 0x1f, 0xc6, 0x21, 0x7a, 0x53, 0x30, 0x64, 0x22,
             0x36, 0xbc, 0x28, 0x9d, 0x16, 0x99, 0x76, 0x24, 0xbf, 0xea, 0xd7,
             0xdf, 0xc1, 0x5e, 0x05, 0x50, 0xa3, 0x0e, 0x32, 0x75, 0x35, 0xbf,
             0x86, 0x04, 0x03}};
        auto const prefix2Prefix = "P2"s;
        auto const prefix2Msg = "P1abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix2MaxMsgLength = 14;
        auto const prefix1Prefix = "P1"s;
        auto const prefix1Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix1MaxMsgLength = 14;
        auto const rsa6Msg = "P5P4abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa6PublicKey{
            {0xd0, 0x07, 0xfc, 0x9d, 0xb0, 0xa1, 0xa6, 0x40, 0xe4, 0x52, 0x30,
             0x42, 0x74, 0xfd, 0x35, 0x04, 0xde, 0x45, 0x68, 0xb3, 0x22, 0xdd,
             0xff, 0x41, 0x43, 0x69, 0x33, 0xc0, 0xff, 0x35, 0xb6, 0x6d, 0x15,
             0xe9, 0x54, 0x15, 0xeb, 0x1d, 0x07, 0xe2, 0x25, 0x2b, 0xdb, 0xaa,
             0x16, 0x8d, 0x0d, 0x7f, 0x05, 0xf0, 0xd2, 0x7d, 0xb4, 0x9b, 0x51,
             0x19, 0x20, 0x1e, 0x3d, 0xba, 0x50, 0x9e, 0x51, 0x13, 0x81, 0x43,
             0x55, 0x96, 0xca, 0xdb, 0x88, 0x1f, 0xef, 0x2d, 0x38, 0x3f, 0xae,
             0x8d, 0xac, 0xc8, 0x6f, 0x2b, 0xd5, 0xf0, 0x34, 0x1a, 0x99, 0x00,
             0x7c, 0x6d, 0xb3, 0x1b, 0x1d, 0x68, 0xdb, 0xf8, 0x1c, 0x59, 0x3a,
             0x63, 0x38, 0x7c, 0x1c, 0x14, 0xbc, 0x22, 0xcf, 0xc8, 0x9a, 0xc6,
             0x96, 0x6f, 0x3d, 0x03, 0x0b, 0x61, 0x6b, 0x7d, 0x75, 0x97, 0xe8,
             0x25, 0xb8, 0x2f, 0xfa, 0xf4, 0x07, 0x44, 0xdf, 0x00, 0x3d, 0xff,
             0x0d, 0xd5, 0x7f, 0x7f, 0xf3, 0x0c, 0x13, 0xac, 0x8d, 0xf8, 0x8c,
             0x79, 0xc5, 0xf3, 0x29, 0xdc, 0x23, 0x65, 0xd3, 0xd1, 0x1c, 0xa6,
             0x14, 0x78, 0x6a, 0x1a, 0xe3, 0x15, 0x8d, 0x8b, 0xdc, 0xa0, 0x5a,
             0xc7, 0x82, 0xb0, 0x03, 0x6c, 0x71, 0x43, 0x59, 0x24, 0xc7, 0x50,
             0x64, 0xb2, 0xa7, 0x69, 0xf5, 0xbd, 0xe6, 0x5e, 0xaa, 0x77, 0x59,
             0x60, 0x36, 0xc0, 0xe3, 0x42, 0x7f, 0x05, 0x3b, 0x4c, 0x02, 0x0e,
             0x70, 0x5a, 0x70, 0xc5, 0x2a, 0xeb, 0x94, 0x4d, 0x15, 0x09, 0xef,
             0xbb, 0x58, 0x42, 0x68, 0x05, 0x59, 0x70, 0xa0, 0x17, 0xb2, 0x8e,
             0xdf, 0x7b, 0x40, 0x5d, 0x21, 0x1e, 0xfe, 0x62, 0x58, 0xde, 0xfb,
             0x14, 0x91, 0x18, 0xf3, 0x4f, 0x9b, 0x36, 0x55, 0xcf, 0xb3, 0x5e,
             0xec, 0x4f, 0xcc, 0x6d, 0x13, 0x58, 0xc8, 0xa3, 0xa3, 0xee, 0x23,
             0x8a, 0xc2, 0xbf}};
        std::array<std::uint8_t, 256> const rsa6Sig{
            {0x19, 0xad, 0x71, 0x7d, 0x5f, 0x18, 0x4f, 0x20, 0xa8, 0xfa, 0xa8,
             0x6f, 0xf0, 0x1b, 0x67, 0xb6, 0x45, 0x0b, 0xf3, 0xa0, 0x86, 0x9f,
             0x36, 0xac, 0x4e, 0x9e, 0x96, 0xd8, 0x28, 0xae, 0x46, 0xaa, 0x1d,
             0x75, 0xc6, 0x46, 0x1d, 0xd5, 0xd4, 0xac, 0xa9, 0xfc, 0x11, 0x0d,
             0x6f, 0x10, 0x47, 0x1e, 0x20, 0x8d, 0x62, 0x14, 0x87, 0x36, 0xbf,
             0x72, 0xe3, 0x35, 0x4a, 0x43, 0x9d, 0x26, 0xfa, 0x4f, 0x3f, 0x65,
             0x03, 0x03, 0x4a, 0xff, 0x1e, 0x5f, 0xdc, 0x3c, 0x74, 0x1e, 0x43,
             0xd7, 0x05, 0x8a, 0xad, 0x7e, 0x7b, 0x2c, 0x22, 0x59, 0x72, 0xde,
             0xd3, 0xda, 0xb5, 0x25, 0xef, 0xeb, 0x0e, 0xda, 0x63, 0xea, 0x40,
             0x9a, 0x82, 0xb8, 0xad, 0x94, 0x41, 0x36, 0x2e, 0x94, 0xf6, 0x92,
             0x3f, 0x7e, 0x21, 0xeb, 0xc2, 0xf4, 0x60, 0x90, 0xd1, 0xd1, 0x9f,
             0x60, 0x3c, 0x14, 0xf5, 0x9c, 0x3e, 0x78, 0x32, 0x87, 0x98, 0x0a,
             0xeb, 0xe9, 0xa2, 0x1f, 0xd9, 0xf5, 0x87, 0x24, 0xa6, 0x0c, 0xf7,
             0xa9, 0x29, 0xcc, 0x97, 0x77, 0xc9, 0x64, 0x95, 0xfb, 0x04, 0xa8,
             0xa2, 0x0a, 0x0e, 0x2c, 0x5d, 0xf2, 0x43, 0x2e, 0xb6, 0xf0, 0x77,
             0x37, 0x16, 0xfd, 0x80, 0xf1, 0xbb, 0x8c, 0xd0, 0x80, 0x7a, 0x2e,
             0x8b, 0x47, 0x50, 0x5b, 0x52, 0x25, 0x5d, 0x61, 0x04, 0xf4, 0x8e,
             0xf9, 0x4d, 0xe8, 0x5b, 0x44, 0xde, 0x4f, 0xfc, 0xd8, 0xe1, 0xd1,
             0x81, 0x6c, 0x3c, 0x7f, 0x3e, 0x03, 0x4e, 0x31, 0x8e, 0xb6, 0x3d,
             0x87, 0x95, 0x64, 0xc4, 0xa3, 0xb8, 0xab, 0x99, 0x0c, 0x32, 0x39,
             0x09, 0xe0, 0x02, 0x7c, 0x00, 0xbf, 0xed, 0x69, 0x13, 0x92, 0x4d,
             0xc6, 0x96, 0xce, 0x69, 0x9f, 0xc3, 0x4a, 0xcd, 0x8a, 0x30, 0x2a,
             0xd8, 0xb7, 0x00, 0x42, 0x91, 0xba, 0xbe, 0x6f, 0x2a, 0x28, 0x80,
             0x78, 0x21, 0xc7}};
        auto const prefix5Prefix = "P5"s;
        auto const prefix5Msg = "P4abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix5MaxMsgLength = 14;
        auto const prefix4Prefix = "P4"s;
        auto const prefix4Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix4MaxMsgLength = 14;
        auto const rsa8Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa8PublicKey{
            {0xb7, 0xf9, 0xf2, 0x4e, 0xc8, 0xd9, 0x79, 0xcb, 0x92, 0xdb, 0x0d,
             0x2d, 0x81, 0x30, 0x23, 0x20, 0xc1, 0x2f, 0x97, 0xd1, 0x90, 0x5e,
             0x52, 0x73, 0x04, 0x8d, 0x23, 0x6b, 0x9c, 0xe9, 0x7f, 0xb0, 0xda,
             0x3a, 0x75, 0x84, 0x60, 0xd2, 0xac, 0x55, 0xc5, 0x2a, 0x8e, 0x25,
             0x17, 0x64, 0x3e, 0x0d, 0x0f, 0x1f, 0x9c, 0x1d, 0x04, 0xfe, 0x36,
             0x26, 0xb7, 0x4b, 0xeb, 0xed, 0xa4, 0x73, 0x25, 0x86, 0x45, 0xa1,
             0x34, 0x33, 0xf3, 0xdd, 0x06, 0xd1, 0x8a, 0xc8, 0x9d, 0x00, 0x69,
             0xf2, 0x72, 0x7f, 0x00, 0x28, 0x08, 0x7b, 0x8b, 0x31, 0x1c, 0xf3,
             0xd3, 0x3f, 0x46, 0xc6, 0xc6, 0xa7, 0x29, 0x89, 0xbc, 0x85, 0x1e,
             0xb8, 0x01, 0x8e, 0xe1, 0xf2, 0x6e, 0xe3, 0x08, 0xa8, 0x4d, 0x7d,
             0x6c, 0x0f, 0x67, 0x1b, 0x1d, 0xbf, 0x88, 0xbe, 0x0b, 0x0e, 0x6f,
             0x20, 0xa8, 0xff, 0x2c, 0xea, 0x04, 0xb3, 0x95, 0xe4, 0x2d, 0xb3,
             0x72, 0xcf, 0xd7, 0x09, 0xca, 0xc9, 0x71, 0x41, 0x6c, 0x12, 0x91,
             0x16, 0x2a, 0x25, 0xb4, 0x2c, 0x5d, 0x6b, 0xdf, 0x39, 0x02, 0xd7,
             0xf7, 0xd8, 0xbd, 0x2a, 0xac, 0x8a, 0xcb, 0x40, 0x75, 0x16, 0x1e,
             0xbf, 0xd3, 0x87, 0x47, 0x21, 0x0d, 0xcb, 0x8a, 0xe3, 0x45, 0x8f,
             0x1d, 0xad, 0x13, 0xfc, 0xe5, 0x14, 0xf2, 0xea, 0x3d, 0x14, 0x30,
             0x5a, 0x47, 0xce, 0xb1, 0xe1, 0x53, 0xae, 0x1f, 0x0b, 0x9a, 0x2f,
             0xe1, 0x15, 0x58, 0x71, 0x1d, 0xbd, 0x89, 0xdd, 0xb1, 0x01, 0x08,
             0xe3, 0x5b, 0x9c, 0x5a, 0x50, 0x96, 0x50, 0x70, 0x6f, 0x5a, 0x54,
             0xce, 0x0c, 0x7a, 0xb6, 0x1a, 0xbc, 0xd1, 0xe3, 0x23, 0xe3, 0xe8,
             0xb6, 0x9d, 0xbe, 0xa9, 0x2f, 0x82, 0x23, 0xcc, 0x46, 0x2e, 0xe9,
             0xe4, 0xa2, 0xdd, 0x4b, 0xff, 0x55, 0x56, 0x78, 0x53, 0xdc, 0xf1,
             0x5a, 0xfe, 0x53}};
        std::array<std::uint8_t, 256> const rsa8Sig{
            {0x14, 0x43, 0x6a, 0x75, 0x67, 0x1b, 0x98, 0xd7, 0xe9, 0xde, 0xea,
             0xc8, 0xcb, 0xfc, 0x2e, 0x08, 0x8b, 0x32, 0x30, 0x6a, 0x90, 0x53,
             0x25, 0xef, 0x52, 0x00, 0xb6, 0x0c, 0xcc, 0xeb, 0xc9, 0x96, 0x5a,
             0x43, 0xa7, 0x6d, 0x0f, 0xfd, 0x7d, 0x9e, 0x7c, 0x54, 0xca, 0x10,
             0x20, 0x8f, 0x16, 0xca, 0xb5, 0x59, 0x43, 0x9c, 0x3a, 0xb8, 0xae,
             0xeb, 0xcf, 0x6b, 0x50, 0xfe, 0x3b, 0xc8, 0xff, 0xab, 0x7c, 0xf0,
             0x28, 0xa9, 0xd6, 0x22, 0xf3, 0x60, 0x71, 0x1a, 0x99, 0xb6, 0xa7,
             0x61, 0x80, 0xb7, 0xb0, 0x50, 0xc0, 0x01, 0xb8, 0xe9, 0xec, 0x9f,
             0x43, 0xca, 0xb8, 0xf7, 0x20, 0x23, 0xe4, 0x66, 0x9d, 0x07, 0x13,
             0x39, 0x41, 0x8b, 0x6b, 0x2a, 0xf7, 0xf2, 0xd9, 0x60, 0x4c, 0x2b,
             0x2a, 0xc4, 0x37, 0xe4, 0xf4, 0x31, 0xeb, 0xa4, 0xb0, 0xfb, 0x29,
             0x17, 0x8f, 0x87, 0x57, 0xc0, 0xe5, 0xb2, 0xe4, 0xca, 0x5c, 0x66,
             0x64, 0xd1, 0xbb, 0xfd, 0x55, 0x8e, 0x78, 0x53, 0xb5, 0xed, 0x41,
             0xdc, 0x6c, 0x9d, 0x69, 0xd2, 0x40, 0xf2, 0x70, 0x90, 0x10, 0x8d,
             0x93, 0xf7, 0x63, 0x73, 0x51, 0x3c, 0xcf, 0xdf, 0xb3, 0x54, 0x9e,
             0x31, 0x23, 0xee, 0xee, 0x0b, 0x26, 0xd0, 0x8f, 0xe5, 0xc4, 0x5d,
             0xc2, 0xf9, 0x4a, 0x76, 0x0e, 0x81, 0x75, 0xf5, 0x69, 0xec, 0x10,
             0xc2, 0x94, 0xe9, 0x32, 0xa3, 0xd7, 0x4d, 0xfc, 0x7d, 0x52, 0xd7,
             0xe0, 0x6b, 0x4b, 0x1f, 0x41, 0x89, 0x37, 0x8a, 0x67, 0x23, 0x57,
             0x99, 0x76, 0xc8, 0xa3, 0x76, 0xab, 0xcc, 0xa5, 0x12, 0xdf, 0x38,
             0x1b, 0x92, 0x02, 0xd8, 0x8f, 0xc9, 0x9e, 0xd5, 0xb9, 0x5b, 0xf3,
             0x44, 0xe9, 0x72, 0xf7, 0x3a, 0xbf, 0x46, 0x1e, 0x9f, 0x0c, 0x9e,
             0x24, 0x5f, 0x0e, 0x9a, 0x8c, 0xf8, 0x92, 0x87, 0x11, 0x44, 0x48,
             0x72, 0x8e, 0x39}};
        auto const thresh7Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const thresh0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim9CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim9Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim9CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa10CondConditionFingerprint =
            "\x3c\x73\x38\xcf\x23\xc6\x31\x53\x28\xc4\x27\xf8\x95\x87\x99"
            "\x83\x2d\x35\x3c\x03\x9b\xd1\xff\xff\x2e\x53\x20\xe9\x5e\x62"
            "\xb9\xb7"s;
        Condition const Rsa10Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa10CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed11CondConditionFingerprint =
            "\x41\x80\x08\xb2\x60\x74\x57\x6d\xac\xed\x74\x7f\x54\xdb\x96"
            "\x18\x91\x06\x0a\x95\xa1\x49\x17\xc7\x65\xe3\x94\xc8\x5e\x2c"
            "\x92\x20"s;
        Condition const Ed11Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed11CondConditionFingerprint),
                                 std::bitset<5>{0}};

        auto rsa3 = std::make_unique<RsaSha256>(
            makeSlice(rsa3PublicKey), makeSlice(rsa3Sig));
        auto prefix2 = std::make_unique<PrefixSha256>(
            makeSlice(prefix2Prefix), prefix2MaxMsgLength, std::move(rsa3));
        auto prefix1 = std::make_unique<PrefixSha256>(
            makeSlice(prefix1Prefix), prefix1MaxMsgLength, std::move(prefix2));
        auto rsa6 = std::make_unique<RsaSha256>(
            makeSlice(rsa6PublicKey), makeSlice(rsa6Sig));
        auto prefix5 = std::make_unique<PrefixSha256>(
            makeSlice(prefix5Prefix), prefix5MaxMsgLength, std::move(rsa6));
        auto prefix4 = std::make_unique<PrefixSha256>(
            makeSlice(prefix4Prefix), prefix4MaxMsgLength, std::move(prefix5));
        auto rsa8 = std::make_unique<RsaSha256>(
            makeSlice(rsa8PublicKey), makeSlice(rsa8Sig));
        std::vector<std::unique_ptr<Fulfillment>> thresh7Subfulfillments;
        thresh7Subfulfillments.emplace_back(std::move(rsa8));
        std::vector<Condition> thresh7Subconditions{};
        auto thresh7 = std::make_unique<ThresholdSha256>(
            std::move(thresh7Subfulfillments), std::move(thresh7Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh0Subfulfillments;
        thresh0Subfulfillments.emplace_back(std::move(prefix1));
        thresh0Subfulfillments.emplace_back(std::move(prefix4));
        thresh0Subfulfillments.emplace_back(std::move(thresh7));
        std::vector<Condition> thresh0Subconditions{
            {Preim9Cond, Rsa10Cond, Ed11Cond}};
        ThresholdSha256 const thresh0(
            std::move(thresh0Subfulfillments), std::move(thresh0Subconditions));
        {
            auto const thresh0EncodedFulfillment =
                "\xa2\x82\x06\xe9\xa0\x82\x06\x6a\xa1\x82\x02\x26\x80\x02\x50"
                "\x31\x81\x01\x0e\xa2\x82\x02\x1b\xa1\x82\x02\x17\x80\x02\x50"
                "\x32\x81\x01\x0e\xa2\x82\x02\x0c\xa3\x82\x02\x08\x80\x82\x01"
                "\x00\xbd\xd1\xc7\xf0\xb0\x3a\xa5\x5b\x3e\x49\x8d\x4e\x00\x54"
                "\x89\xb9\x89\xcd\x4b\x43\xde\x59\xf6\x7a\x67\x5c\x3a\xc6\xcf"
                "\x82\x3f\x35\x9c\xcc\xda\xcd\xd3\x97\x86\x5b\xe9\xf6\x05\x55"
                "\x0b\x26\xef\x1e\x88\xd5\xb6\xba\x14\x0a\xb2\x76\xb9\xb3\x46"
                "\x0c\xc0\x80\x17\x13\x68\x23\xdc\xec\x10\x18\xfc\xaa\xbe\xb3"
                "\xc4\xc7\xa9\x84\xa6\x4e\x5c\x08\x6b\x7b\x4c\x81\x91\x79\x5d"
                "\x90\x06\x15\xbb\x76\x2f\x5c\x53\x60\x0f\xac\xf3\x7c\x49\xc5"
                "\x47\xec\xb3\xda\x93\x87\xc1\xb9\xcf\x2c\xb5\xf0\x85\xad\xb4"
                "\x38\x67\x88\xda\x3d\xfa\x01\xb7\x54\xd9\x41\x0b\x7b\x8a\x09"
                "\xe0\x84\x7d\xbb\x89\xb2\xfc\x0b\x70\x36\x93\x56\x62\xcc\xb4"
                "\xfc\xf9\x1f\x37\x92\x9b\x3a\x4e\x7c\xad\x4b\xa6\x76\x6f\xda"
                "\xc4\x2f\x83\x53\xbd\x93\xa9\x76\x89\x53\xe1\x4d\xee\x27\x11"
                "\x6f\xbc\x21\xad\x42\x9f\x29\xf6\x03\xdd\xec\xfa\xa1\x78\xd2"
                "\xde\x29\x2e\xd8\x3a\x7f\xe9\x9b\x5d\xeb\x37\xb8\xb0\xa0\x66"
                "\x3f\x02\xcd\x2a\x6e\xd3\x1c\xa5\x65\xdc\x73\xbe\x93\x54\x9a"
                "\x2b\xf8\x32\x8b\xe8\xce\x9a\x59\xd0\x05\xeb\xbb\xac\xfc\x4c"
                "\x4b\x2e\xac\x2a\xc3\x0f\x0a\xd7\x46\xaf\xfd\x22\x0d\x0d\x54"
                "\xcc\x2f\x81\x82\x01\x00\xba\xb1\xb1\x0c\x8f\x93\x55\x37\x65"
                "\x43\x29\xfe\x29\x90\x40\x47\x4f\x8b\xef\xc4\x23\xa8\x2d\x20"
                "\x60\x84\xb2\xd0\x28\xa1\x1f\xbe\x3e\xe5\x4c\xa3\xe5\x91\xda"
                "\xd0\x86\xf4\x1c\x06\xe1\xec\x2f\xd5\x18\xa6\x01\x49\x4a\x8f"
                "\x34\x7c\xab\x65\x22\xef\xab\xec\x55\xf4\x1e\xcf\xdd\xae\xd7"
                "\x4f\x64\x84\x9e\xe1\x1b\x89\x16\x39\x88\x31\xea\xe5\x40\x9b"
                "\xd2\x49\x20\x4b\x0c\x0c\x3c\x53\x3c\x82\xf2\x38\xd5\x39\x8b"
                "\x68\xa1\xb2\x5e\xd6\x14\xc5\xfe\x22\x2f\x31\xba\x9b\x5f\x23"
                "\xb2\xc0\xab\x61\x55\xe4\xbf\x8f\x85\xb1\x67\x6a\xc4\x2a\x88"
                "\x9c\xf0\x85\xce\x74\x8a\xf9\xbc\xf1\x96\xd7\x2d\xb0\x42\xbd"
                "\x49\xea\x2f\x68\x66\xa7\xf9\xca\xf3\x07\x48\x84\x5e\xf9\x82"
                "\xdd\x05\x62\x19\x1b\xac\x70\xba\xaf\x3f\x8b\x88\x83\x8f\x9d"
                "\xb0\x9c\xd5\x56\xff\xba\x61\xcd\xe9\xcd\x7e\x5c\x28\x9f\x37"
                "\x5c\xd6\x24\xbe\x4e\x9e\x44\x1b\xa9\xae\x31\xc6\x44\x51\xec"
                "\x71\xfc\x42\x91\xaf\xdc\xf8\xa0\xe6\xa0\xc5\x7d\x6e\xf1\x15"
                "\x08\x7c\x5f\x2e\x1f\xc6\x21\x7a\x53\x30\x64\x22\x36\xbc\x28"
                "\x9d\x16\x99\x76\x24\xbf\xea\xd7\xdf\xc1\x5e\x05\x50\xa3\x0e"
                "\x32\x75\x35\xbf\x86\x04\x03\xa1\x82\x02\x26\x80\x02\x50\x34"
                "\x81\x01\x0e\xa2\x82\x02\x1b\xa1\x82\x02\x17\x80\x02\x50\x35"
                "\x81\x01\x0e\xa2\x82\x02\x0c\xa3\x82\x02\x08\x80\x82\x01\x00"
                "\xd0\x07\xfc\x9d\xb0\xa1\xa6\x40\xe4\x52\x30\x42\x74\xfd\x35"
                "\x04\xde\x45\x68\xb3\x22\xdd\xff\x41\x43\x69\x33\xc0\xff\x35"
                "\xb6\x6d\x15\xe9\x54\x15\xeb\x1d\x07\xe2\x25\x2b\xdb\xaa\x16"
                "\x8d\x0d\x7f\x05\xf0\xd2\x7d\xb4\x9b\x51\x19\x20\x1e\x3d\xba"
                "\x50\x9e\x51\x13\x81\x43\x55\x96\xca\xdb\x88\x1f\xef\x2d\x38"
                "\x3f\xae\x8d\xac\xc8\x6f\x2b\xd5\xf0\x34\x1a\x99\x00\x7c\x6d"
                "\xb3\x1b\x1d\x68\xdb\xf8\x1c\x59\x3a\x63\x38\x7c\x1c\x14\xbc"
                "\x22\xcf\xc8\x9a\xc6\x96\x6f\x3d\x03\x0b\x61\x6b\x7d\x75\x97"
                "\xe8\x25\xb8\x2f\xfa\xf4\x07\x44\xdf\x00\x3d\xff\x0d\xd5\x7f"
                "\x7f\xf3\x0c\x13\xac\x8d\xf8\x8c\x79\xc5\xf3\x29\xdc\x23\x65"
                "\xd3\xd1\x1c\xa6\x14\x78\x6a\x1a\xe3\x15\x8d\x8b\xdc\xa0\x5a"
                "\xc7\x82\xb0\x03\x6c\x71\x43\x59\x24\xc7\x50\x64\xb2\xa7\x69"
                "\xf5\xbd\xe6\x5e\xaa\x77\x59\x60\x36\xc0\xe3\x42\x7f\x05\x3b"
                "\x4c\x02\x0e\x70\x5a\x70\xc5\x2a\xeb\x94\x4d\x15\x09\xef\xbb"
                "\x58\x42\x68\x05\x59\x70\xa0\x17\xb2\x8e\xdf\x7b\x40\x5d\x21"
                "\x1e\xfe\x62\x58\xde\xfb\x14\x91\x18\xf3\x4f\x9b\x36\x55\xcf"
                "\xb3\x5e\xec\x4f\xcc\x6d\x13\x58\xc8\xa3\xa3\xee\x23\x8a\xc2"
                "\xbf\x81\x82\x01\x00\x19\xad\x71\x7d\x5f\x18\x4f\x20\xa8\xfa"
                "\xa8\x6f\xf0\x1b\x67\xb6\x45\x0b\xf3\xa0\x86\x9f\x36\xac\x4e"
                "\x9e\x96\xd8\x28\xae\x46\xaa\x1d\x75\xc6\x46\x1d\xd5\xd4\xac"
                "\xa9\xfc\x11\x0d\x6f\x10\x47\x1e\x20\x8d\x62\x14\x87\x36\xbf"
                "\x72\xe3\x35\x4a\x43\x9d\x26\xfa\x4f\x3f\x65\x03\x03\x4a\xff"
                "\x1e\x5f\xdc\x3c\x74\x1e\x43\xd7\x05\x8a\xad\x7e\x7b\x2c\x22"
                "\x59\x72\xde\xd3\xda\xb5\x25\xef\xeb\x0e\xda\x63\xea\x40\x9a"
                "\x82\xb8\xad\x94\x41\x36\x2e\x94\xf6\x92\x3f\x7e\x21\xeb\xc2"
                "\xf4\x60\x90\xd1\xd1\x9f\x60\x3c\x14\xf5\x9c\x3e\x78\x32\x87"
                "\x98\x0a\xeb\xe9\xa2\x1f\xd9\xf5\x87\x24\xa6\x0c\xf7\xa9\x29"
                "\xcc\x97\x77\xc9\x64\x95\xfb\x04\xa8\xa2\x0a\x0e\x2c\x5d\xf2"
                "\x43\x2e\xb6\xf0\x77\x37\x16\xfd\x80\xf1\xbb\x8c\xd0\x80\x7a"
                "\x2e\x8b\x47\x50\x5b\x52\x25\x5d\x61\x04\xf4\x8e\xf9\x4d\xe8"
                "\x5b\x44\xde\x4f\xfc\xd8\xe1\xd1\x81\x6c\x3c\x7f\x3e\x03\x4e"
                "\x31\x8e\xb6\x3d\x87\x95\x64\xc4\xa3\xb8\xab\x99\x0c\x32\x39"
                "\x09\xe0\x02\x7c\x00\xbf\xed\x69\x13\x92\x4d\xc6\x96\xce\x69"
                "\x9f\xc3\x4a\xcd\x8a\x30\x2a\xd8\xb7\x00\x42\x91\xba\xbe\x6f"
                "\x2a\x28\x80\x78\x21\xc7\xa2\x82\x02\x12\xa0\x82\x02\x0c\xa3"
                "\x82\x02\x08\x80\x82\x01\x00\xb7\xf9\xf2\x4e\xc8\xd9\x79\xcb"
                "\x92\xdb\x0d\x2d\x81\x30\x23\x20\xc1\x2f\x97\xd1\x90\x5e\x52"
                "\x73\x04\x8d\x23\x6b\x9c\xe9\x7f\xb0\xda\x3a\x75\x84\x60\xd2"
                "\xac\x55\xc5\x2a\x8e\x25\x17\x64\x3e\x0d\x0f\x1f\x9c\x1d\x04"
                "\xfe\x36\x26\xb7\x4b\xeb\xed\xa4\x73\x25\x86\x45\xa1\x34\x33"
                "\xf3\xdd\x06\xd1\x8a\xc8\x9d\x00\x69\xf2\x72\x7f\x00\x28\x08"
                "\x7b\x8b\x31\x1c\xf3\xd3\x3f\x46\xc6\xc6\xa7\x29\x89\xbc\x85"
                "\x1e\xb8\x01\x8e\xe1\xf2\x6e\xe3\x08\xa8\x4d\x7d\x6c\x0f\x67"
                "\x1b\x1d\xbf\x88\xbe\x0b\x0e\x6f\x20\xa8\xff\x2c\xea\x04\xb3"
                "\x95\xe4\x2d\xb3\x72\xcf\xd7\x09\xca\xc9\x71\x41\x6c\x12\x91"
                "\x16\x2a\x25\xb4\x2c\x5d\x6b\xdf\x39\x02\xd7\xf7\xd8\xbd\x2a"
                "\xac\x8a\xcb\x40\x75\x16\x1e\xbf\xd3\x87\x47\x21\x0d\xcb\x8a"
                "\xe3\x45\x8f\x1d\xad\x13\xfc\xe5\x14\xf2\xea\x3d\x14\x30\x5a"
                "\x47\xce\xb1\xe1\x53\xae\x1f\x0b\x9a\x2f\xe1\x15\x58\x71\x1d"
                "\xbd\x89\xdd\xb1\x01\x08\xe3\x5b\x9c\x5a\x50\x96\x50\x70\x6f"
                "\x5a\x54\xce\x0c\x7a\xb6\x1a\xbc\xd1\xe3\x23\xe3\xe8\xb6\x9d"
                "\xbe\xa9\x2f\x82\x23\xcc\x46\x2e\xe9\xe4\xa2\xdd\x4b\xff\x55"
                "\x56\x78\x53\xdc\xf1\x5a\xfe\x53\x81\x82\x01\x00\x14\x43\x6a"
                "\x75\x67\x1b\x98\xd7\xe9\xde\xea\xc8\xcb\xfc\x2e\x08\x8b\x32"
                "\x30\x6a\x90\x53\x25\xef\x52\x00\xb6\x0c\xcc\xeb\xc9\x96\x5a"
                "\x43\xa7\x6d\x0f\xfd\x7d\x9e\x7c\x54\xca\x10\x20\x8f\x16\xca"
                "\xb5\x59\x43\x9c\x3a\xb8\xae\xeb\xcf\x6b\x50\xfe\x3b\xc8\xff"
                "\xab\x7c\xf0\x28\xa9\xd6\x22\xf3\x60\x71\x1a\x99\xb6\xa7\x61"
                "\x80\xb7\xb0\x50\xc0\x01\xb8\xe9\xec\x9f\x43\xca\xb8\xf7\x20"
                "\x23\xe4\x66\x9d\x07\x13\x39\x41\x8b\x6b\x2a\xf7\xf2\xd9\x60"
                "\x4c\x2b\x2a\xc4\x37\xe4\xf4\x31\xeb\xa4\xb0\xfb\x29\x17\x8f"
                "\x87\x57\xc0\xe5\xb2\xe4\xca\x5c\x66\x64\xd1\xbb\xfd\x55\x8e"
                "\x78\x53\xb5\xed\x41\xdc\x6c\x9d\x69\xd2\x40\xf2\x70\x90\x10"
                "\x8d\x93\xf7\x63\x73\x51\x3c\xcf\xdf\xb3\x54\x9e\x31\x23\xee"
                "\xee\x0b\x26\xd0\x8f\xe5\xc4\x5d\xc2\xf9\x4a\x76\x0e\x81\x75"
                "\xf5\x69\xec\x10\xc2\x94\xe9\x32\xa3\xd7\x4d\xfc\x7d\x52\xd7"
                "\xe0\x6b\x4b\x1f\x41\x89\x37\x8a\x67\x23\x57\x99\x76\xc8\xa3"
                "\x76\xab\xcc\xa5\x12\xdf\x38\x1b\x92\x02\xd8\x8f\xc9\x9e\xd5"
                "\xb9\x5b\xf3\x44\xe9\x72\xf7\x3a\xbf\x46\x1e\x9f\x0c\x9e\x24"
                "\x5f\x0e\x9a\x8c\xf8\x92\x87\x11\x44\x48\x72\x8e\x39\xa1\x00"
                "\xa1\x79\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51"
                "\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68"
                "\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa3\x27\x80\x20"
                "\x3c\x73\x38\xcf\x23\xc6\x31\x53\x28\xc4\x27\xf8\x95\x87\x99"
                "\x83\x2d\x35\x3c\x03\x9b\xd1\xff\xff\x2e\x53\x20\xe9\x5e\x62"
                "\xb9\xb7\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x41\x80\x08\xb2"
                "\x60\x74\x57\x6d\xac\xed\x74\x7f\x54\xdb\x96\x18\x91\x06\x0a"
                "\x95\xa1\x49\x17\xc7\x65\xe3\x94\xc8\x5e\x2c\x92\x20\x81\x03"
                "\x02\x00\x00"s;
            auto const thresh0EncodedCondition =
                "\xa2\x2b\x80\x20\x18\xeb\xd6\xdf\x81\x57\xb7\x2f\xed\x23\xd6"
                "\x11\x35\x42\x35\x77\x32\x77\x0b\x4b\x30\x3f\xad\x95\x4f\x8b"
                "\xcf\x36\x04\x12\xf2\x65\x81\x03\x04\x28\x40\x82\x02\x03\xd8"s;
            auto const thresh0EncodedFingerprint =
                "\x30\x82\x01\x07\x80\x01\x03\xa1\x82\x01\x00\xa0\x25\x80\x20"
                "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
                "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
                "\xeb\x4e\x81\x01\x09\xa1\x2b\x80\x20\x11\x10\x29\x72\x2d\x25"
                "\xc5\xb5\x76\x12\x61\x2b\xa7\x32\xdd\x4b\xce\xba\x94\x11\x42"
                "\xaa\xd0\x03\xf2\x3b\xe5\xd7\x90\x54\x7a\x78\x81\x03\x01\x08"
                "\x20\x82\x02\x04\x10\xa1\x2b\x80\x20\xf7\x5d\xa2\x8c\x5a\x93"
                "\x5f\x41\xca\x1c\xb4\xb3\x8c\xae\x0f\x3d\x22\x58\x1e\xb3\x37"
                "\x76\x7d\xf6\xce\x6b\xdc\x5d\x16\x57\xf4\xc6\x81\x03\x01\x08"
                "\x20\x82\x02\x04\x10\xa2\x2b\x80\x20\x6e\xc1\x00\xdd\x7d\x47"
                "\x0e\x6a\xe6\xb9\xc7\x74\x9b\x0e\x48\xc2\x70\x94\x85\x36\x85"
                "\xdb\x44\xa5\x95\x7f\x68\x89\x25\x62\x8a\x17\x81\x03\x01\x04"
                "\x00\x82\x02\x04\x10\xa3\x27\x80\x20\x3c\x73\x38\xcf\x23\xc6"
                "\x31\x53\x28\xc4\x27\xf8\x95\x87\x99\x83\x2d\x35\x3c\x03\x9b"
                "\xd1\xff\xff\x2e\x53\x20\xe9\x5e\x62\xb9\xb7\x81\x03\x01\x00"
                "\x00\xa4\x27\x80\x20\x41\x80\x08\xb2\x60\x74\x57\x6d\xac\xed"
                "\x74\x7f\x54\xdb\x96\x18\x91\x06\x0a\x95\xa1\x49\x17\xc7\x65"
                "\xe3\x94\xc8\x5e\x2c\x92\x20\x81\x03\x02\x00\x00"s;
            check(
                &thresh0,
                thresh0Msg,
                thresh0EncodedFulfillment,
                thresh0EncodedCondition,
                thresh0EncodedFingerprint);
        }
    }

    void
    testThresh29()
    {
        testcase("Thresh29");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * thresh0
        // ** Preim7Cond
        // ** Rsa8Cond
        // ** Ed9Cond
        // ** Prefix10Cond
        // ** Thresh13Cond
        // ** prefix1
        // *** prefix2
        // **** rsa3
        // ** preim4
        // ** rsa5
        // ** ed6

        auto const rsa3Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa3PublicKey{
            {0xbd, 0xd1, 0xc7, 0xf0, 0xb0, 0x3a, 0xa5, 0x5b, 0x3e, 0x49, 0x8d,
             0x4e, 0x00, 0x54, 0x89, 0xb9, 0x89, 0xcd, 0x4b, 0x43, 0xde, 0x59,
             0xf6, 0x7a, 0x67, 0x5c, 0x3a, 0xc6, 0xcf, 0x82, 0x3f, 0x35, 0x9c,
             0xcc, 0xda, 0xcd, 0xd3, 0x97, 0x86, 0x5b, 0xe9, 0xf6, 0x05, 0x55,
             0x0b, 0x26, 0xef, 0x1e, 0x88, 0xd5, 0xb6, 0xba, 0x14, 0x0a, 0xb2,
             0x76, 0xb9, 0xb3, 0x46, 0x0c, 0xc0, 0x80, 0x17, 0x13, 0x68, 0x23,
             0xdc, 0xec, 0x10, 0x18, 0xfc, 0xaa, 0xbe, 0xb3, 0xc4, 0xc7, 0xa9,
             0x84, 0xa6, 0x4e, 0x5c, 0x08, 0x6b, 0x7b, 0x4c, 0x81, 0x91, 0x79,
             0x5d, 0x90, 0x06, 0x15, 0xbb, 0x76, 0x2f, 0x5c, 0x53, 0x60, 0x0f,
             0xac, 0xf3, 0x7c, 0x49, 0xc5, 0x47, 0xec, 0xb3, 0xda, 0x93, 0x87,
             0xc1, 0xb9, 0xcf, 0x2c, 0xb5, 0xf0, 0x85, 0xad, 0xb4, 0x38, 0x67,
             0x88, 0xda, 0x3d, 0xfa, 0x01, 0xb7, 0x54, 0xd9, 0x41, 0x0b, 0x7b,
             0x8a, 0x09, 0xe0, 0x84, 0x7d, 0xbb, 0x89, 0xb2, 0xfc, 0x0b, 0x70,
             0x36, 0x93, 0x56, 0x62, 0xcc, 0xb4, 0xfc, 0xf9, 0x1f, 0x37, 0x92,
             0x9b, 0x3a, 0x4e, 0x7c, 0xad, 0x4b, 0xa6, 0x76, 0x6f, 0xda, 0xc4,
             0x2f, 0x83, 0x53, 0xbd, 0x93, 0xa9, 0x76, 0x89, 0x53, 0xe1, 0x4d,
             0xee, 0x27, 0x11, 0x6f, 0xbc, 0x21, 0xad, 0x42, 0x9f, 0x29, 0xf6,
             0x03, 0xdd, 0xec, 0xfa, 0xa1, 0x78, 0xd2, 0xde, 0x29, 0x2e, 0xd8,
             0x3a, 0x7f, 0xe9, 0x9b, 0x5d, 0xeb, 0x37, 0xb8, 0xb0, 0xa0, 0x66,
             0x3f, 0x02, 0xcd, 0x2a, 0x6e, 0xd3, 0x1c, 0xa5, 0x65, 0xdc, 0x73,
             0xbe, 0x93, 0x54, 0x9a, 0x2b, 0xf8, 0x32, 0x8b, 0xe8, 0xce, 0x9a,
             0x59, 0xd0, 0x05, 0xeb, 0xbb, 0xac, 0xfc, 0x4c, 0x4b, 0x2e, 0xac,
             0x2a, 0xc3, 0x0f, 0x0a, 0xd7, 0x46, 0xaf, 0xfd, 0x22, 0x0d, 0x0d,
             0x54, 0xcc, 0x2f}};
        std::array<std::uint8_t, 256> const rsa3Sig{
            {0x91, 0xe5, 0x22, 0x82, 0x45, 0x4d, 0x05, 0x10, 0x00, 0xcd, 0x06,
             0x8c, 0xc3, 0x84, 0x47, 0xe6, 0xc3, 0x5d, 0x2e, 0x7f, 0x08, 0x73,
             0xe4, 0xc0, 0x0c, 0x50, 0x56, 0xe0, 0x8c, 0xa3, 0x24, 0x09, 0x5c,
             0xd6, 0x90, 0x15, 0x68, 0xcb, 0x9e, 0x2c, 0xf3, 0x01, 0x5f, 0x4b,
             0x1c, 0x98, 0x87, 0x25, 0x45, 0x0a, 0x0d, 0xec, 0xd1, 0xae, 0xa3,
             0xa9, 0x5e, 0x36, 0xf9, 0x61, 0x10, 0x60, 0xcb, 0x09, 0x20, 0x1a,
             0x02, 0xb3, 0xb5, 0xe2, 0xcd, 0xf6, 0x50, 0xfc, 0x4c, 0xa4, 0x05,
             0x15, 0xf9, 0x0f, 0xfb, 0xfe, 0xf3, 0x8a, 0xc4, 0x4c, 0x57, 0x35,
             0xee, 0x18, 0x87, 0xae, 0x10, 0x12, 0x82, 0x3f, 0xfb, 0xc9, 0x37,
             0x83, 0xa5, 0xfb, 0x68, 0xfd, 0xc9, 0xd8, 0x89, 0x68, 0x25, 0x91,
             0xa2, 0xbe, 0x5b, 0xa9, 0x71, 0xb3, 0x1d, 0xfc, 0xa2, 0xec, 0x85,
             0xdc, 0xf5, 0xf0, 0xdf, 0x4e, 0x5e, 0x6b, 0xf5, 0x2f, 0x35, 0x58,
             0x38, 0x03, 0xd2, 0x85, 0x86, 0xa4, 0x34, 0x36, 0x5f, 0xf7, 0x54,
             0x0f, 0x60, 0xe1, 0x06, 0x14, 0x9d, 0xdb, 0xcd, 0xd6, 0xb7, 0x98,
             0xcc, 0xf7, 0x6a, 0x09, 0x0a, 0x20, 0x12, 0x63, 0x55, 0x81, 0x7e,
             0x90, 0xc1, 0x9c, 0x74, 0xc1, 0xa0, 0xbf, 0xc8, 0x90, 0x32, 0x7a,
             0x3d, 0x72, 0xb2, 0x66, 0x54, 0x3b, 0x79, 0xcd, 0x74, 0x20, 0xdf,
             0x75, 0xdd, 0x0a, 0x6a, 0x90, 0x05, 0xa6, 0x43, 0x7a, 0x98, 0x6b,
             0xa7, 0x15, 0x35, 0x1e, 0xde, 0x83, 0xb4, 0x09, 0x3c, 0xfa, 0xf1,
             0xa9, 0xaa, 0xa4, 0x03, 0xcd, 0xba, 0x9d, 0x87, 0xf1, 0xe4, 0xee,
             0x35, 0x3d, 0x47, 0xd7, 0xa3, 0xac, 0xd1, 0x62, 0xe4, 0x3e, 0xd9,
             0x09, 0x78, 0xeb, 0x67, 0xd7, 0xcb, 0xc0, 0xbd, 0x71, 0xad, 0x9c,
             0x80, 0x75, 0x00, 0xde, 0xde, 0x0b, 0xcd, 0xa3, 0x66, 0x80, 0x74,
             0x3b, 0xbf, 0x0f}};
        auto const prefix2Prefix = "P2"s;
        auto const prefix2Msg = "P1abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix2MaxMsgLength = 14;
        auto const prefix1Prefix = "P1"s;
        auto const prefix1Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix1MaxMsgLength = 14;
        auto const preim4Preimage = "I am root"s;
        auto const preim4Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const rsa5Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa5PublicKey{
            {0xc0, 0x00, 0xef, 0x8f, 0x4b, 0x81, 0x10, 0x1e, 0x52, 0xe0, 0x07,
             0x9f, 0x68, 0xe7, 0x2f, 0x92, 0xd4, 0x77, 0x3c, 0x1f, 0xa3, 0xff,
             0x72, 0x64, 0x5b, 0x37, 0xf1, 0xf3, 0xa3, 0xc5, 0xfb, 0xcd, 0xfb,
             0xda, 0xcc, 0x8b, 0x52, 0xe1, 0xde, 0xbc, 0x28, 0x8d, 0xe5, 0xad,
             0xab, 0x86, 0x61, 0x45, 0x97, 0x65, 0x37, 0x68, 0x26, 0x21, 0x92,
             0x17, 0xa3, 0xb0, 0x74, 0x5c, 0x8a, 0x45, 0x8d, 0x87, 0x5b, 0x9b,
             0xd1, 0x7b, 0x07, 0xc4, 0x8c, 0x67, 0xa0, 0xe9, 0x82, 0x0c, 0xe0,
             0x6b, 0xea, 0x91, 0x5c, 0xba, 0xe3, 0xd9, 0x9d, 0x39, 0xfd, 0x77,
             0xac, 0xcb, 0x33, 0x9b, 0x28, 0x51, 0x8d, 0xbf, 0x3e, 0xe4, 0x94,
             0x1c, 0x9a, 0x60, 0x71, 0x4b, 0x34, 0x07, 0x30, 0xda, 0x42, 0x46,
             0x0e, 0xb8, 0xb7, 0x2c, 0xf5, 0x2f, 0x4b, 0x9e, 0xe7, 0x64, 0x81,
             0xa1, 0xa2, 0x05, 0x66, 0x92, 0xe6, 0x75, 0x9f, 0x37, 0xae, 0x40,
             0xa9, 0x16, 0x08, 0x19, 0xe8, 0xdc, 0x47, 0xd6, 0x03, 0x29, 0xab,
             0xcc, 0x58, 0xa2, 0x37, 0x2a, 0x32, 0xb8, 0x15, 0xc7, 0x51, 0x91,
             0x73, 0xb9, 0x1d, 0xc6, 0xd0, 0x4f, 0x85, 0x86, 0xd5, 0xb3, 0x21,
             0x1a, 0x2a, 0x6c, 0xeb, 0x7f, 0xfe, 0x84, 0x17, 0x10, 0x2d, 0x0e,
             0xb4, 0xe1, 0xc2, 0x48, 0x4c, 0x3f, 0x61, 0xc7, 0x59, 0x75, 0xa7,
             0xc1, 0x75, 0xce, 0x67, 0x17, 0x42, 0x2a, 0x2f, 0x96, 0xef, 0x8a,
             0x2d, 0x74, 0xd2, 0x13, 0x68, 0xe1, 0xe9, 0xea, 0xfb, 0x73, 0x68,
             0xed, 0x8d, 0xd3, 0xac, 0x49, 0x09, 0xf9, 0xec, 0x62, 0xdf, 0x53,
             0xab, 0xfe, 0x90, 0x64, 0x4b, 0x92, 0x60, 0x0d, 0xdd, 0x00, 0xfe,
             0x02, 0xe6, 0xf3, 0x9b, 0x2b, 0xac, 0x4f, 0x70, 0xe8, 0x5b, 0x69,
             0x9c, 0x40, 0xd3, 0xeb, 0x37, 0xad, 0x6f, 0x37, 0xab, 0xf3, 0x79,
             0x8e, 0xcb, 0x1d}};
        std::array<std::uint8_t, 256> const rsa5Sig{
            {0xb7, 0xce, 0x05, 0xa9, 0xf7, 0x44, 0xf3, 0x0f, 0xa5, 0xaf, 0x9e,
             0xbb, 0xb7, 0x06, 0x19, 0x21, 0x90, 0x56, 0x24, 0xad, 0x3f, 0x56,
             0xfa, 0x0e, 0xc0, 0xce, 0xea, 0xab, 0x18, 0x42, 0xe1, 0x12, 0x6d,
             0xdc, 0xcd, 0xde, 0x36, 0xc8, 0x38, 0xfc, 0xaf, 0x40, 0x3f, 0x59,
             0x39, 0xc8, 0x58, 0xf0, 0x89, 0x86, 0xb6, 0xca, 0x09, 0x71, 0xc1,
             0x7b, 0xf5, 0xa9, 0x21, 0xdd, 0xa4, 0x4a, 0x03, 0x97, 0xb6, 0x54,
             0x38, 0x5c, 0xe4, 0x98, 0xec, 0x94, 0x72, 0x83, 0xcd, 0xf1, 0xe6,
             0x19, 0xf7, 0xd9, 0xee, 0x23, 0x9f, 0xb6, 0x7e, 0x81, 0x8e, 0x92,
             0xa7, 0xbe, 0x0f, 0x23, 0xd2, 0xcb, 0xff, 0xb2, 0xb4, 0x60, 0x47,
             0xb2, 0xc8, 0x3c, 0x08, 0xe2, 0xd2, 0xa3, 0x15, 0xb2, 0x24, 0x8b,
             0x99, 0x3e, 0x4e, 0x65, 0xf7, 0xb5, 0x55, 0xca, 0x19, 0xad, 0xc2,
             0x15, 0xb0, 0xb6, 0x0c, 0xf4, 0x02, 0xf4, 0x6b, 0xfd, 0x6a, 0x0a,
             0xaf, 0x7b, 0xd8, 0xf6, 0x4c, 0xcb, 0x7d, 0x7c, 0xfb, 0xb9, 0x9e,
             0x26, 0xc2, 0x04, 0xc6, 0xb9, 0x02, 0x84, 0xfd, 0xd7, 0xc4, 0xbf,
             0x1c, 0x9e, 0x77, 0xd4, 0xde, 0x90, 0x6f, 0xe9, 0x6b, 0x1a, 0x4a,
             0xa8, 0x4b, 0x64, 0xfa, 0xcd, 0xb0, 0xb5, 0x8c, 0x3e, 0x0c, 0xb6,
             0x91, 0x38, 0x24, 0x59, 0x67, 0xe1, 0x7d, 0xd4, 0x3c, 0xf2, 0xb1,
             0xa9, 0xd2, 0xcf, 0x0c, 0x80, 0x36, 0xb3, 0xcf, 0xed, 0x4b, 0x93,
             0x35, 0x46, 0x74, 0x32, 0xba, 0xe2, 0xca, 0xa4, 0x41, 0x28, 0x7d,
             0x0d, 0x23, 0x3b, 0x11, 0x24, 0x33, 0x81, 0x3f, 0xdf, 0x8f, 0x22,
             0xe9, 0xd7, 0x2c, 0x4e, 0xdf, 0xe6, 0xbd, 0x86, 0x89, 0x87, 0xba,
             0xed, 0x80, 0xa8, 0x0c, 0xcc, 0x14, 0xf6, 0x37, 0x35, 0x45, 0x5b,
             0x05, 0x6c, 0x54, 0x63, 0x2b, 0xa9, 0xfc, 0x57, 0x98, 0x58, 0xf6,
             0x65, 0xbe, 0xc4}};
        auto const ed6Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed6PublicKey{
            {0xa0, 0x45, 0x26, 0xcf, 0xee, 0x7e, 0xda, 0x68, 0xd9, 0x70, 0x23,
             0xac, 0x68, 0x48, 0x9e, 0x20, 0xa4, 0x5e, 0xf8, 0x51, 0xcb, 0xfe,
             0x72, 0xc1, 0x11, 0x5d, 0x25, 0x9c, 0xbc, 0xfd, 0xbb, 0x8b}};
        std::array<std::uint8_t, 64> const ed6Sig{
            {0x2a, 0x1d, 0xc0, 0x92, 0x24, 0x9a, 0x87, 0x5a, 0xc6, 0xaf, 0xa4,
             0x7f, 0xe1, 0x63, 0xc7, 0xca, 0xfd, 0x08, 0x47, 0xae, 0x2f, 0x98,
             0x07, 0xdc, 0x56, 0x9a, 0xfc, 0x2f, 0x0e, 0xa9, 0x37, 0x16, 0xe0,
             0x81, 0xff, 0x94, 0xb2, 0xab, 0x40, 0x2f, 0x9c, 0xa6, 0xc0, 0xe4,
             0xdf, 0xdf, 0xcd, 0x01, 0xf2, 0xdb, 0x9c, 0xff, 0x62, 0xe7, 0x2f,
             0x9d, 0x51, 0x6e, 0x80, 0xd1, 0x0c, 0x86, 0xd2, 0x01}};
        std::array<std::uint8_t, 32> const ed6SigningKey{
            {0x8f, 0xac, 0x15, 0x02, 0xce, 0xb4, 0x10, 0x27, 0x56, 0x91, 0x2b,
             0xd0, 0x57, 0xe7, 0x6c, 0xe0, 0xc5, 0x46, 0x65, 0x38, 0xf0, 0xc8,
             0x09, 0xe0, 0xb4, 0x57, 0xfb, 0x11, 0xfc, 0x00, 0xe9, 0xdf}};
        (void)ed6SigningKey;
        auto const thresh0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim7CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim7Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim7CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa8CondConditionFingerprint =
            "\xd1\xb5\x1d\x35\x99\x9d\xb4\xc1\xaa\x81\x4d\xd7\x0e\xa9\x2a"
            "\x20\x7f\xe5\x5c\x75\xe8\x57\x8b\xbf\xe8\xd7\x1c\x7e\xb2\xbc"
            "\x91\x16"s;
        Condition const Rsa8Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa8CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed9CondConditionFingerprint =
            "\x92\xfa\xfc\xc6\x2f\xe2\x8d\x8d\x25\x7c\xd4\x46\xab\xea\x82"
            "\xd0\x3f\x36\xbe\x1d\x11\x2b\xa0\xfe\xfe\xd4\x00\xd5\x7d\x9b"
            "\xf6\xc9"s;
        Condition const Ed9Cond{Type::ed25519Sha256,
                                131072,
                                makeSlice(Ed9CondConditionFingerprint),
                                std::bitset<5>{0}};
        auto const Prefix10CondConditionFingerprint =
            "\x48\x26\x73\xc4\x05\x82\x1d\x42\x66\xd1\x4e\x54\xb5\x03\x66"
            "\x85\x8a\x59\xfd\x9b\xf4\x68\xaa\xe0\x77\x2a\xa2\x66\x20\xec"
            "\xd4\xc0"s;
        Condition const Prefix10Cond{
            Type::prefixSha256,
            67626,
            makeSlice(Prefix10CondConditionFingerprint),
            std::bitset<5>{8}};
        auto const Thresh13CondConditionFingerprint =
            "\xb4\xbe\x05\x1e\x6d\x55\x80\x8f\x1d\x6f\x74\xa2\x4a\x17\x58"
            "\x06\x2d\x71\x91\x1b\x98\x25\xec\x7c\x4b\x77\xc3\x5d\x28\x00"
            "\xa8\x67"s;
        Condition const Thresh13Cond{
            Type::thresholdSha256,
            66560,
            makeSlice(Thresh13CondConditionFingerprint),
            std::bitset<5>{8}};

        auto rsa3 = std::make_unique<RsaSha256>(
            makeSlice(rsa3PublicKey), makeSlice(rsa3Sig));
        auto prefix2 = std::make_unique<PrefixSha256>(
            makeSlice(prefix2Prefix), prefix2MaxMsgLength, std::move(rsa3));
        auto prefix1 = std::make_unique<PrefixSha256>(
            makeSlice(prefix1Prefix), prefix1MaxMsgLength, std::move(prefix2));
        auto preim4 =
            std::make_unique<PreimageSha256>(makeSlice(preim4Preimage));
        auto rsa5 = std::make_unique<RsaSha256>(
            makeSlice(rsa5PublicKey), makeSlice(rsa5Sig));
        auto ed6 = std::make_unique<Ed25519>(ed6PublicKey, ed6Sig);
        std::vector<std::unique_ptr<Fulfillment>> thresh0Subfulfillments;
        thresh0Subfulfillments.emplace_back(std::move(prefix1));
        thresh0Subfulfillments.emplace_back(std::move(preim4));
        thresh0Subfulfillments.emplace_back(std::move(rsa5));
        thresh0Subfulfillments.emplace_back(std::move(ed6));
        std::vector<Condition> thresh0Subconditions{
            {Preim7Cond, Rsa8Cond, Ed9Cond, Prefix10Cond, Thresh13Cond}};
        ThresholdSha256 const thresh0(
            std::move(thresh0Subfulfillments), std::move(thresh0Subconditions));
        {
            auto const thresh0EncodedFulfillment =
                "\xa2\x82\x05\x83\xa0\x82\x04\xa9\xa0\x0b\x80\x09\x49\x20\x61"
                "\x6d\x20\x72\x6f\x6f\x74\xa1\x82\x02\x26\x80\x02\x50\x31\x81"
                "\x01\x0e\xa2\x82\x02\x1b\xa1\x82\x02\x17\x80\x02\x50\x32\x81"
                "\x01\x0e\xa2\x82\x02\x0c\xa3\x82\x02\x08\x80\x82\x01\x00\xbd"
                "\xd1\xc7\xf0\xb0\x3a\xa5\x5b\x3e\x49\x8d\x4e\x00\x54\x89\xb9"
                "\x89\xcd\x4b\x43\xde\x59\xf6\x7a\x67\x5c\x3a\xc6\xcf\x82\x3f"
                "\x35\x9c\xcc\xda\xcd\xd3\x97\x86\x5b\xe9\xf6\x05\x55\x0b\x26"
                "\xef\x1e\x88\xd5\xb6\xba\x14\x0a\xb2\x76\xb9\xb3\x46\x0c\xc0"
                "\x80\x17\x13\x68\x23\xdc\xec\x10\x18\xfc\xaa\xbe\xb3\xc4\xc7"
                "\xa9\x84\xa6\x4e\x5c\x08\x6b\x7b\x4c\x81\x91\x79\x5d\x90\x06"
                "\x15\xbb\x76\x2f\x5c\x53\x60\x0f\xac\xf3\x7c\x49\xc5\x47\xec"
                "\xb3\xda\x93\x87\xc1\xb9\xcf\x2c\xb5\xf0\x85\xad\xb4\x38\x67"
                "\x88\xda\x3d\xfa\x01\xb7\x54\xd9\x41\x0b\x7b\x8a\x09\xe0\x84"
                "\x7d\xbb\x89\xb2\xfc\x0b\x70\x36\x93\x56\x62\xcc\xb4\xfc\xf9"
                "\x1f\x37\x92\x9b\x3a\x4e\x7c\xad\x4b\xa6\x76\x6f\xda\xc4\x2f"
                "\x83\x53\xbd\x93\xa9\x76\x89\x53\xe1\x4d\xee\x27\x11\x6f\xbc"
                "\x21\xad\x42\x9f\x29\xf6\x03\xdd\xec\xfa\xa1\x78\xd2\xde\x29"
                "\x2e\xd8\x3a\x7f\xe9\x9b\x5d\xeb\x37\xb8\xb0\xa0\x66\x3f\x02"
                "\xcd\x2a\x6e\xd3\x1c\xa5\x65\xdc\x73\xbe\x93\x54\x9a\x2b\xf8"
                "\x32\x8b\xe8\xce\x9a\x59\xd0\x05\xeb\xbb\xac\xfc\x4c\x4b\x2e"
                "\xac\x2a\xc3\x0f\x0a\xd7\x46\xaf\xfd\x22\x0d\x0d\x54\xcc\x2f"
                "\x81\x82\x01\x00\x91\xe5\x22\x82\x45\x4d\x05\x10\x00\xcd\x06"
                "\x8c\xc3\x84\x47\xe6\xc3\x5d\x2e\x7f\x08\x73\xe4\xc0\x0c\x50"
                "\x56\xe0\x8c\xa3\x24\x09\x5c\xd6\x90\x15\x68\xcb\x9e\x2c\xf3"
                "\x01\x5f\x4b\x1c\x98\x87\x25\x45\x0a\x0d\xec\xd1\xae\xa3\xa9"
                "\x5e\x36\xf9\x61\x10\x60\xcb\x09\x20\x1a\x02\xb3\xb5\xe2\xcd"
                "\xf6\x50\xfc\x4c\xa4\x05\x15\xf9\x0f\xfb\xfe\xf3\x8a\xc4\x4c"
                "\x57\x35\xee\x18\x87\xae\x10\x12\x82\x3f\xfb\xc9\x37\x83\xa5"
                "\xfb\x68\xfd\xc9\xd8\x89\x68\x25\x91\xa2\xbe\x5b\xa9\x71\xb3"
                "\x1d\xfc\xa2\xec\x85\xdc\xf5\xf0\xdf\x4e\x5e\x6b\xf5\x2f\x35"
                "\x58\x38\x03\xd2\x85\x86\xa4\x34\x36\x5f\xf7\x54\x0f\x60\xe1"
                "\x06\x14\x9d\xdb\xcd\xd6\xb7\x98\xcc\xf7\x6a\x09\x0a\x20\x12"
                "\x63\x55\x81\x7e\x90\xc1\x9c\x74\xc1\xa0\xbf\xc8\x90\x32\x7a"
                "\x3d\x72\xb2\x66\x54\x3b\x79\xcd\x74\x20\xdf\x75\xdd\x0a\x6a"
                "\x90\x05\xa6\x43\x7a\x98\x6b\xa7\x15\x35\x1e\xde\x83\xb4\x09"
                "\x3c\xfa\xf1\xa9\xaa\xa4\x03\xcd\xba\x9d\x87\xf1\xe4\xee\x35"
                "\x3d\x47\xd7\xa3\xac\xd1\x62\xe4\x3e\xd9\x09\x78\xeb\x67\xd7"
                "\xcb\xc0\xbd\x71\xad\x9c\x80\x75\x00\xde\xde\x0b\xcd\xa3\x66"
                "\x80\x74\x3b\xbf\x0f\xa3\x82\x02\x08\x80\x82\x01\x00\xc0\x00"
                "\xef\x8f\x4b\x81\x10\x1e\x52\xe0\x07\x9f\x68\xe7\x2f\x92\xd4"
                "\x77\x3c\x1f\xa3\xff\x72\x64\x5b\x37\xf1\xf3\xa3\xc5\xfb\xcd"
                "\xfb\xda\xcc\x8b\x52\xe1\xde\xbc\x28\x8d\xe5\xad\xab\x86\x61"
                "\x45\x97\x65\x37\x68\x26\x21\x92\x17\xa3\xb0\x74\x5c\x8a\x45"
                "\x8d\x87\x5b\x9b\xd1\x7b\x07\xc4\x8c\x67\xa0\xe9\x82\x0c\xe0"
                "\x6b\xea\x91\x5c\xba\xe3\xd9\x9d\x39\xfd\x77\xac\xcb\x33\x9b"
                "\x28\x51\x8d\xbf\x3e\xe4\x94\x1c\x9a\x60\x71\x4b\x34\x07\x30"
                "\xda\x42\x46\x0e\xb8\xb7\x2c\xf5\x2f\x4b\x9e\xe7\x64\x81\xa1"
                "\xa2\x05\x66\x92\xe6\x75\x9f\x37\xae\x40\xa9\x16\x08\x19\xe8"
                "\xdc\x47\xd6\x03\x29\xab\xcc\x58\xa2\x37\x2a\x32\xb8\x15\xc7"
                "\x51\x91\x73\xb9\x1d\xc6\xd0\x4f\x85\x86\xd5\xb3\x21\x1a\x2a"
                "\x6c\xeb\x7f\xfe\x84\x17\x10\x2d\x0e\xb4\xe1\xc2\x48\x4c\x3f"
                "\x61\xc7\x59\x75\xa7\xc1\x75\xce\x67\x17\x42\x2a\x2f\x96\xef"
                "\x8a\x2d\x74\xd2\x13\x68\xe1\xe9\xea\xfb\x73\x68\xed\x8d\xd3"
                "\xac\x49\x09\xf9\xec\x62\xdf\x53\xab\xfe\x90\x64\x4b\x92\x60"
                "\x0d\xdd\x00\xfe\x02\xe6\xf3\x9b\x2b\xac\x4f\x70\xe8\x5b\x69"
                "\x9c\x40\xd3\xeb\x37\xad\x6f\x37\xab\xf3\x79\x8e\xcb\x1d\x81"
                "\x82\x01\x00\xb7\xce\x05\xa9\xf7\x44\xf3\x0f\xa5\xaf\x9e\xbb"
                "\xb7\x06\x19\x21\x90\x56\x24\xad\x3f\x56\xfa\x0e\xc0\xce\xea"
                "\xab\x18\x42\xe1\x12\x6d\xdc\xcd\xde\x36\xc8\x38\xfc\xaf\x40"
                "\x3f\x59\x39\xc8\x58\xf0\x89\x86\xb6\xca\x09\x71\xc1\x7b\xf5"
                "\xa9\x21\xdd\xa4\x4a\x03\x97\xb6\x54\x38\x5c\xe4\x98\xec\x94"
                "\x72\x83\xcd\xf1\xe6\x19\xf7\xd9\xee\x23\x9f\xb6\x7e\x81\x8e"
                "\x92\xa7\xbe\x0f\x23\xd2\xcb\xff\xb2\xb4\x60\x47\xb2\xc8\x3c"
                "\x08\xe2\xd2\xa3\x15\xb2\x24\x8b\x99\x3e\x4e\x65\xf7\xb5\x55"
                "\xca\x19\xad\xc2\x15\xb0\xb6\x0c\xf4\x02\xf4\x6b\xfd\x6a\x0a"
                "\xaf\x7b\xd8\xf6\x4c\xcb\x7d\x7c\xfb\xb9\x9e\x26\xc2\x04\xc6"
                "\xb9\x02\x84\xfd\xd7\xc4\xbf\x1c\x9e\x77\xd4\xde\x90\x6f\xe9"
                "\x6b\x1a\x4a\xa8\x4b\x64\xfa\xcd\xb0\xb5\x8c\x3e\x0c\xb6\x91"
                "\x38\x24\x59\x67\xe1\x7d\xd4\x3c\xf2\xb1\xa9\xd2\xcf\x0c\x80"
                "\x36\xb3\xcf\xed\x4b\x93\x35\x46\x74\x32\xba\xe2\xca\xa4\x41"
                "\x28\x7d\x0d\x23\x3b\x11\x24\x33\x81\x3f\xdf\x8f\x22\xe9\xd7"
                "\x2c\x4e\xdf\xe6\xbd\x86\x89\x87\xba\xed\x80\xa8\x0c\xcc\x14"
                "\xf6\x37\x35\x45\x5b\x05\x6c\x54\x63\x2b\xa9\xfc\x57\x98\x58"
                "\xf6\x65\xbe\xc4\xa4\x64\x80\x20\xa0\x45\x26\xcf\xee\x7e\xda"
                "\x68\xd9\x70\x23\xac\x68\x48\x9e\x20\xa4\x5e\xf8\x51\xcb\xfe"
                "\x72\xc1\x11\x5d\x25\x9c\xbc\xfd\xbb\x8b\x81\x40\x2a\x1d\xc0"
                "\x92\x24\x9a\x87\x5a\xc6\xaf\xa4\x7f\xe1\x63\xc7\xca\xfd\x08"
                "\x47\xae\x2f\x98\x07\xdc\x56\x9a\xfc\x2f\x0e\xa9\x37\x16\xe0"
                "\x81\xff\x94\xb2\xab\x40\x2f\x9c\xa6\xc0\xe4\xdf\xdf\xcd\x01"
                "\xf2\xdb\x9c\xff\x62\xe7\x2f\x9d\x51\x6e\x80\xd1\x0c\x86\xd2"
                "\x01\xa1\x81\xd3\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75"
                "\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c"
                "\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa1\x2b"
                "\x80\x20\x48\x26\x73\xc4\x05\x82\x1d\x42\x66\xd1\x4e\x54\xb5"
                "\x03\x66\x85\x8a\x59\xfd\x9b\xf4\x68\xaa\xe0\x77\x2a\xa2\x66"
                "\x20\xec\xd4\xc0\x81\x03\x01\x08\x2a\x82\x02\x04\x10\xa2\x2b"
                "\x80\x20\xb4\xbe\x05\x1e\x6d\x55\x80\x8f\x1d\x6f\x74\xa2\x4a"
                "\x17\x58\x06\x2d\x71\x91\x1b\x98\x25\xec\x7c\x4b\x77\xc3\x5d"
                "\x28\x00\xa8\x67\x81\x03\x01\x04\x00\x82\x02\x04\x10\xa3\x27"
                "\x80\x20\xd1\xb5\x1d\x35\x99\x9d\xb4\xc1\xaa\x81\x4d\xd7\x0e"
                "\xa9\x2a\x20\x7f\xe5\x5c\x75\xe8\x57\x8b\xbf\xe8\xd7\x1c\x7e"
                "\xb2\xbc\x91\x16\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x92\xfa"
                "\xfc\xc6\x2f\xe2\x8d\x8d\x25\x7c\xd4\x46\xab\xea\x82\xd0\x3f"
                "\x36\xbe\x1d\x11\x2b\xa0\xfe\xfe\xd4\x00\xd5\x7d\x9b\xf6\xc9"
                "\x81\x03\x02\x00\x00"s;
            auto const thresh0EncodedCondition =
                "\xa2\x2b\x80\x20\x73\x18\x9d\x64\x30\xbe\x8d\x0f\x8c\xb3\x57"
                "\xab\xa0\x94\xf1\x40\x1c\x24\x5e\xe5\x3e\x43\xde\x2e\x3e\x35"
                "\xa7\xa0\x02\x63\xa0\xea\x81\x03\x06\x34\x4a\x82\x02\x03\xd8"s;
            auto const thresh0EncodedFingerprint =
                "\x30\x82\x01\x80\x80\x01\x04\xa1\x82\x01\x79\xa0\x25\x80\x20"
                "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
                "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
                "\xeb\x4e\x81\x01\x09\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1"
                "\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21"
                "\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa1"
                "\x2b\x80\x20\x48\x26\x73\xc4\x05\x82\x1d\x42\x66\xd1\x4e\x54"
                "\xb5\x03\x66\x85\x8a\x59\xfd\x9b\xf4\x68\xaa\xe0\x77\x2a\xa2"
                "\x66\x20\xec\xd4\xc0\x81\x03\x01\x08\x2a\x82\x02\x04\x10\xa1"
                "\x2b\x80\x20\xf7\x5d\xa2\x8c\x5a\x93\x5f\x41\xca\x1c\xb4\xb3"
                "\x8c\xae\x0f\x3d\x22\x58\x1e\xb3\x37\x76\x7d\xf6\xce\x6b\xdc"
                "\x5d\x16\x57\xf4\xc6\x81\x03\x01\x08\x20\x82\x02\x04\x10\xa2"
                "\x2b\x80\x20\xb4\xbe\x05\x1e\x6d\x55\x80\x8f\x1d\x6f\x74\xa2"
                "\x4a\x17\x58\x06\x2d\x71\x91\x1b\x98\x25\xec\x7c\x4b\x77\xc3"
                "\x5d\x28\x00\xa8\x67\x81\x03\x01\x04\x00\x82\x02\x04\x10\xa3"
                "\x27\x80\x20\x99\xfb\x0b\x38\x94\x4d\x20\x85\xc8\xda\x3a\x64"
                "\x31\x44\x6f\x6c\x3b\x46\x25\x50\xd7\x7f\xdf\xee\x75\x72\x71"
                "\xf9\x61\x40\x63\xfa\x81\x03\x01\x00\x00\xa3\x27\x80\x20\xd1"
                "\xb5\x1d\x35\x99\x9d\xb4\xc1\xaa\x81\x4d\xd7\x0e\xa9\x2a\x20"
                "\x7f\xe5\x5c\x75\xe8\x57\x8b\xbf\xe8\xd7\x1c\x7e\xb2\xbc\x91"
                "\x16\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x00\xd3\xc9\x24\x3f"
                "\x2d\x2e\x64\x93\xa8\x49\x29\x82\x75\xea\xbf\xe3\x53\x7f\x8e"
                "\x45\x16\xdb\x5e\xc6\xdf\x39\xd2\xcb\xea\x62\xfb\x81\x03\x02"
                "\x00\x00\xa4\x27\x80\x20\x92\xfa\xfc\xc6\x2f\xe2\x8d\x8d\x25"
                "\x7c\xd4\x46\xab\xea\x82\xd0\x3f\x36\xbe\x1d\x11\x2b\xa0\xfe"
                "\xfe\xd4\x00\xd5\x7d\x9b\xf6\xc9\x81\x03\x02\x00\x00"s;
            check(
                &thresh0,
                thresh0Msg,
                thresh0EncodedFulfillment,
                thresh0EncodedCondition,
                thresh0EncodedFingerprint);
        }
    }

    void
    testThresh30()
    {
        testcase("Thresh30");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * thresh0
        // ** Preim14Cond
        // ** Rsa15Cond
        // ** Ed16Cond
        // ** prefix1
        // *** prefix2
        // **** prefix3
        // ***** rsa4
        // ** prefix5
        // *** prefix6
        // **** prefix7
        // ***** rsa8
        // ** thresh9
        // *** Preim11Cond
        // *** Rsa12Cond
        // *** Ed13Cond
        // *** rsa10

        auto const rsa4Msg = "P3P2P1abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa4PublicKey{
            {0xbe, 0x09, 0xc5, 0xa4, 0x27, 0x29, 0xdf, 0xd4, 0x67, 0x76, 0xbe,
             0xbf, 0x2c, 0xf3, 0xa2, 0x0b, 0x42, 0xe4, 0xbf, 0xeb, 0xdd, 0x67,
             0x20, 0xfb, 0x7a, 0x27, 0x93, 0xc0, 0x78, 0x47, 0x78, 0xd7, 0x15,
             0x32, 0xee, 0x38, 0x81, 0x0d, 0x36, 0xa2, 0xc4, 0x65, 0x44, 0xe6,
             0x62, 0x26, 0xb9, 0x58, 0x13, 0xa4, 0x15, 0x82, 0xab, 0xb1, 0x16,
             0x61, 0xfc, 0x01, 0x98, 0xc6, 0x1a, 0x69, 0xc6, 0xba, 0x39, 0x3f,
             0x01, 0x55, 0x3d, 0xd7, 0x8e, 0x14, 0x42, 0x6d, 0x78, 0x74, 0x9b,
             0x28, 0xcb, 0x31, 0x39, 0x98, 0x5a, 0x11, 0xdc, 0xc1, 0x18, 0x9d,
             0x8d, 0xb0, 0xcd, 0x1b, 0x4c, 0x10, 0xab, 0x14, 0x64, 0x19, 0xf1,
             0x33, 0x15, 0x45, 0xc8, 0x92, 0x82, 0x03, 0x82, 0x8a, 0xaa, 0xad,
             0x94, 0xfc, 0x24, 0x11, 0x96, 0x99, 0x7e, 0x94, 0x5a, 0x82, 0x57,
             0x68, 0x61, 0x9f, 0x7b, 0x45, 0xe0, 0x99, 0x9e, 0x4f, 0x32, 0x50,
             0x5f, 0x05, 0xc8, 0x11, 0xae, 0xc4, 0x0c, 0x63, 0x18, 0x0e, 0x02,
             0x59, 0x36, 0x25, 0x92, 0x06, 0x32, 0xc7, 0x71, 0x47, 0x99, 0xcc,
             0x0a, 0x6e, 0x0a, 0x58, 0x71, 0x3f, 0x5e, 0xb7, 0x78, 0xf7, 0x98,
             0x79, 0xdf, 0x74, 0xa4, 0xeb, 0xa9, 0x00, 0xfd, 0x81, 0xb3, 0xcf,
             0x04, 0x8c, 0x5d, 0x7d, 0xe7, 0xb2, 0x82, 0x90, 0x49, 0xbd, 0x69,
             0xf3, 0x08, 0xe9, 0x92, 0xc6, 0x9e, 0x41, 0xba, 0x74, 0xd8, 0x8d,
             0x81, 0x97, 0x6f, 0x86, 0xab, 0xc9, 0xf1, 0x02, 0x31, 0xb4, 0xce,
             0x47, 0xb0, 0x39, 0xc8, 0xba, 0x51, 0xa7, 0x39, 0xf3, 0x71, 0xa2,
             0x25, 0x27, 0x37, 0x6e, 0x09, 0x6f, 0x19, 0x59, 0xbc, 0x65, 0xd9,
             0xcd, 0x12, 0xd3, 0x2c, 0xa2, 0x78, 0xfa, 0x23, 0x15, 0x1a, 0x82,
             0x41, 0x91, 0x1b, 0xbe, 0x8a, 0xe7, 0xfe, 0x3c, 0x3c, 0x30, 0x32,
             0xaa, 0xe9, 0xf3}};
        std::array<std::uint8_t, 256> const rsa4Sig{
            {0x93, 0xa8, 0x27, 0xb4, 0x30, 0x7a, 0x3e, 0xb4, 0xc8, 0xf3, 0xca,
             0x69, 0x26, 0xf8, 0x60, 0x95, 0x93, 0x4a, 0xd5, 0x77, 0x5e, 0x06,
             0xe8, 0xe4, 0x86, 0x53, 0x4f, 0xcc, 0x01, 0x06, 0x99, 0x28, 0xda,
             0xeb, 0x63, 0x3f, 0x71, 0x96, 0x8a, 0xfc, 0x4d, 0x94, 0x23, 0x3e,
             0x11, 0x61, 0x3b, 0x03, 0x90, 0xd6, 0xd5, 0xf9, 0x95, 0xef, 0xeb,
             0xa4, 0xb3, 0x8f, 0x48, 0xd7, 0xce, 0x95, 0xc3, 0x80, 0xc5, 0x5b,
             0x6c, 0x48, 0x5e, 0x4e, 0x48, 0xe4, 0x2c, 0xbb, 0x57, 0x40, 0x96,
             0x29, 0xfb, 0x2e, 0x85, 0x82, 0xe7, 0x1f, 0x74, 0x47, 0x5c, 0x09,
             0x7f, 0x31, 0x80, 0x13, 0x19, 0x2e, 0x57, 0xab, 0x6b, 0x67, 0xe6,
             0x67, 0xb1, 0x7e, 0xb0, 0x62, 0x4b, 0x15, 0xba, 0x60, 0xe1, 0x5d,
             0x3e, 0xab, 0x51, 0x8e, 0x7a, 0x38, 0xe1, 0x95, 0x9f, 0xce, 0xbd,
             0x2c, 0x3d, 0x8c, 0xa9, 0x28, 0x6c, 0x11, 0x1a, 0x5b, 0xc7, 0x21,
             0x95, 0x73, 0x68, 0x72, 0xe9, 0xbc, 0x51, 0x90, 0x3a, 0xf3, 0xc0,
             0x96, 0x39, 0xf7, 0xcf, 0x73, 0xcb, 0xf0, 0x3a, 0xb8, 0x52, 0x53,
             0x87, 0x76, 0x84, 0x53, 0xae, 0xb0, 0xaf, 0xc2, 0x45, 0xf7, 0x98,
             0x5a, 0x77, 0x98, 0x53, 0x26, 0xfa, 0x7e, 0x60, 0xf0, 0xdd, 0x0a,
             0xb7, 0x94, 0xfd, 0xd6, 0x4b, 0x54, 0x9e, 0xed, 0x94, 0xea, 0xc1,
             0x0b, 0x33, 0x4f, 0x8f, 0x36, 0xd9, 0x3f, 0x31, 0xa5, 0x2a, 0x68,
             0xc3, 0xe8, 0xb0, 0xa5, 0x2a, 0x34, 0x16, 0xb7, 0x00, 0xc1, 0x03,
             0xe1, 0x88, 0x1e, 0x89, 0x0d, 0x7a, 0x92, 0x53, 0x10, 0xa1, 0x59,
             0xd3, 0x14, 0xd2, 0x03, 0xb3, 0xdc, 0x28, 0x5d, 0x40, 0x5b, 0xa6,
             0xb0, 0x1e, 0x5f, 0xd7, 0x5f, 0xda, 0x69, 0x18, 0xae, 0xb3, 0xa3,
             0x4b, 0x22, 0x17, 0xc5, 0x1e, 0x78, 0x9c, 0xfb, 0xd7, 0xf3, 0x90,
             0x28, 0x4c, 0x03}};
        auto const prefix3Prefix = "P3"s;
        auto const prefix3Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix3MaxMsgLength = 14;
        auto const prefix2Prefix = "P2"s;
        auto const prefix2Msg = "P1abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix2MaxMsgLength = 14;
        auto const prefix1Prefix = "P1"s;
        auto const prefix1Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix1MaxMsgLength = 14;
        auto const rsa8Msg = "P7P6P5abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa8PublicKey{
            {0xb7, 0xf9, 0xf2, 0x4e, 0xc8, 0xd9, 0x79, 0xcb, 0x92, 0xdb, 0x0d,
             0x2d, 0x81, 0x30, 0x23, 0x20, 0xc1, 0x2f, 0x97, 0xd1, 0x90, 0x5e,
             0x52, 0x73, 0x04, 0x8d, 0x23, 0x6b, 0x9c, 0xe9, 0x7f, 0xb0, 0xda,
             0x3a, 0x75, 0x84, 0x60, 0xd2, 0xac, 0x55, 0xc5, 0x2a, 0x8e, 0x25,
             0x17, 0x64, 0x3e, 0x0d, 0x0f, 0x1f, 0x9c, 0x1d, 0x04, 0xfe, 0x36,
             0x26, 0xb7, 0x4b, 0xeb, 0xed, 0xa4, 0x73, 0x25, 0x86, 0x45, 0xa1,
             0x34, 0x33, 0xf3, 0xdd, 0x06, 0xd1, 0x8a, 0xc8, 0x9d, 0x00, 0x69,
             0xf2, 0x72, 0x7f, 0x00, 0x28, 0x08, 0x7b, 0x8b, 0x31, 0x1c, 0xf3,
             0xd3, 0x3f, 0x46, 0xc6, 0xc6, 0xa7, 0x29, 0x89, 0xbc, 0x85, 0x1e,
             0xb8, 0x01, 0x8e, 0xe1, 0xf2, 0x6e, 0xe3, 0x08, 0xa8, 0x4d, 0x7d,
             0x6c, 0x0f, 0x67, 0x1b, 0x1d, 0xbf, 0x88, 0xbe, 0x0b, 0x0e, 0x6f,
             0x20, 0xa8, 0xff, 0x2c, 0xea, 0x04, 0xb3, 0x95, 0xe4, 0x2d, 0xb3,
             0x72, 0xcf, 0xd7, 0x09, 0xca, 0xc9, 0x71, 0x41, 0x6c, 0x12, 0x91,
             0x16, 0x2a, 0x25, 0xb4, 0x2c, 0x5d, 0x6b, 0xdf, 0x39, 0x02, 0xd7,
             0xf7, 0xd8, 0xbd, 0x2a, 0xac, 0x8a, 0xcb, 0x40, 0x75, 0x16, 0x1e,
             0xbf, 0xd3, 0x87, 0x47, 0x21, 0x0d, 0xcb, 0x8a, 0xe3, 0x45, 0x8f,
             0x1d, 0xad, 0x13, 0xfc, 0xe5, 0x14, 0xf2, 0xea, 0x3d, 0x14, 0x30,
             0x5a, 0x47, 0xce, 0xb1, 0xe1, 0x53, 0xae, 0x1f, 0x0b, 0x9a, 0x2f,
             0xe1, 0x15, 0x58, 0x71, 0x1d, 0xbd, 0x89, 0xdd, 0xb1, 0x01, 0x08,
             0xe3, 0x5b, 0x9c, 0x5a, 0x50, 0x96, 0x50, 0x70, 0x6f, 0x5a, 0x54,
             0xce, 0x0c, 0x7a, 0xb6, 0x1a, 0xbc, 0xd1, 0xe3, 0x23, 0xe3, 0xe8,
             0xb6, 0x9d, 0xbe, 0xa9, 0x2f, 0x82, 0x23, 0xcc, 0x46, 0x2e, 0xe9,
             0xe4, 0xa2, 0xdd, 0x4b, 0xff, 0x55, 0x56, 0x78, 0x53, 0xdc, 0xf1,
             0x5a, 0xfe, 0x53}};
        std::array<std::uint8_t, 256> const rsa8Sig{
            {0x0f, 0x4b, 0x51, 0xaa, 0x9f, 0x78, 0xd6, 0x37, 0x3f, 0x15, 0xbf,
             0xf2, 0x76, 0xf9, 0x7f, 0x8d, 0x35, 0xec, 0xf2, 0x54, 0xbb, 0xab,
             0x37, 0x27, 0x4f, 0xc6, 0xda, 0xe9, 0x41, 0x49, 0x30, 0xd7, 0x69,
             0xf7, 0x81, 0x30, 0x1c, 0xa3, 0x6d, 0xe8, 0x88, 0x04, 0xac, 0x42,
             0x8e, 0xd8, 0x23, 0x79, 0x53, 0x2f, 0x6c, 0x22, 0x71, 0xda, 0x69,
             0xa8, 0x5c, 0x6c, 0x96, 0x3e, 0x11, 0x63, 0x96, 0x38, 0x70, 0xc4,
             0xa9, 0x89, 0xbb, 0x29, 0xdd, 0x0d, 0xae, 0x6d, 0xe4, 0xe1, 0x04,
             0xf0, 0xf5, 0xd3, 0xdf, 0xfe, 0x18, 0x2f, 0x28, 0x1b, 0xa4, 0x0d,
             0x39, 0xd2, 0xc4, 0x08, 0x9a, 0x8b, 0x7d, 0xbe, 0xd7, 0x87, 0xcb,
             0x81, 0x1d, 0xa8, 0xf5, 0x52, 0xe5, 0xb7, 0x5f, 0x3e, 0x67, 0x8a,
             0x58, 0xdd, 0x18, 0x73, 0xde, 0xdd, 0x5a, 0x1d, 0x0d, 0xda, 0x8c,
             0xb9, 0x0f, 0x66, 0xc2, 0x19, 0x8d, 0x4c, 0xac, 0xbe, 0xee, 0xa3,
             0xdf, 0xc2, 0x1b, 0x9e, 0x07, 0xcf, 0xfd, 0x7d, 0x44, 0xe7, 0x8f,
             0x6e, 0xee, 0x84, 0x02, 0x34, 0x54, 0x27, 0x10, 0xfc, 0xbb, 0x65,
             0x1b, 0xbc, 0x4d, 0x92, 0xa2, 0x9f, 0x10, 0xdd, 0x21, 0x41, 0x98,
             0x94, 0xbb, 0x98, 0xa5, 0x7c, 0x87, 0x33, 0x50, 0x9b, 0x65, 0xdd,
             0xe9, 0x06, 0xa9, 0x4b, 0xcc, 0x00, 0x4c, 0x5b, 0x42, 0x9d, 0x9c,
             0x7f, 0xb8, 0x78, 0xdb, 0x56, 0xd5, 0xff, 0x0e, 0xe2, 0xc1, 0xb8,
             0xf7, 0x00, 0x20, 0x65, 0x7a, 0x8a, 0x4f, 0x98, 0xe0, 0x32, 0x51,
             0x5b, 0x71, 0x17, 0x4f, 0x59, 0x47, 0x86, 0xe3, 0xc5, 0x19, 0xf0,
             0x03, 0xb6, 0x98, 0x0d, 0xdd, 0x8f, 0x62, 0xc8, 0xf2, 0x56, 0x45,
             0xe6, 0xf7, 0x29, 0x8f, 0x1f, 0x70, 0x14, 0x95, 0x7f, 0xb4, 0x07,
             0x18, 0x19, 0xee, 0x76, 0xa1, 0x5f, 0xc3, 0xf3, 0x33, 0xf9, 0x6a,
             0x90, 0x54, 0x81}};
        auto const prefix7Prefix = "P7"s;
        auto const prefix7Msg = "P6P5abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix7MaxMsgLength = 14;
        auto const prefix6Prefix = "P6"s;
        auto const prefix6Msg = "P5abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix6MaxMsgLength = 14;
        auto const prefix5Prefix = "P5"s;
        auto const prefix5Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix5MaxMsgLength = 14;
        auto const rsa10Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa10PublicKey{
            {0x9f, 0x01, 0x7b, 0x87, 0xfd, 0xbe, 0xa0, 0x02, 0x77, 0x00, 0x19,
             0x7f, 0x2f, 0xde, 0x80, 0xab, 0xdc, 0xd0, 0x14, 0xe9, 0x63, 0xe5,
             0xd6, 0xfb, 0x2c, 0xcb, 0xb0, 0x70, 0x88, 0xbe, 0xcb, 0x6d, 0x8e,
             0x56, 0xf3, 0x02, 0x34, 0xae, 0xec, 0x30, 0xf7, 0x41, 0xcf, 0xe7,
             0x07, 0x80, 0x52, 0x04, 0xa1, 0x16, 0x51, 0x15, 0x07, 0xba, 0xdb,
             0xc6, 0xe8, 0xce, 0xa8, 0x8c, 0xa8, 0xb7, 0xaa, 0x4e, 0x08, 0x96,
             0xbd, 0x5f, 0xbd, 0x64, 0x0d, 0xe3, 0x88, 0xca, 0x7e, 0x1a, 0x20,
             0x1f, 0x65, 0x44, 0x3a, 0xc8, 0x2c, 0xc2, 0xdd, 0xc8, 0xc6, 0x9b,
             0x8f, 0x01, 0x8e, 0x36, 0xc5, 0x52, 0x5a, 0xb1, 0x1d, 0x1d, 0xc4,
             0xf0, 0x9f, 0xa9, 0x51, 0x4d, 0xe6, 0xeb, 0x36, 0x9c, 0x2e, 0x2d,
             0x08, 0x1c, 0xaf, 0x67, 0xed, 0x83, 0xbb, 0x67, 0x77, 0x83, 0x24,
             0x49, 0x97, 0x8c, 0x06, 0x0d, 0xca, 0x8b, 0x45, 0xf4, 0x2b, 0xff,
             0x94, 0x22, 0x7f, 0x04, 0x92, 0x81, 0xd6, 0xf5, 0x17, 0x7f, 0x41,
             0x2d, 0xc3, 0x4e, 0x86, 0x2a, 0x60, 0xc4, 0x0e, 0x74, 0xb0, 0x04,
             0x3c, 0x48, 0xe4, 0xd8, 0x09, 0xf6, 0x48, 0x35, 0x00, 0x09, 0xda,
             0xaa, 0x31, 0x2f, 0x8b, 0x5f, 0x6d, 0x4c, 0x48, 0x52, 0xb9, 0xd9,
             0x43, 0xe8, 0x1e, 0x22, 0x68, 0x80, 0xbe, 0xff, 0xee, 0x11, 0x3b,
             0x83, 0x47, 0xfd, 0xec, 0x6e, 0x1d, 0x9c, 0x7b, 0xd8, 0xe3, 0x2a,
             0x8b, 0xef, 0x2a, 0xb3, 0xa5, 0xc1, 0x78, 0x3c, 0x0b, 0x0e, 0x31,
             0xe6, 0x40, 0x80, 0xe1, 0xcb, 0x25, 0x56, 0xb3, 0x45, 0x7e, 0x65,
             0xb3, 0xd9, 0x1a, 0x8e, 0xf8, 0xb0, 0x65, 0x44, 0x89, 0x73, 0x90,
             0x0f, 0xe7, 0xcd, 0x1b, 0x68, 0x3b, 0xa4, 0x7a, 0x35, 0x41, 0xad,
             0xfd, 0x8e, 0xa8, 0x50, 0xe0, 0xf2, 0xab, 0x2d, 0xe2, 0x31, 0x39,
             0x82, 0x41, 0x4b}};
        std::array<std::uint8_t, 256> const rsa10Sig{
            {0x15, 0x1f, 0xbe, 0x35, 0x5f, 0xd9, 0xca, 0x09, 0x16, 0x13, 0x34,
             0x7c, 0x8d, 0x5b, 0xbf, 0x27, 0x17, 0xc9, 0xa5, 0x7a, 0xde, 0x0a,
             0xec, 0x3f, 0xf8, 0x43, 0x2e, 0x39, 0x3d, 0xa1, 0x3f, 0xcf, 0x3e,
             0x89, 0xbe, 0x18, 0x7c, 0x77, 0xfe, 0x70, 0xd5, 0xac, 0x5b, 0x8b,
             0x18, 0x91, 0x6b, 0x42, 0xb0, 0xcd, 0x09, 0xb4, 0x21, 0x42, 0x99,
             0x09, 0xd4, 0x5b, 0xd6, 0xf4, 0x07, 0x5b, 0xc3, 0xce, 0x2b, 0xf6,
             0x16, 0x07, 0xe5, 0xf6, 0x91, 0xd9, 0xaf, 0xb4, 0xcd, 0xee, 0x92,
             0x7b, 0x1e, 0x5b, 0xbe, 0xd0, 0x3d, 0x94, 0x1f, 0xe4, 0x97, 0x8a,
             0xab, 0x1b, 0xfc, 0x36, 0x2d, 0x7f, 0xa2, 0xbc, 0xd0, 0x8c, 0x60,
             0xf6, 0x17, 0x67, 0x02, 0x09, 0x8e, 0x14, 0xcb, 0x46, 0x24, 0xe2,
             0x05, 0x85, 0x7c, 0x3d, 0x2b, 0x9d, 0xe7, 0x4d, 0x77, 0xe0, 0x6a,
             0x91, 0x3b, 0xac, 0xe0, 0x40, 0x37, 0x58, 0xdd, 0x3f, 0x21, 0x2c,
             0x0d, 0xca, 0x77, 0x84, 0x5e, 0xd7, 0x39, 0x6e, 0x2d, 0x7b, 0x21,
             0x26, 0x85, 0x0a, 0xa9, 0xb7, 0xbd, 0x8f, 0x5f, 0x01, 0xed, 0xf5,
             0x32, 0x2c, 0xea, 0xfc, 0xd0, 0xbc, 0x5d, 0xbe, 0xb1, 0x9b, 0x26,
             0x2c, 0x8e, 0xfe, 0xc4, 0x26, 0x5b, 0x0a, 0xda, 0xf6, 0x35, 0xb1,
             0x2f, 0x53, 0x97, 0xf5, 0x2d, 0x0f, 0x35, 0x8c, 0x40, 0xd9, 0xc4,
             0xfa, 0xc7, 0xb2, 0xbb, 0xf4, 0x87, 0x38, 0x49, 0x2c, 0x96, 0x77,
             0xac, 0xd9, 0xcd, 0x06, 0x55, 0xe4, 0x64, 0x4c, 0x42, 0x76, 0xc0,
             0xc2, 0x2c, 0xf9, 0x61, 0x8b, 0x3e, 0xa5, 0x75, 0x92, 0x67, 0x75,
             0x8a, 0x55, 0x16, 0x7d, 0x00, 0x8e, 0xf1, 0x38, 0xd3, 0x01, 0x5a,
             0xfb, 0x52, 0xaf, 0x35, 0x5d, 0x66, 0x48, 0x21, 0x6a, 0x20, 0x88,
             0x72, 0x36, 0x9a, 0x87, 0x69, 0x16, 0x8d, 0x81, 0x4f, 0x8a, 0xf9,
             0x9a, 0x35, 0xc7}};
        auto const thresh9Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim11CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim11Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim11CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa12CondConditionFingerprint =
            "\x38\xb9\xf0\xeb\x68\x8b\x9f\x55\x37\x9a\xec\x07\xd4\xa2\x13"
            "\xac\x34\xa1\x67\x31\x34\xea\xc2\x2f\xef\x13\xe3\x5c\xcf\x8f"
            "\x90\x1e"s;
        Condition const Rsa12Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa12CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed13CondConditionFingerprint =
            "\x7c\x54\x6a\x6d\x7f\x00\x52\x31\x03\xe7\xb4\x5b\x1c\x9f\x72"
            "\xeb\x3c\x18\x08\xa3\x24\xb2\x63\x5f\x77\x55\x4a\x42\xdb\x1e"
            "\xff\x1e"s;
        Condition const Ed13Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed13CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const thresh0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim14CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim14Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim14CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa15CondConditionFingerprint =
            "\x55\x6b\x6d\xe3\x00\xd4\xf3\x7e\x75\x3a\x68\xfc\x25\xdf\xf2"
            "\xf7\x18\x54\xa5\x55\x0c\xa5\xa9\x65\xbf\x66\x9e\x4e\x49\x56"
            "\x1e\xf1"s;
        Condition const Rsa15Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa15CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed16CondConditionFingerprint =
            "\xe4\x66\x69\x86\x87\x57\x0e\xac\xf1\xfd\x06\x81\x48\x90\x82"
            "\x42\x48\x50\x75\x8e\xd4\x2d\xf3\x02\x37\x89\x28\xc5\x68\xd7"
            "\xa0\x11"s;
        Condition const Ed16Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed16CondConditionFingerprint),
                                 std::bitset<5>{0}};

        auto rsa4 = std::make_unique<RsaSha256>(
            makeSlice(rsa4PublicKey), makeSlice(rsa4Sig));
        auto prefix3 = std::make_unique<PrefixSha256>(
            makeSlice(prefix3Prefix), prefix3MaxMsgLength, std::move(rsa4));
        auto prefix2 = std::make_unique<PrefixSha256>(
            makeSlice(prefix2Prefix), prefix2MaxMsgLength, std::move(prefix3));
        auto prefix1 = std::make_unique<PrefixSha256>(
            makeSlice(prefix1Prefix), prefix1MaxMsgLength, std::move(prefix2));
        auto rsa8 = std::make_unique<RsaSha256>(
            makeSlice(rsa8PublicKey), makeSlice(rsa8Sig));
        auto prefix7 = std::make_unique<PrefixSha256>(
            makeSlice(prefix7Prefix), prefix7MaxMsgLength, std::move(rsa8));
        auto prefix6 = std::make_unique<PrefixSha256>(
            makeSlice(prefix6Prefix), prefix6MaxMsgLength, std::move(prefix7));
        auto prefix5 = std::make_unique<PrefixSha256>(
            makeSlice(prefix5Prefix), prefix5MaxMsgLength, std::move(prefix6));
        auto rsa10 = std::make_unique<RsaSha256>(
            makeSlice(rsa10PublicKey), makeSlice(rsa10Sig));
        std::vector<std::unique_ptr<Fulfillment>> thresh9Subfulfillments;
        thresh9Subfulfillments.emplace_back(std::move(rsa10));
        std::vector<Condition> thresh9Subconditions{
            {Preim11Cond, Rsa12Cond, Ed13Cond}};
        auto thresh9 = std::make_unique<ThresholdSha256>(
            std::move(thresh9Subfulfillments), std::move(thresh9Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh0Subfulfillments;
        thresh0Subfulfillments.emplace_back(std::move(prefix1));
        thresh0Subfulfillments.emplace_back(std::move(prefix5));
        thresh0Subfulfillments.emplace_back(std::move(thresh9));
        std::vector<Condition> thresh0Subconditions{
            {Preim14Cond, Rsa15Cond, Ed16Cond}};
        ThresholdSha256 const thresh0(
            std::move(thresh0Subfulfillments), std::move(thresh0Subconditions));
        {
            auto const thresh0EncodedFulfillment =
                "\xa2\x82\x07\x80\xa0\x82\x07\x01\xa1\x82\x02\x35\x80\x02\x50"
                "\x31\x81\x01\x0e\xa2\x82\x02\x2a\xa1\x82\x02\x26\x80\x02\x50"
                "\x32\x81\x01\x0e\xa2\x82\x02\x1b\xa1\x82\x02\x17\x80\x02\x50"
                "\x33\x81\x01\x0e\xa2\x82\x02\x0c\xa3\x82\x02\x08\x80\x82\x01"
                "\x00\xbe\x09\xc5\xa4\x27\x29\xdf\xd4\x67\x76\xbe\xbf\x2c\xf3"
                "\xa2\x0b\x42\xe4\xbf\xeb\xdd\x67\x20\xfb\x7a\x27\x93\xc0\x78"
                "\x47\x78\xd7\x15\x32\xee\x38\x81\x0d\x36\xa2\xc4\x65\x44\xe6"
                "\x62\x26\xb9\x58\x13\xa4\x15\x82\xab\xb1\x16\x61\xfc\x01\x98"
                "\xc6\x1a\x69\xc6\xba\x39\x3f\x01\x55\x3d\xd7\x8e\x14\x42\x6d"
                "\x78\x74\x9b\x28\xcb\x31\x39\x98\x5a\x11\xdc\xc1\x18\x9d\x8d"
                "\xb0\xcd\x1b\x4c\x10\xab\x14\x64\x19\xf1\x33\x15\x45\xc8\x92"
                "\x82\x03\x82\x8a\xaa\xad\x94\xfc\x24\x11\x96\x99\x7e\x94\x5a"
                "\x82\x57\x68\x61\x9f\x7b\x45\xe0\x99\x9e\x4f\x32\x50\x5f\x05"
                "\xc8\x11\xae\xc4\x0c\x63\x18\x0e\x02\x59\x36\x25\x92\x06\x32"
                "\xc7\x71\x47\x99\xcc\x0a\x6e\x0a\x58\x71\x3f\x5e\xb7\x78\xf7"
                "\x98\x79\xdf\x74\xa4\xeb\xa9\x00\xfd\x81\xb3\xcf\x04\x8c\x5d"
                "\x7d\xe7\xb2\x82\x90\x49\xbd\x69\xf3\x08\xe9\x92\xc6\x9e\x41"
                "\xba\x74\xd8\x8d\x81\x97\x6f\x86\xab\xc9\xf1\x02\x31\xb4\xce"
                "\x47\xb0\x39\xc8\xba\x51\xa7\x39\xf3\x71\xa2\x25\x27\x37\x6e"
                "\x09\x6f\x19\x59\xbc\x65\xd9\xcd\x12\xd3\x2c\xa2\x78\xfa\x23"
                "\x15\x1a\x82\x41\x91\x1b\xbe\x8a\xe7\xfe\x3c\x3c\x30\x32\xaa"
                "\xe9\xf3\x81\x82\x01\x00\x93\xa8\x27\xb4\x30\x7a\x3e\xb4\xc8"
                "\xf3\xca\x69\x26\xf8\x60\x95\x93\x4a\xd5\x77\x5e\x06\xe8\xe4"
                "\x86\x53\x4f\xcc\x01\x06\x99\x28\xda\xeb\x63\x3f\x71\x96\x8a"
                "\xfc\x4d\x94\x23\x3e\x11\x61\x3b\x03\x90\xd6\xd5\xf9\x95\xef"
                "\xeb\xa4\xb3\x8f\x48\xd7\xce\x95\xc3\x80\xc5\x5b\x6c\x48\x5e"
                "\x4e\x48\xe4\x2c\xbb\x57\x40\x96\x29\xfb\x2e\x85\x82\xe7\x1f"
                "\x74\x47\x5c\x09\x7f\x31\x80\x13\x19\x2e\x57\xab\x6b\x67\xe6"
                "\x67\xb1\x7e\xb0\x62\x4b\x15\xba\x60\xe1\x5d\x3e\xab\x51\x8e"
                "\x7a\x38\xe1\x95\x9f\xce\xbd\x2c\x3d\x8c\xa9\x28\x6c\x11\x1a"
                "\x5b\xc7\x21\x95\x73\x68\x72\xe9\xbc\x51\x90\x3a\xf3\xc0\x96"
                "\x39\xf7\xcf\x73\xcb\xf0\x3a\xb8\x52\x53\x87\x76\x84\x53\xae"
                "\xb0\xaf\xc2\x45\xf7\x98\x5a\x77\x98\x53\x26\xfa\x7e\x60\xf0"
                "\xdd\x0a\xb7\x94\xfd\xd6\x4b\x54\x9e\xed\x94\xea\xc1\x0b\x33"
                "\x4f\x8f\x36\xd9\x3f\x31\xa5\x2a\x68\xc3\xe8\xb0\xa5\x2a\x34"
                "\x16\xb7\x00\xc1\x03\xe1\x88\x1e\x89\x0d\x7a\x92\x53\x10\xa1"
                "\x59\xd3\x14\xd2\x03\xb3\xdc\x28\x5d\x40\x5b\xa6\xb0\x1e\x5f"
                "\xd7\x5f\xda\x69\x18\xae\xb3\xa3\x4b\x22\x17\xc5\x1e\x78\x9c"
                "\xfb\xd7\xf3\x90\x28\x4c\x03\xa1\x82\x02\x35\x80\x02\x50\x35"
                "\x81\x01\x0e\xa2\x82\x02\x2a\xa1\x82\x02\x26\x80\x02\x50\x36"
                "\x81\x01\x0e\xa2\x82\x02\x1b\xa1\x82\x02\x17\x80\x02\x50\x37"
                "\x81\x01\x0e\xa2\x82\x02\x0c\xa3\x82\x02\x08\x80\x82\x01\x00"
                "\xb7\xf9\xf2\x4e\xc8\xd9\x79\xcb\x92\xdb\x0d\x2d\x81\x30\x23"
                "\x20\xc1\x2f\x97\xd1\x90\x5e\x52\x73\x04\x8d\x23\x6b\x9c\xe9"
                "\x7f\xb0\xda\x3a\x75\x84\x60\xd2\xac\x55\xc5\x2a\x8e\x25\x17"
                "\x64\x3e\x0d\x0f\x1f\x9c\x1d\x04\xfe\x36\x26\xb7\x4b\xeb\xed"
                "\xa4\x73\x25\x86\x45\xa1\x34\x33\xf3\xdd\x06\xd1\x8a\xc8\x9d"
                "\x00\x69\xf2\x72\x7f\x00\x28\x08\x7b\x8b\x31\x1c\xf3\xd3\x3f"
                "\x46\xc6\xc6\xa7\x29\x89\xbc\x85\x1e\xb8\x01\x8e\xe1\xf2\x6e"
                "\xe3\x08\xa8\x4d\x7d\x6c\x0f\x67\x1b\x1d\xbf\x88\xbe\x0b\x0e"
                "\x6f\x20\xa8\xff\x2c\xea\x04\xb3\x95\xe4\x2d\xb3\x72\xcf\xd7"
                "\x09\xca\xc9\x71\x41\x6c\x12\x91\x16\x2a\x25\xb4\x2c\x5d\x6b"
                "\xdf\x39\x02\xd7\xf7\xd8\xbd\x2a\xac\x8a\xcb\x40\x75\x16\x1e"
                "\xbf\xd3\x87\x47\x21\x0d\xcb\x8a\xe3\x45\x8f\x1d\xad\x13\xfc"
                "\xe5\x14\xf2\xea\x3d\x14\x30\x5a\x47\xce\xb1\xe1\x53\xae\x1f"
                "\x0b\x9a\x2f\xe1\x15\x58\x71\x1d\xbd\x89\xdd\xb1\x01\x08\xe3"
                "\x5b\x9c\x5a\x50\x96\x50\x70\x6f\x5a\x54\xce\x0c\x7a\xb6\x1a"
                "\xbc\xd1\xe3\x23\xe3\xe8\xb6\x9d\xbe\xa9\x2f\x82\x23\xcc\x46"
                "\x2e\xe9\xe4\xa2\xdd\x4b\xff\x55\x56\x78\x53\xdc\xf1\x5a\xfe"
                "\x53\x81\x82\x01\x00\x0f\x4b\x51\xaa\x9f\x78\xd6\x37\x3f\x15"
                "\xbf\xf2\x76\xf9\x7f\x8d\x35\xec\xf2\x54\xbb\xab\x37\x27\x4f"
                "\xc6\xda\xe9\x41\x49\x30\xd7\x69\xf7\x81\x30\x1c\xa3\x6d\xe8"
                "\x88\x04\xac\x42\x8e\xd8\x23\x79\x53\x2f\x6c\x22\x71\xda\x69"
                "\xa8\x5c\x6c\x96\x3e\x11\x63\x96\x38\x70\xc4\xa9\x89\xbb\x29"
                "\xdd\x0d\xae\x6d\xe4\xe1\x04\xf0\xf5\xd3\xdf\xfe\x18\x2f\x28"
                "\x1b\xa4\x0d\x39\xd2\xc4\x08\x9a\x8b\x7d\xbe\xd7\x87\xcb\x81"
                "\x1d\xa8\xf5\x52\xe5\xb7\x5f\x3e\x67\x8a\x58\xdd\x18\x73\xde"
                "\xdd\x5a\x1d\x0d\xda\x8c\xb9\x0f\x66\xc2\x19\x8d\x4c\xac\xbe"
                "\xee\xa3\xdf\xc2\x1b\x9e\x07\xcf\xfd\x7d\x44\xe7\x8f\x6e\xee"
                "\x84\x02\x34\x54\x27\x10\xfc\xbb\x65\x1b\xbc\x4d\x92\xa2\x9f"
                "\x10\xdd\x21\x41\x98\x94\xbb\x98\xa5\x7c\x87\x33\x50\x9b\x65"
                "\xdd\xe9\x06\xa9\x4b\xcc\x00\x4c\x5b\x42\x9d\x9c\x7f\xb8\x78"
                "\xdb\x56\xd5\xff\x0e\xe2\xc1\xb8\xf7\x00\x20\x65\x7a\x8a\x4f"
                "\x98\xe0\x32\x51\x5b\x71\x17\x4f\x59\x47\x86\xe3\xc5\x19\xf0"
                "\x03\xb6\x98\x0d\xdd\x8f\x62\xc8\xf2\x56\x45\xe6\xf7\x29\x8f"
                "\x1f\x70\x14\x95\x7f\xb4\x07\x18\x19\xee\x76\xa1\x5f\xc3\xf3"
                "\x33\xf9\x6a\x90\x54\x81\xa2\x82\x02\x8b\xa0\x82\x02\x0c\xa3"
                "\x82\x02\x08\x80\x82\x01\x00\x9f\x01\x7b\x87\xfd\xbe\xa0\x02"
                "\x77\x00\x19\x7f\x2f\xde\x80\xab\xdc\xd0\x14\xe9\x63\xe5\xd6"
                "\xfb\x2c\xcb\xb0\x70\x88\xbe\xcb\x6d\x8e\x56\xf3\x02\x34\xae"
                "\xec\x30\xf7\x41\xcf\xe7\x07\x80\x52\x04\xa1\x16\x51\x15\x07"
                "\xba\xdb\xc6\xe8\xce\xa8\x8c\xa8\xb7\xaa\x4e\x08\x96\xbd\x5f"
                "\xbd\x64\x0d\xe3\x88\xca\x7e\x1a\x20\x1f\x65\x44\x3a\xc8\x2c"
                "\xc2\xdd\xc8\xc6\x9b\x8f\x01\x8e\x36\xc5\x52\x5a\xb1\x1d\x1d"
                "\xc4\xf0\x9f\xa9\x51\x4d\xe6\xeb\x36\x9c\x2e\x2d\x08\x1c\xaf"
                "\x67\xed\x83\xbb\x67\x77\x83\x24\x49\x97\x8c\x06\x0d\xca\x8b"
                "\x45\xf4\x2b\xff\x94\x22\x7f\x04\x92\x81\xd6\xf5\x17\x7f\x41"
                "\x2d\xc3\x4e\x86\x2a\x60\xc4\x0e\x74\xb0\x04\x3c\x48\xe4\xd8"
                "\x09\xf6\x48\x35\x00\x09\xda\xaa\x31\x2f\x8b\x5f\x6d\x4c\x48"
                "\x52\xb9\xd9\x43\xe8\x1e\x22\x68\x80\xbe\xff\xee\x11\x3b\x83"
                "\x47\xfd\xec\x6e\x1d\x9c\x7b\xd8\xe3\x2a\x8b\xef\x2a\xb3\xa5"
                "\xc1\x78\x3c\x0b\x0e\x31\xe6\x40\x80\xe1\xcb\x25\x56\xb3\x45"
                "\x7e\x65\xb3\xd9\x1a\x8e\xf8\xb0\x65\x44\x89\x73\x90\x0f\xe7"
                "\xcd\x1b\x68\x3b\xa4\x7a\x35\x41\xad\xfd\x8e\xa8\x50\xe0\xf2"
                "\xab\x2d\xe2\x31\x39\x82\x41\x4b\x81\x82\x01\x00\x15\x1f\xbe"
                "\x35\x5f\xd9\xca\x09\x16\x13\x34\x7c\x8d\x5b\xbf\x27\x17\xc9"
                "\xa5\x7a\xde\x0a\xec\x3f\xf8\x43\x2e\x39\x3d\xa1\x3f\xcf\x3e"
                "\x89\xbe\x18\x7c\x77\xfe\x70\xd5\xac\x5b\x8b\x18\x91\x6b\x42"
                "\xb0\xcd\x09\xb4\x21\x42\x99\x09\xd4\x5b\xd6\xf4\x07\x5b\xc3"
                "\xce\x2b\xf6\x16\x07\xe5\xf6\x91\xd9\xaf\xb4\xcd\xee\x92\x7b"
                "\x1e\x5b\xbe\xd0\x3d\x94\x1f\xe4\x97\x8a\xab\x1b\xfc\x36\x2d"
                "\x7f\xa2\xbc\xd0\x8c\x60\xf6\x17\x67\x02\x09\x8e\x14\xcb\x46"
                "\x24\xe2\x05\x85\x7c\x3d\x2b\x9d\xe7\x4d\x77\xe0\x6a\x91\x3b"
                "\xac\xe0\x40\x37\x58\xdd\x3f\x21\x2c\x0d\xca\x77\x84\x5e\xd7"
                "\x39\x6e\x2d\x7b\x21\x26\x85\x0a\xa9\xb7\xbd\x8f\x5f\x01\xed"
                "\xf5\x32\x2c\xea\xfc\xd0\xbc\x5d\xbe\xb1\x9b\x26\x2c\x8e\xfe"
                "\xc4\x26\x5b\x0a\xda\xf6\x35\xb1\x2f\x53\x97\xf5\x2d\x0f\x35"
                "\x8c\x40\xd9\xc4\xfa\xc7\xb2\xbb\xf4\x87\x38\x49\x2c\x96\x77"
                "\xac\xd9\xcd\x06\x55\xe4\x64\x4c\x42\x76\xc0\xc2\x2c\xf9\x61"
                "\x8b\x3e\xa5\x75\x92\x67\x75\x8a\x55\x16\x7d\x00\x8e\xf1\x38"
                "\xd3\x01\x5a\xfb\x52\xaf\x35\x5d\x66\x48\x21\x6a\x20\x88\x72"
                "\x36\x9a\x87\x69\x16\x8d\x81\x4f\x8a\xf9\x9a\x35\xc7\xa1\x79"
                "\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f"
                "\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd"
                "\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa3\x27\x80\x20\x38\xb9"
                "\xf0\xeb\x68\x8b\x9f\x55\x37\x9a\xec\x07\xd4\xa2\x13\xac\x34"
                "\xa1\x67\x31\x34\xea\xc2\x2f\xef\x13\xe3\x5c\xcf\x8f\x90\x1e"
                "\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x7c\x54\x6a\x6d\x7f\x00"
                "\x52\x31\x03\xe7\xb4\x5b\x1c\x9f\x72\xeb\x3c\x18\x08\xa3\x24"
                "\xb2\x63\x5f\x77\x55\x4a\x42\xdb\x1e\xff\x1e\x81\x03\x02\x00"
                "\x00\xa1\x79\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11"
                "\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2"
                "\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa3\x27\x80"
                "\x20\x55\x6b\x6d\xe3\x00\xd4\xf3\x7e\x75\x3a\x68\xfc\x25\xdf"
                "\xf2\xf7\x18\x54\xa5\x55\x0c\xa5\xa9\x65\xbf\x66\x9e\x4e\x49"
                "\x56\x1e\xf1\x81\x03\x01\x00\x00\xa4\x27\x80\x20\xe4\x66\x69"
                "\x86\x87\x57\x0e\xac\xf1\xfd\x06\x81\x48\x90\x82\x42\x48\x50"
                "\x75\x8e\xd4\x2d\xf3\x02\x37\x89\x28\xc5\x68\xd7\xa0\x11\x81"
                "\x03\x02\x00\x00"s;
            auto const thresh0EncodedCondition =
                "\xa2\x2b\x80\x20\xd4\xa1\x58\x3c\x05\xf5\x50\x00\xfe\xdd\x7c"
                "\x71\xa6\x71\x8a\xe9\xb6\x18\xcf\x53\x85\x02\x74\xb7\x64\x9b"
                "\x14\xd4\x28\x98\x5f\x45\x81\x03\x05\x34\x30\x82\x02\x03\xd8"s;
            auto const thresh0EncodedFingerprint =
                "\x30\x82\x01\x07\x80\x01\x03\xa1\x82\x01\x00\xa0\x25\x80\x20"
                "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
                "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
                "\xeb\x4e\x81\x01\x09\xa1\x2b\x80\x20\x6a\x2e\x8f\xe6\xf1\x3e"
                "\x05\xa5\x51\x0d\xb1\x09\xd8\xc1\x36\x97\xef\xaa\xe5\x02\x25"
                "\x02\xea\xe6\xeb\x41\x81\x51\xbd\xce\xb3\x71\x81\x03\x01\x0c"
                "\x30\x82\x02\x04\x10\xa1\x2b\x80\x20\xd3\xc8\x4f\x2a\x31\xb1"
                "\xca\x97\x83\xd8\xc0\x56\x6a\xd4\x1e\xcb\x49\x93\xa5\x17\x7a"
                "\xf1\x1d\x97\x91\x36\x7f\x4b\xce\xde\x4c\x2b\x81\x03\x01\x0c"
                "\x30\x82\x02\x04\x10\xa2\x2b\x80\x20\xf7\x98\x7b\x51\x67\x7b"
                "\x5b\x54\x79\x4e\xee\xac\xfc\xf7\xec\xa9\x60\xe4\xb8\x44\x72"
                "\x9e\x6c\x08\xcc\xa7\xd3\xc1\x9d\xa5\x3c\xe5\x81\x03\x02\x10"
                "\x00\x82\x02\x03\x98\xa3\x27\x80\x20\x55\x6b\x6d\xe3\x00\xd4"
                "\xf3\x7e\x75\x3a\x68\xfc\x25\xdf\xf2\xf7\x18\x54\xa5\x55\x0c"
                "\xa5\xa9\x65\xbf\x66\x9e\x4e\x49\x56\x1e\xf1\x81\x03\x01\x00"
                "\x00\xa4\x27\x80\x20\xe4\x66\x69\x86\x87\x57\x0e\xac\xf1\xfd"
                "\x06\x81\x48\x90\x82\x42\x48\x50\x75\x8e\xd4\x2d\xf3\x02\x37"
                "\x89\x28\xc5\x68\xd7\xa0\x11\x81\x03\x02\x00\x00"s;
            check(
                &thresh0,
                thresh0Msg,
                thresh0EncodedFulfillment,
                thresh0EncodedCondition,
                thresh0EncodedFingerprint);
        }
    }

    void
    testThresh31()
    {
        testcase("Thresh31");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * thresh0
        // ** Preim8Cond
        // ** Rsa9Cond
        // ** Ed10Cond
        // ** Prefix11Cond
        // ** Thresh15Cond
        // ** prefix1
        // *** prefix2
        // **** prefix3
        // ***** rsa4
        // ** preim5
        // ** rsa6
        // ** ed7

        auto const rsa4Msg = "P3P2P1abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa4PublicKey{
            {0xbe, 0x09, 0xc5, 0xa4, 0x27, 0x29, 0xdf, 0xd4, 0x67, 0x76, 0xbe,
             0xbf, 0x2c, 0xf3, 0xa2, 0x0b, 0x42, 0xe4, 0xbf, 0xeb, 0xdd, 0x67,
             0x20, 0xfb, 0x7a, 0x27, 0x93, 0xc0, 0x78, 0x47, 0x78, 0xd7, 0x15,
             0x32, 0xee, 0x38, 0x81, 0x0d, 0x36, 0xa2, 0xc4, 0x65, 0x44, 0xe6,
             0x62, 0x26, 0xb9, 0x58, 0x13, 0xa4, 0x15, 0x82, 0xab, 0xb1, 0x16,
             0x61, 0xfc, 0x01, 0x98, 0xc6, 0x1a, 0x69, 0xc6, 0xba, 0x39, 0x3f,
             0x01, 0x55, 0x3d, 0xd7, 0x8e, 0x14, 0x42, 0x6d, 0x78, 0x74, 0x9b,
             0x28, 0xcb, 0x31, 0x39, 0x98, 0x5a, 0x11, 0xdc, 0xc1, 0x18, 0x9d,
             0x8d, 0xb0, 0xcd, 0x1b, 0x4c, 0x10, 0xab, 0x14, 0x64, 0x19, 0xf1,
             0x33, 0x15, 0x45, 0xc8, 0x92, 0x82, 0x03, 0x82, 0x8a, 0xaa, 0xad,
             0x94, 0xfc, 0x24, 0x11, 0x96, 0x99, 0x7e, 0x94, 0x5a, 0x82, 0x57,
             0x68, 0x61, 0x9f, 0x7b, 0x45, 0xe0, 0x99, 0x9e, 0x4f, 0x32, 0x50,
             0x5f, 0x05, 0xc8, 0x11, 0xae, 0xc4, 0x0c, 0x63, 0x18, 0x0e, 0x02,
             0x59, 0x36, 0x25, 0x92, 0x06, 0x32, 0xc7, 0x71, 0x47, 0x99, 0xcc,
             0x0a, 0x6e, 0x0a, 0x58, 0x71, 0x3f, 0x5e, 0xb7, 0x78, 0xf7, 0x98,
             0x79, 0xdf, 0x74, 0xa4, 0xeb, 0xa9, 0x00, 0xfd, 0x81, 0xb3, 0xcf,
             0x04, 0x8c, 0x5d, 0x7d, 0xe7, 0xb2, 0x82, 0x90, 0x49, 0xbd, 0x69,
             0xf3, 0x08, 0xe9, 0x92, 0xc6, 0x9e, 0x41, 0xba, 0x74, 0xd8, 0x8d,
             0x81, 0x97, 0x6f, 0x86, 0xab, 0xc9, 0xf1, 0x02, 0x31, 0xb4, 0xce,
             0x47, 0xb0, 0x39, 0xc8, 0xba, 0x51, 0xa7, 0x39, 0xf3, 0x71, 0xa2,
             0x25, 0x27, 0x37, 0x6e, 0x09, 0x6f, 0x19, 0x59, 0xbc, 0x65, 0xd9,
             0xcd, 0x12, 0xd3, 0x2c, 0xa2, 0x78, 0xfa, 0x23, 0x15, 0x1a, 0x82,
             0x41, 0x91, 0x1b, 0xbe, 0x8a, 0xe7, 0xfe, 0x3c, 0x3c, 0x30, 0x32,
             0xaa, 0xe9, 0xf3}};
        std::array<std::uint8_t, 256> const rsa4Sig{
            {0x6f, 0x2f, 0x86, 0x38, 0xf2, 0xd3, 0x69, 0x09, 0xcd, 0xa8, 0x46,
             0x51, 0x3d, 0x9b, 0x0a, 0xc9, 0xae, 0x39, 0x0e, 0x18, 0xe0, 0xce,
             0xb1, 0x5e, 0x6c, 0x59, 0x38, 0xad, 0x20, 0xba, 0xe6, 0x04, 0xe7,
             0xd6, 0xa9, 0x01, 0x9a, 0x3a, 0x61, 0xa0, 0x5d, 0x9b, 0xd2, 0x6e,
             0xcb, 0xca, 0x6c, 0xff, 0xbd, 0xec, 0x31, 0x13, 0xad, 0x0f, 0x4e,
             0x97, 0xca, 0x28, 0xfe, 0x56, 0x70, 0x94, 0x24, 0x91, 0xb0, 0x6e,
             0xf9, 0x84, 0x97, 0x3d, 0xa6, 0xe1, 0x39, 0x47, 0xa1, 0x8b, 0x48,
             0xc5, 0x23, 0x2a, 0xf1, 0xf0, 0x19, 0x23, 0x87, 0x76, 0x13, 0xf4,
             0x30, 0x1a, 0xfb, 0x9d, 0x4c, 0x70, 0x55, 0xf9, 0x6f, 0xd5, 0x80,
             0x40, 0x7a, 0xf1, 0x19, 0x8a, 0xb3, 0xdd, 0x03, 0xe1, 0x3e, 0x22,
             0xf4, 0x4b, 0x21, 0x61, 0xe3, 0x57, 0xb5, 0x3a, 0x9f, 0xfa, 0x34,
             0xb0, 0x84, 0x0a, 0x9f, 0x19, 0xf8, 0xee, 0xb4, 0x71, 0xbe, 0x73,
             0xae, 0xbb, 0x86, 0x22, 0x77, 0xfb, 0xab, 0xda, 0xb3, 0x5a, 0x9b,
             0x4f, 0x6f, 0xda, 0xc7, 0xac, 0x8f, 0xc3, 0xcc, 0x24, 0x48, 0xde,
             0x46, 0x16, 0x3c, 0x29, 0x31, 0xd1, 0x8f, 0x27, 0x44, 0xf0, 0x5c,
             0x14, 0xfa, 0x55, 0x25, 0x2a, 0x65, 0x26, 0xf1, 0xc2, 0xc1, 0xf6,
             0xe9, 0xf3, 0xc4, 0x67, 0xe0, 0x0d, 0xc9, 0xba, 0x2f, 0x01, 0x41,
             0x77, 0x44, 0x7b, 0x85, 0x89, 0x2d, 0x4e, 0x2e, 0x99, 0x1e, 0xdb,
             0x32, 0x58, 0x5b, 0x52, 0x7e, 0x5d, 0x07, 0x76, 0xe0, 0x68, 0xa5,
             0x36, 0xdf, 0x1e, 0xf3, 0xee, 0xa6, 0x72, 0x7a, 0x8c, 0x5f, 0xc6,
             0xd5, 0xc6, 0x9c, 0x23, 0xde, 0x00, 0xcc, 0x3e, 0x29, 0x6e, 0xe9,
             0x28, 0x23, 0xcd, 0x2a, 0xef, 0x1a, 0x90, 0xbf, 0x1b, 0x5c, 0x34,
             0xa4, 0x9b, 0xc3, 0x79, 0x12, 0xc5, 0x2d, 0x5f, 0x09, 0x0c, 0x94,
             0xf6, 0x5b, 0x5f}};
        auto const prefix3Prefix = "P3"s;
        auto const prefix3Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix3MaxMsgLength = 14;
        auto const prefix2Prefix = "P2"s;
        auto const prefix2Msg = "P1abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix2MaxMsgLength = 14;
        auto const prefix1Prefix = "P1"s;
        auto const prefix1Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix1MaxMsgLength = 14;
        auto const preim5Preimage = "I am root"s;
        auto const preim5Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const rsa6Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa6PublicKey{
            {0xd0, 0x07, 0xfc, 0x9d, 0xb0, 0xa1, 0xa6, 0x40, 0xe4, 0x52, 0x30,
             0x42, 0x74, 0xfd, 0x35, 0x04, 0xde, 0x45, 0x68, 0xb3, 0x22, 0xdd,
             0xff, 0x41, 0x43, 0x69, 0x33, 0xc0, 0xff, 0x35, 0xb6, 0x6d, 0x15,
             0xe9, 0x54, 0x15, 0xeb, 0x1d, 0x07, 0xe2, 0x25, 0x2b, 0xdb, 0xaa,
             0x16, 0x8d, 0x0d, 0x7f, 0x05, 0xf0, 0xd2, 0x7d, 0xb4, 0x9b, 0x51,
             0x19, 0x20, 0x1e, 0x3d, 0xba, 0x50, 0x9e, 0x51, 0x13, 0x81, 0x43,
             0x55, 0x96, 0xca, 0xdb, 0x88, 0x1f, 0xef, 0x2d, 0x38, 0x3f, 0xae,
             0x8d, 0xac, 0xc8, 0x6f, 0x2b, 0xd5, 0xf0, 0x34, 0x1a, 0x99, 0x00,
             0x7c, 0x6d, 0xb3, 0x1b, 0x1d, 0x68, 0xdb, 0xf8, 0x1c, 0x59, 0x3a,
             0x63, 0x38, 0x7c, 0x1c, 0x14, 0xbc, 0x22, 0xcf, 0xc8, 0x9a, 0xc6,
             0x96, 0x6f, 0x3d, 0x03, 0x0b, 0x61, 0x6b, 0x7d, 0x75, 0x97, 0xe8,
             0x25, 0xb8, 0x2f, 0xfa, 0xf4, 0x07, 0x44, 0xdf, 0x00, 0x3d, 0xff,
             0x0d, 0xd5, 0x7f, 0x7f, 0xf3, 0x0c, 0x13, 0xac, 0x8d, 0xf8, 0x8c,
             0x79, 0xc5, 0xf3, 0x29, 0xdc, 0x23, 0x65, 0xd3, 0xd1, 0x1c, 0xa6,
             0x14, 0x78, 0x6a, 0x1a, 0xe3, 0x15, 0x8d, 0x8b, 0xdc, 0xa0, 0x5a,
             0xc7, 0x82, 0xb0, 0x03, 0x6c, 0x71, 0x43, 0x59, 0x24, 0xc7, 0x50,
             0x64, 0xb2, 0xa7, 0x69, 0xf5, 0xbd, 0xe6, 0x5e, 0xaa, 0x77, 0x59,
             0x60, 0x36, 0xc0, 0xe3, 0x42, 0x7f, 0x05, 0x3b, 0x4c, 0x02, 0x0e,
             0x70, 0x5a, 0x70, 0xc5, 0x2a, 0xeb, 0x94, 0x4d, 0x15, 0x09, 0xef,
             0xbb, 0x58, 0x42, 0x68, 0x05, 0x59, 0x70, 0xa0, 0x17, 0xb2, 0x8e,
             0xdf, 0x7b, 0x40, 0x5d, 0x21, 0x1e, 0xfe, 0x62, 0x58, 0xde, 0xfb,
             0x14, 0x91, 0x18, 0xf3, 0x4f, 0x9b, 0x36, 0x55, 0xcf, 0xb3, 0x5e,
             0xec, 0x4f, 0xcc, 0x6d, 0x13, 0x58, 0xc8, 0xa3, 0xa3, 0xee, 0x23,
             0x8a, 0xc2, 0xbf}};
        std::array<std::uint8_t, 256> const rsa6Sig{
            {0x34, 0x05, 0xe4, 0x31, 0x9e, 0xab, 0xf1, 0xa0, 0x7f, 0xa6, 0xf6,
             0xa6, 0x8e, 0x54, 0x5b, 0x32, 0xb6, 0xdc, 0x50, 0xc5, 0x94, 0x71,
             0x1f, 0x6c, 0x08, 0xf6, 0x68, 0x82, 0x8d, 0x3c, 0x23, 0xbe, 0xec,
             0xdc, 0x1c, 0xc8, 0x14, 0xcf, 0xec, 0xfe, 0xc0, 0xad, 0xa0, 0x5c,
             0x49, 0x8d, 0xf7, 0x2e, 0x5a, 0x20, 0xfc, 0x28, 0x1f, 0xff, 0x31,
             0x54, 0x1a, 0x5a, 0xf7, 0x18, 0x61, 0x4d, 0xe0, 0x0d, 0x93, 0xa5,
             0xbe, 0xe2, 0x9e, 0xd8, 0xb5, 0x58, 0xb0, 0xee, 0xc1, 0x66, 0xb3,
             0x78, 0x1d, 0x35, 0xb2, 0x5a, 0xf2, 0xff, 0x16, 0xf5, 0xc4, 0x64,
             0xd1, 0x4f, 0xcd, 0x75, 0xc2, 0xd8, 0xab, 0x85, 0x30, 0x04, 0x0c,
             0x38, 0xbd, 0x6c, 0x62, 0xf7, 0x20, 0xfc, 0x2d, 0x25, 0x3c, 0x2a,
             0x64, 0x0f, 0xf6, 0x10, 0x73, 0x12, 0x03, 0xe8, 0xfd, 0x21, 0x1f,
             0xba, 0x0a, 0xc2, 0x9a, 0xcf, 0x58, 0x52, 0x39, 0xfc, 0x05, 0x1e,
             0x18, 0x77, 0xe7, 0x23, 0x12, 0x3a, 0xfa, 0xbf, 0xb4, 0xe2, 0x1b,
             0x2f, 0xb6, 0xd2, 0x37, 0x23, 0x01, 0xdf, 0xef, 0x38, 0x4f, 0xc8,
             0xdf, 0xae, 0x18, 0x12, 0xb7, 0xf8, 0xfb, 0x83, 0x24, 0x98, 0xb4,
             0x18, 0xc8, 0xb8, 0xbf, 0x69, 0x90, 0xfb, 0xbb, 0x26, 0xb2, 0x73,
             0x12, 0xca, 0x72, 0x3e, 0x8a, 0x90, 0xcb, 0xd5, 0x4e, 0xd7, 0x01,
             0x3d, 0x6b, 0x2a, 0x18, 0xd2, 0x4c, 0x03, 0xb0, 0xd0, 0x75, 0x8b,
             0xc7, 0x4e, 0x35, 0x19, 0xf8, 0x3f, 0x36, 0x77, 0xe3, 0x00, 0xa4,
             0x6b, 0x53, 0x1b, 0x97, 0xcc, 0x5f, 0xe6, 0xfb, 0x0a, 0x43, 0x5f,
             0xed, 0x93, 0x8f, 0xd7, 0xd3, 0x0a, 0x73, 0x31, 0x05, 0xbe, 0x41,
             0x40, 0xcb, 0xed, 0x50, 0xa4, 0xbf, 0xa6, 0xe7, 0x05, 0xe0, 0x6e,
             0x50, 0x27, 0x55, 0xe7, 0x09, 0xda, 0xb5, 0xab, 0xe2, 0x7f, 0xf3,
             0xef, 0x3c, 0x36}};
        auto const ed7Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed7PublicKey{
            {0x58, 0xcf, 0x4b, 0xc5, 0x59, 0xdb, 0xba, 0x62, 0x25, 0x14, 0x3a,
             0xc0, 0xad, 0xab, 0x5e, 0x35, 0xa1, 0xb4, 0x0e, 0xc1, 0xaf, 0x3c,
             0xa8, 0x2f, 0x69, 0x2c, 0xb6, 0x25, 0xd7, 0xea, 0x15, 0xb3}};
        std::array<std::uint8_t, 64> const ed7Sig{
            {0xd0, 0xd1, 0x17, 0xe2, 0xb5, 0x40, 0x14, 0x81, 0x0b, 0x12, 0xd8,
             0xbe, 0x1d, 0x1c, 0xb0, 0x88, 0x27, 0xaf, 0x6e, 0xc3, 0x13, 0x71,
             0xea, 0xac, 0xf3, 0xd8, 0x6f, 0x38, 0x21, 0xe2, 0x6d, 0x77, 0xe9,
             0xa6, 0xba, 0x03, 0x2a, 0xe3, 0x50, 0xcb, 0x38, 0xbe, 0x36, 0xba,
             0x62, 0x6e, 0x37, 0x5c, 0x8d, 0x69, 0x9f, 0xf0, 0x43, 0x64, 0x83,
             0x82, 0x8e, 0xbe, 0xf5, 0xa6, 0x96, 0x35, 0xb7, 0x03}};
        std::array<std::uint8_t, 32> const ed7SigningKey{
            {0x9c, 0x02, 0x4b, 0x5e, 0x6a, 0x83, 0x35, 0x8a, 0x2a, 0x71, 0x70,
             0x4e, 0xab, 0x74, 0x72, 0x22, 0x33, 0x5a, 0x82, 0xd9, 0x8e, 0x9c,
             0x8c, 0x41, 0x62, 0x6b, 0x02, 0x62, 0xbd, 0x59, 0x31, 0xcb}};
        (void)ed7SigningKey;
        auto const thresh0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim8CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim8Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim8CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa9CondConditionFingerprint =
            "\xe5\x15\x0a\xbd\xf6\x06\xbe\xaa\x6c\x81\xf1\x88\x7e\x70\x64"
            "\x51\xeb\x6f\x70\xb1\xdd\xc5\xf1\x20\x53\xf7\xcb\x9f\x7f\xc7"
            "\xe4\x52"s;
        Condition const Rsa9Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa9CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed10CondConditionFingerprint =
            "\x00\x8b\xe6\x62\xd4\x30\x65\x1e\x40\xb3\x23\x05\x52\x3a\xf3"
            "\x16\xda\x09\xbe\x79\x5f\x41\xc9\x03\x93\x34\x5b\x7c\x24\x87"
            "\x62\xfa"s;
        Condition const Ed10Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed10CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Prefix11CondConditionFingerprint =
            "\x0c\x57\xdd\x99\xe7\xc9\xd3\x02\xd9\xa7\x2b\xce\x5c\xee\x77"
            "\x45\xcc\x0f\x53\x9f\xca\xc5\xd2\x2a\x6e\xa2\x58\x50\x4c\x90"
            "\xe3\x50"s;
        Condition const Prefix11Cond{
            Type::prefixSha256,
            68671,
            makeSlice(Prefix11CondConditionFingerprint),
            std::bitset<5>{8}};
        auto const Thresh15CondConditionFingerprint =
            "\xe4\x99\xf9\xf9\x59\x6f\x60\x5f\x8f\xda\xa9\x49\x9d\xf0\xf8"
            "\xd4\x95\x00\x23\xb7\x66\xaf\x26\xb6\x2f\xee\x3f\xe0\x87\xd9"
            "\x92\x5b"s;
        Condition const Thresh15Cond{
            Type::thresholdSha256,
            135168,
            makeSlice(Thresh15CondConditionFingerprint),
            std::bitset<5>{25}};

        auto rsa4 = std::make_unique<RsaSha256>(
            makeSlice(rsa4PublicKey), makeSlice(rsa4Sig));
        auto prefix3 = std::make_unique<PrefixSha256>(
            makeSlice(prefix3Prefix), prefix3MaxMsgLength, std::move(rsa4));
        auto prefix2 = std::make_unique<PrefixSha256>(
            makeSlice(prefix2Prefix), prefix2MaxMsgLength, std::move(prefix3));
        auto prefix1 = std::make_unique<PrefixSha256>(
            makeSlice(prefix1Prefix), prefix1MaxMsgLength, std::move(prefix2));
        auto preim5 =
            std::make_unique<PreimageSha256>(makeSlice(preim5Preimage));
        auto rsa6 = std::make_unique<RsaSha256>(
            makeSlice(rsa6PublicKey), makeSlice(rsa6Sig));
        auto ed7 = std::make_unique<Ed25519>(ed7PublicKey, ed7Sig);
        std::vector<std::unique_ptr<Fulfillment>> thresh0Subfulfillments;
        thresh0Subfulfillments.emplace_back(std::move(prefix1));
        thresh0Subfulfillments.emplace_back(std::move(preim5));
        thresh0Subfulfillments.emplace_back(std::move(rsa6));
        thresh0Subfulfillments.emplace_back(std::move(ed7));
        std::vector<Condition> thresh0Subconditions{
            {Preim8Cond, Rsa9Cond, Ed10Cond, Prefix11Cond, Thresh15Cond}};
        ThresholdSha256 const thresh0(
            std::move(thresh0Subfulfillments), std::move(thresh0Subconditions));
        {
            auto const thresh0EncodedFulfillment =
                "\xa2\x82\x05\x92\xa0\x82\x04\xb8\xa0\x0b\x80\x09\x49\x20\x61"
                "\x6d\x20\x72\x6f\x6f\x74\xa1\x82\x02\x35\x80\x02\x50\x31\x81"
                "\x01\x0e\xa2\x82\x02\x2a\xa1\x82\x02\x26\x80\x02\x50\x32\x81"
                "\x01\x0e\xa2\x82\x02\x1b\xa1\x82\x02\x17\x80\x02\x50\x33\x81"
                "\x01\x0e\xa2\x82\x02\x0c\xa3\x82\x02\x08\x80\x82\x01\x00\xbe"
                "\x09\xc5\xa4\x27\x29\xdf\xd4\x67\x76\xbe\xbf\x2c\xf3\xa2\x0b"
                "\x42\xe4\xbf\xeb\xdd\x67\x20\xfb\x7a\x27\x93\xc0\x78\x47\x78"
                "\xd7\x15\x32\xee\x38\x81\x0d\x36\xa2\xc4\x65\x44\xe6\x62\x26"
                "\xb9\x58\x13\xa4\x15\x82\xab\xb1\x16\x61\xfc\x01\x98\xc6\x1a"
                "\x69\xc6\xba\x39\x3f\x01\x55\x3d\xd7\x8e\x14\x42\x6d\x78\x74"
                "\x9b\x28\xcb\x31\x39\x98\x5a\x11\xdc\xc1\x18\x9d\x8d\xb0\xcd"
                "\x1b\x4c\x10\xab\x14\x64\x19\xf1\x33\x15\x45\xc8\x92\x82\x03"
                "\x82\x8a\xaa\xad\x94\xfc\x24\x11\x96\x99\x7e\x94\x5a\x82\x57"
                "\x68\x61\x9f\x7b\x45\xe0\x99\x9e\x4f\x32\x50\x5f\x05\xc8\x11"
                "\xae\xc4\x0c\x63\x18\x0e\x02\x59\x36\x25\x92\x06\x32\xc7\x71"
                "\x47\x99\xcc\x0a\x6e\x0a\x58\x71\x3f\x5e\xb7\x78\xf7\x98\x79"
                "\xdf\x74\xa4\xeb\xa9\x00\xfd\x81\xb3\xcf\x04\x8c\x5d\x7d\xe7"
                "\xb2\x82\x90\x49\xbd\x69\xf3\x08\xe9\x92\xc6\x9e\x41\xba\x74"
                "\xd8\x8d\x81\x97\x6f\x86\xab\xc9\xf1\x02\x31\xb4\xce\x47\xb0"
                "\x39\xc8\xba\x51\xa7\x39\xf3\x71\xa2\x25\x27\x37\x6e\x09\x6f"
                "\x19\x59\xbc\x65\xd9\xcd\x12\xd3\x2c\xa2\x78\xfa\x23\x15\x1a"
                "\x82\x41\x91\x1b\xbe\x8a\xe7\xfe\x3c\x3c\x30\x32\xaa\xe9\xf3"
                "\x81\x82\x01\x00\x6f\x2f\x86\x38\xf2\xd3\x69\x09\xcd\xa8\x46"
                "\x51\x3d\x9b\x0a\xc9\xae\x39\x0e\x18\xe0\xce\xb1\x5e\x6c\x59"
                "\x38\xad\x20\xba\xe6\x04\xe7\xd6\xa9\x01\x9a\x3a\x61\xa0\x5d"
                "\x9b\xd2\x6e\xcb\xca\x6c\xff\xbd\xec\x31\x13\xad\x0f\x4e\x97"
                "\xca\x28\xfe\x56\x70\x94\x24\x91\xb0\x6e\xf9\x84\x97\x3d\xa6"
                "\xe1\x39\x47\xa1\x8b\x48\xc5\x23\x2a\xf1\xf0\x19\x23\x87\x76"
                "\x13\xf4\x30\x1a\xfb\x9d\x4c\x70\x55\xf9\x6f\xd5\x80\x40\x7a"
                "\xf1\x19\x8a\xb3\xdd\x03\xe1\x3e\x22\xf4\x4b\x21\x61\xe3\x57"
                "\xb5\x3a\x9f\xfa\x34\xb0\x84\x0a\x9f\x19\xf8\xee\xb4\x71\xbe"
                "\x73\xae\xbb\x86\x22\x77\xfb\xab\xda\xb3\x5a\x9b\x4f\x6f\xda"
                "\xc7\xac\x8f\xc3\xcc\x24\x48\xde\x46\x16\x3c\x29\x31\xd1\x8f"
                "\x27\x44\xf0\x5c\x14\xfa\x55\x25\x2a\x65\x26\xf1\xc2\xc1\xf6"
                "\xe9\xf3\xc4\x67\xe0\x0d\xc9\xba\x2f\x01\x41\x77\x44\x7b\x85"
                "\x89\x2d\x4e\x2e\x99\x1e\xdb\x32\x58\x5b\x52\x7e\x5d\x07\x76"
                "\xe0\x68\xa5\x36\xdf\x1e\xf3\xee\xa6\x72\x7a\x8c\x5f\xc6\xd5"
                "\xc6\x9c\x23\xde\x00\xcc\x3e\x29\x6e\xe9\x28\x23\xcd\x2a\xef"
                "\x1a\x90\xbf\x1b\x5c\x34\xa4\x9b\xc3\x79\x12\xc5\x2d\x5f\x09"
                "\x0c\x94\xf6\x5b\x5f\xa3\x82\x02\x08\x80\x82\x01\x00\xd0\x07"
                "\xfc\x9d\xb0\xa1\xa6\x40\xe4\x52\x30\x42\x74\xfd\x35\x04\xde"
                "\x45\x68\xb3\x22\xdd\xff\x41\x43\x69\x33\xc0\xff\x35\xb6\x6d"
                "\x15\xe9\x54\x15\xeb\x1d\x07\xe2\x25\x2b\xdb\xaa\x16\x8d\x0d"
                "\x7f\x05\xf0\xd2\x7d\xb4\x9b\x51\x19\x20\x1e\x3d\xba\x50\x9e"
                "\x51\x13\x81\x43\x55\x96\xca\xdb\x88\x1f\xef\x2d\x38\x3f\xae"
                "\x8d\xac\xc8\x6f\x2b\xd5\xf0\x34\x1a\x99\x00\x7c\x6d\xb3\x1b"
                "\x1d\x68\xdb\xf8\x1c\x59\x3a\x63\x38\x7c\x1c\x14\xbc\x22\xcf"
                "\xc8\x9a\xc6\x96\x6f\x3d\x03\x0b\x61\x6b\x7d\x75\x97\xe8\x25"
                "\xb8\x2f\xfa\xf4\x07\x44\xdf\x00\x3d\xff\x0d\xd5\x7f\x7f\xf3"
                "\x0c\x13\xac\x8d\xf8\x8c\x79\xc5\xf3\x29\xdc\x23\x65\xd3\xd1"
                "\x1c\xa6\x14\x78\x6a\x1a\xe3\x15\x8d\x8b\xdc\xa0\x5a\xc7\x82"
                "\xb0\x03\x6c\x71\x43\x59\x24\xc7\x50\x64\xb2\xa7\x69\xf5\xbd"
                "\xe6\x5e\xaa\x77\x59\x60\x36\xc0\xe3\x42\x7f\x05\x3b\x4c\x02"
                "\x0e\x70\x5a\x70\xc5\x2a\xeb\x94\x4d\x15\x09\xef\xbb\x58\x42"
                "\x68\x05\x59\x70\xa0\x17\xb2\x8e\xdf\x7b\x40\x5d\x21\x1e\xfe"
                "\x62\x58\xde\xfb\x14\x91\x18\xf3\x4f\x9b\x36\x55\xcf\xb3\x5e"
                "\xec\x4f\xcc\x6d\x13\x58\xc8\xa3\xa3\xee\x23\x8a\xc2\xbf\x81"
                "\x82\x01\x00\x34\x05\xe4\x31\x9e\xab\xf1\xa0\x7f\xa6\xf6\xa6"
                "\x8e\x54\x5b\x32\xb6\xdc\x50\xc5\x94\x71\x1f\x6c\x08\xf6\x68"
                "\x82\x8d\x3c\x23\xbe\xec\xdc\x1c\xc8\x14\xcf\xec\xfe\xc0\xad"
                "\xa0\x5c\x49\x8d\xf7\x2e\x5a\x20\xfc\x28\x1f\xff\x31\x54\x1a"
                "\x5a\xf7\x18\x61\x4d\xe0\x0d\x93\xa5\xbe\xe2\x9e\xd8\xb5\x58"
                "\xb0\xee\xc1\x66\xb3\x78\x1d\x35\xb2\x5a\xf2\xff\x16\xf5\xc4"
                "\x64\xd1\x4f\xcd\x75\xc2\xd8\xab\x85\x30\x04\x0c\x38\xbd\x6c"
                "\x62\xf7\x20\xfc\x2d\x25\x3c\x2a\x64\x0f\xf6\x10\x73\x12\x03"
                "\xe8\xfd\x21\x1f\xba\x0a\xc2\x9a\xcf\x58\x52\x39\xfc\x05\x1e"
                "\x18\x77\xe7\x23\x12\x3a\xfa\xbf\xb4\xe2\x1b\x2f\xb6\xd2\x37"
                "\x23\x01\xdf\xef\x38\x4f\xc8\xdf\xae\x18\x12\xb7\xf8\xfb\x83"
                "\x24\x98\xb4\x18\xc8\xb8\xbf\x69\x90\xfb\xbb\x26\xb2\x73\x12"
                "\xca\x72\x3e\x8a\x90\xcb\xd5\x4e\xd7\x01\x3d\x6b\x2a\x18\xd2"
                "\x4c\x03\xb0\xd0\x75\x8b\xc7\x4e\x35\x19\xf8\x3f\x36\x77\xe3"
                "\x00\xa4\x6b\x53\x1b\x97\xcc\x5f\xe6\xfb\x0a\x43\x5f\xed\x93"
                "\x8f\xd7\xd3\x0a\x73\x31\x05\xbe\x41\x40\xcb\xed\x50\xa4\xbf"
                "\xa6\xe7\x05\xe0\x6e\x50\x27\x55\xe7\x09\xda\xb5\xab\xe2\x7f"
                "\xf3\xef\x3c\x36\xa4\x64\x80\x20\x58\xcf\x4b\xc5\x59\xdb\xba"
                "\x62\x25\x14\x3a\xc0\xad\xab\x5e\x35\xa1\xb4\x0e\xc1\xaf\x3c"
                "\xa8\x2f\x69\x2c\xb6\x25\xd7\xea\x15\xb3\x81\x40\xd0\xd1\x17"
                "\xe2\xb5\x40\x14\x81\x0b\x12\xd8\xbe\x1d\x1c\xb0\x88\x27\xaf"
                "\x6e\xc3\x13\x71\xea\xac\xf3\xd8\x6f\x38\x21\xe2\x6d\x77\xe9"
                "\xa6\xba\x03\x2a\xe3\x50\xcb\x38\xbe\x36\xba\x62\x6e\x37\x5c"
                "\x8d\x69\x9f\xf0\x43\x64\x83\x82\x8e\xbe\xf5\xa6\x96\x35\xb7"
                "\x03\xa1\x81\xd3\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75"
                "\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c"
                "\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa1\x2b"
                "\x80\x20\x0c\x57\xdd\x99\xe7\xc9\xd3\x02\xd9\xa7\x2b\xce\x5c"
                "\xee\x77\x45\xcc\x0f\x53\x9f\xca\xc5\xd2\x2a\x6e\xa2\x58\x50"
                "\x4c\x90\xe3\x50\x81\x03\x01\x0c\x3f\x82\x02\x04\x10\xa2\x2b"
                "\x80\x20\xe4\x99\xf9\xf9\x59\x6f\x60\x5f\x8f\xda\xa9\x49\x9d"
                "\xf0\xf8\xd4\x95\x00\x23\xb7\x66\xaf\x26\xb6\x2f\xee\x3f\xe0"
                "\x87\xd9\x92\x5b\x81\x03\x02\x10\x00\x82\x02\x03\x98\xa3\x27"
                "\x80\x20\xe5\x15\x0a\xbd\xf6\x06\xbe\xaa\x6c\x81\xf1\x88\x7e"
                "\x70\x64\x51\xeb\x6f\x70\xb1\xdd\xc5\xf1\x20\x53\xf7\xcb\x9f"
                "\x7f\xc7\xe4\x52\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x00\x8b"
                "\xe6\x62\xd4\x30\x65\x1e\x40\xb3\x23\x05\x52\x3a\xf3\x16\xda"
                "\x09\xbe\x79\x5f\x41\xc9\x03\x93\x34\x5b\x7c\x24\x87\x62\xfa"
                "\x81\x03\x02\x00\x00"s;
            auto const thresh0EncodedCondition =
                "\xa2\x2b\x80\x20\xa2\x9b\xde\xef\x27\x35\xe9\x02\xb9\xd3\x4a"
                "\xdb\x0b\xcf\xa2\x00\x0f\xd4\x43\x3b\x4d\xce\xe6\xd3\x9f\x31"
                "\xbb\xa5\x1b\x6f\x62\xdc\x81\x03\x07\x40\x3f\x82\x02\x03\xd8"s;
            auto const thresh0EncodedFingerprint =
                "\x30\x82\x01\x80\x80\x01\x04\xa1\x82\x01\x79\xa0\x25\x80\x20"
                "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
                "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
                "\xeb\x4e\x81\x01\x09\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1"
                "\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21"
                "\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa1"
                "\x2b\x80\x20\x0c\x57\xdd\x99\xe7\xc9\xd3\x02\xd9\xa7\x2b\xce"
                "\x5c\xee\x77\x45\xcc\x0f\x53\x9f\xca\xc5\xd2\x2a\x6e\xa2\x58"
                "\x50\x4c\x90\xe3\x50\x81\x03\x01\x0c\x3f\x82\x02\x04\x10\xa1"
                "\x2b\x80\x20\xd3\xc8\x4f\x2a\x31\xb1\xca\x97\x83\xd8\xc0\x56"
                "\x6a\xd4\x1e\xcb\x49\x93\xa5\x17\x7a\xf1\x1d\x97\x91\x36\x7f"
                "\x4b\xce\xde\x4c\x2b\x81\x03\x01\x0c\x30\x82\x02\x04\x10\xa2"
                "\x2b\x80\x20\xe4\x99\xf9\xf9\x59\x6f\x60\x5f\x8f\xda\xa9\x49"
                "\x9d\xf0\xf8\xd4\x95\x00\x23\xb7\x66\xaf\x26\xb6\x2f\xee\x3f"
                "\xe0\x87\xd9\x92\x5b\x81\x03\x02\x10\x00\x82\x02\x03\x98\xa3"
                "\x27\x80\x20\xe5\x15\x0a\xbd\xf6\x06\xbe\xaa\x6c\x81\xf1\x88"
                "\x7e\x70\x64\x51\xeb\x6f\x70\xb1\xdd\xc5\xf1\x20\x53\xf7\xcb"
                "\x9f\x7f\xc7\xe4\x52\x81\x03\x01\x00\x00\xa3\x27\x80\x20\xee"
                "\x75\xbe\xb3\x52\x54\xbd\x24\x06\x3f\xd9\x32\x48\x19\xe1\x5c"
                "\x70\x85\x92\x11\x6c\x3a\xc1\x4c\x9b\x83\xeb\x05\xa7\x59\xe2"
                "\xa0\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x00\x8b\xe6\x62\xd4"
                "\x30\x65\x1e\x40\xb3\x23\x05\x52\x3a\xf3\x16\xda\x09\xbe\x79"
                "\x5f\x41\xc9\x03\x93\x34\x5b\x7c\x24\x87\x62\xfa\x81\x03\x02"
                "\x00\x00\xa4\x27\x80\x20\x1e\x5a\xaf\x3e\x46\xf6\xd4\xdf\x4d"
                "\x70\xf0\xa1\xd1\x35\x6d\xf0\x8b\x86\x91\xac\xb2\xf2\x24\xf0"
                "\x1a\xd4\x23\xc0\x21\x8d\x42\xc0\x81\x03\x02\x00\x00"s;
            check(
                &thresh0,
                thresh0Msg,
                thresh0EncodedFulfillment,
                thresh0EncodedCondition,
                thresh0EncodedFingerprint);
        }
    }

    void
    testThresh32()
    {
        testcase("Thresh32");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * thresh0
        // ** Preim19Cond
        // ** Rsa20Cond
        // ** Ed21Cond
        // ** prefix1
        // *** prefix2
        // **** thresh3
        // ***** rsa4
        // ** prefix5
        // *** prefix6
        // **** thresh7
        // ***** rsa8
        // ** thresh9
        // *** Preim16Cond
        // *** Rsa17Cond
        // *** Ed18Cond
        // *** rsa10
        // *** thresh11
        // **** Preim13Cond
        // **** Rsa14Cond
        // **** Ed15Cond
        // **** rsa12

        auto const rsa4Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa4PublicKey{
            {0xbe, 0x09, 0xc5, 0xa4, 0x27, 0x29, 0xdf, 0xd4, 0x67, 0x76, 0xbe,
             0xbf, 0x2c, 0xf3, 0xa2, 0x0b, 0x42, 0xe4, 0xbf, 0xeb, 0xdd, 0x67,
             0x20, 0xfb, 0x7a, 0x27, 0x93, 0xc0, 0x78, 0x47, 0x78, 0xd7, 0x15,
             0x32, 0xee, 0x38, 0x81, 0x0d, 0x36, 0xa2, 0xc4, 0x65, 0x44, 0xe6,
             0x62, 0x26, 0xb9, 0x58, 0x13, 0xa4, 0x15, 0x82, 0xab, 0xb1, 0x16,
             0x61, 0xfc, 0x01, 0x98, 0xc6, 0x1a, 0x69, 0xc6, 0xba, 0x39, 0x3f,
             0x01, 0x55, 0x3d, 0xd7, 0x8e, 0x14, 0x42, 0x6d, 0x78, 0x74, 0x9b,
             0x28, 0xcb, 0x31, 0x39, 0x98, 0x5a, 0x11, 0xdc, 0xc1, 0x18, 0x9d,
             0x8d, 0xb0, 0xcd, 0x1b, 0x4c, 0x10, 0xab, 0x14, 0x64, 0x19, 0xf1,
             0x33, 0x15, 0x45, 0xc8, 0x92, 0x82, 0x03, 0x82, 0x8a, 0xaa, 0xad,
             0x94, 0xfc, 0x24, 0x11, 0x96, 0x99, 0x7e, 0x94, 0x5a, 0x82, 0x57,
             0x68, 0x61, 0x9f, 0x7b, 0x45, 0xe0, 0x99, 0x9e, 0x4f, 0x32, 0x50,
             0x5f, 0x05, 0xc8, 0x11, 0xae, 0xc4, 0x0c, 0x63, 0x18, 0x0e, 0x02,
             0x59, 0x36, 0x25, 0x92, 0x06, 0x32, 0xc7, 0x71, 0x47, 0x99, 0xcc,
             0x0a, 0x6e, 0x0a, 0x58, 0x71, 0x3f, 0x5e, 0xb7, 0x78, 0xf7, 0x98,
             0x79, 0xdf, 0x74, 0xa4, 0xeb, 0xa9, 0x00, 0xfd, 0x81, 0xb3, 0xcf,
             0x04, 0x8c, 0x5d, 0x7d, 0xe7, 0xb2, 0x82, 0x90, 0x49, 0xbd, 0x69,
             0xf3, 0x08, 0xe9, 0x92, 0xc6, 0x9e, 0x41, 0xba, 0x74, 0xd8, 0x8d,
             0x81, 0x97, 0x6f, 0x86, 0xab, 0xc9, 0xf1, 0x02, 0x31, 0xb4, 0xce,
             0x47, 0xb0, 0x39, 0xc8, 0xba, 0x51, 0xa7, 0x39, 0xf3, 0x71, 0xa2,
             0x25, 0x27, 0x37, 0x6e, 0x09, 0x6f, 0x19, 0x59, 0xbc, 0x65, 0xd9,
             0xcd, 0x12, 0xd3, 0x2c, 0xa2, 0x78, 0xfa, 0x23, 0x15, 0x1a, 0x82,
             0x41, 0x91, 0x1b, 0xbe, 0x8a, 0xe7, 0xfe, 0x3c, 0x3c, 0x30, 0x32,
             0xaa, 0xe9, 0xf3}};
        std::array<std::uint8_t, 256> const rsa4Sig{
            {0x95, 0xeb, 0xb6, 0x47, 0x70, 0xe4, 0x63, 0x89, 0x7b, 0xa5, 0xba,
             0xa4, 0x9d, 0xe0, 0x6b, 0x60, 0x4c, 0x53, 0x81, 0x0d, 0xba, 0xa3,
             0x03, 0x78, 0xfc, 0x8c, 0x5f, 0x0e, 0xc3, 0x58, 0x41, 0x9a, 0x52,
             0x52, 0xda, 0xa2, 0x54, 0x75, 0xc3, 0xf4, 0xe0, 0x96, 0x59, 0xc4,
             0xc0, 0x1b, 0x62, 0x96, 0x9a, 0x16, 0x9f, 0xf1, 0x67, 0x1c, 0xad,
             0x81, 0x66, 0x63, 0x47, 0x87, 0x68, 0x5d, 0x3b, 0x35, 0x6a, 0x59,
             0x01, 0x1a, 0x07, 0xc0, 0x75, 0x3e, 0x50, 0x40, 0x53, 0xc6, 0x09,
             0xc0, 0xa6, 0x9f, 0xd7, 0xc5, 0xca, 0x13, 0xe2, 0x0d, 0xa7, 0xc9,
             0xb7, 0x88, 0xdf, 0xaf, 0x35, 0x39, 0x08, 0xd5, 0xd6, 0x8b, 0x96,
             0x30, 0x50, 0xb8, 0x96, 0x21, 0xee, 0x09, 0x87, 0xc0, 0x61, 0x7b,
             0x00, 0x6e, 0x62, 0x52, 0x27, 0x7c, 0x47, 0xb4, 0x02, 0x03, 0x89,
             0xab, 0xbb, 0x70, 0xf1, 0x71, 0xaa, 0x18, 0x93, 0xc7, 0xfe, 0x34,
             0x60, 0x7b, 0x6e, 0x9c, 0x88, 0x37, 0x25, 0x52, 0x28, 0x51, 0xd3,
             0x28, 0x09, 0x23, 0x77, 0x9b, 0x24, 0xb9, 0x1b, 0x72, 0xdc, 0x8b,
             0xf6, 0x96, 0xfb, 0xe3, 0x72, 0x72, 0x04, 0x39, 0x3f, 0x24, 0xa3,
             0xa8, 0xfb, 0x76, 0xdc, 0x3a, 0x30, 0xd2, 0x72, 0x67, 0x85, 0xce,
             0x94, 0x4a, 0x73, 0xa2, 0x31, 0x72, 0x14, 0xd9, 0x49, 0xae, 0x4f,
             0x36, 0x29, 0x19, 0x59, 0x34, 0xa4, 0xe3, 0x87, 0x2a, 0xb8, 0x1f,
             0xa0, 0xfb, 0xe2, 0x84, 0x51, 0x88, 0xda, 0x28, 0x0b, 0xc6, 0x36,
             0xf5, 0x41, 0x60, 0x83, 0x12, 0xef, 0xa4, 0xe7, 0xc0, 0xf8, 0x89,
             0x5e, 0xe8, 0xfb, 0x35, 0xd7, 0x28, 0xc3, 0x06, 0xb0, 0xcf, 0x72,
             0xf0, 0x90, 0x17, 0xd4, 0x8e, 0x7e, 0x74, 0x9d, 0xa6, 0xee, 0x59,
             0xe2, 0x38, 0xc2, 0x64, 0xbc, 0xe2, 0xc8, 0x02, 0x6f, 0x57, 0xc7,
             0x32, 0xe4, 0xd7}};
        auto const thresh3Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix2Prefix = "P2"s;
        auto const prefix2Msg = "P1abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix2MaxMsgLength = 14;
        auto const prefix1Prefix = "P1"s;
        auto const prefix1Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix1MaxMsgLength = 14;
        auto const rsa8Msg = "P6P5abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa8PublicKey{
            {0xb7, 0xf9, 0xf2, 0x4e, 0xc8, 0xd9, 0x79, 0xcb, 0x92, 0xdb, 0x0d,
             0x2d, 0x81, 0x30, 0x23, 0x20, 0xc1, 0x2f, 0x97, 0xd1, 0x90, 0x5e,
             0x52, 0x73, 0x04, 0x8d, 0x23, 0x6b, 0x9c, 0xe9, 0x7f, 0xb0, 0xda,
             0x3a, 0x75, 0x84, 0x60, 0xd2, 0xac, 0x55, 0xc5, 0x2a, 0x8e, 0x25,
             0x17, 0x64, 0x3e, 0x0d, 0x0f, 0x1f, 0x9c, 0x1d, 0x04, 0xfe, 0x36,
             0x26, 0xb7, 0x4b, 0xeb, 0xed, 0xa4, 0x73, 0x25, 0x86, 0x45, 0xa1,
             0x34, 0x33, 0xf3, 0xdd, 0x06, 0xd1, 0x8a, 0xc8, 0x9d, 0x00, 0x69,
             0xf2, 0x72, 0x7f, 0x00, 0x28, 0x08, 0x7b, 0x8b, 0x31, 0x1c, 0xf3,
             0xd3, 0x3f, 0x46, 0xc6, 0xc6, 0xa7, 0x29, 0x89, 0xbc, 0x85, 0x1e,
             0xb8, 0x01, 0x8e, 0xe1, 0xf2, 0x6e, 0xe3, 0x08, 0xa8, 0x4d, 0x7d,
             0x6c, 0x0f, 0x67, 0x1b, 0x1d, 0xbf, 0x88, 0xbe, 0x0b, 0x0e, 0x6f,
             0x20, 0xa8, 0xff, 0x2c, 0xea, 0x04, 0xb3, 0x95, 0xe4, 0x2d, 0xb3,
             0x72, 0xcf, 0xd7, 0x09, 0xca, 0xc9, 0x71, 0x41, 0x6c, 0x12, 0x91,
             0x16, 0x2a, 0x25, 0xb4, 0x2c, 0x5d, 0x6b, 0xdf, 0x39, 0x02, 0xd7,
             0xf7, 0xd8, 0xbd, 0x2a, 0xac, 0x8a, 0xcb, 0x40, 0x75, 0x16, 0x1e,
             0xbf, 0xd3, 0x87, 0x47, 0x21, 0x0d, 0xcb, 0x8a, 0xe3, 0x45, 0x8f,
             0x1d, 0xad, 0x13, 0xfc, 0xe5, 0x14, 0xf2, 0xea, 0x3d, 0x14, 0x30,
             0x5a, 0x47, 0xce, 0xb1, 0xe1, 0x53, 0xae, 0x1f, 0x0b, 0x9a, 0x2f,
             0xe1, 0x15, 0x58, 0x71, 0x1d, 0xbd, 0x89, 0xdd, 0xb1, 0x01, 0x08,
             0xe3, 0x5b, 0x9c, 0x5a, 0x50, 0x96, 0x50, 0x70, 0x6f, 0x5a, 0x54,
             0xce, 0x0c, 0x7a, 0xb6, 0x1a, 0xbc, 0xd1, 0xe3, 0x23, 0xe3, 0xe8,
             0xb6, 0x9d, 0xbe, 0xa9, 0x2f, 0x82, 0x23, 0xcc, 0x46, 0x2e, 0xe9,
             0xe4, 0xa2, 0xdd, 0x4b, 0xff, 0x55, 0x56, 0x78, 0x53, 0xdc, 0xf1,
             0x5a, 0xfe, 0x53}};
        std::array<std::uint8_t, 256> const rsa8Sig{
            {0x3e, 0xc1, 0xc6, 0x57, 0x87, 0xd5, 0xaf, 0xd7, 0xf2, 0x3c, 0xc2,
             0xb9, 0xca, 0x7f, 0x6a, 0xbd, 0x42, 0x46, 0x0f, 0x25, 0x12, 0x25,
             0xf1, 0xb2, 0x7d, 0x77, 0xe4, 0xd5, 0x1c, 0xbb, 0xde, 0xa2, 0x40,
             0x65, 0x0b, 0xf3, 0xbc, 0xef, 0xbb, 0x91, 0x3a, 0x2f, 0xf0, 0x35,
             0xa2, 0xce, 0x2f, 0x16, 0x7d, 0xef, 0x5b, 0x7c, 0x1e, 0xb6, 0xbe,
             0x6f, 0x43, 0x7c, 0xb5, 0xe9, 0xf0, 0xd3, 0x8b, 0x45, 0x80, 0x3c,
             0x9f, 0xef, 0x25, 0xe8, 0x81, 0x13, 0xf9, 0xea, 0xa4, 0xfe, 0xe0,
             0x63, 0x47, 0xbd, 0xb0, 0x63, 0xea, 0xca, 0xec, 0x85, 0x5f, 0x7a,
             0x71, 0xbb, 0x86, 0x28, 0x86, 0xcd, 0xb9, 0x8b, 0x92, 0x34, 0x79,
             0x7f, 0x34, 0x30, 0xd5, 0x62, 0x3a, 0x34, 0x4a, 0x0e, 0xd2, 0x76,
             0x5b, 0x3c, 0xf7, 0x50, 0xc8, 0x15, 0xc7, 0x5b, 0xee, 0xc2, 0x98,
             0x74, 0xa2, 0x81, 0xbf, 0xff, 0x34, 0x7a, 0x7a, 0x69, 0xa5, 0x05,
             0xb9, 0x56, 0xc2, 0x9d, 0x47, 0x3b, 0x1f, 0xfc, 0x6b, 0xc9, 0x08,
             0xc4, 0xad, 0x21, 0x56, 0xdf, 0x88, 0x3f, 0xe0, 0xa9, 0x26, 0x5b,
             0xe5, 0xcc, 0xc6, 0x5a, 0xb6, 0xac, 0x77, 0xeb, 0x06, 0x10, 0xb6,
             0x43, 0xe4, 0x5f, 0x6a, 0x2a, 0x7a, 0x77, 0x1b, 0x9f, 0xdd, 0x89,
             0x00, 0xad, 0xd9, 0xd1, 0x87, 0xd2, 0x35, 0x5c, 0x84, 0x3f, 0x2b,
             0x37, 0x9e, 0xf0, 0xb1, 0x85, 0xa5, 0x3d, 0x7a, 0x99, 0x4f, 0xc4,
             0xa9, 0x9a, 0x5f, 0xb3, 0xdc, 0xa9, 0x12, 0x38, 0x22, 0x41, 0xb4,
             0x12, 0x51, 0x0a, 0xcc, 0x40, 0xbd, 0xd8, 0x9b, 0x44, 0xb0, 0x57,
             0x78, 0xe1, 0xea, 0x58, 0x6a, 0x71, 0x7f, 0x3a, 0xba, 0x16, 0x33,
             0x71, 0x05, 0x57, 0x9c, 0xfa, 0x00, 0xcd, 0x2e, 0x6c, 0xcf, 0x91,
             0x1d, 0x27, 0x26, 0x46, 0x52, 0xa1, 0xf0, 0xbf, 0x51, 0xdb, 0x5d,
             0x14, 0x8d, 0xbd}};
        auto const thresh7Msg = "P6P5abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix6Prefix = "P6"s;
        auto const prefix6Msg = "P5abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix6MaxMsgLength = 14;
        auto const prefix5Prefix = "P5"s;
        auto const prefix5Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix5MaxMsgLength = 14;
        auto const rsa10Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa10PublicKey{
            {0x9f, 0x01, 0x7b, 0x87, 0xfd, 0xbe, 0xa0, 0x02, 0x77, 0x00, 0x19,
             0x7f, 0x2f, 0xde, 0x80, 0xab, 0xdc, 0xd0, 0x14, 0xe9, 0x63, 0xe5,
             0xd6, 0xfb, 0x2c, 0xcb, 0xb0, 0x70, 0x88, 0xbe, 0xcb, 0x6d, 0x8e,
             0x56, 0xf3, 0x02, 0x34, 0xae, 0xec, 0x30, 0xf7, 0x41, 0xcf, 0xe7,
             0x07, 0x80, 0x52, 0x04, 0xa1, 0x16, 0x51, 0x15, 0x07, 0xba, 0xdb,
             0xc6, 0xe8, 0xce, 0xa8, 0x8c, 0xa8, 0xb7, 0xaa, 0x4e, 0x08, 0x96,
             0xbd, 0x5f, 0xbd, 0x64, 0x0d, 0xe3, 0x88, 0xca, 0x7e, 0x1a, 0x20,
             0x1f, 0x65, 0x44, 0x3a, 0xc8, 0x2c, 0xc2, 0xdd, 0xc8, 0xc6, 0x9b,
             0x8f, 0x01, 0x8e, 0x36, 0xc5, 0x52, 0x5a, 0xb1, 0x1d, 0x1d, 0xc4,
             0xf0, 0x9f, 0xa9, 0x51, 0x4d, 0xe6, 0xeb, 0x36, 0x9c, 0x2e, 0x2d,
             0x08, 0x1c, 0xaf, 0x67, 0xed, 0x83, 0xbb, 0x67, 0x77, 0x83, 0x24,
             0x49, 0x97, 0x8c, 0x06, 0x0d, 0xca, 0x8b, 0x45, 0xf4, 0x2b, 0xff,
             0x94, 0x22, 0x7f, 0x04, 0x92, 0x81, 0xd6, 0xf5, 0x17, 0x7f, 0x41,
             0x2d, 0xc3, 0x4e, 0x86, 0x2a, 0x60, 0xc4, 0x0e, 0x74, 0xb0, 0x04,
             0x3c, 0x48, 0xe4, 0xd8, 0x09, 0xf6, 0x48, 0x35, 0x00, 0x09, 0xda,
             0xaa, 0x31, 0x2f, 0x8b, 0x5f, 0x6d, 0x4c, 0x48, 0x52, 0xb9, 0xd9,
             0x43, 0xe8, 0x1e, 0x22, 0x68, 0x80, 0xbe, 0xff, 0xee, 0x11, 0x3b,
             0x83, 0x47, 0xfd, 0xec, 0x6e, 0x1d, 0x9c, 0x7b, 0xd8, 0xe3, 0x2a,
             0x8b, 0xef, 0x2a, 0xb3, 0xa5, 0xc1, 0x78, 0x3c, 0x0b, 0x0e, 0x31,
             0xe6, 0x40, 0x80, 0xe1, 0xcb, 0x25, 0x56, 0xb3, 0x45, 0x7e, 0x65,
             0xb3, 0xd9, 0x1a, 0x8e, 0xf8, 0xb0, 0x65, 0x44, 0x89, 0x73, 0x90,
             0x0f, 0xe7, 0xcd, 0x1b, 0x68, 0x3b, 0xa4, 0x7a, 0x35, 0x41, 0xad,
             0xfd, 0x8e, 0xa8, 0x50, 0xe0, 0xf2, 0xab, 0x2d, 0xe2, 0x31, 0x39,
             0x82, 0x41, 0x4b}};
        std::array<std::uint8_t, 256> const rsa10Sig{
            {0x74, 0x8f, 0x24, 0x4b, 0x23, 0x57, 0x47, 0x78, 0x0d, 0x8f, 0x52,
             0x99, 0xab, 0x27, 0x8a, 0xd4, 0x0d, 0x4b, 0x1f, 0x5f, 0xa2, 0xca,
             0xe3, 0x3d, 0x00, 0x7d, 0x6f, 0x0a, 0x35, 0x8a, 0x86, 0xa5, 0x3e,
             0x83, 0x93, 0x84, 0x12, 0xb3, 0x1b, 0x58, 0x8f, 0xd2, 0x98, 0x9b,
             0x88, 0x1a, 0x1e, 0xae, 0xca, 0x26, 0xa9, 0x86, 0x9a, 0xcf, 0x32,
             0x51, 0x6a, 0x71, 0x41, 0xb0, 0x47, 0x8d, 0xea, 0x1f, 0xd3, 0x90,
             0x8a, 0x6b, 0xc0, 0x87, 0x77, 0x15, 0xde, 0xec, 0x48, 0x47, 0xf0,
             0x8d, 0xcf, 0x89, 0xf5, 0xba, 0x27, 0x2f, 0xcc, 0x01, 0x90, 0x77,
             0xec, 0xef, 0x48, 0xb7, 0x09, 0x1e, 0x60, 0x0b, 0x14, 0x87, 0x3e,
             0x7b, 0x19, 0x8b, 0x86, 0x07, 0xd6, 0xb0, 0xbc, 0x98, 0xfa, 0x78,
             0xc6, 0x16, 0xf5, 0xf8, 0x84, 0x63, 0x29, 0x85, 0xc0, 0x23, 0x27,
             0xd3, 0x78, 0x09, 0xf8, 0x42, 0x80, 0x87, 0x19, 0x8a, 0x84, 0x5e,
             0x8e, 0x60, 0x49, 0xdd, 0x0e, 0x82, 0xaf, 0xb2, 0x44, 0x17, 0xd1,
             0x19, 0xa8, 0x42, 0xbd, 0xe2, 0x0b, 0x7b, 0xf7, 0xfe, 0xf5, 0x58,
             0x4c, 0x53, 0xa0, 0x28, 0x1d, 0x1a, 0x65, 0x51, 0x06, 0x6d, 0x8b,
             0x52, 0xd8, 0x4e, 0x00, 0xf9, 0x1d, 0xb7, 0x53, 0xcf, 0xb7, 0x49,
             0x6c, 0xc6, 0x8d, 0xec, 0x04, 0x41, 0xbb, 0x21, 0x04, 0xb4, 0x07,
             0x79, 0x07, 0x9e, 0x9d, 0xd8, 0x4b, 0x53, 0x7d, 0x77, 0xaa, 0xf2,
             0xb4, 0x02, 0xb1, 0x76, 0xd4, 0xff, 0x3b, 0xb5, 0x23, 0x60, 0x46,
             0x4b, 0x1e, 0x34, 0x05, 0x89, 0x09, 0x81, 0x76, 0x16, 0x3d, 0x59,
             0xd3, 0x7c, 0x9b, 0xfa, 0x1e, 0x94, 0x26, 0x94, 0x0e, 0xae, 0xb4,
             0xe0, 0x3b, 0x0c, 0x0d, 0xb3, 0x6e, 0x4c, 0x67, 0x7f, 0x66, 0x0f,
             0x39, 0x8b, 0x7b, 0xb3, 0xaf, 0xa6, 0x45, 0x5f, 0x55, 0xd4, 0x66,
             0xe8, 0x96, 0xe6}};
        auto const rsa12Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa12PublicKey{
            {0xd9, 0x25, 0xc3, 0xba, 0x0a, 0x46, 0x6e, 0xa9, 0x1d, 0x05, 0xd7,
             0x54, 0xf1, 0xff, 0xf4, 0xaf, 0xe5, 0x13, 0xcf, 0xd6, 0x74, 0xb0,
             0xcf, 0xc2, 0x8c, 0x68, 0x5c, 0xa9, 0xf3, 0x44, 0x4b, 0xfd, 0x4a,
             0x4d, 0x29, 0x64, 0xbc, 0xa8, 0x98, 0xf5, 0x35, 0x0a, 0x65, 0xe5,
             0xcd, 0x5d, 0x08, 0x9f, 0x58, 0x22, 0xed, 0x21, 0x78, 0x04, 0x4d,
             0x2a, 0xce, 0x80, 0x33, 0x19, 0x5b, 0x7a, 0xbd, 0xa6, 0x89, 0xfa,
             0x80, 0xa4, 0xf5, 0x32, 0xa6, 0xb1, 0x34, 0x61, 0x55, 0x5a, 0xbd,
             0x05, 0xaf, 0x4b, 0x4b, 0xdf, 0xe0, 0xa9, 0x3e, 0x1d, 0x2f, 0x3e,
             0xaf, 0x0c, 0x65, 0x32, 0xc6, 0xf2, 0xe0, 0x5c, 0x09, 0xc0, 0xa2,
             0x41, 0xe6, 0xc9, 0x96, 0x5e, 0x88, 0x62, 0x4a, 0x28, 0x4b, 0x23,
             0x2f, 0xcf, 0xb3, 0xb7, 0x1e, 0x11, 0x7f, 0xc4, 0x63, 0x1a, 0xe4,
             0x24, 0x29, 0x46, 0xf4, 0x48, 0xde, 0x30, 0x45, 0x97, 0xf8, 0x6c,
             0x8d, 0x4e, 0x4a, 0xce, 0x5e, 0x41, 0xb2, 0xb7, 0x5a, 0xd5, 0x94,
             0x42, 0x5a, 0x14, 0xd1, 0x11, 0x99, 0xc5, 0xeb, 0x66, 0xbe, 0xb1,
             0xc6, 0xc3, 0xdb, 0x2f, 0x8f, 0xa0, 0x6c, 0xa9, 0x27, 0x0f, 0xc0,
             0x92, 0x77, 0x0b, 0x8d, 0x66, 0xb8, 0x93, 0x0b, 0xc0, 0x5c, 0xcb,
             0x51, 0x4e, 0xa3, 0x83, 0xd2, 0xbd, 0x04, 0xd8, 0xc0, 0x0c, 0xb2,
             0xf7, 0x38, 0x4e, 0x6a, 0xec, 0xfe, 0x76, 0xd9, 0x71, 0x0b, 0x90,
             0x21, 0x7c, 0xbf, 0x07, 0xc4, 0xd8, 0x4c, 0x6d, 0xb9, 0x35, 0x48,
             0x5d, 0x82, 0xea, 0x61, 0xc5, 0x14, 0xff, 0x25, 0x50, 0x47, 0xaf,
             0x06, 0x58, 0xa9, 0x95, 0x2c, 0xdd, 0xe5, 0xbd, 0x95, 0x4a, 0x7b,
             0x27, 0xa1, 0x46, 0xe3, 0xf0, 0x16, 0xe8, 0xf9, 0xba, 0x43, 0xb8,
             0x77, 0xdc, 0x87, 0x81, 0x3a, 0xc0, 0xf2, 0xed, 0x3b, 0x03, 0x5e,
             0xe6, 0x89, 0x71}};
        std::array<std::uint8_t, 256> const rsa12Sig{
            {0xab, 0xab, 0x2d, 0x40, 0xc8, 0xe7, 0x57, 0xd6, 0x51, 0xbc, 0x13,
             0xd2, 0x76, 0xdb, 0x4d, 0x49, 0x9c, 0x50, 0x61, 0xaa, 0x56, 0x72,
             0xfa, 0x2b, 0xc9, 0x56, 0xf5, 0x56, 0xbe, 0x05, 0x8e, 0xfb, 0x3f,
             0x4d, 0x80, 0x6f, 0x03, 0xbd, 0xaa, 0xfd, 0x90, 0xe4, 0x27, 0x3b,
             0xe1, 0x75, 0x4b, 0x8c, 0x46, 0x3c, 0x4d, 0xdb, 0x1b, 0xca, 0x4a,
             0x8a, 0x4f, 0x57, 0x0a, 0xc0, 0x1e, 0xb5, 0x62, 0x5c, 0x83, 0xec,
             0x63, 0xcb, 0xc9, 0xcd, 0x00, 0x99, 0xac, 0x82, 0x2e, 0xf1, 0xeb,
             0x1d, 0xba, 0x87, 0x60, 0xbf, 0x39, 0x04, 0x6a, 0xf9, 0x11, 0x9f,
             0x82, 0x2a, 0x5a, 0xc7, 0x22, 0x92, 0x14, 0x06, 0xa8, 0x85, 0xcf,
             0x5c, 0xfc, 0xac, 0xd9, 0x2f, 0xef, 0xcd, 0x0a, 0x68, 0xcf, 0xf5,
             0x0c, 0xfb, 0x76, 0x29, 0xd4, 0x16, 0x8e, 0xee, 0x7c, 0x37, 0x40,
             0x23, 0xf8, 0x46, 0x68, 0x39, 0x0d, 0xfe, 0xd6, 0x55, 0xa0, 0xa6,
             0xa3, 0xc0, 0xca, 0xe2, 0x80, 0x99, 0x20, 0x3f, 0x75, 0xaa, 0xf4,
             0xc7, 0x01, 0x17, 0x25, 0x01, 0x16, 0xf6, 0xe0, 0xc5, 0xfa, 0x02,
             0xee, 0x20, 0xc3, 0x38, 0x3d, 0x56, 0x12, 0xb5, 0x3a, 0x09, 0x0a,
             0x17, 0x73, 0xf5, 0x97, 0xb1, 0x79, 0x31, 0x59, 0xe5, 0x8c, 0x07,
             0xd9, 0xbc, 0x86, 0xb0, 0xd2, 0x42, 0x90, 0x0a, 0x6d, 0xc7, 0x58,
             0xf5, 0xfe, 0x66, 0x44, 0x91, 0x6e, 0xb6, 0x49, 0x30, 0xf8, 0x71,
             0x38, 0x8b, 0x53, 0x93, 0xab, 0x5f, 0x32, 0x52, 0x68, 0xfd, 0x78,
             0x0f, 0xf7, 0x83, 0x43, 0x3f, 0x56, 0x79, 0x99, 0x13, 0x88, 0x72,
             0x1a, 0xbb, 0x25, 0x4a, 0x70, 0x83, 0x84, 0x4e, 0xfd, 0x6f, 0x5c,
             0xce, 0xf6, 0xce, 0x49, 0xfe, 0xe0, 0xf2, 0x07, 0x34, 0xa7, 0xb1,
             0x05, 0x97, 0x75, 0x7c, 0x68, 0xa5, 0x4d, 0xea, 0x11, 0xbf, 0x9b,
             0x0e, 0xa8, 0x28}};
        auto const thresh11Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim13CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim13Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim13CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa14CondConditionFingerprint =
            "\x32\xec\xaa\x5e\xa6\x88\xdc\xe4\x81\x0f\x93\x0f\x65\xde\x87"
            "\xfd\x54\x8c\x79\x04\x81\xe3\x63\x3f\x3d\x08\xa1\xba\x0a\x24"
            "\x2b\x46"s;
        Condition const Rsa14Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa14CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed15CondConditionFingerprint =
            "\x40\xd1\x9a\x63\x62\x9b\xc0\x76\xab\x11\x73\x42\x86\xb3\x20"
            "\x9d\x23\xe8\x5e\xee\xb9\x82\x5d\x93\xe3\xac\xad\xa0\x40\x41"
            "\x51\x1b"s;
        Condition const Ed15Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed15CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const thresh9Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim16CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim16Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim16CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa17CondConditionFingerprint =
            "\x78\xe3\x04\xf4\xa6\x16\x68\x4c\x1b\xcf\x3a\x32\xff\xbc\x75"
            "\x1a\xe6\x08\x9b\xff\xba\x79\xf4\x39\x7a\xfc\xe1\x6f\xff\x3e"
            "\xb3\x75"s;
        Condition const Rsa17Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa17CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed18CondConditionFingerprint =
            "\x0d\xea\xc5\x16\x5c\x62\xb8\xd1\xa4\xe7\x5a\x07\x58\x00\x79"
            "\x51\x88\x21\xe9\x4d\xba\x73\x7b\xad\x60\x9c\x5c\x26\x00\x2e"
            "\xd1\x51"s;
        Condition const Ed18Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed18CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const thresh0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim19CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim19Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim19CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa20CondConditionFingerprint =
            "\x8d\xb0\x2c\xb1\x28\xc3\xf4\x97\x50\x84\x64\x57\xca\xf4\x9d"
            "\x63\x08\x73\xfc\xde\x2f\x90\xf0\xf2\xec\x79\xa9\xc6\xa3\xf1"
            "\x33\xfd"s;
        Condition const Rsa20Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa20CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed21CondConditionFingerprint =
            "\x95\x3c\x86\x65\x91\x76\x69\x6b\x72\x61\xaa\x76\x15\x2a\xd7"
            "\x25\x4f\x32\xb7\x73\x7a\xb2\x49\x0c\x0b\xdf\xb5\x4e\x4a\x8b"
            "\xf7\x65"s;
        Condition const Ed21Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed21CondConditionFingerprint),
                                 std::bitset<5>{0}};

        auto rsa4 = std::make_unique<RsaSha256>(
            makeSlice(rsa4PublicKey), makeSlice(rsa4Sig));
        std::vector<std::unique_ptr<Fulfillment>> thresh3Subfulfillments;
        thresh3Subfulfillments.emplace_back(std::move(rsa4));
        std::vector<Condition> thresh3Subconditions{};
        auto thresh3 = std::make_unique<ThresholdSha256>(
            std::move(thresh3Subfulfillments), std::move(thresh3Subconditions));
        auto prefix2 = std::make_unique<PrefixSha256>(
            makeSlice(prefix2Prefix), prefix2MaxMsgLength, std::move(thresh3));
        auto prefix1 = std::make_unique<PrefixSha256>(
            makeSlice(prefix1Prefix), prefix1MaxMsgLength, std::move(prefix2));
        auto rsa8 = std::make_unique<RsaSha256>(
            makeSlice(rsa8PublicKey), makeSlice(rsa8Sig));
        std::vector<std::unique_ptr<Fulfillment>> thresh7Subfulfillments;
        thresh7Subfulfillments.emplace_back(std::move(rsa8));
        std::vector<Condition> thresh7Subconditions{};
        auto thresh7 = std::make_unique<ThresholdSha256>(
            std::move(thresh7Subfulfillments), std::move(thresh7Subconditions));
        auto prefix6 = std::make_unique<PrefixSha256>(
            makeSlice(prefix6Prefix), prefix6MaxMsgLength, std::move(thresh7));
        auto prefix5 = std::make_unique<PrefixSha256>(
            makeSlice(prefix5Prefix), prefix5MaxMsgLength, std::move(prefix6));
        auto rsa10 = std::make_unique<RsaSha256>(
            makeSlice(rsa10PublicKey), makeSlice(rsa10Sig));
        auto rsa12 = std::make_unique<RsaSha256>(
            makeSlice(rsa12PublicKey), makeSlice(rsa12Sig));
        std::vector<std::unique_ptr<Fulfillment>> thresh11Subfulfillments;
        thresh11Subfulfillments.emplace_back(std::move(rsa12));
        std::vector<Condition> thresh11Subconditions{
            {Preim13Cond, Rsa14Cond, Ed15Cond}};
        auto thresh11 = std::make_unique<ThresholdSha256>(
            std::move(thresh11Subfulfillments),
            std::move(thresh11Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh9Subfulfillments;
        thresh9Subfulfillments.emplace_back(std::move(rsa10));
        thresh9Subfulfillments.emplace_back(std::move(thresh11));
        std::vector<Condition> thresh9Subconditions{
            {Preim16Cond, Rsa17Cond, Ed18Cond}};
        auto thresh9 = std::make_unique<ThresholdSha256>(
            std::move(thresh9Subfulfillments), std::move(thresh9Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh0Subfulfillments;
        thresh0Subfulfillments.emplace_back(std::move(prefix1));
        thresh0Subfulfillments.emplace_back(std::move(prefix5));
        thresh0Subfulfillments.emplace_back(std::move(thresh9));
        std::vector<Condition> thresh0Subconditions{
            {Preim19Cond, Rsa20Cond, Ed21Cond}};
        ThresholdSha256 const thresh0(
            std::move(thresh0Subfulfillments), std::move(thresh0Subconditions));
        {
            auto const thresh0EncodedFulfillment =
                "\xa2\x82\x0a\x05\xa0\x82\x09\x86\xa1\x82\x02\x30\x80\x02\x50"
                "\x31\x81\x01\x0e\xa2\x82\x02\x25\xa1\x82\x02\x21\x80\x02\x50"
                "\x32\x81\x01\x0e\xa2\x82\x02\x16\xa2\x82\x02\x12\xa0\x82\x02"
                "\x0c\xa3\x82\x02\x08\x80\x82\x01\x00\xbe\x09\xc5\xa4\x27\x29"
                "\xdf\xd4\x67\x76\xbe\xbf\x2c\xf3\xa2\x0b\x42\xe4\xbf\xeb\xdd"
                "\x67\x20\xfb\x7a\x27\x93\xc0\x78\x47\x78\xd7\x15\x32\xee\x38"
                "\x81\x0d\x36\xa2\xc4\x65\x44\xe6\x62\x26\xb9\x58\x13\xa4\x15"
                "\x82\xab\xb1\x16\x61\xfc\x01\x98\xc6\x1a\x69\xc6\xba\x39\x3f"
                "\x01\x55\x3d\xd7\x8e\x14\x42\x6d\x78\x74\x9b\x28\xcb\x31\x39"
                "\x98\x5a\x11\xdc\xc1\x18\x9d\x8d\xb0\xcd\x1b\x4c\x10\xab\x14"
                "\x64\x19\xf1\x33\x15\x45\xc8\x92\x82\x03\x82\x8a\xaa\xad\x94"
                "\xfc\x24\x11\x96\x99\x7e\x94\x5a\x82\x57\x68\x61\x9f\x7b\x45"
                "\xe0\x99\x9e\x4f\x32\x50\x5f\x05\xc8\x11\xae\xc4\x0c\x63\x18"
                "\x0e\x02\x59\x36\x25\x92\x06\x32\xc7\x71\x47\x99\xcc\x0a\x6e"
                "\x0a\x58\x71\x3f\x5e\xb7\x78\xf7\x98\x79\xdf\x74\xa4\xeb\xa9"
                "\x00\xfd\x81\xb3\xcf\x04\x8c\x5d\x7d\xe7\xb2\x82\x90\x49\xbd"
                "\x69\xf3\x08\xe9\x92\xc6\x9e\x41\xba\x74\xd8\x8d\x81\x97\x6f"
                "\x86\xab\xc9\xf1\x02\x31\xb4\xce\x47\xb0\x39\xc8\xba\x51\xa7"
                "\x39\xf3\x71\xa2\x25\x27\x37\x6e\x09\x6f\x19\x59\xbc\x65\xd9"
                "\xcd\x12\xd3\x2c\xa2\x78\xfa\x23\x15\x1a\x82\x41\x91\x1b\xbe"
                "\x8a\xe7\xfe\x3c\x3c\x30\x32\xaa\xe9\xf3\x81\x82\x01\x00\x95"
                "\xeb\xb6\x47\x70\xe4\x63\x89\x7b\xa5\xba\xa4\x9d\xe0\x6b\x60"
                "\x4c\x53\x81\x0d\xba\xa3\x03\x78\xfc\x8c\x5f\x0e\xc3\x58\x41"
                "\x9a\x52\x52\xda\xa2\x54\x75\xc3\xf4\xe0\x96\x59\xc4\xc0\x1b"
                "\x62\x96\x9a\x16\x9f\xf1\x67\x1c\xad\x81\x66\x63\x47\x87\x68"
                "\x5d\x3b\x35\x6a\x59\x01\x1a\x07\xc0\x75\x3e\x50\x40\x53\xc6"
                "\x09\xc0\xa6\x9f\xd7\xc5\xca\x13\xe2\x0d\xa7\xc9\xb7\x88\xdf"
                "\xaf\x35\x39\x08\xd5\xd6\x8b\x96\x30\x50\xb8\x96\x21\xee\x09"
                "\x87\xc0\x61\x7b\x00\x6e\x62\x52\x27\x7c\x47\xb4\x02\x03\x89"
                "\xab\xbb\x70\xf1\x71\xaa\x18\x93\xc7\xfe\x34\x60\x7b\x6e\x9c"
                "\x88\x37\x25\x52\x28\x51\xd3\x28\x09\x23\x77\x9b\x24\xb9\x1b"
                "\x72\xdc\x8b\xf6\x96\xfb\xe3\x72\x72\x04\x39\x3f\x24\xa3\xa8"
                "\xfb\x76\xdc\x3a\x30\xd2\x72\x67\x85\xce\x94\x4a\x73\xa2\x31"
                "\x72\x14\xd9\x49\xae\x4f\x36\x29\x19\x59\x34\xa4\xe3\x87\x2a"
                "\xb8\x1f\xa0\xfb\xe2\x84\x51\x88\xda\x28\x0b\xc6\x36\xf5\x41"
                "\x60\x83\x12\xef\xa4\xe7\xc0\xf8\x89\x5e\xe8\xfb\x35\xd7\x28"
                "\xc3\x06\xb0\xcf\x72\xf0\x90\x17\xd4\x8e\x7e\x74\x9d\xa6\xee"
                "\x59\xe2\x38\xc2\x64\xbc\xe2\xc8\x02\x6f\x57\xc7\x32\xe4\xd7"
                "\xa1\x00\xa1\x82\x02\x30\x80\x02\x50\x35\x81\x01\x0e\xa2\x82"
                "\x02\x25\xa1\x82\x02\x21\x80\x02\x50\x36\x81\x01\x0e\xa2\x82"
                "\x02\x16\xa2\x82\x02\x12\xa0\x82\x02\x0c\xa3\x82\x02\x08\x80"
                "\x82\x01\x00\xb7\xf9\xf2\x4e\xc8\xd9\x79\xcb\x92\xdb\x0d\x2d"
                "\x81\x30\x23\x20\xc1\x2f\x97\xd1\x90\x5e\x52\x73\x04\x8d\x23"
                "\x6b\x9c\xe9\x7f\xb0\xda\x3a\x75\x84\x60\xd2\xac\x55\xc5\x2a"
                "\x8e\x25\x17\x64\x3e\x0d\x0f\x1f\x9c\x1d\x04\xfe\x36\x26\xb7"
                "\x4b\xeb\xed\xa4\x73\x25\x86\x45\xa1\x34\x33\xf3\xdd\x06\xd1"
                "\x8a\xc8\x9d\x00\x69\xf2\x72\x7f\x00\x28\x08\x7b\x8b\x31\x1c"
                "\xf3\xd3\x3f\x46\xc6\xc6\xa7\x29\x89\xbc\x85\x1e\xb8\x01\x8e"
                "\xe1\xf2\x6e\xe3\x08\xa8\x4d\x7d\x6c\x0f\x67\x1b\x1d\xbf\x88"
                "\xbe\x0b\x0e\x6f\x20\xa8\xff\x2c\xea\x04\xb3\x95\xe4\x2d\xb3"
                "\x72\xcf\xd7\x09\xca\xc9\x71\x41\x6c\x12\x91\x16\x2a\x25\xb4"
                "\x2c\x5d\x6b\xdf\x39\x02\xd7\xf7\xd8\xbd\x2a\xac\x8a\xcb\x40"
                "\x75\x16\x1e\xbf\xd3\x87\x47\x21\x0d\xcb\x8a\xe3\x45\x8f\x1d"
                "\xad\x13\xfc\xe5\x14\xf2\xea\x3d\x14\x30\x5a\x47\xce\xb1\xe1"
                "\x53\xae\x1f\x0b\x9a\x2f\xe1\x15\x58\x71\x1d\xbd\x89\xdd\xb1"
                "\x01\x08\xe3\x5b\x9c\x5a\x50\x96\x50\x70\x6f\x5a\x54\xce\x0c"
                "\x7a\xb6\x1a\xbc\xd1\xe3\x23\xe3\xe8\xb6\x9d\xbe\xa9\x2f\x82"
                "\x23\xcc\x46\x2e\xe9\xe4\xa2\xdd\x4b\xff\x55\x56\x78\x53\xdc"
                "\xf1\x5a\xfe\x53\x81\x82\x01\x00\x3e\xc1\xc6\x57\x87\xd5\xaf"
                "\xd7\xf2\x3c\xc2\xb9\xca\x7f\x6a\xbd\x42\x46\x0f\x25\x12\x25"
                "\xf1\xb2\x7d\x77\xe4\xd5\x1c\xbb\xde\xa2\x40\x65\x0b\xf3\xbc"
                "\xef\xbb\x91\x3a\x2f\xf0\x35\xa2\xce\x2f\x16\x7d\xef\x5b\x7c"
                "\x1e\xb6\xbe\x6f\x43\x7c\xb5\xe9\xf0\xd3\x8b\x45\x80\x3c\x9f"
                "\xef\x25\xe8\x81\x13\xf9\xea\xa4\xfe\xe0\x63\x47\xbd\xb0\x63"
                "\xea\xca\xec\x85\x5f\x7a\x71\xbb\x86\x28\x86\xcd\xb9\x8b\x92"
                "\x34\x79\x7f\x34\x30\xd5\x62\x3a\x34\x4a\x0e\xd2\x76\x5b\x3c"
                "\xf7\x50\xc8\x15\xc7\x5b\xee\xc2\x98\x74\xa2\x81\xbf\xff\x34"
                "\x7a\x7a\x69\xa5\x05\xb9\x56\xc2\x9d\x47\x3b\x1f\xfc\x6b\xc9"
                "\x08\xc4\xad\x21\x56\xdf\x88\x3f\xe0\xa9\x26\x5b\xe5\xcc\xc6"
                "\x5a\xb6\xac\x77\xeb\x06\x10\xb6\x43\xe4\x5f\x6a\x2a\x7a\x77"
                "\x1b\x9f\xdd\x89\x00\xad\xd9\xd1\x87\xd2\x35\x5c\x84\x3f\x2b"
                "\x37\x9e\xf0\xb1\x85\xa5\x3d\x7a\x99\x4f\xc4\xa9\x9a\x5f\xb3"
                "\xdc\xa9\x12\x38\x22\x41\xb4\x12\x51\x0a\xcc\x40\xbd\xd8\x9b"
                "\x44\xb0\x57\x78\xe1\xea\x58\x6a\x71\x7f\x3a\xba\x16\x33\x71"
                "\x05\x57\x9c\xfa\x00\xcd\x2e\x6c\xcf\x91\x1d\x27\x26\x46\x52"
                "\xa1\xf0\xbf\x51\xdb\x5d\x14\x8d\xbd\xa1\x00\xa2\x82\x05\x1a"
                "\xa0\x82\x04\x9b\xa2\x82\x02\x8b\xa0\x82\x02\x0c\xa3\x82\x02"
                "\x08\x80\x82\x01\x00\xd9\x25\xc3\xba\x0a\x46\x6e\xa9\x1d\x05"
                "\xd7\x54\xf1\xff\xf4\xaf\xe5\x13\xcf\xd6\x74\xb0\xcf\xc2\x8c"
                "\x68\x5c\xa9\xf3\x44\x4b\xfd\x4a\x4d\x29\x64\xbc\xa8\x98\xf5"
                "\x35\x0a\x65\xe5\xcd\x5d\x08\x9f\x58\x22\xed\x21\x78\x04\x4d"
                "\x2a\xce\x80\x33\x19\x5b\x7a\xbd\xa6\x89\xfa\x80\xa4\xf5\x32"
                "\xa6\xb1\x34\x61\x55\x5a\xbd\x05\xaf\x4b\x4b\xdf\xe0\xa9\x3e"
                "\x1d\x2f\x3e\xaf\x0c\x65\x32\xc6\xf2\xe0\x5c\x09\xc0\xa2\x41"
                "\xe6\xc9\x96\x5e\x88\x62\x4a\x28\x4b\x23\x2f\xcf\xb3\xb7\x1e"
                "\x11\x7f\xc4\x63\x1a\xe4\x24\x29\x46\xf4\x48\xde\x30\x45\x97"
                "\xf8\x6c\x8d\x4e\x4a\xce\x5e\x41\xb2\xb7\x5a\xd5\x94\x42\x5a"
                "\x14\xd1\x11\x99\xc5\xeb\x66\xbe\xb1\xc6\xc3\xdb\x2f\x8f\xa0"
                "\x6c\xa9\x27\x0f\xc0\x92\x77\x0b\x8d\x66\xb8\x93\x0b\xc0\x5c"
                "\xcb\x51\x4e\xa3\x83\xd2\xbd\x04\xd8\xc0\x0c\xb2\xf7\x38\x4e"
                "\x6a\xec\xfe\x76\xd9\x71\x0b\x90\x21\x7c\xbf\x07\xc4\xd8\x4c"
                "\x6d\xb9\x35\x48\x5d\x82\xea\x61\xc5\x14\xff\x25\x50\x47\xaf"
                "\x06\x58\xa9\x95\x2c\xdd\xe5\xbd\x95\x4a\x7b\x27\xa1\x46\xe3"
                "\xf0\x16\xe8\xf9\xba\x43\xb8\x77\xdc\x87\x81\x3a\xc0\xf2\xed"
                "\x3b\x03\x5e\xe6\x89\x71\x81\x82\x01\x00\xab\xab\x2d\x40\xc8"
                "\xe7\x57\xd6\x51\xbc\x13\xd2\x76\xdb\x4d\x49\x9c\x50\x61\xaa"
                "\x56\x72\xfa\x2b\xc9\x56\xf5\x56\xbe\x05\x8e\xfb\x3f\x4d\x80"
                "\x6f\x03\xbd\xaa\xfd\x90\xe4\x27\x3b\xe1\x75\x4b\x8c\x46\x3c"
                "\x4d\xdb\x1b\xca\x4a\x8a\x4f\x57\x0a\xc0\x1e\xb5\x62\x5c\x83"
                "\xec\x63\xcb\xc9\xcd\x00\x99\xac\x82\x2e\xf1\xeb\x1d\xba\x87"
                "\x60\xbf\x39\x04\x6a\xf9\x11\x9f\x82\x2a\x5a\xc7\x22\x92\x14"
                "\x06\xa8\x85\xcf\x5c\xfc\xac\xd9\x2f\xef\xcd\x0a\x68\xcf\xf5"
                "\x0c\xfb\x76\x29\xd4\x16\x8e\xee\x7c\x37\x40\x23\xf8\x46\x68"
                "\x39\x0d\xfe\xd6\x55\xa0\xa6\xa3\xc0\xca\xe2\x80\x99\x20\x3f"
                "\x75\xaa\xf4\xc7\x01\x17\x25\x01\x16\xf6\xe0\xc5\xfa\x02\xee"
                "\x20\xc3\x38\x3d\x56\x12\xb5\x3a\x09\x0a\x17\x73\xf5\x97\xb1"
                "\x79\x31\x59\xe5\x8c\x07\xd9\xbc\x86\xb0\xd2\x42\x90\x0a\x6d"
                "\xc7\x58\xf5\xfe\x66\x44\x91\x6e\xb6\x49\x30\xf8\x71\x38\x8b"
                "\x53\x93\xab\x5f\x32\x52\x68\xfd\x78\x0f\xf7\x83\x43\x3f\x56"
                "\x79\x99\x13\x88\x72\x1a\xbb\x25\x4a\x70\x83\x84\x4e\xfd\x6f"
                "\x5c\xce\xf6\xce\x49\xfe\xe0\xf2\x07\x34\xa7\xb1\x05\x97\x75"
                "\x7c\x68\xa5\x4d\xea\x11\xbf\x9b\x0e\xa8\x28\xa1\x79\xa0\x25"
                "\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54"
                "\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee"
                "\x93\x58\xeb\x4e\x81\x01\x09\xa3\x27\x80\x20\x32\xec\xaa\x5e"
                "\xa6\x88\xdc\xe4\x81\x0f\x93\x0f\x65\xde\x87\xfd\x54\x8c\x79"
                "\x04\x81\xe3\x63\x3f\x3d\x08\xa1\xba\x0a\x24\x2b\x46\x81\x03"
                "\x01\x00\x00\xa4\x27\x80\x20\x40\xd1\x9a\x63\x62\x9b\xc0\x76"
                "\xab\x11\x73\x42\x86\xb3\x20\x9d\x23\xe8\x5e\xee\xb9\x82\x5d"
                "\x93\xe3\xac\xad\xa0\x40\x41\x51\x1b\x81\x03\x02\x00\x00\xa3"
                "\x82\x02\x08\x80\x82\x01\x00\x9f\x01\x7b\x87\xfd\xbe\xa0\x02"
                "\x77\x00\x19\x7f\x2f\xde\x80\xab\xdc\xd0\x14\xe9\x63\xe5\xd6"
                "\xfb\x2c\xcb\xb0\x70\x88\xbe\xcb\x6d\x8e\x56\xf3\x02\x34\xae"
                "\xec\x30\xf7\x41\xcf\xe7\x07\x80\x52\x04\xa1\x16\x51\x15\x07"
                "\xba\xdb\xc6\xe8\xce\xa8\x8c\xa8\xb7\xaa\x4e\x08\x96\xbd\x5f"
                "\xbd\x64\x0d\xe3\x88\xca\x7e\x1a\x20\x1f\x65\x44\x3a\xc8\x2c"
                "\xc2\xdd\xc8\xc6\x9b\x8f\x01\x8e\x36\xc5\x52\x5a\xb1\x1d\x1d"
                "\xc4\xf0\x9f\xa9\x51\x4d\xe6\xeb\x36\x9c\x2e\x2d\x08\x1c\xaf"
                "\x67\xed\x83\xbb\x67\x77\x83\x24\x49\x97\x8c\x06\x0d\xca\x8b"
                "\x45\xf4\x2b\xff\x94\x22\x7f\x04\x92\x81\xd6\xf5\x17\x7f\x41"
                "\x2d\xc3\x4e\x86\x2a\x60\xc4\x0e\x74\xb0\x04\x3c\x48\xe4\xd8"
                "\x09\xf6\x48\x35\x00\x09\xda\xaa\x31\x2f\x8b\x5f\x6d\x4c\x48"
                "\x52\xb9\xd9\x43\xe8\x1e\x22\x68\x80\xbe\xff\xee\x11\x3b\x83"
                "\x47\xfd\xec\x6e\x1d\x9c\x7b\xd8\xe3\x2a\x8b\xef\x2a\xb3\xa5"
                "\xc1\x78\x3c\x0b\x0e\x31\xe6\x40\x80\xe1\xcb\x25\x56\xb3\x45"
                "\x7e\x65\xb3\xd9\x1a\x8e\xf8\xb0\x65\x44\x89\x73\x90\x0f\xe7"
                "\xcd\x1b\x68\x3b\xa4\x7a\x35\x41\xad\xfd\x8e\xa8\x50\xe0\xf2"
                "\xab\x2d\xe2\x31\x39\x82\x41\x4b\x81\x82\x01\x00\x74\x8f\x24"
                "\x4b\x23\x57\x47\x78\x0d\x8f\x52\x99\xab\x27\x8a\xd4\x0d\x4b"
                "\x1f\x5f\xa2\xca\xe3\x3d\x00\x7d\x6f\x0a\x35\x8a\x86\xa5\x3e"
                "\x83\x93\x84\x12\xb3\x1b\x58\x8f\xd2\x98\x9b\x88\x1a\x1e\xae"
                "\xca\x26\xa9\x86\x9a\xcf\x32\x51\x6a\x71\x41\xb0\x47\x8d\xea"
                "\x1f\xd3\x90\x8a\x6b\xc0\x87\x77\x15\xde\xec\x48\x47\xf0\x8d"
                "\xcf\x89\xf5\xba\x27\x2f\xcc\x01\x90\x77\xec\xef\x48\xb7\x09"
                "\x1e\x60\x0b\x14\x87\x3e\x7b\x19\x8b\x86\x07\xd6\xb0\xbc\x98"
                "\xfa\x78\xc6\x16\xf5\xf8\x84\x63\x29\x85\xc0\x23\x27\xd3\x78"
                "\x09\xf8\x42\x80\x87\x19\x8a\x84\x5e\x8e\x60\x49\xdd\x0e\x82"
                "\xaf\xb2\x44\x17\xd1\x19\xa8\x42\xbd\xe2\x0b\x7b\xf7\xfe\xf5"
                "\x58\x4c\x53\xa0\x28\x1d\x1a\x65\x51\x06\x6d\x8b\x52\xd8\x4e"
                "\x00\xf9\x1d\xb7\x53\xcf\xb7\x49\x6c\xc6\x8d\xec\x04\x41\xbb"
                "\x21\x04\xb4\x07\x79\x07\x9e\x9d\xd8\x4b\x53\x7d\x77\xaa\xf2"
                "\xb4\x02\xb1\x76\xd4\xff\x3b\xb5\x23\x60\x46\x4b\x1e\x34\x05"
                "\x89\x09\x81\x76\x16\x3d\x59\xd3\x7c\x9b\xfa\x1e\x94\x26\x94"
                "\x0e\xae\xb4\xe0\x3b\x0c\x0d\xb3\x6e\x4c\x67\x7f\x66\x0f\x39"
                "\x8b\x7b\xb3\xaf\xa6\x45\x5f\x55\xd4\x66\xe8\x96\xe6\xa1\x79"
                "\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f"
                "\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd"
                "\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa3\x27\x80\x20\x78\xe3"
                "\x04\xf4\xa6\x16\x68\x4c\x1b\xcf\x3a\x32\xff\xbc\x75\x1a\xe6"
                "\x08\x9b\xff\xba\x79\xf4\x39\x7a\xfc\xe1\x6f\xff\x3e\xb3\x75"
                "\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x0d\xea\xc5\x16\x5c\x62"
                "\xb8\xd1\xa4\xe7\x5a\x07\x58\x00\x79\x51\x88\x21\xe9\x4d\xba"
                "\x73\x7b\xad\x60\x9c\x5c\x26\x00\x2e\xd1\x51\x81\x03\x02\x00"
                "\x00\xa1\x79\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11"
                "\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2"
                "\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa3\x27\x80"
                "\x20\x8d\xb0\x2c\xb1\x28\xc3\xf4\x97\x50\x84\x64\x57\xca\xf4"
                "\x9d\x63\x08\x73\xfc\xde\x2f\x90\xf0\xf2\xec\x79\xa9\xc6\xa3"
                "\xf1\x33\xfd\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x95\x3c\x86"
                "\x65\x91\x76\x69\x6b\x72\x61\xaa\x76\x15\x2a\xd7\x25\x4f\x32"
                "\xb7\x73\x7a\xb2\x49\x0c\x0b\xdf\xb5\x4e\x4a\x8b\xf7\x65\x81"
                "\x03\x02\x00\x00"s;
            auto const thresh0EncodedCondition =
                "\xa2\x2b\x80\x20\x19\xce\xea\xc6\x97\x99\x05\x96\xd5\x06\x2d"
                "\x23\xe6\x26\xed\x6a\xcb\xac\xab\x38\x00\xdd\x89\xd2\xa5\x28"
                "\x94\xf3\x5f\x0b\xdc\x3c\x81\x03\x07\x48\x20\x82\x02\x03\xd8"s;
            auto const thresh0EncodedFingerprint =
                "\x30\x82\x01\x07\x80\x01\x03\xa1\x82\x01\x00\xa0\x25\x80\x20"
                "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
                "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
                "\xeb\x4e\x81\x01\x09\xa1\x2b\x80\x20\x6a\x11\x2e\x99\x9f\x4d"
                "\xdb\x8c\xb0\x96\xbb\xa3\xd3\x10\xc5\xb1\xb8\x43\x65\x2a\xaa"
                "\x6e\xf1\x65\x57\x0b\xf6\xf7\x15\x1f\xa2\x03\x81\x03\x01\x0c"
                "\x20\x82\x02\x04\x30\xa1\x2b\x80\x20\xa0\x6a\x11\x7e\x85\x57"
                "\xde\xd0\xa1\x4a\xa8\xe2\x6c\xd2\xae\xa0\xec\x26\x2f\x2e\x83"
                "\x3f\x50\x5c\xb9\x45\x2b\x5f\xbe\xcd\xbe\x84\x81\x03\x01\x0c"
                "\x20\x82\x02\x04\x30\xa2\x2b\x80\x20\xc5\x9c\xef\xd5\x25\x20"
                "\x48\xc6\x95\xdc\xf8\xbf\xb9\x7a\x06\x0e\x96\xfc\x3c\x9b\x95"
                "\x9d\xd3\x3d\x7a\xfb\x30\xb1\x0f\x32\xc1\xf3\x81\x03\x04\x24"
                "\x00\x82\x02\x03\x98\xa3\x27\x80\x20\x8d\xb0\x2c\xb1\x28\xc3"
                "\xf4\x97\x50\x84\x64\x57\xca\xf4\x9d\x63\x08\x73\xfc\xde\x2f"
                "\x90\xf0\xf2\xec\x79\xa9\xc6\xa3\xf1\x33\xfd\x81\x03\x01\x00"
                "\x00\xa4\x27\x80\x20\x95\x3c\x86\x65\x91\x76\x69\x6b\x72\x61"
                "\xaa\x76\x15\x2a\xd7\x25\x4f\x32\xb7\x73\x7a\xb2\x49\x0c\x0b"
                "\xdf\xb5\x4e\x4a\x8b\xf7\x65\x81\x03\x02\x00\x00"s;
            check(
                &thresh0,
                thresh0Msg,
                thresh0EncodedFulfillment,
                thresh0EncodedCondition,
                thresh0EncodedFingerprint);
        }
    }

    void
    testThresh33()
    {
        testcase("Thresh33");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * thresh0
        // ** Preim8Cond
        // ** Rsa9Cond
        // ** Ed10Cond
        // ** Prefix11Cond
        // ** Thresh15Cond
        // ** prefix1
        // *** prefix2
        // **** thresh3
        // ***** rsa4
        // ** preim5
        // ** rsa6
        // ** ed7

        auto const rsa4Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa4PublicKey{
            {0xbe, 0x09, 0xc5, 0xa4, 0x27, 0x29, 0xdf, 0xd4, 0x67, 0x76, 0xbe,
             0xbf, 0x2c, 0xf3, 0xa2, 0x0b, 0x42, 0xe4, 0xbf, 0xeb, 0xdd, 0x67,
             0x20, 0xfb, 0x7a, 0x27, 0x93, 0xc0, 0x78, 0x47, 0x78, 0xd7, 0x15,
             0x32, 0xee, 0x38, 0x81, 0x0d, 0x36, 0xa2, 0xc4, 0x65, 0x44, 0xe6,
             0x62, 0x26, 0xb9, 0x58, 0x13, 0xa4, 0x15, 0x82, 0xab, 0xb1, 0x16,
             0x61, 0xfc, 0x01, 0x98, 0xc6, 0x1a, 0x69, 0xc6, 0xba, 0x39, 0x3f,
             0x01, 0x55, 0x3d, 0xd7, 0x8e, 0x14, 0x42, 0x6d, 0x78, 0x74, 0x9b,
             0x28, 0xcb, 0x31, 0x39, 0x98, 0x5a, 0x11, 0xdc, 0xc1, 0x18, 0x9d,
             0x8d, 0xb0, 0xcd, 0x1b, 0x4c, 0x10, 0xab, 0x14, 0x64, 0x19, 0xf1,
             0x33, 0x15, 0x45, 0xc8, 0x92, 0x82, 0x03, 0x82, 0x8a, 0xaa, 0xad,
             0x94, 0xfc, 0x24, 0x11, 0x96, 0x99, 0x7e, 0x94, 0x5a, 0x82, 0x57,
             0x68, 0x61, 0x9f, 0x7b, 0x45, 0xe0, 0x99, 0x9e, 0x4f, 0x32, 0x50,
             0x5f, 0x05, 0xc8, 0x11, 0xae, 0xc4, 0x0c, 0x63, 0x18, 0x0e, 0x02,
             0x59, 0x36, 0x25, 0x92, 0x06, 0x32, 0xc7, 0x71, 0x47, 0x99, 0xcc,
             0x0a, 0x6e, 0x0a, 0x58, 0x71, 0x3f, 0x5e, 0xb7, 0x78, 0xf7, 0x98,
             0x79, 0xdf, 0x74, 0xa4, 0xeb, 0xa9, 0x00, 0xfd, 0x81, 0xb3, 0xcf,
             0x04, 0x8c, 0x5d, 0x7d, 0xe7, 0xb2, 0x82, 0x90, 0x49, 0xbd, 0x69,
             0xf3, 0x08, 0xe9, 0x92, 0xc6, 0x9e, 0x41, 0xba, 0x74, 0xd8, 0x8d,
             0x81, 0x97, 0x6f, 0x86, 0xab, 0xc9, 0xf1, 0x02, 0x31, 0xb4, 0xce,
             0x47, 0xb0, 0x39, 0xc8, 0xba, 0x51, 0xa7, 0x39, 0xf3, 0x71, 0xa2,
             0x25, 0x27, 0x37, 0x6e, 0x09, 0x6f, 0x19, 0x59, 0xbc, 0x65, 0xd9,
             0xcd, 0x12, 0xd3, 0x2c, 0xa2, 0x78, 0xfa, 0x23, 0x15, 0x1a, 0x82,
             0x41, 0x91, 0x1b, 0xbe, 0x8a, 0xe7, 0xfe, 0x3c, 0x3c, 0x30, 0x32,
             0xaa, 0xe9, 0xf3}};
        std::array<std::uint8_t, 256> const rsa4Sig{
            {0x9a, 0x39, 0xa4, 0x45, 0x4e, 0x3a, 0x90, 0x61, 0x02, 0xcc, 0xdc,
             0x7f, 0x04, 0xed, 0xd1, 0xc1, 0x4f, 0x74, 0xe3, 0x31, 0x98, 0xc0,
             0x64, 0xfa, 0x5b, 0x12, 0x04, 0xae, 0x19, 0xa5, 0xba, 0x81, 0x10,
             0xfc, 0xc7, 0x1a, 0x76, 0x48, 0x7b, 0x7b, 0x0f, 0x9e, 0x58, 0x9b,
             0xf5, 0xb2, 0x18, 0xb9, 0xdb, 0x88, 0x04, 0x8f, 0x51, 0x8a, 0x5c,
             0x52, 0x3f, 0xad, 0x7a, 0xf5, 0x5b, 0x48, 0x4f, 0x54, 0x06, 0xa7,
             0xb7, 0xea, 0xb5, 0x0e, 0x57, 0x81, 0x85, 0x7d, 0x7b, 0xfc, 0x4d,
             0xec, 0xc8, 0x98, 0xeb, 0x5c, 0xdd, 0x86, 0x14, 0xf5, 0xc3, 0xd4,
             0xbc, 0xda, 0x1d, 0x47, 0xec, 0x50, 0x4b, 0x08, 0x74, 0x0d, 0x0d,
             0x4e, 0x94, 0x65, 0xa8, 0x7d, 0xa8, 0xf5, 0x7a, 0x5b, 0x03, 0xf6,
             0x7d, 0x9a, 0xe0, 0x30, 0xaf, 0xc1, 0x5d, 0xf0, 0x36, 0x86, 0x2b,
             0x57, 0x94, 0xdf, 0xe4, 0x43, 0x5f, 0x43, 0x05, 0xae, 0x60, 0x09,
             0x96, 0xa8, 0xa9, 0x17, 0xd4, 0x37, 0xae, 0x48, 0x35, 0x46, 0xcc,
             0x35, 0x24, 0x95, 0xc0, 0x93, 0xf9, 0x4d, 0x34, 0x41, 0xa9, 0xe6,
             0xce, 0x9d, 0x31, 0x73, 0x7b, 0x74, 0x28, 0xb8, 0xa3, 0x8d, 0xc0,
             0x97, 0x74, 0x65, 0x11, 0xc1, 0xe4, 0x21, 0x23, 0x94, 0xb6, 0x63,
             0x44, 0x2b, 0x38, 0xdc, 0x77, 0xcf, 0x2a, 0x20, 0x30, 0xfa, 0xbc,
             0xa4, 0x74, 0xb7, 0x8d, 0x24, 0x3e, 0x30, 0x1e, 0xec, 0x33, 0x7b,
             0x58, 0xe2, 0x4e, 0x32, 0x22, 0xa8, 0x19, 0x59, 0x78, 0x35, 0xd9,
             0x4e, 0xc6, 0x00, 0x4d, 0x7d, 0x68, 0x7c, 0xad, 0x56, 0x1c, 0x68,
             0x61, 0x5a, 0x37, 0xeb, 0xa5, 0xb7, 0x6a, 0x0e, 0x5b, 0x76, 0xbb,
             0xd4, 0xee, 0xd7, 0x2d, 0xe5, 0x72, 0x4f, 0x0d, 0x56, 0x86, 0x4e,
             0x81, 0x7c, 0x6f, 0xfe, 0xe2, 0xc4, 0x8f, 0x8b, 0x23, 0x2c, 0x26,
             0xa6, 0xe5, 0x06}};
        auto const thresh3Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix2Prefix = "P2"s;
        auto const prefix2Msg = "P1abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix2MaxMsgLength = 14;
        auto const prefix1Prefix = "P1"s;
        auto const prefix1Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix1MaxMsgLength = 14;
        auto const preim5Preimage = "I am root"s;
        auto const preim5Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const rsa6Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa6PublicKey{
            {0xd0, 0x07, 0xfc, 0x9d, 0xb0, 0xa1, 0xa6, 0x40, 0xe4, 0x52, 0x30,
             0x42, 0x74, 0xfd, 0x35, 0x04, 0xde, 0x45, 0x68, 0xb3, 0x22, 0xdd,
             0xff, 0x41, 0x43, 0x69, 0x33, 0xc0, 0xff, 0x35, 0xb6, 0x6d, 0x15,
             0xe9, 0x54, 0x15, 0xeb, 0x1d, 0x07, 0xe2, 0x25, 0x2b, 0xdb, 0xaa,
             0x16, 0x8d, 0x0d, 0x7f, 0x05, 0xf0, 0xd2, 0x7d, 0xb4, 0x9b, 0x51,
             0x19, 0x20, 0x1e, 0x3d, 0xba, 0x50, 0x9e, 0x51, 0x13, 0x81, 0x43,
             0x55, 0x96, 0xca, 0xdb, 0x88, 0x1f, 0xef, 0x2d, 0x38, 0x3f, 0xae,
             0x8d, 0xac, 0xc8, 0x6f, 0x2b, 0xd5, 0xf0, 0x34, 0x1a, 0x99, 0x00,
             0x7c, 0x6d, 0xb3, 0x1b, 0x1d, 0x68, 0xdb, 0xf8, 0x1c, 0x59, 0x3a,
             0x63, 0x38, 0x7c, 0x1c, 0x14, 0xbc, 0x22, 0xcf, 0xc8, 0x9a, 0xc6,
             0x96, 0x6f, 0x3d, 0x03, 0x0b, 0x61, 0x6b, 0x7d, 0x75, 0x97, 0xe8,
             0x25, 0xb8, 0x2f, 0xfa, 0xf4, 0x07, 0x44, 0xdf, 0x00, 0x3d, 0xff,
             0x0d, 0xd5, 0x7f, 0x7f, 0xf3, 0x0c, 0x13, 0xac, 0x8d, 0xf8, 0x8c,
             0x79, 0xc5, 0xf3, 0x29, 0xdc, 0x23, 0x65, 0xd3, 0xd1, 0x1c, 0xa6,
             0x14, 0x78, 0x6a, 0x1a, 0xe3, 0x15, 0x8d, 0x8b, 0xdc, 0xa0, 0x5a,
             0xc7, 0x82, 0xb0, 0x03, 0x6c, 0x71, 0x43, 0x59, 0x24, 0xc7, 0x50,
             0x64, 0xb2, 0xa7, 0x69, 0xf5, 0xbd, 0xe6, 0x5e, 0xaa, 0x77, 0x59,
             0x60, 0x36, 0xc0, 0xe3, 0x42, 0x7f, 0x05, 0x3b, 0x4c, 0x02, 0x0e,
             0x70, 0x5a, 0x70, 0xc5, 0x2a, 0xeb, 0x94, 0x4d, 0x15, 0x09, 0xef,
             0xbb, 0x58, 0x42, 0x68, 0x05, 0x59, 0x70, 0xa0, 0x17, 0xb2, 0x8e,
             0xdf, 0x7b, 0x40, 0x5d, 0x21, 0x1e, 0xfe, 0x62, 0x58, 0xde, 0xfb,
             0x14, 0x91, 0x18, 0xf3, 0x4f, 0x9b, 0x36, 0x55, 0xcf, 0xb3, 0x5e,
             0xec, 0x4f, 0xcc, 0x6d, 0x13, 0x58, 0xc8, 0xa3, 0xa3, 0xee, 0x23,
             0x8a, 0xc2, 0xbf}};
        std::array<std::uint8_t, 256> const rsa6Sig{
            {0xca, 0x3e, 0x58, 0x6f, 0xa3, 0x6f, 0x29, 0xd1, 0x5f, 0x19, 0xae,
             0x71, 0x24, 0x71, 0xba, 0x90, 0x26, 0x0f, 0x5c, 0x3d, 0xb0, 0xb8,
             0xab, 0xaa, 0x6e, 0xa0, 0x1d, 0xb4, 0x35, 0xc3, 0xa5, 0xda, 0x02,
             0x05, 0x1e, 0x5f, 0xfd, 0xc8, 0xa6, 0xf1, 0xcc, 0xd9, 0x90, 0x97,
             0x0d, 0x0a, 0xeb, 0xe9, 0x8a, 0x01, 0xae, 0x13, 0x5e, 0xf5, 0x63,
             0xe3, 0x8b, 0x60, 0x42, 0xfd, 0x4f, 0xbe, 0xb7, 0x3d, 0xd4, 0xcc,
             0x1f, 0xb8, 0x47, 0xf5, 0xb4, 0x83, 0xc8, 0x50, 0x39, 0xc9, 0x41,
             0xea, 0x71, 0xad, 0xba, 0x7e, 0x1b, 0x43, 0x12, 0xe3, 0x39, 0x92,
             0x27, 0x67, 0x3f, 0xfc, 0x0e, 0x88, 0xcd, 0x58, 0x85, 0xb9, 0x95,
             0xd7, 0x86, 0xbf, 0x62, 0xf3, 0x9d, 0x1e, 0x0c, 0x04, 0xf3, 0xc9,
             0x9d, 0x0a, 0xf6, 0x76, 0xe3, 0x62, 0xac, 0xc3, 0x34, 0x97, 0x05,
             0x48, 0x6f, 0xe9, 0x76, 0xb5, 0xb8, 0x74, 0x4c, 0x41, 0x9a, 0x5d,
             0xe5, 0x72, 0xdb, 0x62, 0xe4, 0x4a, 0x05, 0x90, 0x40, 0xd8, 0x9f,
             0x1e, 0xf2, 0x60, 0xfe, 0xcb, 0x46, 0xe3, 0xea, 0x49, 0xca, 0x37,
             0x3b, 0x75, 0x40, 0x89, 0x26, 0xcb, 0x94, 0x19, 0x02, 0xe7, 0x83,
             0x8a, 0x41, 0xb3, 0x37, 0xa7, 0x6b, 0x3d, 0x23, 0x8c, 0x64, 0xfe,
             0x50, 0x39, 0x83, 0x5f, 0x2a, 0xbc, 0x57, 0x42, 0xfd, 0xe2, 0xd6,
             0xd7, 0x48, 0x50, 0x0d, 0x3c, 0x4e, 0x43, 0xe0, 0xab, 0x64, 0x59,
             0x1c, 0x99, 0x0d, 0xfe, 0x73, 0xcb, 0x34, 0x99, 0xa3, 0x0b, 0x84,
             0xc4, 0x82, 0x83, 0xcd, 0x81, 0x5e, 0xb3, 0x0b, 0xc8, 0x40, 0x24,
             0xd2, 0x30, 0xdc, 0xfc, 0x1a, 0x56, 0x12, 0xac, 0x59, 0xa6, 0x65,
             0x9e, 0xc1, 0x91, 0x02, 0x18, 0x73, 0x3d, 0x6f, 0x14, 0x16, 0x3a,
             0x29, 0x15, 0xbf, 0x18, 0xc2, 0x99, 0xf8, 0xeb, 0xc1, 0xf0, 0xb7,
             0x0c, 0xa6, 0x7d}};
        auto const ed7Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed7PublicKey{
            {0x58, 0xcf, 0x4b, 0xc5, 0x59, 0xdb, 0xba, 0x62, 0x25, 0x14, 0x3a,
             0xc0, 0xad, 0xab, 0x5e, 0x35, 0xa1, 0xb4, 0x0e, 0xc1, 0xaf, 0x3c,
             0xa8, 0x2f, 0x69, 0x2c, 0xb6, 0x25, 0xd7, 0xea, 0x15, 0xb3}};
        std::array<std::uint8_t, 64> const ed7Sig{
            {0xd0, 0xd1, 0x17, 0xe2, 0xb5, 0x40, 0x14, 0x81, 0x0b, 0x12, 0xd8,
             0xbe, 0x1d, 0x1c, 0xb0, 0x88, 0x27, 0xaf, 0x6e, 0xc3, 0x13, 0x71,
             0xea, 0xac, 0xf3, 0xd8, 0x6f, 0x38, 0x21, 0xe2, 0x6d, 0x77, 0xe9,
             0xa6, 0xba, 0x03, 0x2a, 0xe3, 0x50, 0xcb, 0x38, 0xbe, 0x36, 0xba,
             0x62, 0x6e, 0x37, 0x5c, 0x8d, 0x69, 0x9f, 0xf0, 0x43, 0x64, 0x83,
             0x82, 0x8e, 0xbe, 0xf5, 0xa6, 0x96, 0x35, 0xb7, 0x03}};
        std::array<std::uint8_t, 32> const ed7SigningKey{
            {0x9c, 0x02, 0x4b, 0x5e, 0x6a, 0x83, 0x35, 0x8a, 0x2a, 0x71, 0x70,
             0x4e, 0xab, 0x74, 0x72, 0x22, 0x33, 0x5a, 0x82, 0xd9, 0x8e, 0x9c,
             0x8c, 0x41, 0x62, 0x6b, 0x02, 0x62, 0xbd, 0x59, 0x31, 0xcb}};
        (void)ed7SigningKey;
        auto const thresh0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim8CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim8Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim8CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa9CondConditionFingerprint =
            "\xe5\x15\x0a\xbd\xf6\x06\xbe\xaa\x6c\x81\xf1\x88\x7e\x70\x64"
            "\x51\xeb\x6f\x70\xb1\xdd\xc5\xf1\x20\x53\xf7\xcb\x9f\x7f\xc7"
            "\xe4\x52"s;
        Condition const Rsa9Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa9CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed10CondConditionFingerprint =
            "\x00\x8b\xe6\x62\xd4\x30\x65\x1e\x40\xb3\x23\x05\x52\x3a\xf3"
            "\x16\xda\x09\xbe\x79\x5f\x41\xc9\x03\x93\x34\x5b\x7c\x24\x87"
            "\x62\xfa"s;
        Condition const Ed10Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed10CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Prefix11CondConditionFingerprint =
            "\xd3\xe3\xf9\x8c\xf3\x44\x21\x3a\x44\xe2\x07\x5a\x3c\x3e\x1b"
            "\xce\x05\x47\xca\x55\x0d\x1d\x21\x9f\xfa\xf8\xd6\x3c\xab\xa1"
            "\xbe\x16"s;
        Condition const Prefix11Cond{
            Type::prefixSha256,
            68650,
            makeSlice(Prefix11CondConditionFingerprint),
            std::bitset<5>{12}};
        auto const Thresh15CondConditionFingerprint =
            "\xe6\x58\xca\x4d\x80\x1f\x92\xbc\xe5\x84\x9f\xef\xe8\x04\x6a"
            "\x6d\x8d\xc9\x06\xd8\x60\x2d\x6e\x1e\x78\x38\xd7\xf9\x66\x62"
            "\x7d\x23"s;
        Condition const Thresh15Cond{
            Type::thresholdSha256,
            271360,
            makeSlice(Thresh15CondConditionFingerprint),
            std::bitset<5>{25}};

        auto rsa4 = std::make_unique<RsaSha256>(
            makeSlice(rsa4PublicKey), makeSlice(rsa4Sig));
        std::vector<std::unique_ptr<Fulfillment>> thresh3Subfulfillments;
        thresh3Subfulfillments.emplace_back(std::move(rsa4));
        std::vector<Condition> thresh3Subconditions{};
        auto thresh3 = std::make_unique<ThresholdSha256>(
            std::move(thresh3Subfulfillments), std::move(thresh3Subconditions));
        auto prefix2 = std::make_unique<PrefixSha256>(
            makeSlice(prefix2Prefix), prefix2MaxMsgLength, std::move(thresh3));
        auto prefix1 = std::make_unique<PrefixSha256>(
            makeSlice(prefix1Prefix), prefix1MaxMsgLength, std::move(prefix2));
        auto preim5 =
            std::make_unique<PreimageSha256>(makeSlice(preim5Preimage));
        auto rsa6 = std::make_unique<RsaSha256>(
            makeSlice(rsa6PublicKey), makeSlice(rsa6Sig));
        auto ed7 = std::make_unique<Ed25519>(ed7PublicKey, ed7Sig);
        std::vector<std::unique_ptr<Fulfillment>> thresh0Subfulfillments;
        thresh0Subfulfillments.emplace_back(std::move(prefix1));
        thresh0Subfulfillments.emplace_back(std::move(preim5));
        thresh0Subfulfillments.emplace_back(std::move(rsa6));
        thresh0Subfulfillments.emplace_back(std::move(ed7));
        std::vector<Condition> thresh0Subconditions{
            {Preim8Cond, Rsa9Cond, Ed10Cond, Prefix11Cond, Thresh15Cond}};
        ThresholdSha256 const thresh0(
            std::move(thresh0Subfulfillments), std::move(thresh0Subconditions));
        {
            auto const thresh0EncodedFulfillment =
                "\xa2\x82\x05\x8d\xa0\x82\x04\xb3\xa0\x0b\x80\x09\x49\x20\x61"
                "\x6d\x20\x72\x6f\x6f\x74\xa1\x82\x02\x30\x80\x02\x50\x31\x81"
                "\x01\x0e\xa2\x82\x02\x25\xa1\x82\x02\x21\x80\x02\x50\x32\x81"
                "\x01\x0e\xa2\x82\x02\x16\xa2\x82\x02\x12\xa0\x82\x02\x0c\xa3"
                "\x82\x02\x08\x80\x82\x01\x00\xbe\x09\xc5\xa4\x27\x29\xdf\xd4"
                "\x67\x76\xbe\xbf\x2c\xf3\xa2\x0b\x42\xe4\xbf\xeb\xdd\x67\x20"
                "\xfb\x7a\x27\x93\xc0\x78\x47\x78\xd7\x15\x32\xee\x38\x81\x0d"
                "\x36\xa2\xc4\x65\x44\xe6\x62\x26\xb9\x58\x13\xa4\x15\x82\xab"
                "\xb1\x16\x61\xfc\x01\x98\xc6\x1a\x69\xc6\xba\x39\x3f\x01\x55"
                "\x3d\xd7\x8e\x14\x42\x6d\x78\x74\x9b\x28\xcb\x31\x39\x98\x5a"
                "\x11\xdc\xc1\x18\x9d\x8d\xb0\xcd\x1b\x4c\x10\xab\x14\x64\x19"
                "\xf1\x33\x15\x45\xc8\x92\x82\x03\x82\x8a\xaa\xad\x94\xfc\x24"
                "\x11\x96\x99\x7e\x94\x5a\x82\x57\x68\x61\x9f\x7b\x45\xe0\x99"
                "\x9e\x4f\x32\x50\x5f\x05\xc8\x11\xae\xc4\x0c\x63\x18\x0e\x02"
                "\x59\x36\x25\x92\x06\x32\xc7\x71\x47\x99\xcc\x0a\x6e\x0a\x58"
                "\x71\x3f\x5e\xb7\x78\xf7\x98\x79\xdf\x74\xa4\xeb\xa9\x00\xfd"
                "\x81\xb3\xcf\x04\x8c\x5d\x7d\xe7\xb2\x82\x90\x49\xbd\x69\xf3"
                "\x08\xe9\x92\xc6\x9e\x41\xba\x74\xd8\x8d\x81\x97\x6f\x86\xab"
                "\xc9\xf1\x02\x31\xb4\xce\x47\xb0\x39\xc8\xba\x51\xa7\x39\xf3"
                "\x71\xa2\x25\x27\x37\x6e\x09\x6f\x19\x59\xbc\x65\xd9\xcd\x12"
                "\xd3\x2c\xa2\x78\xfa\x23\x15\x1a\x82\x41\x91\x1b\xbe\x8a\xe7"
                "\xfe\x3c\x3c\x30\x32\xaa\xe9\xf3\x81\x82\x01\x00\x9a\x39\xa4"
                "\x45\x4e\x3a\x90\x61\x02\xcc\xdc\x7f\x04\xed\xd1\xc1\x4f\x74"
                "\xe3\x31\x98\xc0\x64\xfa\x5b\x12\x04\xae\x19\xa5\xba\x81\x10"
                "\xfc\xc7\x1a\x76\x48\x7b\x7b\x0f\x9e\x58\x9b\xf5\xb2\x18\xb9"
                "\xdb\x88\x04\x8f\x51\x8a\x5c\x52\x3f\xad\x7a\xf5\x5b\x48\x4f"
                "\x54\x06\xa7\xb7\xea\xb5\x0e\x57\x81\x85\x7d\x7b\xfc\x4d\xec"
                "\xc8\x98\xeb\x5c\xdd\x86\x14\xf5\xc3\xd4\xbc\xda\x1d\x47\xec"
                "\x50\x4b\x08\x74\x0d\x0d\x4e\x94\x65\xa8\x7d\xa8\xf5\x7a\x5b"
                "\x03\xf6\x7d\x9a\xe0\x30\xaf\xc1\x5d\xf0\x36\x86\x2b\x57\x94"
                "\xdf\xe4\x43\x5f\x43\x05\xae\x60\x09\x96\xa8\xa9\x17\xd4\x37"
                "\xae\x48\x35\x46\xcc\x35\x24\x95\xc0\x93\xf9\x4d\x34\x41\xa9"
                "\xe6\xce\x9d\x31\x73\x7b\x74\x28\xb8\xa3\x8d\xc0\x97\x74\x65"
                "\x11\xc1\xe4\x21\x23\x94\xb6\x63\x44\x2b\x38\xdc\x77\xcf\x2a"
                "\x20\x30\xfa\xbc\xa4\x74\xb7\x8d\x24\x3e\x30\x1e\xec\x33\x7b"
                "\x58\xe2\x4e\x32\x22\xa8\x19\x59\x78\x35\xd9\x4e\xc6\x00\x4d"
                "\x7d\x68\x7c\xad\x56\x1c\x68\x61\x5a\x37\xeb\xa5\xb7\x6a\x0e"
                "\x5b\x76\xbb\xd4\xee\xd7\x2d\xe5\x72\x4f\x0d\x56\x86\x4e\x81"
                "\x7c\x6f\xfe\xe2\xc4\x8f\x8b\x23\x2c\x26\xa6\xe5\x06\xa1\x00"
                "\xa3\x82\x02\x08\x80\x82\x01\x00\xd0\x07\xfc\x9d\xb0\xa1\xa6"
                "\x40\xe4\x52\x30\x42\x74\xfd\x35\x04\xde\x45\x68\xb3\x22\xdd"
                "\xff\x41\x43\x69\x33\xc0\xff\x35\xb6\x6d\x15\xe9\x54\x15\xeb"
                "\x1d\x07\xe2\x25\x2b\xdb\xaa\x16\x8d\x0d\x7f\x05\xf0\xd2\x7d"
                "\xb4\x9b\x51\x19\x20\x1e\x3d\xba\x50\x9e\x51\x13\x81\x43\x55"
                "\x96\xca\xdb\x88\x1f\xef\x2d\x38\x3f\xae\x8d\xac\xc8\x6f\x2b"
                "\xd5\xf0\x34\x1a\x99\x00\x7c\x6d\xb3\x1b\x1d\x68\xdb\xf8\x1c"
                "\x59\x3a\x63\x38\x7c\x1c\x14\xbc\x22\xcf\xc8\x9a\xc6\x96\x6f"
                "\x3d\x03\x0b\x61\x6b\x7d\x75\x97\xe8\x25\xb8\x2f\xfa\xf4\x07"
                "\x44\xdf\x00\x3d\xff\x0d\xd5\x7f\x7f\xf3\x0c\x13\xac\x8d\xf8"
                "\x8c\x79\xc5\xf3\x29\xdc\x23\x65\xd3\xd1\x1c\xa6\x14\x78\x6a"
                "\x1a\xe3\x15\x8d\x8b\xdc\xa0\x5a\xc7\x82\xb0\x03\x6c\x71\x43"
                "\x59\x24\xc7\x50\x64\xb2\xa7\x69\xf5\xbd\xe6\x5e\xaa\x77\x59"
                "\x60\x36\xc0\xe3\x42\x7f\x05\x3b\x4c\x02\x0e\x70\x5a\x70\xc5"
                "\x2a\xeb\x94\x4d\x15\x09\xef\xbb\x58\x42\x68\x05\x59\x70\xa0"
                "\x17\xb2\x8e\xdf\x7b\x40\x5d\x21\x1e\xfe\x62\x58\xde\xfb\x14"
                "\x91\x18\xf3\x4f\x9b\x36\x55\xcf\xb3\x5e\xec\x4f\xcc\x6d\x13"
                "\x58\xc8\xa3\xa3\xee\x23\x8a\xc2\xbf\x81\x82\x01\x00\xca\x3e"
                "\x58\x6f\xa3\x6f\x29\xd1\x5f\x19\xae\x71\x24\x71\xba\x90\x26"
                "\x0f\x5c\x3d\xb0\xb8\xab\xaa\x6e\xa0\x1d\xb4\x35\xc3\xa5\xda"
                "\x02\x05\x1e\x5f\xfd\xc8\xa6\xf1\xcc\xd9\x90\x97\x0d\x0a\xeb"
                "\xe9\x8a\x01\xae\x13\x5e\xf5\x63\xe3\x8b\x60\x42\xfd\x4f\xbe"
                "\xb7\x3d\xd4\xcc\x1f\xb8\x47\xf5\xb4\x83\xc8\x50\x39\xc9\x41"
                "\xea\x71\xad\xba\x7e\x1b\x43\x12\xe3\x39\x92\x27\x67\x3f\xfc"
                "\x0e\x88\xcd\x58\x85\xb9\x95\xd7\x86\xbf\x62\xf3\x9d\x1e\x0c"
                "\x04\xf3\xc9\x9d\x0a\xf6\x76\xe3\x62\xac\xc3\x34\x97\x05\x48"
                "\x6f\xe9\x76\xb5\xb8\x74\x4c\x41\x9a\x5d\xe5\x72\xdb\x62\xe4"
                "\x4a\x05\x90\x40\xd8\x9f\x1e\xf2\x60\xfe\xcb\x46\xe3\xea\x49"
                "\xca\x37\x3b\x75\x40\x89\x26\xcb\x94\x19\x02\xe7\x83\x8a\x41"
                "\xb3\x37\xa7\x6b\x3d\x23\x8c\x64\xfe\x50\x39\x83\x5f\x2a\xbc"
                "\x57\x42\xfd\xe2\xd6\xd7\x48\x50\x0d\x3c\x4e\x43\xe0\xab\x64"
                "\x59\x1c\x99\x0d\xfe\x73\xcb\x34\x99\xa3\x0b\x84\xc4\x82\x83"
                "\xcd\x81\x5e\xb3\x0b\xc8\x40\x24\xd2\x30\xdc\xfc\x1a\x56\x12"
                "\xac\x59\xa6\x65\x9e\xc1\x91\x02\x18\x73\x3d\x6f\x14\x16\x3a"
                "\x29\x15\xbf\x18\xc2\x99\xf8\xeb\xc1\xf0\xb7\x0c\xa6\x7d\xa4"
                "\x64\x80\x20\x58\xcf\x4b\xc5\x59\xdb\xba\x62\x25\x14\x3a\xc0"
                "\xad\xab\x5e\x35\xa1\xb4\x0e\xc1\xaf\x3c\xa8\x2f\x69\x2c\xb6"
                "\x25\xd7\xea\x15\xb3\x81\x40\xd0\xd1\x17\xe2\xb5\x40\x14\x81"
                "\x0b\x12\xd8\xbe\x1d\x1c\xb0\x88\x27\xaf\x6e\xc3\x13\x71\xea"
                "\xac\xf3\xd8\x6f\x38\x21\xe2\x6d\x77\xe9\xa6\xba\x03\x2a\xe3"
                "\x50\xcb\x38\xbe\x36\xba\x62\x6e\x37\x5c\x8d\x69\x9f\xf0\x43"
                "\x64\x83\x82\x8e\xbe\xf5\xa6\x96\x35\xb7\x03\xa1\x81\xd3\xa0"
                "\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e"
                "\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53"
                "\xee\x93\x58\xeb\x4e\x81\x01\x09\xa1\x2b\x80\x20\xd3\xe3\xf9"
                "\x8c\xf3\x44\x21\x3a\x44\xe2\x07\x5a\x3c\x3e\x1b\xce\x05\x47"
                "\xca\x55\x0d\x1d\x21\x9f\xfa\xf8\xd6\x3c\xab\xa1\xbe\x16\x81"
                "\x03\x01\x0c\x2a\x82\x02\x04\x30\xa2\x2b\x80\x20\xe6\x58\xca"
                "\x4d\x80\x1f\x92\xbc\xe5\x84\x9f\xef\xe8\x04\x6a\x6d\x8d\xc9"
                "\x06\xd8\x60\x2d\x6e\x1e\x78\x38\xd7\xf9\x66\x62\x7d\x23\x81"
                "\x03\x04\x24\x00\x82\x02\x03\x98\xa3\x27\x80\x20\xe5\x15\x0a"
                "\xbd\xf6\x06\xbe\xaa\x6c\x81\xf1\x88\x7e\x70\x64\x51\xeb\x6f"
                "\x70\xb1\xdd\xc5\xf1\x20\x53\xf7\xcb\x9f\x7f\xc7\xe4\x52\x81"
                "\x03\x01\x00\x00\xa4\x27\x80\x20\x00\x8b\xe6\x62\xd4\x30\x65"
                "\x1e\x40\xb3\x23\x05\x52\x3a\xf3\x16\xda\x09\xbe\x79\x5f\x41"
                "\xc9\x03\x93\x34\x5b\x7c\x24\x87\x62\xfa\x81\x03\x02\x00\x00"s;
            auto const thresh0EncodedCondition =
                "\xa2\x2b\x80\x20\xc9\xfd\x5a\x3c\x79\x2a\xbc\xc2\x03\x33\x54"
                "\xbf\xc3\xab\xa6\x97\x36\x74\xff\x03\x64\x7c\xe7\x6d\xab\x58"
                "\xc1\xef\x62\x56\x1c\xfb\x81\x03\x09\x54\x2a\x82\x02\x03\xd8"s;
            auto const thresh0EncodedFingerprint =
                "\x30\x82\x01\x80\x80\x01\x04\xa1\x82\x01\x79\xa0\x25\x80\x20"
                "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
                "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
                "\xeb\x4e\x81\x01\x09\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1"
                "\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21"
                "\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa1"
                "\x2b\x80\x20\x6a\x11\x2e\x99\x9f\x4d\xdb\x8c\xb0\x96\xbb\xa3"
                "\xd3\x10\xc5\xb1\xb8\x43\x65\x2a\xaa\x6e\xf1\x65\x57\x0b\xf6"
                "\xf7\x15\x1f\xa2\x03\x81\x03\x01\x0c\x20\x82\x02\x04\x30\xa1"
                "\x2b\x80\x20\xd3\xe3\xf9\x8c\xf3\x44\x21\x3a\x44\xe2\x07\x5a"
                "\x3c\x3e\x1b\xce\x05\x47\xca\x55\x0d\x1d\x21\x9f\xfa\xf8\xd6"
                "\x3c\xab\xa1\xbe\x16\x81\x03\x01\x0c\x2a\x82\x02\x04\x30\xa2"
                "\x2b\x80\x20\xe6\x58\xca\x4d\x80\x1f\x92\xbc\xe5\x84\x9f\xef"
                "\xe8\x04\x6a\x6d\x8d\xc9\x06\xd8\x60\x2d\x6e\x1e\x78\x38\xd7"
                "\xf9\x66\x62\x7d\x23\x81\x03\x04\x24\x00\x82\x02\x03\x98\xa3"
                "\x27\x80\x20\xe5\x15\x0a\xbd\xf6\x06\xbe\xaa\x6c\x81\xf1\x88"
                "\x7e\x70\x64\x51\xeb\x6f\x70\xb1\xdd\xc5\xf1\x20\x53\xf7\xcb"
                "\x9f\x7f\xc7\xe4\x52\x81\x03\x01\x00\x00\xa3\x27\x80\x20\xee"
                "\x75\xbe\xb3\x52\x54\xbd\x24\x06\x3f\xd9\x32\x48\x19\xe1\x5c"
                "\x70\x85\x92\x11\x6c\x3a\xc1\x4c\x9b\x83\xeb\x05\xa7\x59\xe2"
                "\xa0\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x00\x8b\xe6\x62\xd4"
                "\x30\x65\x1e\x40\xb3\x23\x05\x52\x3a\xf3\x16\xda\x09\xbe\x79"
                "\x5f\x41\xc9\x03\x93\x34\x5b\x7c\x24\x87\x62\xfa\x81\x03\x02"
                "\x00\x00\xa4\x27\x80\x20\x1e\x5a\xaf\x3e\x46\xf6\xd4\xdf\x4d"
                "\x70\xf0\xa1\xd1\x35\x6d\xf0\x8b\x86\x91\xac\xb2\xf2\x24\xf0"
                "\x1a\xd4\x23\xc0\x21\x8d\x42\xc0\x81\x03\x02\x00\x00"s;
            check(
                &thresh0,
                thresh0Msg,
                thresh0EncodedFulfillment,
                thresh0EncodedCondition,
                thresh0EncodedFingerprint);
        }
    }

    void
    testThresh34()
    {
        testcase("Thresh34");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * thresh0
        // ** Preim30Cond
        // ** Rsa31Cond
        // ** Ed32Cond
        // ** prefix1
        // *** prefix2
        // **** thresh3
        // ***** Preim5Cond
        // ***** Rsa6Cond
        // ***** Ed7Cond
        // ***** rsa4
        // ** prefix8
        // *** prefix9
        // **** thresh10
        // ***** Preim12Cond
        // ***** Rsa13Cond
        // ***** Ed14Cond
        // ***** rsa11
        // ** thresh15
        // *** Preim22Cond
        // *** Rsa23Cond
        // *** Ed24Cond
        // *** Thresh25Cond
        // *** rsa16
        // *** thresh17
        // **** Preim19Cond
        // **** Rsa20Cond
        // **** Ed21Cond
        // **** rsa18

        auto const rsa4Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa4PublicKey{
            {0xbe, 0x09, 0xc5, 0xa4, 0x27, 0x29, 0xdf, 0xd4, 0x67, 0x76, 0xbe,
             0xbf, 0x2c, 0xf3, 0xa2, 0x0b, 0x42, 0xe4, 0xbf, 0xeb, 0xdd, 0x67,
             0x20, 0xfb, 0x7a, 0x27, 0x93, 0xc0, 0x78, 0x47, 0x78, 0xd7, 0x15,
             0x32, 0xee, 0x38, 0x81, 0x0d, 0x36, 0xa2, 0xc4, 0x65, 0x44, 0xe6,
             0x62, 0x26, 0xb9, 0x58, 0x13, 0xa4, 0x15, 0x82, 0xab, 0xb1, 0x16,
             0x61, 0xfc, 0x01, 0x98, 0xc6, 0x1a, 0x69, 0xc6, 0xba, 0x39, 0x3f,
             0x01, 0x55, 0x3d, 0xd7, 0x8e, 0x14, 0x42, 0x6d, 0x78, 0x74, 0x9b,
             0x28, 0xcb, 0x31, 0x39, 0x98, 0x5a, 0x11, 0xdc, 0xc1, 0x18, 0x9d,
             0x8d, 0xb0, 0xcd, 0x1b, 0x4c, 0x10, 0xab, 0x14, 0x64, 0x19, 0xf1,
             0x33, 0x15, 0x45, 0xc8, 0x92, 0x82, 0x03, 0x82, 0x8a, 0xaa, 0xad,
             0x94, 0xfc, 0x24, 0x11, 0x96, 0x99, 0x7e, 0x94, 0x5a, 0x82, 0x57,
             0x68, 0x61, 0x9f, 0x7b, 0x45, 0xe0, 0x99, 0x9e, 0x4f, 0x32, 0x50,
             0x5f, 0x05, 0xc8, 0x11, 0xae, 0xc4, 0x0c, 0x63, 0x18, 0x0e, 0x02,
             0x59, 0x36, 0x25, 0x92, 0x06, 0x32, 0xc7, 0x71, 0x47, 0x99, 0xcc,
             0x0a, 0x6e, 0x0a, 0x58, 0x71, 0x3f, 0x5e, 0xb7, 0x78, 0xf7, 0x98,
             0x79, 0xdf, 0x74, 0xa4, 0xeb, 0xa9, 0x00, 0xfd, 0x81, 0xb3, 0xcf,
             0x04, 0x8c, 0x5d, 0x7d, 0xe7, 0xb2, 0x82, 0x90, 0x49, 0xbd, 0x69,
             0xf3, 0x08, 0xe9, 0x92, 0xc6, 0x9e, 0x41, 0xba, 0x74, 0xd8, 0x8d,
             0x81, 0x97, 0x6f, 0x86, 0xab, 0xc9, 0xf1, 0x02, 0x31, 0xb4, 0xce,
             0x47, 0xb0, 0x39, 0xc8, 0xba, 0x51, 0xa7, 0x39, 0xf3, 0x71, 0xa2,
             0x25, 0x27, 0x37, 0x6e, 0x09, 0x6f, 0x19, 0x59, 0xbc, 0x65, 0xd9,
             0xcd, 0x12, 0xd3, 0x2c, 0xa2, 0x78, 0xfa, 0x23, 0x15, 0x1a, 0x82,
             0x41, 0x91, 0x1b, 0xbe, 0x8a, 0xe7, 0xfe, 0x3c, 0x3c, 0x30, 0x32,
             0xaa, 0xe9, 0xf3}};
        std::array<std::uint8_t, 256> const rsa4Sig{
            {0x59, 0x4b, 0x1d, 0xe6, 0x5b, 0xad, 0x5d, 0x83, 0x6a, 0xeb, 0xb9,
             0x2f, 0xc6, 0x28, 0xe6, 0x9f, 0x5b, 0x8a, 0xea, 0x92, 0x1b, 0xc9,
             0xe4, 0x3f, 0x08, 0x05, 0x88, 0x7c, 0x40, 0x18, 0xca, 0x81, 0x7b,
             0xe6, 0x4f, 0xab, 0x63, 0xea, 0x56, 0x57, 0x04, 0x88, 0x68, 0xf5,
             0x27, 0x7b, 0xb0, 0xfc, 0x58, 0xa3, 0x75, 0x16, 0x97, 0x59, 0x91,
             0x3d, 0x07, 0x2a, 0x48, 0x20, 0xec, 0x45, 0xd8, 0x70, 0x7c, 0x61,
             0xb4, 0x28, 0xc6, 0x32, 0x1f, 0x35, 0xad, 0x73, 0x4e, 0x93, 0xd6,
             0xf8, 0x0e, 0xea, 0xec, 0x80, 0xcd, 0xae, 0xb1, 0xc5, 0xe4, 0x2f,
             0xd2, 0x37, 0x4b, 0x41, 0x4d, 0xaa, 0xfb, 0x0d, 0xea, 0xef, 0xa1,
             0xba, 0x78, 0xb3, 0x0e, 0x60, 0xfe, 0x10, 0x9d, 0x46, 0x60, 0x6a,
             0xc8, 0xe4, 0xc3, 0x8c, 0xf1, 0x12, 0x6b, 0x27, 0x49, 0x21, 0x64,
             0x6e, 0x26, 0x2a, 0xbc, 0x8d, 0x26, 0x83, 0x6a, 0x14, 0x3b, 0x4e,
             0x5b, 0x01, 0xb1, 0x4b, 0xef, 0xf8, 0x59, 0xbb, 0x07, 0xb7, 0x32,
             0x0d, 0x53, 0xe5, 0x94, 0x8b, 0x12, 0xd9, 0x8f, 0x09, 0xcc, 0x4b,
             0x8b, 0x3e, 0x68, 0x07, 0xfd, 0x1a, 0x69, 0xb3, 0x72, 0xd4, 0x00,
             0x77, 0xa3, 0x22, 0xb4, 0x2d, 0xbc, 0x42, 0xeb, 0x2b, 0x88, 0x58,
             0x69, 0xf6, 0x80, 0x07, 0xfd, 0x7b, 0xd1, 0x2d, 0xf3, 0x84, 0x93,
             0x2f, 0xff, 0x4b, 0xa3, 0x70, 0xb5, 0x55, 0x36, 0xef, 0xb6, 0x32,
             0xb7, 0x67, 0xd1, 0x0e, 0xb7, 0x64, 0x04, 0x5b, 0xfe, 0xa6, 0x0e,
             0x45, 0xb8, 0x63, 0x9f, 0x8b, 0x97, 0xd1, 0x97, 0xd3, 0x2a, 0xb2,
             0x62, 0x3f, 0x08, 0xea, 0x1d, 0x2c, 0xcf, 0xdf, 0x45, 0x15, 0x6c,
             0x1a, 0x62, 0x70, 0x62, 0x1b, 0x12, 0x31, 0x61, 0x6c, 0x92, 0x7d,
             0xb1, 0x9c, 0x03, 0xcd, 0xa5, 0xe4, 0x9a, 0x44, 0x77, 0xf6, 0x9d,
             0xec, 0x77, 0x0f}};
        auto const thresh3Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim5CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim5Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim5CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa6CondConditionFingerprint =
            "\xee\x75\xbe\xb3\x52\x54\xbd\x24\x06\x3f\xd9\x32\x48\x19\xe1"
            "\x5c\x70\x85\x92\x11\x6c\x3a\xc1\x4c\x9b\x83\xeb\x05\xa7\x59"
            "\xe2\xa0"s;
        Condition const Rsa6Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa6CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed7CondConditionFingerprint =
            "\x1e\x5a\xaf\x3e\x46\xf6\xd4\xdf\x4d\x70\xf0\xa1\xd1\x35\x6d"
            "\xf0\x8b\x86\x91\xac\xb2\xf2\x24\xf0\x1a\xd4\x23\xc0\x21\x8d"
            "\x42\xc0"s;
        Condition const Ed7Cond{Type::ed25519Sha256,
                                131072,
                                makeSlice(Ed7CondConditionFingerprint),
                                std::bitset<5>{0}};
        auto const prefix2Prefix = "P2"s;
        auto const prefix2Msg = "P1abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix2MaxMsgLength = 14;
        auto const prefix1Prefix = "P1"s;
        auto const prefix1Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix1MaxMsgLength = 14;
        auto const rsa11Msg = "P9P8abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa11PublicKey{
            {0xa8, 0xc7, 0x5e, 0x5a, 0xe9, 0xc7, 0xcb, 0xbc, 0x9c, 0x92, 0xb7,
             0xb8, 0x76, 0x67, 0x90, 0xc2, 0x53, 0xa9, 0x3a, 0x4b, 0x2c, 0xab,
             0xdb, 0x80, 0x6e, 0xec, 0x50, 0xbe, 0x9e, 0x5e, 0x96, 0x64, 0x8f,
             0xdf, 0x93, 0xb2, 0xb0, 0xc0, 0xb9, 0x7d, 0xc6, 0xc9, 0x75, 0x6b,
             0x73, 0xb1, 0xd6, 0x0b, 0xe5, 0xbb, 0x2a, 0xf5, 0xdc, 0xc0, 0xd5,
             0x09, 0x95, 0xd3, 0xf5, 0xcf, 0x82, 0xb9, 0x43, 0x93, 0xdf, 0x5a,
             0xd4, 0x4f, 0xa0, 0x60, 0x20, 0x41, 0x01, 0xb0, 0x8f, 0x2a, 0x58,
             0xd5, 0x05, 0xa1, 0x71, 0x14, 0x29, 0x91, 0xd6, 0x79, 0x5a, 0xb3,
             0x3b, 0xbe, 0x29, 0x3c, 0x68, 0x87, 0x48, 0x94, 0xb7, 0xb3, 0x29,
             0xd9, 0xff, 0xeb, 0x06, 0xfd, 0x1d, 0xcf, 0x3e, 0x7c, 0x14, 0x95,
             0xfa, 0xa3, 0xc0, 0x25, 0x46, 0xa4, 0xd3, 0x2d, 0xb5, 0x5f, 0x6b,
             0x86, 0x18, 0xb4, 0x2f, 0x7b, 0x07, 0x76, 0xf9, 0xf8, 0x6d, 0x57,
             0x62, 0x41, 0x79, 0x30, 0x3c, 0x81, 0x6e, 0x8a, 0xda, 0x87, 0x6e,
             0x1d, 0x64, 0x6d, 0x39, 0x40, 0xd5, 0x5a, 0xb2, 0x2d, 0xba, 0xb8,
             0x7a, 0x3b, 0x60, 0xd6, 0x96, 0x55, 0xfe, 0x1e, 0x71, 0x09, 0x33,
             0xad, 0x05, 0xb2, 0x73, 0xd2, 0x2b, 0xf1, 0x26, 0x06, 0xd9, 0x15,
             0xfc, 0x48, 0x36, 0xa4, 0xa2, 0x25, 0x90, 0x96, 0x9c, 0x3a, 0x6a,
             0x0a, 0xd8, 0x9b, 0x4f, 0xc6, 0x1a, 0xef, 0x18, 0xe9, 0x34, 0x0f,
             0x85, 0x06, 0xbc, 0xc0, 0xeb, 0x4d, 0x3b, 0x6c, 0x7e, 0xa8, 0x54,
             0x01, 0x03, 0x0c, 0x5c, 0x24, 0x58, 0x61, 0xcd, 0xf1, 0x31, 0x88,
             0x5e, 0x00, 0x15, 0x1e, 0x9a, 0x81, 0x99, 0x0b, 0x1a, 0x33, 0xc5,
             0xa6, 0x6c, 0xb4, 0xfb, 0x4e, 0x84, 0x94, 0x9c, 0x7e, 0x2b, 0x00,
             0x4d, 0x5c, 0xcf, 0xc2, 0xa6, 0xa5, 0x36, 0xc6, 0xee, 0x72, 0x8e,
             0x1e, 0x18, 0xaf}};
        std::array<std::uint8_t, 256> const rsa11Sig{
            {0x7d, 0x3b, 0xe9, 0x21, 0x06, 0x94, 0xdf, 0x22, 0x39, 0xee, 0x57,
             0x2d, 0xb0, 0x30, 0x63, 0x27, 0xe5, 0xab, 0x41, 0x7a, 0x35, 0x4b,
             0x6f, 0x92, 0x23, 0xf4, 0xec, 0xa8, 0x6a, 0xe1, 0xb5, 0x2f, 0x10,
             0xf6, 0x1c, 0xca, 0xa6, 0xc1, 0x6a, 0xb4, 0xfa, 0x6f, 0xf8, 0xea,
             0xd8, 0x6c, 0xc6, 0xc6, 0x92, 0x92, 0x0a, 0xa7, 0x35, 0x3d, 0x61,
             0xb2, 0xf4, 0xb2, 0x8d, 0xa1, 0xf9, 0x28, 0xca, 0x1b, 0x83, 0xe8,
             0xc5, 0x05, 0xb2, 0x25, 0x50, 0xac, 0x8a, 0xe3, 0xe6, 0x16, 0x45,
             0x5d, 0x8c, 0xaf, 0xed, 0x4e, 0x77, 0xe9, 0xd6, 0xec, 0xa6, 0x2a,
             0x50, 0x6a, 0x60, 0x5a, 0x8c, 0x65, 0x25, 0x74, 0xc2, 0x9c, 0x19,
             0x5f, 0x55, 0xbe, 0xb7, 0x88, 0xc0, 0xf2, 0xe5, 0x3a, 0x0b, 0xde,
             0x8a, 0x10, 0xd8, 0xf9, 0xd4, 0x3f, 0xe4, 0x6c, 0xbb, 0x71, 0xe0,
             0x72, 0xc1, 0xc3, 0x9f, 0x8d, 0x48, 0xa1, 0xe3, 0xfe, 0xcf, 0x66,
             0x2a, 0x93, 0x0b, 0x5b, 0xeb, 0x75, 0x57, 0x55, 0x89, 0x54, 0xee,
             0xaa, 0x28, 0x2f, 0x9c, 0x38, 0x1b, 0x15, 0x5d, 0x33, 0xf6, 0x97,
             0x46, 0xe0, 0x26, 0x7b, 0xc9, 0x4d, 0x7c, 0x44, 0x10, 0x5a, 0x28,
             0xd6, 0x42, 0xe0, 0x71, 0xe0, 0x7c, 0x87, 0x9a, 0xd5, 0xf8, 0xaa,
             0x9a, 0xb4, 0xef, 0xd6, 0x67, 0xb5, 0x00, 0x7c, 0x57, 0x2e, 0xa4,
             0xd6, 0xa6, 0xe0, 0xaf, 0x35, 0xe5, 0xa9, 0x59, 0xcb, 0xb5, 0x1b,
             0x3f, 0x5a, 0x4d, 0x5e, 0x52, 0xde, 0xbf, 0xf2, 0x57, 0x68, 0xd1,
             0xf2, 0x6e, 0x13, 0xa3, 0x1b, 0x00, 0x6c, 0xe5, 0x16, 0x24, 0xea,
             0x87, 0x75, 0xac, 0x69, 0xea, 0xa2, 0x53, 0x4c, 0x5c, 0x11, 0xdc,
             0xf9, 0x3a, 0xfb, 0x9b, 0xef, 0x20, 0xac, 0x6c, 0x19, 0x7d, 0xad,
             0xe1, 0x15, 0x42, 0x0c, 0x95, 0xd5, 0x30, 0xa9, 0x20, 0x8a, 0x64,
             0x7d, 0x84, 0x98}};
        auto const thresh10Msg = "P9P8abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim12CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim12Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim12CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa13CondConditionFingerprint =
            "\x65\x58\x3c\x41\x23\xcb\x17\xee\x38\xf7\x10\x74\xdb\xa3\x24"
            "\xb4\x5b\x39\x35\xc1\x1a\xa6\xbd\xbc\xc8\xea\x71\x39\x33\xe5"
            "\xd5\x1a"s;
        Condition const Rsa13Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa13CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed14CondConditionFingerprint =
            "\xde\x4c\x08\x88\x5c\xfe\x31\x01\xbe\xe9\xe4\x12\xce\x03\x59"
            "\x75\xb3\x7b\xac\x62\x26\xfa\x78\x07\x59\x64\x4e\x5e\x89\x64"
            "\x17\x04"s;
        Condition const Ed14Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed14CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const prefix9Prefix = "P9"s;
        auto const prefix9Msg = "P8abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix9MaxMsgLength = 14;
        auto const prefix8Prefix = "P8"s;
        auto const prefix8Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix8MaxMsgLength = 14;
        auto const rsa16Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa16PublicKey{
            {0xe8, 0x03, 0x7c, 0xff, 0x40, 0x68, 0x5d, 0xc7, 0xb8, 0xd0, 0x9f,
             0x9a, 0x83, 0xf9, 0x02, 0xe6, 0xfe, 0xa5, 0xb9, 0x0e, 0x9f, 0xdc,
             0x44, 0x74, 0x59, 0x3e, 0xef, 0x61, 0xdc, 0xb6, 0x4b, 0x49, 0xfe,
             0x1a, 0x67, 0x73, 0x38, 0x7b, 0x1c, 0xb4, 0xfa, 0x24, 0x39, 0xe4,
             0xbb, 0x74, 0x1b, 0xe4, 0x66, 0xfd, 0x85, 0x6f, 0x8d, 0x92, 0x3e,
             0x04, 0x70, 0xb4, 0x21, 0x01, 0xcf, 0x07, 0xf2, 0xeb, 0x11, 0x2c,
             0xaa, 0x9d, 0x37, 0xbb, 0xf3, 0x8d, 0x9b, 0xbc, 0x17, 0x60, 0xe4,
             0xe3, 0xae, 0x79, 0x92, 0x97, 0x3a, 0xe8, 0xd8, 0x74, 0xc5, 0x9d,
             0xeb, 0x15, 0x22, 0x8b, 0xae, 0x51, 0x13, 0x78, 0x21, 0xca, 0xbd,
             0x6a, 0xa6, 0x24, 0x93, 0x8f, 0xe6, 0x23, 0x12, 0x52, 0xe1, 0x75,
             0xda, 0x55, 0x26, 0xcc, 0x95, 0xa0, 0x75, 0x31, 0x0a, 0x6e, 0x27,
             0x14, 0x63, 0x70, 0x04, 0xd7, 0xe4, 0x36, 0x21, 0x3a, 0x9e, 0xff,
             0xe3, 0x16, 0x21, 0xc1, 0xfc, 0x6d, 0xc5, 0xe2, 0x80, 0xb9, 0x26,
             0xc6, 0x4f, 0x3c, 0xc2, 0xd5, 0x25, 0xf1, 0xb9, 0x88, 0xac, 0xc7,
             0xfe, 0xde, 0xd6, 0x7e, 0x60, 0x41, 0x82, 0xde, 0x25, 0x28, 0x1f,
             0x09, 0xda, 0x10, 0x01, 0x27, 0xf4, 0x63, 0x10, 0xa2, 0x4e, 0x1d,
             0xc2, 0x19, 0x32, 0xb3, 0x87, 0xc2, 0xcf, 0xac, 0x3c, 0x2b, 0xcd,
             0x5e, 0x79, 0x1f, 0x19, 0xea, 0x70, 0x56, 0x31, 0x59, 0x0e, 0x13,
             0x95, 0x05, 0xb7, 0xf9, 0xff, 0xd9, 0x0b, 0x49, 0xce, 0xd0, 0x6f,
             0xae, 0x90, 0x44, 0xb3, 0x6b, 0x60, 0xc9, 0x72, 0xf7, 0x83, 0x24,
             0x5e, 0x15, 0x25, 0x1c, 0xb8, 0x76, 0x71, 0x84, 0x33, 0x14, 0xf1,
             0xf0, 0x07, 0x7f, 0x2f, 0x95, 0xee, 0x3c, 0x36, 0x67, 0x36, 0xb4,
             0xae, 0x1c, 0xb5, 0x02, 0xa2, 0xdc, 0x0e, 0xed, 0xf2, 0x63, 0x0d,
             0x52, 0x61, 0xe3}};
        std::array<std::uint8_t, 256> const rsa16Sig{
            {0x7f, 0xb0, 0xc6, 0xbe, 0xf6, 0xd4, 0x9c, 0xb2, 0x91, 0x1a, 0x6b,
             0xb3, 0xb3, 0xe8, 0x2b, 0xf2, 0x35, 0x93, 0x86, 0xb5, 0x3d, 0x86,
             0xe0, 0x9c, 0x75, 0xf7, 0x95, 0xd3, 0x63, 0x96, 0x92, 0xb0, 0xc1,
             0xc4, 0x78, 0xd3, 0xc4, 0xa5, 0x1b, 0x03, 0x96, 0xa0, 0x71, 0xa4,
             0x60, 0x44, 0x25, 0xb6, 0x45, 0x01, 0x4d, 0x4c, 0x73, 0x6e, 0xb0,
             0x03, 0x23, 0x7d, 0x46, 0xb3, 0xa8, 0x1d, 0x83, 0xb5, 0x97, 0x48,
             0x79, 0xb6, 0x7c, 0xe7, 0x96, 0x0f, 0x57, 0x40, 0xfb, 0x26, 0x69,
             0x4a, 0x1c, 0x94, 0xa0, 0xcf, 0x7c, 0x08, 0x00, 0x2b, 0xea, 0x17,
             0x28, 0xc4, 0x4b, 0xa3, 0x7e, 0x6f, 0x50, 0x47, 0x39, 0x6e, 0xe1,
             0xf9, 0xff, 0x7b, 0xee, 0x76, 0xdd, 0x21, 0xf7, 0x37, 0xe8, 0xa4,
             0xf8, 0x22, 0xe5, 0x7f, 0xf8, 0x79, 0xac, 0xca, 0x56, 0xf6, 0x91,
             0x9e, 0x17, 0x66, 0xf6, 0x37, 0x09, 0xfa, 0xf4, 0xc7, 0x1a, 0x71,
             0xdf, 0xe9, 0x2c, 0xb9, 0x90, 0x6f, 0x1d, 0x06, 0xde, 0x7e, 0x23,
             0xfd, 0x13, 0xa6, 0xc9, 0xce, 0x51, 0xa7, 0xb5, 0x71, 0x7c, 0x31,
             0x0a, 0x6d, 0x2c, 0xdb, 0x4e, 0x5e, 0xb7, 0xb6, 0xcb, 0xba, 0x5c,
             0x89, 0x13, 0x0d, 0x6e, 0xe5, 0xbd, 0xb1, 0xdd, 0x02, 0x64, 0xe1,
             0x05, 0xf2, 0x8e, 0x26, 0x5e, 0x60, 0x7b, 0xe2, 0x35, 0x5b, 0x7e,
             0xe0, 0x1c, 0x4f, 0xe5, 0xf8, 0x49, 0xb3, 0x00, 0x0e, 0xe9, 0x60,
             0x78, 0x6f, 0xe7, 0xaa, 0x17, 0xf0, 0x36, 0xd1, 0x95, 0x6f, 0x62,
             0x17, 0x18, 0x72, 0x24, 0x0c, 0xc1, 0x51, 0xda, 0x8c, 0x0c, 0x64,
             0xa6, 0xda, 0x80, 0x78, 0x56, 0xf3, 0x90, 0x0f, 0x5c, 0xe4, 0xec,
             0x00, 0x94, 0x7a, 0x14, 0x50, 0xef, 0xd4, 0xa7, 0xea, 0x17, 0xad,
             0x00, 0x4c, 0xbe, 0xdd, 0xdb, 0xb2, 0x5a, 0xfd, 0x72, 0x44, 0x74,
             0x61, 0x47, 0xb4}};
        auto const rsa18Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa18PublicKey{
            {0xee, 0x21, 0x9d, 0x3a, 0x07, 0x91, 0x46, 0x8c, 0x0b, 0xfe, 0x9c,
             0xe9, 0x61, 0x7b, 0xd4, 0xf4, 0x10, 0x59, 0xe6, 0x20, 0x0d, 0xd2,
             0x48, 0x5f, 0xf8, 0x7e, 0x89, 0xf3, 0x16, 0x39, 0x5d, 0xc1, 0x53,
             0x72, 0x06, 0x1a, 0x36, 0xe7, 0x3f, 0x62, 0xcb, 0xc2, 0xbd, 0x44,
             0x9d, 0xa9, 0x0f, 0xb2, 0x03, 0xa8, 0xc7, 0xca, 0xaa, 0x6b, 0x2a,
             0x7b, 0xfe, 0x18, 0x93, 0x0c, 0x0e, 0x8e, 0x75, 0x56, 0xda, 0x2e,
             0x47, 0x6f, 0x14, 0x6a, 0x5b, 0xfd, 0x8c, 0x70, 0xda, 0x4b, 0x43,
             0xc8, 0x45, 0x51, 0x13, 0x0b, 0x22, 0x2f, 0x1a, 0x5f, 0x5c, 0x59,
             0x4c, 0xa0, 0x3f, 0x85, 0xd2, 0x2f, 0x81, 0x37, 0x57, 0x40, 0x51,
             0xb5, 0xf3, 0x1c, 0x20, 0x5b, 0x31, 0x95, 0xc7, 0x4b, 0x02, 0xb0,
             0x64, 0x9f, 0xdc, 0xcb, 0xc0, 0xa7, 0x76, 0x95, 0xbe, 0x4a, 0x1e,
             0xcb, 0xf7, 0x54, 0xcc, 0xa7, 0x9b, 0x51, 0xdd, 0xe5, 0x9f, 0xa0,
             0xbb, 0x2d, 0x4e, 0x8b, 0xf0, 0x24, 0xbb, 0xbf, 0xc3, 0xac, 0x4e,
             0x17, 0xfc, 0xd5, 0xf6, 0x6e, 0x3d, 0x78, 0xad, 0x5e, 0x68, 0x58,
             0xd7, 0x09, 0x3d, 0x1f, 0xd9, 0xf3, 0xc2, 0x7b, 0x62, 0x45, 0xe1,
             0xe9, 0xbe, 0x89, 0x72, 0x87, 0x40, 0x1d, 0x28, 0x9b, 0xf6, 0xc6,
             0x92, 0x23, 0x80, 0xaa, 0x05, 0x38, 0xaf, 0x97, 0x4c, 0x10, 0xde,
             0x84, 0x60, 0x13, 0x17, 0xda, 0xb9, 0xb0, 0xfc, 0x48, 0x09, 0x83,
             0x3f, 0x51, 0x75, 0x19, 0xad, 0x68, 0x35, 0xc7, 0x8c, 0xb0, 0xb3,
             0xd8, 0xff, 0x0f, 0xee, 0x77, 0xb4, 0x50, 0x3a, 0x5b, 0x92, 0x23,
             0xf9, 0x0f, 0xf5, 0x60, 0x86, 0x12, 0x57, 0xad, 0x52, 0xbe, 0x88,
             0x8a, 0x40, 0x08, 0x3e, 0x02, 0x0e, 0x2f, 0x1b, 0xa9, 0x29, 0x28,
             0x2b, 0x15, 0x53, 0x89, 0xef, 0x64, 0x1a, 0xc3, 0x4a, 0x12, 0x17,
             0x26, 0xb5, 0xeb}};
        std::array<std::uint8_t, 256> const rsa18Sig{
            {0xa6, 0x1e, 0xa6, 0x23, 0xfa, 0x0d, 0x67, 0xce, 0x64, 0x3c, 0x4a,
             0x12, 0xdd, 0x5a, 0xe0, 0x70, 0x8d, 0xe5, 0x08, 0x32, 0x33, 0x0c,
             0x1f, 0x9a, 0x07, 0xe3, 0x22, 0x9d, 0x45, 0x62, 0xe9, 0x62, 0x95,
             0x92, 0xa7, 0x25, 0xfd, 0xa7, 0x81, 0xac, 0xaf, 0xc7, 0xcb, 0x37,
             0xf8, 0x16, 0x8d, 0x00, 0x11, 0x1f, 0x1e, 0xe4, 0x5a, 0xcf, 0x9f,
             0x54, 0x43, 0x16, 0x78, 0x99, 0xdb, 0xe4, 0xc7, 0x79, 0x61, 0x26,
             0x67, 0x67, 0x84, 0x76, 0x13, 0xbb, 0xe4, 0x77, 0x50, 0x5f, 0xf5,
             0x2b, 0x07, 0x9c, 0x44, 0xe3, 0x8d, 0x53, 0x5c, 0xe4, 0x28, 0xb4,
             0xfb, 0x6c, 0x39, 0x57, 0x4c, 0xdb, 0xba, 0x54, 0xbb, 0x90, 0x63,
             0x60, 0x9b, 0x4d, 0x04, 0xc3, 0x16, 0xf3, 0x69, 0x49, 0xb8, 0x0c,
             0x24, 0xc8, 0xbd, 0xd3, 0x8c, 0xc6, 0xd4, 0x64, 0x2d, 0x13, 0xc2,
             0xc9, 0xa9, 0xf6, 0x3a, 0x09, 0xd1, 0xfd, 0x26, 0xd3, 0x71, 0xd6,
             0x7f, 0x35, 0x38, 0x7a, 0x5e, 0xa5, 0xb2, 0xb6, 0x7d, 0x2a, 0x0f,
             0x4d, 0x94, 0x11, 0x6c, 0x9c, 0x99, 0x89, 0x62, 0xe6, 0xe9, 0x6f,
             0x44, 0x08, 0xfb, 0xd6, 0x6e, 0xa8, 0x22, 0x4e, 0x20, 0xae, 0x29,
             0x9f, 0xc7, 0x98, 0x40, 0x6e, 0x5c, 0x2f, 0x07, 0x4e, 0x6d, 0x43,
             0x30, 0x66, 0x68, 0x3b, 0x51, 0x88, 0x2b, 0x22, 0x6a, 0x80, 0xb3,
             0xfc, 0x9a, 0x7f, 0x42, 0xef, 0x4a, 0xdb, 0xbc, 0x9a, 0x9e, 0xf3,
             0x08, 0x68, 0x05, 0x9f, 0xb1, 0x5d, 0x6b, 0xe9, 0x78, 0xdc, 0x01,
             0x55, 0x46, 0x97, 0x08, 0xce, 0x91, 0x6e, 0xc3, 0xa9, 0x49, 0x79,
             0x34, 0x69, 0x96, 0x3e, 0x86, 0xd9, 0xbe, 0x94, 0x3b, 0xd6, 0xee,
             0x71, 0xff, 0x98, 0xaa, 0x35, 0x8f, 0x59, 0xe7, 0x5e, 0x78, 0x0d,
             0x16, 0xc6, 0x99, 0x71, 0x39, 0xb2, 0xf8, 0x6d, 0x75, 0x14, 0xeb,
             0xd8, 0x8e, 0x28}};
        auto const thresh17Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim19CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim19Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim19CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa20CondConditionFingerprint =
            "\x8d\xb0\x2c\xb1\x28\xc3\xf4\x97\x50\x84\x64\x57\xca\xf4\x9d"
            "\x63\x08\x73\xfc\xde\x2f\x90\xf0\xf2\xec\x79\xa9\xc6\xa3\xf1"
            "\x33\xfd"s;
        Condition const Rsa20Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa20CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed21CondConditionFingerprint =
            "\x95\x3c\x86\x65\x91\x76\x69\x6b\x72\x61\xaa\x76\x15\x2a\xd7"
            "\x25\x4f\x32\xb7\x73\x7a\xb2\x49\x0c\x0b\xdf\xb5\x4e\x4a\x8b"
            "\xf7\x65"s;
        Condition const Ed21Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed21CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const thresh15Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim22CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim22Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim22CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa23CondConditionFingerprint =
            "\x4a\x64\xbf\x23\xa9\x2b\xec\x55\x00\x3d\x55\xf5\xbf\x3f\x26"
            "\x49\x18\xbb\xe0\xda\xf8\x0c\xf4\x5c\x8a\x33\x74\xb6\x58\xa4"
            "\x38\x30"s;
        Condition const Rsa23Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa23CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed24CondConditionFingerprint =
            "\x6b\xf3\xe3\x0f\x92\x6d\x45\x8d\xae\xd2\x8a\x2a\x3e\x53\x37"
            "\x1f\x57\x82\x21\x60\xe4\x5b\x88\x9a\x9d\x13\xa2\x56\x13\x88"
            "\x9e\x21"s;
        Condition const Ed24Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed24CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Thresh25CondConditionFingerprint =
            "\x52\x94\xc9\xdb\x6a\xb5\x13\xd0\x42\x2a\x94\xaf\x6c\xd2\x92"
            "\xab\xcb\x41\xc8\x85\xf7\xec\x46\xf2\x1c\x65\xc4\x0b\x4a\x5a"
            "\x8e\x5e"s;
        Condition const Thresh25Cond{
            Type::thresholdSha256,
            135168,
            makeSlice(Thresh25CondConditionFingerprint),
            std::bitset<5>{25}};
        auto const thresh0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim30CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim30Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim30CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa31CondConditionFingerprint =
            "\x34\x77\x63\xd7\x27\x76\x4d\x3a\x9b\x6c\xdb\x09\xed\xd8\x5f"
            "\xc2\x12\x9e\x9c\xc4\xc8\xa6\x62\xcf\x14\xde\x09\x30\x64\x8e"
            "\xf4\x84"s;
        Condition const Rsa31Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa31CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed32CondConditionFingerprint =
            "\xe9\x54\x85\xb7\x7d\xa1\x1f\x2f\xaa\x84\x72\x3f\x4e\x3f\x09"
            "\xa7\x49\xf2\x15\x2a\xe6\x13\x5b\x68\xb6\xe1\x98\xa6\x89\x76"
            "\x08\x05"s;
        Condition const Ed32Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed32CondConditionFingerprint),
                                 std::bitset<5>{0}};

        auto rsa4 = std::make_unique<RsaSha256>(
            makeSlice(rsa4PublicKey), makeSlice(rsa4Sig));
        std::vector<std::unique_ptr<Fulfillment>> thresh3Subfulfillments;
        thresh3Subfulfillments.emplace_back(std::move(rsa4));
        std::vector<Condition> thresh3Subconditions{
            {Preim5Cond, Rsa6Cond, Ed7Cond}};
        auto thresh3 = std::make_unique<ThresholdSha256>(
            std::move(thresh3Subfulfillments), std::move(thresh3Subconditions));
        auto prefix2 = std::make_unique<PrefixSha256>(
            makeSlice(prefix2Prefix), prefix2MaxMsgLength, std::move(thresh3));
        auto prefix1 = std::make_unique<PrefixSha256>(
            makeSlice(prefix1Prefix), prefix1MaxMsgLength, std::move(prefix2));
        auto rsa11 = std::make_unique<RsaSha256>(
            makeSlice(rsa11PublicKey), makeSlice(rsa11Sig));
        std::vector<std::unique_ptr<Fulfillment>> thresh10Subfulfillments;
        thresh10Subfulfillments.emplace_back(std::move(rsa11));
        std::vector<Condition> thresh10Subconditions{
            {Preim12Cond, Rsa13Cond, Ed14Cond}};
        auto thresh10 = std::make_unique<ThresholdSha256>(
            std::move(thresh10Subfulfillments),
            std::move(thresh10Subconditions));
        auto prefix9 = std::make_unique<PrefixSha256>(
            makeSlice(prefix9Prefix), prefix9MaxMsgLength, std::move(thresh10));
        auto prefix8 = std::make_unique<PrefixSha256>(
            makeSlice(prefix8Prefix), prefix8MaxMsgLength, std::move(prefix9));
        auto rsa16 = std::make_unique<RsaSha256>(
            makeSlice(rsa16PublicKey), makeSlice(rsa16Sig));
        auto rsa18 = std::make_unique<RsaSha256>(
            makeSlice(rsa18PublicKey), makeSlice(rsa18Sig));
        std::vector<std::unique_ptr<Fulfillment>> thresh17Subfulfillments;
        thresh17Subfulfillments.emplace_back(std::move(rsa18));
        std::vector<Condition> thresh17Subconditions{
            {Preim19Cond, Rsa20Cond, Ed21Cond}};
        auto thresh17 = std::make_unique<ThresholdSha256>(
            std::move(thresh17Subfulfillments),
            std::move(thresh17Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh15Subfulfillments;
        thresh15Subfulfillments.emplace_back(std::move(rsa16));
        thresh15Subfulfillments.emplace_back(std::move(thresh17));
        std::vector<Condition> thresh15Subconditions{
            {Preim22Cond, Rsa23Cond, Ed24Cond, Thresh25Cond}};
        auto thresh15 = std::make_unique<ThresholdSha256>(
            std::move(thresh15Subfulfillments),
            std::move(thresh15Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh0Subfulfillments;
        thresh0Subfulfillments.emplace_back(std::move(prefix1));
        thresh0Subfulfillments.emplace_back(std::move(prefix8));
        thresh0Subfulfillments.emplace_back(std::move(thresh15));
        std::vector<Condition> thresh0Subconditions{
            {Preim30Cond, Rsa31Cond, Ed32Cond}};
        ThresholdSha256 const thresh0(
            std::move(thresh0Subfulfillments), std::move(thresh0Subconditions));
        {
            auto const thresh0EncodedFulfillment =
                "\xa2\x82\x0b\x25\xa0\x82\x0a\xa6\xa1\x82\x02\xa9\x80\x02\x50"
                "\x31\x81\x01\x0e\xa2\x82\x02\x9e\xa1\x82\x02\x9a\x80\x02\x50"
                "\x32\x81\x01\x0e\xa2\x82\x02\x8f\xa2\x82\x02\x8b\xa0\x82\x02"
                "\x0c\xa3\x82\x02\x08\x80\x82\x01\x00\xbe\x09\xc5\xa4\x27\x29"
                "\xdf\xd4\x67\x76\xbe\xbf\x2c\xf3\xa2\x0b\x42\xe4\xbf\xeb\xdd"
                "\x67\x20\xfb\x7a\x27\x93\xc0\x78\x47\x78\xd7\x15\x32\xee\x38"
                "\x81\x0d\x36\xa2\xc4\x65\x44\xe6\x62\x26\xb9\x58\x13\xa4\x15"
                "\x82\xab\xb1\x16\x61\xfc\x01\x98\xc6\x1a\x69\xc6\xba\x39\x3f"
                "\x01\x55\x3d\xd7\x8e\x14\x42\x6d\x78\x74\x9b\x28\xcb\x31\x39"
                "\x98\x5a\x11\xdc\xc1\x18\x9d\x8d\xb0\xcd\x1b\x4c\x10\xab\x14"
                "\x64\x19\xf1\x33\x15\x45\xc8\x92\x82\x03\x82\x8a\xaa\xad\x94"
                "\xfc\x24\x11\x96\x99\x7e\x94\x5a\x82\x57\x68\x61\x9f\x7b\x45"
                "\xe0\x99\x9e\x4f\x32\x50\x5f\x05\xc8\x11\xae\xc4\x0c\x63\x18"
                "\x0e\x02\x59\x36\x25\x92\x06\x32\xc7\x71\x47\x99\xcc\x0a\x6e"
                "\x0a\x58\x71\x3f\x5e\xb7\x78\xf7\x98\x79\xdf\x74\xa4\xeb\xa9"
                "\x00\xfd\x81\xb3\xcf\x04\x8c\x5d\x7d\xe7\xb2\x82\x90\x49\xbd"
                "\x69\xf3\x08\xe9\x92\xc6\x9e\x41\xba\x74\xd8\x8d\x81\x97\x6f"
                "\x86\xab\xc9\xf1\x02\x31\xb4\xce\x47\xb0\x39\xc8\xba\x51\xa7"
                "\x39\xf3\x71\xa2\x25\x27\x37\x6e\x09\x6f\x19\x59\xbc\x65\xd9"
                "\xcd\x12\xd3\x2c\xa2\x78\xfa\x23\x15\x1a\x82\x41\x91\x1b\xbe"
                "\x8a\xe7\xfe\x3c\x3c\x30\x32\xaa\xe9\xf3\x81\x82\x01\x00\x59"
                "\x4b\x1d\xe6\x5b\xad\x5d\x83\x6a\xeb\xb9\x2f\xc6\x28\xe6\x9f"
                "\x5b\x8a\xea\x92\x1b\xc9\xe4\x3f\x08\x05\x88\x7c\x40\x18\xca"
                "\x81\x7b\xe6\x4f\xab\x63\xea\x56\x57\x04\x88\x68\xf5\x27\x7b"
                "\xb0\xfc\x58\xa3\x75\x16\x97\x59\x91\x3d\x07\x2a\x48\x20\xec"
                "\x45\xd8\x70\x7c\x61\xb4\x28\xc6\x32\x1f\x35\xad\x73\x4e\x93"
                "\xd6\xf8\x0e\xea\xec\x80\xcd\xae\xb1\xc5\xe4\x2f\xd2\x37\x4b"
                "\x41\x4d\xaa\xfb\x0d\xea\xef\xa1\xba\x78\xb3\x0e\x60\xfe\x10"
                "\x9d\x46\x60\x6a\xc8\xe4\xc3\x8c\xf1\x12\x6b\x27\x49\x21\x64"
                "\x6e\x26\x2a\xbc\x8d\x26\x83\x6a\x14\x3b\x4e\x5b\x01\xb1\x4b"
                "\xef\xf8\x59\xbb\x07\xb7\x32\x0d\x53\xe5\x94\x8b\x12\xd9\x8f"
                "\x09\xcc\x4b\x8b\x3e\x68\x07\xfd\x1a\x69\xb3\x72\xd4\x00\x77"
                "\xa3\x22\xb4\x2d\xbc\x42\xeb\x2b\x88\x58\x69\xf6\x80\x07\xfd"
                "\x7b\xd1\x2d\xf3\x84\x93\x2f\xff\x4b\xa3\x70\xb5\x55\x36\xef"
                "\xb6\x32\xb7\x67\xd1\x0e\xb7\x64\x04\x5b\xfe\xa6\x0e\x45\xb8"
                "\x63\x9f\x8b\x97\xd1\x97\xd3\x2a\xb2\x62\x3f\x08\xea\x1d\x2c"
                "\xcf\xdf\x45\x15\x6c\x1a\x62\x70\x62\x1b\x12\x31\x61\x6c\x92"
                "\x7d\xb1\x9c\x03\xcd\xa5\xe4\x9a\x44\x77\xf6\x9d\xec\x77\x0f"
                "\xa1\x79\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51"
                "\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68"
                "\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa3\x27\x80\x20"
                "\xee\x75\xbe\xb3\x52\x54\xbd\x24\x06\x3f\xd9\x32\x48\x19\xe1"
                "\x5c\x70\x85\x92\x11\x6c\x3a\xc1\x4c\x9b\x83\xeb\x05\xa7\x59"
                "\xe2\xa0\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x1e\x5a\xaf\x3e"
                "\x46\xf6\xd4\xdf\x4d\x70\xf0\xa1\xd1\x35\x6d\xf0\x8b\x86\x91"
                "\xac\xb2\xf2\x24\xf0\x1a\xd4\x23\xc0\x21\x8d\x42\xc0\x81\x03"
                "\x02\x00\x00\xa1\x82\x02\xa9\x80\x02\x50\x38\x81\x01\x0e\xa2"
                "\x82\x02\x9e\xa1\x82\x02\x9a\x80\x02\x50\x39\x81\x01\x0e\xa2"
                "\x82\x02\x8f\xa2\x82\x02\x8b\xa0\x82\x02\x0c\xa3\x82\x02\x08"
                "\x80\x82\x01\x00\xa8\xc7\x5e\x5a\xe9\xc7\xcb\xbc\x9c\x92\xb7"
                "\xb8\x76\x67\x90\xc2\x53\xa9\x3a\x4b\x2c\xab\xdb\x80\x6e\xec"
                "\x50\xbe\x9e\x5e\x96\x64\x8f\xdf\x93\xb2\xb0\xc0\xb9\x7d\xc6"
                "\xc9\x75\x6b\x73\xb1\xd6\x0b\xe5\xbb\x2a\xf5\xdc\xc0\xd5\x09"
                "\x95\xd3\xf5\xcf\x82\xb9\x43\x93\xdf\x5a\xd4\x4f\xa0\x60\x20"
                "\x41\x01\xb0\x8f\x2a\x58\xd5\x05\xa1\x71\x14\x29\x91\xd6\x79"
                "\x5a\xb3\x3b\xbe\x29\x3c\x68\x87\x48\x94\xb7\xb3\x29\xd9\xff"
                "\xeb\x06\xfd\x1d\xcf\x3e\x7c\x14\x95\xfa\xa3\xc0\x25\x46\xa4"
                "\xd3\x2d\xb5\x5f\x6b\x86\x18\xb4\x2f\x7b\x07\x76\xf9\xf8\x6d"
                "\x57\x62\x41\x79\x30\x3c\x81\x6e\x8a\xda\x87\x6e\x1d\x64\x6d"
                "\x39\x40\xd5\x5a\xb2\x2d\xba\xb8\x7a\x3b\x60\xd6\x96\x55\xfe"
                "\x1e\x71\x09\x33\xad\x05\xb2\x73\xd2\x2b\xf1\x26\x06\xd9\x15"
                "\xfc\x48\x36\xa4\xa2\x25\x90\x96\x9c\x3a\x6a\x0a\xd8\x9b\x4f"
                "\xc6\x1a\xef\x18\xe9\x34\x0f\x85\x06\xbc\xc0\xeb\x4d\x3b\x6c"
                "\x7e\xa8\x54\x01\x03\x0c\x5c\x24\x58\x61\xcd\xf1\x31\x88\x5e"
                "\x00\x15\x1e\x9a\x81\x99\x0b\x1a\x33\xc5\xa6\x6c\xb4\xfb\x4e"
                "\x84\x94\x9c\x7e\x2b\x00\x4d\x5c\xcf\xc2\xa6\xa5\x36\xc6\xee"
                "\x72\x8e\x1e\x18\xaf\x81\x82\x01\x00\x7d\x3b\xe9\x21\x06\x94"
                "\xdf\x22\x39\xee\x57\x2d\xb0\x30\x63\x27\xe5\xab\x41\x7a\x35"
                "\x4b\x6f\x92\x23\xf4\xec\xa8\x6a\xe1\xb5\x2f\x10\xf6\x1c\xca"
                "\xa6\xc1\x6a\xb4\xfa\x6f\xf8\xea\xd8\x6c\xc6\xc6\x92\x92\x0a"
                "\xa7\x35\x3d\x61\xb2\xf4\xb2\x8d\xa1\xf9\x28\xca\x1b\x83\xe8"
                "\xc5\x05\xb2\x25\x50\xac\x8a\xe3\xe6\x16\x45\x5d\x8c\xaf\xed"
                "\x4e\x77\xe9\xd6\xec\xa6\x2a\x50\x6a\x60\x5a\x8c\x65\x25\x74"
                "\xc2\x9c\x19\x5f\x55\xbe\xb7\x88\xc0\xf2\xe5\x3a\x0b\xde\x8a"
                "\x10\xd8\xf9\xd4\x3f\xe4\x6c\xbb\x71\xe0\x72\xc1\xc3\x9f\x8d"
                "\x48\xa1\xe3\xfe\xcf\x66\x2a\x93\x0b\x5b\xeb\x75\x57\x55\x89"
                "\x54\xee\xaa\x28\x2f\x9c\x38\x1b\x15\x5d\x33\xf6\x97\x46\xe0"
                "\x26\x7b\xc9\x4d\x7c\x44\x10\x5a\x28\xd6\x42\xe0\x71\xe0\x7c"
                "\x87\x9a\xd5\xf8\xaa\x9a\xb4\xef\xd6\x67\xb5\x00\x7c\x57\x2e"
                "\xa4\xd6\xa6\xe0\xaf\x35\xe5\xa9\x59\xcb\xb5\x1b\x3f\x5a\x4d"
                "\x5e\x52\xde\xbf\xf2\x57\x68\xd1\xf2\x6e\x13\xa3\x1b\x00\x6c"
                "\xe5\x16\x24\xea\x87\x75\xac\x69\xea\xa2\x53\x4c\x5c\x11\xdc"
                "\xf9\x3a\xfb\x9b\xef\x20\xac\x6c\x19\x7d\xad\xe1\x15\x42\x0c"
                "\x95\xd5\x30\xa9\x20\x8a\x64\x7d\x84\x98\xa1\x79\xa0\x25\x80"
                "\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d"
                "\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93"
                "\x58\xeb\x4e\x81\x01\x09\xa3\x27\x80\x20\x65\x58\x3c\x41\x23"
                "\xcb\x17\xee\x38\xf7\x10\x74\xdb\xa3\x24\xb4\x5b\x39\x35\xc1"
                "\x1a\xa6\xbd\xbc\xc8\xea\x71\x39\x33\xe5\xd5\x1a\x81\x03\x01"
                "\x00\x00\xa4\x27\x80\x20\xde\x4c\x08\x88\x5c\xfe\x31\x01\xbe"
                "\xe9\xe4\x12\xce\x03\x59\x75\xb3\x7b\xac\x62\x26\xfa\x78\x07"
                "\x59\x64\x4e\x5e\x89\x64\x17\x04\x81\x03\x02\x00\x00\xa2\x82"
                "\x05\x48\xa0\x82\x04\x9b\xa2\x82\x02\x8b\xa0\x82\x02\x0c\xa3"
                "\x82\x02\x08\x80\x82\x01\x00\xee\x21\x9d\x3a\x07\x91\x46\x8c"
                "\x0b\xfe\x9c\xe9\x61\x7b\xd4\xf4\x10\x59\xe6\x20\x0d\xd2\x48"
                "\x5f\xf8\x7e\x89\xf3\x16\x39\x5d\xc1\x53\x72\x06\x1a\x36\xe7"
                "\x3f\x62\xcb\xc2\xbd\x44\x9d\xa9\x0f\xb2\x03\xa8\xc7\xca\xaa"
                "\x6b\x2a\x7b\xfe\x18\x93\x0c\x0e\x8e\x75\x56\xda\x2e\x47\x6f"
                "\x14\x6a\x5b\xfd\x8c\x70\xda\x4b\x43\xc8\x45\x51\x13\x0b\x22"
                "\x2f\x1a\x5f\x5c\x59\x4c\xa0\x3f\x85\xd2\x2f\x81\x37\x57\x40"
                "\x51\xb5\xf3\x1c\x20\x5b\x31\x95\xc7\x4b\x02\xb0\x64\x9f\xdc"
                "\xcb\xc0\xa7\x76\x95\xbe\x4a\x1e\xcb\xf7\x54\xcc\xa7\x9b\x51"
                "\xdd\xe5\x9f\xa0\xbb\x2d\x4e\x8b\xf0\x24\xbb\xbf\xc3\xac\x4e"
                "\x17\xfc\xd5\xf6\x6e\x3d\x78\xad\x5e\x68\x58\xd7\x09\x3d\x1f"
                "\xd9\xf3\xc2\x7b\x62\x45\xe1\xe9\xbe\x89\x72\x87\x40\x1d\x28"
                "\x9b\xf6\xc6\x92\x23\x80\xaa\x05\x38\xaf\x97\x4c\x10\xde\x84"
                "\x60\x13\x17\xda\xb9\xb0\xfc\x48\x09\x83\x3f\x51\x75\x19\xad"
                "\x68\x35\xc7\x8c\xb0\xb3\xd8\xff\x0f\xee\x77\xb4\x50\x3a\x5b"
                "\x92\x23\xf9\x0f\xf5\x60\x86\x12\x57\xad\x52\xbe\x88\x8a\x40"
                "\x08\x3e\x02\x0e\x2f\x1b\xa9\x29\x28\x2b\x15\x53\x89\xef\x64"
                "\x1a\xc3\x4a\x12\x17\x26\xb5\xeb\x81\x82\x01\x00\xa6\x1e\xa6"
                "\x23\xfa\x0d\x67\xce\x64\x3c\x4a\x12\xdd\x5a\xe0\x70\x8d\xe5"
                "\x08\x32\x33\x0c\x1f\x9a\x07\xe3\x22\x9d\x45\x62\xe9\x62\x95"
                "\x92\xa7\x25\xfd\xa7\x81\xac\xaf\xc7\xcb\x37\xf8\x16\x8d\x00"
                "\x11\x1f\x1e\xe4\x5a\xcf\x9f\x54\x43\x16\x78\x99\xdb\xe4\xc7"
                "\x79\x61\x26\x67\x67\x84\x76\x13\xbb\xe4\x77\x50\x5f\xf5\x2b"
                "\x07\x9c\x44\xe3\x8d\x53\x5c\xe4\x28\xb4\xfb\x6c\x39\x57\x4c"
                "\xdb\xba\x54\xbb\x90\x63\x60\x9b\x4d\x04\xc3\x16\xf3\x69\x49"
                "\xb8\x0c\x24\xc8\xbd\xd3\x8c\xc6\xd4\x64\x2d\x13\xc2\xc9\xa9"
                "\xf6\x3a\x09\xd1\xfd\x26\xd3\x71\xd6\x7f\x35\x38\x7a\x5e\xa5"
                "\xb2\xb6\x7d\x2a\x0f\x4d\x94\x11\x6c\x9c\x99\x89\x62\xe6\xe9"
                "\x6f\x44\x08\xfb\xd6\x6e\xa8\x22\x4e\x20\xae\x29\x9f\xc7\x98"
                "\x40\x6e\x5c\x2f\x07\x4e\x6d\x43\x30\x66\x68\x3b\x51\x88\x2b"
                "\x22\x6a\x80\xb3\xfc\x9a\x7f\x42\xef\x4a\xdb\xbc\x9a\x9e\xf3"
                "\x08\x68\x05\x9f\xb1\x5d\x6b\xe9\x78\xdc\x01\x55\x46\x97\x08"
                "\xce\x91\x6e\xc3\xa9\x49\x79\x34\x69\x96\x3e\x86\xd9\xbe\x94"
                "\x3b\xd6\xee\x71\xff\x98\xaa\x35\x8f\x59\xe7\x5e\x78\x0d\x16"
                "\xc6\x99\x71\x39\xb2\xf8\x6d\x75\x14\xeb\xd8\x8e\x28\xa1\x79"
                "\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f"
                "\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd"
                "\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa3\x27\x80\x20\x8d\xb0"
                "\x2c\xb1\x28\xc3\xf4\x97\x50\x84\x64\x57\xca\xf4\x9d\x63\x08"
                "\x73\xfc\xde\x2f\x90\xf0\xf2\xec\x79\xa9\xc6\xa3\xf1\x33\xfd"
                "\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x95\x3c\x86\x65\x91\x76"
                "\x69\x6b\x72\x61\xaa\x76\x15\x2a\xd7\x25\x4f\x32\xb7\x73\x7a"
                "\xb2\x49\x0c\x0b\xdf\xb5\x4e\x4a\x8b\xf7\x65\x81\x03\x02\x00"
                "\x00\xa3\x82\x02\x08\x80\x82\x01\x00\xe8\x03\x7c\xff\x40\x68"
                "\x5d\xc7\xb8\xd0\x9f\x9a\x83\xf9\x02\xe6\xfe\xa5\xb9\x0e\x9f"
                "\xdc\x44\x74\x59\x3e\xef\x61\xdc\xb6\x4b\x49\xfe\x1a\x67\x73"
                "\x38\x7b\x1c\xb4\xfa\x24\x39\xe4\xbb\x74\x1b\xe4\x66\xfd\x85"
                "\x6f\x8d\x92\x3e\x04\x70\xb4\x21\x01\xcf\x07\xf2\xeb\x11\x2c"
                "\xaa\x9d\x37\xbb\xf3\x8d\x9b\xbc\x17\x60\xe4\xe3\xae\x79\x92"
                "\x97\x3a\xe8\xd8\x74\xc5\x9d\xeb\x15\x22\x8b\xae\x51\x13\x78"
                "\x21\xca\xbd\x6a\xa6\x24\x93\x8f\xe6\x23\x12\x52\xe1\x75\xda"
                "\x55\x26\xcc\x95\xa0\x75\x31\x0a\x6e\x27\x14\x63\x70\x04\xd7"
                "\xe4\x36\x21\x3a\x9e\xff\xe3\x16\x21\xc1\xfc\x6d\xc5\xe2\x80"
                "\xb9\x26\xc6\x4f\x3c\xc2\xd5\x25\xf1\xb9\x88\xac\xc7\xfe\xde"
                "\xd6\x7e\x60\x41\x82\xde\x25\x28\x1f\x09\xda\x10\x01\x27\xf4"
                "\x63\x10\xa2\x4e\x1d\xc2\x19\x32\xb3\x87\xc2\xcf\xac\x3c\x2b"
                "\xcd\x5e\x79\x1f\x19\xea\x70\x56\x31\x59\x0e\x13\x95\x05\xb7"
                "\xf9\xff\xd9\x0b\x49\xce\xd0\x6f\xae\x90\x44\xb3\x6b\x60\xc9"
                "\x72\xf7\x83\x24\x5e\x15\x25\x1c\xb8\x76\x71\x84\x33\x14\xf1"
                "\xf0\x07\x7f\x2f\x95\xee\x3c\x36\x67\x36\xb4\xae\x1c\xb5\x02"
                "\xa2\xdc\x0e\xed\xf2\x63\x0d\x52\x61\xe3\x81\x82\x01\x00\x7f"
                "\xb0\xc6\xbe\xf6\xd4\x9c\xb2\x91\x1a\x6b\xb3\xb3\xe8\x2b\xf2"
                "\x35\x93\x86\xb5\x3d\x86\xe0\x9c\x75\xf7\x95\xd3\x63\x96\x92"
                "\xb0\xc1\xc4\x78\xd3\xc4\xa5\x1b\x03\x96\xa0\x71\xa4\x60\x44"
                "\x25\xb6\x45\x01\x4d\x4c\x73\x6e\xb0\x03\x23\x7d\x46\xb3\xa8"
                "\x1d\x83\xb5\x97\x48\x79\xb6\x7c\xe7\x96\x0f\x57\x40\xfb\x26"
                "\x69\x4a\x1c\x94\xa0\xcf\x7c\x08\x00\x2b\xea\x17\x28\xc4\x4b"
                "\xa3\x7e\x6f\x50\x47\x39\x6e\xe1\xf9\xff\x7b\xee\x76\xdd\x21"
                "\xf7\x37\xe8\xa4\xf8\x22\xe5\x7f\xf8\x79\xac\xca\x56\xf6\x91"
                "\x9e\x17\x66\xf6\x37\x09\xfa\xf4\xc7\x1a\x71\xdf\xe9\x2c\xb9"
                "\x90\x6f\x1d\x06\xde\x7e\x23\xfd\x13\xa6\xc9\xce\x51\xa7\xb5"
                "\x71\x7c\x31\x0a\x6d\x2c\xdb\x4e\x5e\xb7\xb6\xcb\xba\x5c\x89"
                "\x13\x0d\x6e\xe5\xbd\xb1\xdd\x02\x64\xe1\x05\xf2\x8e\x26\x5e"
                "\x60\x7b\xe2\x35\x5b\x7e\xe0\x1c\x4f\xe5\xf8\x49\xb3\x00\x0e"
                "\xe9\x60\x78\x6f\xe7\xaa\x17\xf0\x36\xd1\x95\x6f\x62\x17\x18"
                "\x72\x24\x0c\xc1\x51\xda\x8c\x0c\x64\xa6\xda\x80\x78\x56\xf3"
                "\x90\x0f\x5c\xe4\xec\x00\x94\x7a\x14\x50\xef\xd4\xa7\xea\x17"
                "\xad\x00\x4c\xbe\xdd\xdb\xb2\x5a\xfd\x72\x44\x74\x61\x47\xb4"
                "\xa1\x81\xa6\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11"
                "\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2"
                "\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa2\x2b\x80"
                "\x20\x52\x94\xc9\xdb\x6a\xb5\x13\xd0\x42\x2a\x94\xaf\x6c\xd2"
                "\x92\xab\xcb\x41\xc8\x85\xf7\xec\x46\xf2\x1c\x65\xc4\x0b\x4a"
                "\x5a\x8e\x5e\x81\x03\x02\x10\x00\x82\x02\x03\x98\xa3\x27\x80"
                "\x20\x4a\x64\xbf\x23\xa9\x2b\xec\x55\x00\x3d\x55\xf5\xbf\x3f"
                "\x26\x49\x18\xbb\xe0\xda\xf8\x0c\xf4\x5c\x8a\x33\x74\xb6\x58"
                "\xa4\x38\x30\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x6b\xf3\xe3"
                "\x0f\x92\x6d\x45\x8d\xae\xd2\x8a\x2a\x3e\x53\x37\x1f\x57\x82"
                "\x21\x60\xe4\x5b\x88\x9a\x9d\x13\xa2\x56\x13\x88\x9e\x21\x81"
                "\x03\x02\x00\x00\xa1\x79\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd"
                "\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33"
                "\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09"
                "\xa3\x27\x80\x20\x34\x77\x63\xd7\x27\x76\x4d\x3a\x9b\x6c\xdb"
                "\x09\xed\xd8\x5f\xc2\x12\x9e\x9c\xc4\xc8\xa6\x62\xcf\x14\xde"
                "\x09\x30\x64\x8e\xf4\x84\x81\x03\x01\x00\x00\xa4\x27\x80\x20"
                "\xe9\x54\x85\xb7\x7d\xa1\x1f\x2f\xaa\x84\x72\x3f\x4e\x3f\x09"
                "\xa7\x49\xf2\x15\x2a\xe6\x13\x5b\x68\xb6\xe1\x98\xa6\x89\x76"
                "\x08\x05\x81\x03\x02\x00\x00"s;
            auto const thresh0EncodedCondition =
                "\xa2\x2b\x80\x20\xfd\x45\xe9\xdf\x30\x8e\x3b\xd7\x14\x1a\x7c"
                "\xa0\x61\x71\xe7\x79\xe5\x30\x1b\x37\xa2\xd9\xf8\x30\xaf\x8f"
                "\x7c\xfd\x9f\x04\xa4\x16\x81\x03\x08\x80\x40\x82\x02\x03\xd8"s;
            auto const thresh0EncodedFingerprint =
                "\x30\x82\x01\x07\x80\x01\x03\xa1\x82\x01\x00\xa0\x25\x80\x20"
                "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
                "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
                "\xeb\x4e\x81\x01\x09\xa1\x2b\x80\x20\x36\x1d\x8c\x87\x0c\xfe"
                "\xf8\x74\xf0\x9e\xed\xcc\xb5\xff\x70\xbc\x22\x95\x6d\x88\x1e"
                "\xb6\xf3\x5f\x6d\x82\xc9\x2d\xb3\x27\x04\x8f\x81\x03\x02\x18"
                "\x20\x82\x02\x03\xb8\xa1\x2b\x80\x20\x87\xee\x85\xd6\x17\xed"
                "\x62\x72\xf4\x35\xa8\x0f\x28\xfc\xaf\x5a\x92\x57\x3c\x6b\xa6"
                "\x6a\x07\xbb\xd0\xdd\x98\x4f\xc4\x4c\x19\x2e\x81\x03\x02\x18"
                "\x20\x82\x02\x03\xb8\xa2\x2b\x80\x20\x8e\xee\x2e\xef\xef\x99"
                "\xde\xc2\x51\x78\x1b\x84\xcd\x89\x54\x90\x86\x77\x5e\xad\x82"
                "\x4b\x44\x99\x52\x5d\x06\xde\xd4\x6d\x6e\x60\x81\x03\x04\x38"
                "\x00\x82\x02\x03\x98\xa3\x27\x80\x20\x34\x77\x63\xd7\x27\x76"
                "\x4d\x3a\x9b\x6c\xdb\x09\xed\xd8\x5f\xc2\x12\x9e\x9c\xc4\xc8"
                "\xa6\x62\xcf\x14\xde\x09\x30\x64\x8e\xf4\x84\x81\x03\x01\x00"
                "\x00\xa4\x27\x80\x20\xe9\x54\x85\xb7\x7d\xa1\x1f\x2f\xaa\x84"
                "\x72\x3f\x4e\x3f\x09\xa7\x49\xf2\x15\x2a\xe6\x13\x5b\x68\xb6"
                "\xe1\x98\xa6\x89\x76\x08\x05\x81\x03\x02\x00\x00"s;
            check(
                &thresh0,
                thresh0Msg,
                thresh0EncodedFulfillment,
                thresh0EncodedCondition,
                thresh0EncodedFingerprint);
        }
    }

    void
    testThresh35()
    {
        testcase("Thresh35");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * thresh0
        // ** Preim11Cond
        // ** Rsa12Cond
        // ** Ed13Cond
        // ** Prefix14Cond
        // ** Thresh21Cond
        // ** prefix1
        // *** prefix2
        // **** thresh3
        // ***** Preim5Cond
        // ***** Rsa6Cond
        // ***** Ed7Cond
        // ***** rsa4
        // ** preim8
        // ** rsa9
        // ** ed10

        auto const rsa4Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa4PublicKey{
            {0xbe, 0x09, 0xc5, 0xa4, 0x27, 0x29, 0xdf, 0xd4, 0x67, 0x76, 0xbe,
             0xbf, 0x2c, 0xf3, 0xa2, 0x0b, 0x42, 0xe4, 0xbf, 0xeb, 0xdd, 0x67,
             0x20, 0xfb, 0x7a, 0x27, 0x93, 0xc0, 0x78, 0x47, 0x78, 0xd7, 0x15,
             0x32, 0xee, 0x38, 0x81, 0x0d, 0x36, 0xa2, 0xc4, 0x65, 0x44, 0xe6,
             0x62, 0x26, 0xb9, 0x58, 0x13, 0xa4, 0x15, 0x82, 0xab, 0xb1, 0x16,
             0x61, 0xfc, 0x01, 0x98, 0xc6, 0x1a, 0x69, 0xc6, 0xba, 0x39, 0x3f,
             0x01, 0x55, 0x3d, 0xd7, 0x8e, 0x14, 0x42, 0x6d, 0x78, 0x74, 0x9b,
             0x28, 0xcb, 0x31, 0x39, 0x98, 0x5a, 0x11, 0xdc, 0xc1, 0x18, 0x9d,
             0x8d, 0xb0, 0xcd, 0x1b, 0x4c, 0x10, 0xab, 0x14, 0x64, 0x19, 0xf1,
             0x33, 0x15, 0x45, 0xc8, 0x92, 0x82, 0x03, 0x82, 0x8a, 0xaa, 0xad,
             0x94, 0xfc, 0x24, 0x11, 0x96, 0x99, 0x7e, 0x94, 0x5a, 0x82, 0x57,
             0x68, 0x61, 0x9f, 0x7b, 0x45, 0xe0, 0x99, 0x9e, 0x4f, 0x32, 0x50,
             0x5f, 0x05, 0xc8, 0x11, 0xae, 0xc4, 0x0c, 0x63, 0x18, 0x0e, 0x02,
             0x59, 0x36, 0x25, 0x92, 0x06, 0x32, 0xc7, 0x71, 0x47, 0x99, 0xcc,
             0x0a, 0x6e, 0x0a, 0x58, 0x71, 0x3f, 0x5e, 0xb7, 0x78, 0xf7, 0x98,
             0x79, 0xdf, 0x74, 0xa4, 0xeb, 0xa9, 0x00, 0xfd, 0x81, 0xb3, 0xcf,
             0x04, 0x8c, 0x5d, 0x7d, 0xe7, 0xb2, 0x82, 0x90, 0x49, 0xbd, 0x69,
             0xf3, 0x08, 0xe9, 0x92, 0xc6, 0x9e, 0x41, 0xba, 0x74, 0xd8, 0x8d,
             0x81, 0x97, 0x6f, 0x86, 0xab, 0xc9, 0xf1, 0x02, 0x31, 0xb4, 0xce,
             0x47, 0xb0, 0x39, 0xc8, 0xba, 0x51, 0xa7, 0x39, 0xf3, 0x71, 0xa2,
             0x25, 0x27, 0x37, 0x6e, 0x09, 0x6f, 0x19, 0x59, 0xbc, 0x65, 0xd9,
             0xcd, 0x12, 0xd3, 0x2c, 0xa2, 0x78, 0xfa, 0x23, 0x15, 0x1a, 0x82,
             0x41, 0x91, 0x1b, 0xbe, 0x8a, 0xe7, 0xfe, 0x3c, 0x3c, 0x30, 0x32,
             0xaa, 0xe9, 0xf3}};
        std::array<std::uint8_t, 256> const rsa4Sig{
            {0x8f, 0x54, 0xa4, 0x6a, 0x2a, 0xe6, 0x52, 0x04, 0xef, 0x12, 0x0e,
             0x24, 0xda, 0xca, 0x64, 0x98, 0x9e, 0xb2, 0xfb, 0x79, 0x22, 0x85,
             0x38, 0xe6, 0x9d, 0x40, 0xa2, 0x10, 0x65, 0x62, 0x03, 0x7a, 0x39,
             0xed, 0x01, 0xb0, 0x15, 0xe2, 0xfc, 0x56, 0xa8, 0xe0, 0xda, 0x4e,
             0x12, 0x9d, 0xe1, 0xcb, 0x1e, 0x60, 0xa1, 0x35, 0xb2, 0xed, 0x49,
             0xa0, 0x12, 0xdf, 0x6e, 0x1e, 0x67, 0x3a, 0x0c, 0x11, 0x94, 0x0e,
             0xf4, 0x82, 0x41, 0xdd, 0x80, 0x8e, 0xb3, 0x10, 0xf2, 0x8a, 0xc2,
             0x14, 0x81, 0x78, 0x81, 0x6a, 0x04, 0x32, 0x63, 0x52, 0xa0, 0xcd,
             0xb1, 0x77, 0x00, 0x87, 0xb1, 0x9f, 0xcc, 0x07, 0x3f, 0xe0, 0xca,
             0x16, 0x60, 0x8f, 0x96, 0xcb, 0x25, 0x1c, 0x3d, 0x15, 0x74, 0x6d,
             0x91, 0x77, 0xac, 0xb7, 0xd0, 0xa6, 0xee, 0x66, 0xc8, 0x1c, 0x9f,
             0x51, 0x75, 0x93, 0x1a, 0xef, 0xa9, 0x4f, 0x0e, 0xa2, 0x90, 0xe9,
             0x59, 0xcb, 0x15, 0x73, 0x33, 0xbc, 0x86, 0x7d, 0x5e, 0xb5, 0x7e,
             0x41, 0x00, 0xcf, 0xc4, 0x29, 0x67, 0x24, 0x50, 0x1c, 0x62, 0x27,
             0x86, 0x1f, 0x4c, 0x0c, 0x06, 0xa3, 0xe6, 0xf0, 0x5c, 0x73, 0x3f,
             0xf9, 0x3d, 0x89, 0x47, 0xc2, 0x71, 0x39, 0x76, 0x93, 0x6f, 0x91,
             0x3c, 0x6a, 0x6d, 0x68, 0x3b, 0x7b, 0xbe, 0x2b, 0x74, 0x63, 0xc2,
             0x8f, 0xac, 0xc5, 0xed, 0xa8, 0x5c, 0xdf, 0x0b, 0xe4, 0xf8, 0x61,
             0xf4, 0xdc, 0x98, 0x9c, 0x07, 0x6d, 0xb2, 0x73, 0xa6, 0x93, 0xc8,
             0xa6, 0x55, 0xf0, 0x18, 0xfa, 0x8a, 0xd1, 0xcb, 0xf0, 0xd5, 0x1f,
             0xe1, 0xc2, 0x68, 0x5f, 0x84, 0x6d, 0x2c, 0x4e, 0xc3, 0xf1, 0xf3,
             0x3c, 0x44, 0x26, 0x33, 0x14, 0xc3, 0xb4, 0xfe, 0x5f, 0xdb, 0xc1,
             0xe5, 0xca, 0xc7, 0x24, 0xea, 0x0e, 0xe2, 0x2b, 0xd1, 0xf6, 0xfb,
             0x9e, 0xa6, 0x31}};
        auto const thresh3Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim5CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim5Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim5CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa6CondConditionFingerprint =
            "\xee\x75\xbe\xb3\x52\x54\xbd\x24\x06\x3f\xd9\x32\x48\x19\xe1"
            "\x5c\x70\x85\x92\x11\x6c\x3a\xc1\x4c\x9b\x83\xeb\x05\xa7\x59"
            "\xe2\xa0"s;
        Condition const Rsa6Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa6CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed7CondConditionFingerprint =
            "\x1e\x5a\xaf\x3e\x46\xf6\xd4\xdf\x4d\x70\xf0\xa1\xd1\x35\x6d"
            "\xf0\x8b\x86\x91\xac\xb2\xf2\x24\xf0\x1a\xd4\x23\xc0\x21\x8d"
            "\x42\xc0"s;
        Condition const Ed7Cond{Type::ed25519Sha256,
                                131072,
                                makeSlice(Ed7CondConditionFingerprint),
                                std::bitset<5>{0}};
        auto const prefix2Prefix = "P2"s;
        auto const prefix2Msg = "P1abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix2MaxMsgLength = 14;
        auto const prefix1Prefix = "P1"s;
        auto const prefix1Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix1MaxMsgLength = 14;
        auto const preim8Preimage = "I am root"s;
        auto const preim8Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const rsa9Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa9PublicKey{
            {0xb6, 0x7b, 0xe2, 0x98, 0x9f, 0xff, 0x6c, 0x37, 0xd0, 0xb6, 0x64,
             0x19, 0xfb, 0xa0, 0x21, 0x18, 0xe2, 0xc0, 0xd1, 0x92, 0xbd, 0x04,
             0xa6, 0xd2, 0xb4, 0x7e, 0xc6, 0x6a, 0x1a, 0x34, 0x20, 0x7b, 0xfe,
             0x84, 0xeb, 0xe8, 0xc1, 0x6f, 0xfd, 0xdc, 0x0a, 0xfe, 0x60, 0x55,
             0xb6, 0xfc, 0x86, 0x5a, 0x21, 0xbf, 0xf1, 0x39, 0xfa, 0xec, 0x42,
             0xca, 0x57, 0xb3, 0x3e, 0x3f, 0xe6, 0x26, 0x5a, 0xb7, 0x4a, 0x5f,
             0xbb, 0xb1, 0xf5, 0x91, 0x85, 0x92, 0x3e, 0x6a, 0x18, 0x48, 0x4d,
             0x9e, 0xdd, 0x08, 0x25, 0xa3, 0x3b, 0x3d, 0x75, 0x9a, 0xbe, 0xee,
             0x0d, 0x6e, 0xd2, 0x5d, 0xe2, 0xbd, 0xed, 0x45, 0x60, 0xef, 0xa0,
             0x37, 0xfd, 0xbb, 0xcf, 0x30, 0x97, 0xf1, 0x5b, 0xc8, 0x9c, 0x29,
             0x33, 0x67, 0x3e, 0x23, 0x33, 0x7f, 0x36, 0xd4, 0x75, 0x8b, 0xa1,
             0xcf, 0x9e, 0xe6, 0xc5, 0x63, 0x63, 0xb0, 0x3f, 0xa0, 0xc2, 0xa2,
             0x10, 0xc9, 0xb2, 0x6b, 0xaa, 0x67, 0xc9, 0xf5, 0xb8, 0xbf, 0x5b,
             0x97, 0xe5, 0x29, 0xf2, 0xbb, 0xc7, 0x22, 0x0f, 0x1f, 0xc1, 0xf6,
             0xca, 0x4a, 0x8a, 0x46, 0x89, 0xa0, 0xca, 0x4e, 0x49, 0x9d, 0xfc,
             0x23, 0xd3, 0xb4, 0xdb, 0xc6, 0x84, 0x45, 0xbd, 0x9f, 0x10, 0x86,
             0xe2, 0xf0, 0x47, 0x7b, 0x75, 0xbf, 0x25, 0x99, 0x02, 0x2c, 0xdb,
             0x6b, 0xd6, 0x2b, 0x67, 0x0d, 0xcd, 0x46, 0x63, 0xbd, 0xce, 0x1c,
             0xc5, 0x56, 0x63, 0x58, 0x5b, 0xc8, 0xb2, 0x58, 0x42, 0xf6, 0xaf,
             0xce, 0x47, 0xb2, 0xa9, 0x2a, 0x71, 0x8b, 0x82, 0xf4, 0x72, 0xff,
             0xef, 0xe7, 0xc1, 0x70, 0x12, 0xfa, 0xb8, 0xad, 0xb2, 0xfe, 0xa9,
             0x14, 0xe7, 0xc2, 0xec, 0x12, 0xbf, 0x29, 0x5a, 0x65, 0x91, 0x74,
             0x82, 0xd3, 0x77, 0x1f, 0x14, 0xbf, 0x5f, 0x41, 0x11, 0x6c, 0x7c,
             0x22, 0x70, 0x65}};
        std::array<std::uint8_t, 256> const rsa9Sig{
            {0xad, 0xe7, 0x89, 0xd4, 0x57, 0xb8, 0x30, 0x35, 0x4c, 0x2c, 0x36,
             0xe1, 0x20, 0xab, 0x3e, 0x44, 0x9d, 0xb7, 0x78, 0x81, 0xd9, 0x7d,
             0x0a, 0x66, 0x8d, 0x24, 0x62, 0x1d, 0x3b, 0x28, 0xf8, 0xca, 0xdd,
             0x1b, 0x51, 0xd7, 0x05, 0xc6, 0xd2, 0x51, 0xcc, 0x64, 0x58, 0xc2,
             0x1b, 0xf1, 0xa9, 0x11, 0x45, 0x9c, 0x1c, 0x37, 0xe2, 0x1e, 0xa0,
             0x20, 0xb6, 0x7e, 0xae, 0x75, 0xc1, 0x3b, 0x52, 0x2b, 0x4a, 0xad,
             0xe6, 0x2c, 0xe8, 0xae, 0x5b, 0x10, 0xda, 0x82, 0x68, 0x00, 0xdb,
             0x92, 0x4c, 0x92, 0x7b, 0x0b, 0x0b, 0xcf, 0x09, 0x24, 0x1a, 0x10,
             0x2d, 0x76, 0x76, 0x6c, 0xdc, 0xe0, 0x78, 0xc5, 0x4b, 0x4a, 0x2b,
             0x5f, 0x21, 0x01, 0xb6, 0xff, 0x7f, 0xec, 0xf6, 0xae, 0x45, 0x14,
             0x43, 0xbe, 0x98, 0x89, 0xa8, 0x79, 0xf6, 0x06, 0xc0, 0x6d, 0x45,
             0x30, 0xff, 0x32, 0x39, 0x18, 0xfb, 0xa6, 0xfe, 0x0d, 0x29, 0x08,
             0x0d, 0xf7, 0xb7, 0xdf, 0xda, 0x6e, 0xdc, 0xcb, 0xf3, 0x84, 0x0e,
             0x03, 0x45, 0xbb, 0x7c, 0x4c, 0xcc, 0x86, 0xb0, 0xaf, 0xee, 0x51,
             0x8e, 0x0d, 0xed, 0xe6, 0xf3, 0x18, 0xa4, 0x86, 0x3c, 0xb5, 0xf7,
             0xbb, 0x73, 0xdf, 0xc1, 0x00, 0x72, 0xae, 0x72, 0xef, 0x95, 0x9c,
             0x07, 0x8e, 0xa2, 0x99, 0x06, 0x8e, 0x24, 0xf9, 0x2d, 0x32, 0xdb,
             0x13, 0x72, 0x79, 0x04, 0xa0, 0xff, 0x7c, 0x5f, 0xf4, 0x37, 0x00,
             0xf2, 0x62, 0x31, 0x47, 0x72, 0x73, 0x4d, 0xd1, 0xf3, 0xa0, 0x5d,
             0xf5, 0x42, 0x62, 0x75, 0x05, 0xd4, 0x06, 0xef, 0xb5, 0xa7, 0x13,
             0xb7, 0x8f, 0x17, 0x1f, 0x0e, 0xa5, 0xa1, 0x59, 0x1c, 0x82, 0x7a,
             0x5b, 0x68, 0x34, 0x04, 0x60, 0x72, 0x2b, 0xd6, 0x41, 0x4e, 0xb6,
             0xde, 0x29, 0xd4, 0x89, 0xfb, 0x66, 0xfb, 0xec, 0x02, 0xf8, 0x8b,
             0x1d, 0xe9, 0x57}};
        auto const ed10Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed10PublicKey{
            {0x7a, 0xdc, 0x65, 0x52, 0x0f, 0xca, 0x06, 0x72, 0x5c, 0xe4, 0x65,
             0x57, 0x82, 0x6d, 0x3f, 0x57, 0x1f, 0xc6, 0xc6, 0xe4, 0x5d, 0xaf,
             0x08, 0xda, 0xe2, 0x07, 0x02, 0xcb, 0x42, 0x3d, 0x2a, 0xd0}};
        std::array<std::uint8_t, 64> const ed10Sig{
            {0xf2, 0x7c, 0x5f, 0x61, 0xec, 0xbc, 0xc2, 0x8c, 0xad, 0xd0, 0xd3,
             0xcb, 0x89, 0xab, 0xac, 0xe4, 0x01, 0x6f, 0x90, 0x60, 0x6f, 0x89,
             0xc0, 0xd9, 0xca, 0x2b, 0x4b, 0xfd, 0x78, 0x80, 0xae, 0xf9, 0xd0,
             0x3f, 0x45, 0x7a, 0xb2, 0x26, 0x0c, 0xee, 0xc5, 0x06, 0x0e, 0x94,
             0x6b, 0xf8, 0xfe, 0x96, 0x4f, 0x0d, 0xa0, 0x2c, 0x66, 0x78, 0xa5,
             0x60, 0xfe, 0x47, 0x1e, 0xa9, 0x88, 0x76, 0x55, 0x03}};
        std::array<std::uint8_t, 32> const ed10SigningKey{
            {0x84, 0x04, 0xdd, 0x34, 0x6a, 0x4d, 0x40, 0xef, 0x70, 0xf7, 0xef,
             0x7f, 0x25, 0xf4, 0xd0, 0xa0, 0xa8, 0xad, 0xc1, 0x51, 0x1c, 0x16,
             0x57, 0x9d, 0x5e, 0xd9, 0xa6, 0x45, 0xda, 0xff, 0x5e, 0x1e}};
        (void)ed10SigningKey;
        auto const thresh0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim11CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim11Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim11CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa12CondConditionFingerprint =
            "\x38\xb9\xf0\xeb\x68\x8b\x9f\x55\x37\x9a\xec\x07\xd4\xa2\x13"
            "\xac\x34\xa1\x67\x31\x34\xea\xc2\x2f\xef\x13\xe3\x5c\xcf\x8f"
            "\x90\x1e"s;
        Condition const Rsa12Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa12CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed13CondConditionFingerprint =
            "\x7c\x54\x6a\x6d\x7f\x00\x52\x31\x03\xe7\xb4\x5b\x1c\x9f\x72"
            "\xeb\x3c\x18\x08\xa3\x24\xb2\x63\x5f\x77\x55\x4a\x42\xdb\x1e"
            "\xff\x1e"s;
        Condition const Ed13Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed13CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Prefix14CondConditionFingerprint =
            "\x90\x8f\xe3\x4c\x7d\xd1\xd6\x33\x62\xe5\x8f\x4c\x92\xbc\x35"
            "\x52\x97\x3b\xe5\x12\xdc\x62\x57\x71\xf9\xe5\x1d\x06\xe5\x5f"
            "\x4c\xd9"s;
        Condition const Prefix14Cond{
            Type::prefixSha256,
            137258,
            makeSlice(Prefix14CondConditionFingerprint),
            std::bitset<5>{29}};
        auto const Thresh21CondConditionFingerprint =
            "\x6f\xe1\x6e\x14\x5b\xe3\xa8\x1f\x91\x88\x33\xb3\x3e\xdc\x51"
            "\x88\x3f\x7d\x54\x43\xe9\x03\x02\x32\xfb\xbc\x58\x8e\x22\x3d"
            "\x56\x35"s;
        Condition const Thresh21Cond{
            Type::thresholdSha256,
            276480,
            makeSlice(Thresh21CondConditionFingerprint),
            std::bitset<5>{25}};

        auto rsa4 = std::make_unique<RsaSha256>(
            makeSlice(rsa4PublicKey), makeSlice(rsa4Sig));
        std::vector<std::unique_ptr<Fulfillment>> thresh3Subfulfillments;
        thresh3Subfulfillments.emplace_back(std::move(rsa4));
        std::vector<Condition> thresh3Subconditions{
            {Preim5Cond, Rsa6Cond, Ed7Cond}};
        auto thresh3 = std::make_unique<ThresholdSha256>(
            std::move(thresh3Subfulfillments), std::move(thresh3Subconditions));
        auto prefix2 = std::make_unique<PrefixSha256>(
            makeSlice(prefix2Prefix), prefix2MaxMsgLength, std::move(thresh3));
        auto prefix1 = std::make_unique<PrefixSha256>(
            makeSlice(prefix1Prefix), prefix1MaxMsgLength, std::move(prefix2));
        auto preim8 =
            std::make_unique<PreimageSha256>(makeSlice(preim8Preimage));
        auto rsa9 = std::make_unique<RsaSha256>(
            makeSlice(rsa9PublicKey), makeSlice(rsa9Sig));
        auto ed10 = std::make_unique<Ed25519>(ed10PublicKey, ed10Sig);
        std::vector<std::unique_ptr<Fulfillment>> thresh0Subfulfillments;
        thresh0Subfulfillments.emplace_back(std::move(prefix1));
        thresh0Subfulfillments.emplace_back(std::move(preim8));
        thresh0Subfulfillments.emplace_back(std::move(rsa9));
        thresh0Subfulfillments.emplace_back(std::move(ed10));
        std::vector<Condition> thresh0Subconditions{
            {Preim11Cond, Rsa12Cond, Ed13Cond, Prefix14Cond, Thresh21Cond}};
        ThresholdSha256 const thresh0(
            std::move(thresh0Subfulfillments), std::move(thresh0Subconditions));
        {
            auto const thresh0EncodedFulfillment =
                "\xa2\x82\x06\x06\xa0\x82\x05\x2c\xa0\x0b\x80\x09\x49\x20\x61"
                "\x6d\x20\x72\x6f\x6f\x74\xa1\x82\x02\xa9\x80\x02\x50\x31\x81"
                "\x01\x0e\xa2\x82\x02\x9e\xa1\x82\x02\x9a\x80\x02\x50\x32\x81"
                "\x01\x0e\xa2\x82\x02\x8f\xa2\x82\x02\x8b\xa0\x82\x02\x0c\xa3"
                "\x82\x02\x08\x80\x82\x01\x00\xbe\x09\xc5\xa4\x27\x29\xdf\xd4"
                "\x67\x76\xbe\xbf\x2c\xf3\xa2\x0b\x42\xe4\xbf\xeb\xdd\x67\x20"
                "\xfb\x7a\x27\x93\xc0\x78\x47\x78\xd7\x15\x32\xee\x38\x81\x0d"
                "\x36\xa2\xc4\x65\x44\xe6\x62\x26\xb9\x58\x13\xa4\x15\x82\xab"
                "\xb1\x16\x61\xfc\x01\x98\xc6\x1a\x69\xc6\xba\x39\x3f\x01\x55"
                "\x3d\xd7\x8e\x14\x42\x6d\x78\x74\x9b\x28\xcb\x31\x39\x98\x5a"
                "\x11\xdc\xc1\x18\x9d\x8d\xb0\xcd\x1b\x4c\x10\xab\x14\x64\x19"
                "\xf1\x33\x15\x45\xc8\x92\x82\x03\x82\x8a\xaa\xad\x94\xfc\x24"
                "\x11\x96\x99\x7e\x94\x5a\x82\x57\x68\x61\x9f\x7b\x45\xe0\x99"
                "\x9e\x4f\x32\x50\x5f\x05\xc8\x11\xae\xc4\x0c\x63\x18\x0e\x02"
                "\x59\x36\x25\x92\x06\x32\xc7\x71\x47\x99\xcc\x0a\x6e\x0a\x58"
                "\x71\x3f\x5e\xb7\x78\xf7\x98\x79\xdf\x74\xa4\xeb\xa9\x00\xfd"
                "\x81\xb3\xcf\x04\x8c\x5d\x7d\xe7\xb2\x82\x90\x49\xbd\x69\xf3"
                "\x08\xe9\x92\xc6\x9e\x41\xba\x74\xd8\x8d\x81\x97\x6f\x86\xab"
                "\xc9\xf1\x02\x31\xb4\xce\x47\xb0\x39\xc8\xba\x51\xa7\x39\xf3"
                "\x71\xa2\x25\x27\x37\x6e\x09\x6f\x19\x59\xbc\x65\xd9\xcd\x12"
                "\xd3\x2c\xa2\x78\xfa\x23\x15\x1a\x82\x41\x91\x1b\xbe\x8a\xe7"
                "\xfe\x3c\x3c\x30\x32\xaa\xe9\xf3\x81\x82\x01\x00\x8f\x54\xa4"
                "\x6a\x2a\xe6\x52\x04\xef\x12\x0e\x24\xda\xca\x64\x98\x9e\xb2"
                "\xfb\x79\x22\x85\x38\xe6\x9d\x40\xa2\x10\x65\x62\x03\x7a\x39"
                "\xed\x01\xb0\x15\xe2\xfc\x56\xa8\xe0\xda\x4e\x12\x9d\xe1\xcb"
                "\x1e\x60\xa1\x35\xb2\xed\x49\xa0\x12\xdf\x6e\x1e\x67\x3a\x0c"
                "\x11\x94\x0e\xf4\x82\x41\xdd\x80\x8e\xb3\x10\xf2\x8a\xc2\x14"
                "\x81\x78\x81\x6a\x04\x32\x63\x52\xa0\xcd\xb1\x77\x00\x87\xb1"
                "\x9f\xcc\x07\x3f\xe0\xca\x16\x60\x8f\x96\xcb\x25\x1c\x3d\x15"
                "\x74\x6d\x91\x77\xac\xb7\xd0\xa6\xee\x66\xc8\x1c\x9f\x51\x75"
                "\x93\x1a\xef\xa9\x4f\x0e\xa2\x90\xe9\x59\xcb\x15\x73\x33\xbc"
                "\x86\x7d\x5e\xb5\x7e\x41\x00\xcf\xc4\x29\x67\x24\x50\x1c\x62"
                "\x27\x86\x1f\x4c\x0c\x06\xa3\xe6\xf0\x5c\x73\x3f\xf9\x3d\x89"
                "\x47\xc2\x71\x39\x76\x93\x6f\x91\x3c\x6a\x6d\x68\x3b\x7b\xbe"
                "\x2b\x74\x63\xc2\x8f\xac\xc5\xed\xa8\x5c\xdf\x0b\xe4\xf8\x61"
                "\xf4\xdc\x98\x9c\x07\x6d\xb2\x73\xa6\x93\xc8\xa6\x55\xf0\x18"
                "\xfa\x8a\xd1\xcb\xf0\xd5\x1f\xe1\xc2\x68\x5f\x84\x6d\x2c\x4e"
                "\xc3\xf1\xf3\x3c\x44\x26\x33\x14\xc3\xb4\xfe\x5f\xdb\xc1\xe5"
                "\xca\xc7\x24\xea\x0e\xe2\x2b\xd1\xf6\xfb\x9e\xa6\x31\xa1\x79"
                "\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f"
                "\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd"
                "\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa3\x27\x80\x20\xee\x75"
                "\xbe\xb3\x52\x54\xbd\x24\x06\x3f\xd9\x32\x48\x19\xe1\x5c\x70"
                "\x85\x92\x11\x6c\x3a\xc1\x4c\x9b\x83\xeb\x05\xa7\x59\xe2\xa0"
                "\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x1e\x5a\xaf\x3e\x46\xf6"
                "\xd4\xdf\x4d\x70\xf0\xa1\xd1\x35\x6d\xf0\x8b\x86\x91\xac\xb2"
                "\xf2\x24\xf0\x1a\xd4\x23\xc0\x21\x8d\x42\xc0\x81\x03\x02\x00"
                "\x00\xa3\x82\x02\x08\x80\x82\x01\x00\xb6\x7b\xe2\x98\x9f\xff"
                "\x6c\x37\xd0\xb6\x64\x19\xfb\xa0\x21\x18\xe2\xc0\xd1\x92\xbd"
                "\x04\xa6\xd2\xb4\x7e\xc6\x6a\x1a\x34\x20\x7b\xfe\x84\xeb\xe8"
                "\xc1\x6f\xfd\xdc\x0a\xfe\x60\x55\xb6\xfc\x86\x5a\x21\xbf\xf1"
                "\x39\xfa\xec\x42\xca\x57\xb3\x3e\x3f\xe6\x26\x5a\xb7\x4a\x5f"
                "\xbb\xb1\xf5\x91\x85\x92\x3e\x6a\x18\x48\x4d\x9e\xdd\x08\x25"
                "\xa3\x3b\x3d\x75\x9a\xbe\xee\x0d\x6e\xd2\x5d\xe2\xbd\xed\x45"
                "\x60\xef\xa0\x37\xfd\xbb\xcf\x30\x97\xf1\x5b\xc8\x9c\x29\x33"
                "\x67\x3e\x23\x33\x7f\x36\xd4\x75\x8b\xa1\xcf\x9e\xe6\xc5\x63"
                "\x63\xb0\x3f\xa0\xc2\xa2\x10\xc9\xb2\x6b\xaa\x67\xc9\xf5\xb8"
                "\xbf\x5b\x97\xe5\x29\xf2\xbb\xc7\x22\x0f\x1f\xc1\xf6\xca\x4a"
                "\x8a\x46\x89\xa0\xca\x4e\x49\x9d\xfc\x23\xd3\xb4\xdb\xc6\x84"
                "\x45\xbd\x9f\x10\x86\xe2\xf0\x47\x7b\x75\xbf\x25\x99\x02\x2c"
                "\xdb\x6b\xd6\x2b\x67\x0d\xcd\x46\x63\xbd\xce\x1c\xc5\x56\x63"
                "\x58\x5b\xc8\xb2\x58\x42\xf6\xaf\xce\x47\xb2\xa9\x2a\x71\x8b"
                "\x82\xf4\x72\xff\xef\xe7\xc1\x70\x12\xfa\xb8\xad\xb2\xfe\xa9"
                "\x14\xe7\xc2\xec\x12\xbf\x29\x5a\x65\x91\x74\x82\xd3\x77\x1f"
                "\x14\xbf\x5f\x41\x11\x6c\x7c\x22\x70\x65\x81\x82\x01\x00\xad"
                "\xe7\x89\xd4\x57\xb8\x30\x35\x4c\x2c\x36\xe1\x20\xab\x3e\x44"
                "\x9d\xb7\x78\x81\xd9\x7d\x0a\x66\x8d\x24\x62\x1d\x3b\x28\xf8"
                "\xca\xdd\x1b\x51\xd7\x05\xc6\xd2\x51\xcc\x64\x58\xc2\x1b\xf1"
                "\xa9\x11\x45\x9c\x1c\x37\xe2\x1e\xa0\x20\xb6\x7e\xae\x75\xc1"
                "\x3b\x52\x2b\x4a\xad\xe6\x2c\xe8\xae\x5b\x10\xda\x82\x68\x00"
                "\xdb\x92\x4c\x92\x7b\x0b\x0b\xcf\x09\x24\x1a\x10\x2d\x76\x76"
                "\x6c\xdc\xe0\x78\xc5\x4b\x4a\x2b\x5f\x21\x01\xb6\xff\x7f\xec"
                "\xf6\xae\x45\x14\x43\xbe\x98\x89\xa8\x79\xf6\x06\xc0\x6d\x45"
                "\x30\xff\x32\x39\x18\xfb\xa6\xfe\x0d\x29\x08\x0d\xf7\xb7\xdf"
                "\xda\x6e\xdc\xcb\xf3\x84\x0e\x03\x45\xbb\x7c\x4c\xcc\x86\xb0"
                "\xaf\xee\x51\x8e\x0d\xed\xe6\xf3\x18\xa4\x86\x3c\xb5\xf7\xbb"
                "\x73\xdf\xc1\x00\x72\xae\x72\xef\x95\x9c\x07\x8e\xa2\x99\x06"
                "\x8e\x24\xf9\x2d\x32\xdb\x13\x72\x79\x04\xa0\xff\x7c\x5f\xf4"
                "\x37\x00\xf2\x62\x31\x47\x72\x73\x4d\xd1\xf3\xa0\x5d\xf5\x42"
                "\x62\x75\x05\xd4\x06\xef\xb5\xa7\x13\xb7\x8f\x17\x1f\x0e\xa5"
                "\xa1\x59\x1c\x82\x7a\x5b\x68\x34\x04\x60\x72\x2b\xd6\x41\x4e"
                "\xb6\xde\x29\xd4\x89\xfb\x66\xfb\xec\x02\xf8\x8b\x1d\xe9\x57"
                "\xa4\x64\x80\x20\x7a\xdc\x65\x52\x0f\xca\x06\x72\x5c\xe4\x65"
                "\x57\x82\x6d\x3f\x57\x1f\xc6\xc6\xe4\x5d\xaf\x08\xda\xe2\x07"
                "\x02\xcb\x42\x3d\x2a\xd0\x81\x40\xf2\x7c\x5f\x61\xec\xbc\xc2"
                "\x8c\xad\xd0\xd3\xcb\x89\xab\xac\xe4\x01\x6f\x90\x60\x6f\x89"
                "\xc0\xd9\xca\x2b\x4b\xfd\x78\x80\xae\xf9\xd0\x3f\x45\x7a\xb2"
                "\x26\x0c\xee\xc5\x06\x0e\x94\x6b\xf8\xfe\x96\x4f\x0d\xa0\x2c"
                "\x66\x78\xa5\x60\xfe\x47\x1e\xa9\x88\x76\x55\x03\xa1\x81\xd3"
                "\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f"
                "\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd"
                "\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa1\x2b\x80\x20\x90\x8f"
                "\xe3\x4c\x7d\xd1\xd6\x33\x62\xe5\x8f\x4c\x92\xbc\x35\x52\x97"
                "\x3b\xe5\x12\xdc\x62\x57\x71\xf9\xe5\x1d\x06\xe5\x5f\x4c\xd9"
                "\x81\x03\x02\x18\x2a\x82\x02\x03\xb8\xa2\x2b\x80\x20\x6f\xe1"
                "\x6e\x14\x5b\xe3\xa8\x1f\x91\x88\x33\xb3\x3e\xdc\x51\x88\x3f"
                "\x7d\x54\x43\xe9\x03\x02\x32\xfb\xbc\x58\x8e\x22\x3d\x56\x35"
                "\x81\x03\x04\x38\x00\x82\x02\x03\x98\xa3\x27\x80\x20\x38\xb9"
                "\xf0\xeb\x68\x8b\x9f\x55\x37\x9a\xec\x07\xd4\xa2\x13\xac\x34"
                "\xa1\x67\x31\x34\xea\xc2\x2f\xef\x13\xe3\x5c\xcf\x8f\x90\x1e"
                "\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x7c\x54\x6a\x6d\x7f\x00"
                "\x52\x31\x03\xe7\xb4\x5b\x1c\x9f\x72\xeb\x3c\x18\x08\xa3\x24"
                "\xb2\x63\x5f\x77\x55\x4a\x42\xdb\x1e\xff\x1e\x81\x03\x02\x00"
                "\x00"s;
            auto const thresh0EncodedCondition =
                "\xa2\x2b\x80\x20\xf8\xf5\xcc\x18\x81\xfd\x7a\xd0\xe8\xf3\xc2"
                "\x2e\xce\xfa\x52\xc6\x71\x5e\xee\xf9\xd8\xe1\x0e\xd9\xba\x93"
                "\x5a\x78\xca\x58\xf1\x8c\x81\x03\x0a\x8c\x4a\x82\x02\x03\xd8"s;
            auto const thresh0EncodedFingerprint =
                "\x30\x82\x01\x80\x80\x01\x04\xa1\x82\x01\x79\xa0\x25\x80\x20"
                "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
                "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
                "\xeb\x4e\x81\x01\x09\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1"
                "\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21"
                "\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa1"
                "\x2b\x80\x20\x87\xee\x85\xd6\x17\xed\x62\x72\xf4\x35\xa8\x0f"
                "\x28\xfc\xaf\x5a\x92\x57\x3c\x6b\xa6\x6a\x07\xbb\xd0\xdd\x98"
                "\x4f\xc4\x4c\x19\x2e\x81\x03\x02\x18\x20\x82\x02\x03\xb8\xa1"
                "\x2b\x80\x20\x90\x8f\xe3\x4c\x7d\xd1\xd6\x33\x62\xe5\x8f\x4c"
                "\x92\xbc\x35\x52\x97\x3b\xe5\x12\xdc\x62\x57\x71\xf9\xe5\x1d"
                "\x06\xe5\x5f\x4c\xd9\x81\x03\x02\x18\x2a\x82\x02\x03\xb8\xa2"
                "\x2b\x80\x20\x6f\xe1\x6e\x14\x5b\xe3\xa8\x1f\x91\x88\x33\xb3"
                "\x3e\xdc\x51\x88\x3f\x7d\x54\x43\xe9\x03\x02\x32\xfb\xbc\x58"
                "\x8e\x22\x3d\x56\x35\x81\x03\x04\x38\x00\x82\x02\x03\x98\xa3"
                "\x27\x80\x20\x38\xb9\xf0\xeb\x68\x8b\x9f\x55\x37\x9a\xec\x07"
                "\xd4\xa2\x13\xac\x34\xa1\x67\x31\x34\xea\xc2\x2f\xef\x13\xe3"
                "\x5c\xcf\x8f\x90\x1e\x81\x03\x01\x00\x00\xa3\x27\x80\x20\xe5"
                "\x15\x0a\xbd\xf6\x06\xbe\xaa\x6c\x81\xf1\x88\x7e\x70\x64\x51"
                "\xeb\x6f\x70\xb1\xdd\xc5\xf1\x20\x53\xf7\xcb\x9f\x7f\xc7\xe4"
                "\x52\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x00\x8b\xe6\x62\xd4"
                "\x30\x65\x1e\x40\xb3\x23\x05\x52\x3a\xf3\x16\xda\x09\xbe\x79"
                "\x5f\x41\xc9\x03\x93\x34\x5b\x7c\x24\x87\x62\xfa\x81\x03\x02"
                "\x00\x00\xa4\x27\x80\x20\x7c\x54\x6a\x6d\x7f\x00\x52\x31\x03"
                "\xe7\xb4\x5b\x1c\x9f\x72\xeb\x3c\x18\x08\xa3\x24\xb2\x63\x5f"
                "\x77\x55\x4a\x42\xdb\x1e\xff\x1e\x81\x03\x02\x00\x00"s;
            check(
                &thresh0,
                thresh0Msg,
                thresh0EncodedFulfillment,
                thresh0EncodedCondition,
                thresh0EncodedFingerprint);
        }
    }

    void
    testThresh36()
    {
        testcase("Thresh36");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * thresh0
        // ** Preim27Cond
        // ** Rsa28Cond
        // ** Ed29Cond
        // ** prefix1
        // *** prefix2
        // **** thresh3
        // ***** Preim10Cond
        // ***** Rsa11Cond
        // ***** Ed12Cond
        // ***** rsa4
        // ***** thresh5
        // ****** Preim7Cond
        // ****** Rsa8Cond
        // ****** Ed9Cond
        // ****** rsa6
        // ** prefix13
        // *** prefix14
        // **** thresh15
        // ***** Preim22Cond
        // ***** Rsa23Cond
        // ***** Ed24Cond
        // ***** rsa16
        // ***** thresh17
        // ****** Preim19Cond
        // ****** Rsa20Cond
        // ****** Ed21Cond
        // ****** rsa18
        // ** thresh25
        // *** rsa26

        auto const rsa4Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa4PublicKey{
            {0xbe, 0x09, 0xc5, 0xa4, 0x27, 0x29, 0xdf, 0xd4, 0x67, 0x76, 0xbe,
             0xbf, 0x2c, 0xf3, 0xa2, 0x0b, 0x42, 0xe4, 0xbf, 0xeb, 0xdd, 0x67,
             0x20, 0xfb, 0x7a, 0x27, 0x93, 0xc0, 0x78, 0x47, 0x78, 0xd7, 0x15,
             0x32, 0xee, 0x38, 0x81, 0x0d, 0x36, 0xa2, 0xc4, 0x65, 0x44, 0xe6,
             0x62, 0x26, 0xb9, 0x58, 0x13, 0xa4, 0x15, 0x82, 0xab, 0xb1, 0x16,
             0x61, 0xfc, 0x01, 0x98, 0xc6, 0x1a, 0x69, 0xc6, 0xba, 0x39, 0x3f,
             0x01, 0x55, 0x3d, 0xd7, 0x8e, 0x14, 0x42, 0x6d, 0x78, 0x74, 0x9b,
             0x28, 0xcb, 0x31, 0x39, 0x98, 0x5a, 0x11, 0xdc, 0xc1, 0x18, 0x9d,
             0x8d, 0xb0, 0xcd, 0x1b, 0x4c, 0x10, 0xab, 0x14, 0x64, 0x19, 0xf1,
             0x33, 0x15, 0x45, 0xc8, 0x92, 0x82, 0x03, 0x82, 0x8a, 0xaa, 0xad,
             0x94, 0xfc, 0x24, 0x11, 0x96, 0x99, 0x7e, 0x94, 0x5a, 0x82, 0x57,
             0x68, 0x61, 0x9f, 0x7b, 0x45, 0xe0, 0x99, 0x9e, 0x4f, 0x32, 0x50,
             0x5f, 0x05, 0xc8, 0x11, 0xae, 0xc4, 0x0c, 0x63, 0x18, 0x0e, 0x02,
             0x59, 0x36, 0x25, 0x92, 0x06, 0x32, 0xc7, 0x71, 0x47, 0x99, 0xcc,
             0x0a, 0x6e, 0x0a, 0x58, 0x71, 0x3f, 0x5e, 0xb7, 0x78, 0xf7, 0x98,
             0x79, 0xdf, 0x74, 0xa4, 0xeb, 0xa9, 0x00, 0xfd, 0x81, 0xb3, 0xcf,
             0x04, 0x8c, 0x5d, 0x7d, 0xe7, 0xb2, 0x82, 0x90, 0x49, 0xbd, 0x69,
             0xf3, 0x08, 0xe9, 0x92, 0xc6, 0x9e, 0x41, 0xba, 0x74, 0xd8, 0x8d,
             0x81, 0x97, 0x6f, 0x86, 0xab, 0xc9, 0xf1, 0x02, 0x31, 0xb4, 0xce,
             0x47, 0xb0, 0x39, 0xc8, 0xba, 0x51, 0xa7, 0x39, 0xf3, 0x71, 0xa2,
             0x25, 0x27, 0x37, 0x6e, 0x09, 0x6f, 0x19, 0x59, 0xbc, 0x65, 0xd9,
             0xcd, 0x12, 0xd3, 0x2c, 0xa2, 0x78, 0xfa, 0x23, 0x15, 0x1a, 0x82,
             0x41, 0x91, 0x1b, 0xbe, 0x8a, 0xe7, 0xfe, 0x3c, 0x3c, 0x30, 0x32,
             0xaa, 0xe9, 0xf3}};
        std::array<std::uint8_t, 256> const rsa4Sig{
            {0x70, 0x2f, 0x61, 0x3c, 0x48, 0x3f, 0x46, 0x75, 0x41, 0x96, 0xe0,
             0xb6, 0x67, 0x18, 0x94, 0x0e, 0xeb, 0x1c, 0x23, 0xb8, 0xfd, 0xc1,
             0xa1, 0x8f, 0x68, 0xa0, 0x5e, 0xeb, 0x32, 0xc3, 0x26, 0xea, 0x0d,
             0xef, 0x9a, 0x29, 0xea, 0xea, 0x29, 0xda, 0xbc, 0x17, 0x52, 0x68,
             0x33, 0xd2, 0x8f, 0xb3, 0xd2, 0xaa, 0x47, 0x08, 0x59, 0xe1, 0xae,
             0x90, 0x3b, 0xc2, 0xea, 0xed, 0x14, 0xd7, 0x6e, 0xce, 0xe9, 0x5a,
             0x7d, 0x4f, 0xb7, 0x4b, 0x11, 0xec, 0xd6, 0x16, 0xf7, 0xdc, 0x4e,
             0x2c, 0x8f, 0xe5, 0xdd, 0xd6, 0xb7, 0xd2, 0xeb, 0xc5, 0xf6, 0xdc,
             0xe9, 0x87, 0xfd, 0x62, 0xd9, 0xc9, 0x98, 0x15, 0x27, 0xcb, 0xb1,
             0x4c, 0x09, 0xf4, 0xb0, 0x0c, 0xf1, 0x2a, 0x54, 0x1a, 0x1e, 0x90,
             0xa6, 0x90, 0x5d, 0xbe, 0x71, 0x24, 0x3d, 0xb4, 0x8c, 0x27, 0x56,
             0xfa, 0x1f, 0x58, 0xda, 0x95, 0xa0, 0x4d, 0xc8, 0x35, 0x42, 0x7e,
             0xe1, 0xe1, 0xda, 0x16, 0x5a, 0x57, 0xc6, 0xfa, 0xe0, 0xc8, 0x5a,
             0x4b, 0x36, 0x40, 0x77, 0x81, 0xe5, 0xb4, 0x90, 0x1e, 0x70, 0x64,
             0xfb, 0xfb, 0x80, 0x52, 0x9c, 0x16, 0x1f, 0x64, 0xe5, 0x88, 0x75,
             0x60, 0xc2, 0x2c, 0x08, 0xe5, 0x5f, 0x5d, 0x8e, 0x85, 0x5d, 0xe2,
             0xfb, 0x75, 0x34, 0x9b, 0x77, 0xc3, 0xa7, 0x37, 0xb5, 0x28, 0xaf,
             0x97, 0x9a, 0x40, 0x1e, 0x30, 0x46, 0xba, 0xdd, 0xb3, 0xe8, 0x19,
             0x1a, 0xda, 0xf5, 0x88, 0xea, 0x46, 0x93, 0xa3, 0x1f, 0x69, 0xb4,
             0xbb, 0x07, 0x3c, 0x8b, 0x9e, 0x03, 0xca, 0x89, 0xf4, 0x62, 0x34,
             0xea, 0x71, 0x76, 0x45, 0xe8, 0xbd, 0x3e, 0xcc, 0xe9, 0xd4, 0xf5,
             0x79, 0x43, 0xaf, 0xab, 0xa5, 0x20, 0xf4, 0x91, 0x7f, 0xa1, 0x04,
             0x3a, 0x8c, 0x77, 0xb5, 0x9b, 0x7d, 0xb6, 0xd2, 0xa6, 0x3c, 0x59,
             0xbe, 0xf6, 0xbe}};
        auto const rsa6Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa6PublicKey{
            {0xd0, 0x07, 0xfc, 0x9d, 0xb0, 0xa1, 0xa6, 0x40, 0xe4, 0x52, 0x30,
             0x42, 0x74, 0xfd, 0x35, 0x04, 0xde, 0x45, 0x68, 0xb3, 0x22, 0xdd,
             0xff, 0x41, 0x43, 0x69, 0x33, 0xc0, 0xff, 0x35, 0xb6, 0x6d, 0x15,
             0xe9, 0x54, 0x15, 0xeb, 0x1d, 0x07, 0xe2, 0x25, 0x2b, 0xdb, 0xaa,
             0x16, 0x8d, 0x0d, 0x7f, 0x05, 0xf0, 0xd2, 0x7d, 0xb4, 0x9b, 0x51,
             0x19, 0x20, 0x1e, 0x3d, 0xba, 0x50, 0x9e, 0x51, 0x13, 0x81, 0x43,
             0x55, 0x96, 0xca, 0xdb, 0x88, 0x1f, 0xef, 0x2d, 0x38, 0x3f, 0xae,
             0x8d, 0xac, 0xc8, 0x6f, 0x2b, 0xd5, 0xf0, 0x34, 0x1a, 0x99, 0x00,
             0x7c, 0x6d, 0xb3, 0x1b, 0x1d, 0x68, 0xdb, 0xf8, 0x1c, 0x59, 0x3a,
             0x63, 0x38, 0x7c, 0x1c, 0x14, 0xbc, 0x22, 0xcf, 0xc8, 0x9a, 0xc6,
             0x96, 0x6f, 0x3d, 0x03, 0x0b, 0x61, 0x6b, 0x7d, 0x75, 0x97, 0xe8,
             0x25, 0xb8, 0x2f, 0xfa, 0xf4, 0x07, 0x44, 0xdf, 0x00, 0x3d, 0xff,
             0x0d, 0xd5, 0x7f, 0x7f, 0xf3, 0x0c, 0x13, 0xac, 0x8d, 0xf8, 0x8c,
             0x79, 0xc5, 0xf3, 0x29, 0xdc, 0x23, 0x65, 0xd3, 0xd1, 0x1c, 0xa6,
             0x14, 0x78, 0x6a, 0x1a, 0xe3, 0x15, 0x8d, 0x8b, 0xdc, 0xa0, 0x5a,
             0xc7, 0x82, 0xb0, 0x03, 0x6c, 0x71, 0x43, 0x59, 0x24, 0xc7, 0x50,
             0x64, 0xb2, 0xa7, 0x69, 0xf5, 0xbd, 0xe6, 0x5e, 0xaa, 0x77, 0x59,
             0x60, 0x36, 0xc0, 0xe3, 0x42, 0x7f, 0x05, 0x3b, 0x4c, 0x02, 0x0e,
             0x70, 0x5a, 0x70, 0xc5, 0x2a, 0xeb, 0x94, 0x4d, 0x15, 0x09, 0xef,
             0xbb, 0x58, 0x42, 0x68, 0x05, 0x59, 0x70, 0xa0, 0x17, 0xb2, 0x8e,
             0xdf, 0x7b, 0x40, 0x5d, 0x21, 0x1e, 0xfe, 0x62, 0x58, 0xde, 0xfb,
             0x14, 0x91, 0x18, 0xf3, 0x4f, 0x9b, 0x36, 0x55, 0xcf, 0xb3, 0x5e,
             0xec, 0x4f, 0xcc, 0x6d, 0x13, 0x58, 0xc8, 0xa3, 0xa3, 0xee, 0x23,
             0x8a, 0xc2, 0xbf}};
        std::array<std::uint8_t, 256> const rsa6Sig{
            {0x1f, 0xf0, 0xed, 0xe5, 0xbe, 0xfb, 0xcc, 0x37, 0xa1, 0x3c, 0x05,
             0x0e, 0x6c, 0x43, 0x9f, 0x5a, 0xd7, 0xba, 0x5f, 0xea, 0x7e, 0x79,
             0x23, 0xf0, 0xd4, 0xa6, 0xa5, 0x0c, 0x00, 0x08, 0x74, 0x69, 0x59,
             0xcf, 0x9c, 0xa5, 0x77, 0x61, 0x88, 0xb8, 0x80, 0x1d, 0x1f, 0xf8,
             0x4d, 0xd8, 0x89, 0xac, 0x06, 0x40, 0x03, 0xcc, 0xb7, 0xea, 0x52,
             0xfc, 0x48, 0x85, 0xf6, 0x87, 0xbc, 0x1d, 0x4e, 0xac, 0x0e, 0xcc,
             0x61, 0x09, 0x74, 0xb5, 0x5e, 0x3b, 0x7c, 0xf8, 0x55, 0xb5, 0x06,
             0x22, 0xf4, 0xc6, 0xef, 0xfc, 0xbf, 0x14, 0x98, 0xa2, 0x29, 0xe0,
             0xb6, 0x95, 0x5e, 0x25, 0xfd, 0x7a, 0x63, 0x7a, 0x78, 0x4e, 0xc1,
             0xeb, 0x0c, 0x87, 0x92, 0x53, 0xd7, 0xde, 0x5d, 0x06, 0xc1, 0x68,
             0xd1, 0x23, 0x84, 0xec, 0x8f, 0x49, 0xe3, 0xe7, 0x47, 0xfe, 0x16,
             0xf7, 0x57, 0x6d, 0xa4, 0xbb, 0xf0, 0x19, 0x57, 0xa2, 0x9b, 0x99,
             0x29, 0xd8, 0xea, 0xb7, 0x33, 0xf3, 0x7a, 0xc7, 0x20, 0x29, 0x9c,
             0x8d, 0xa1, 0x5b, 0xe3, 0x59, 0x6d, 0x89, 0x00, 0x5d, 0xfd, 0x81,
             0xb3, 0xbd, 0x21, 0xec, 0xc4, 0x30, 0x3d, 0x7d, 0x98, 0x2b, 0x47,
             0xdb, 0x9b, 0x4c, 0x35, 0x58, 0x5c, 0x87, 0x05, 0x98, 0xae, 0xf9,
             0x96, 0x68, 0x25, 0xd2, 0x4c, 0x6b, 0xc5, 0x1f, 0xe2, 0xa7, 0x52,
             0xed, 0xb3, 0x54, 0x18, 0xd6, 0x45, 0xeb, 0xe1, 0x61, 0x53, 0x4c,
             0xd3, 0x76, 0xfe, 0x3c, 0x49, 0x37, 0x56, 0xff, 0xa1, 0xd7, 0x27,
             0x74, 0x3c, 0xb4, 0xc8, 0xb1, 0xa9, 0x7c, 0x14, 0xbc, 0x88, 0xc3,
             0xc3, 0x81, 0xdc, 0x33, 0x69, 0x4c, 0x32, 0xc2, 0x0d, 0x4c, 0x05,
             0xeb, 0x22, 0x08, 0x72, 0xe8, 0x4f, 0x41, 0xa9, 0x38, 0xaa, 0x40,
             0xa0, 0x06, 0x54, 0x1a, 0x1d, 0xb8, 0x97, 0x8b, 0xd4, 0x20, 0xf0,
             0x47, 0x85, 0x55}};
        auto const thresh5Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim7CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim7Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim7CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa8CondConditionFingerprint =
            "\xd1\xb5\x1d\x35\x99\x9d\xb4\xc1\xaa\x81\x4d\xd7\x0e\xa9\x2a"
            "\x20\x7f\xe5\x5c\x75\xe8\x57\x8b\xbf\xe8\xd7\x1c\x7e\xb2\xbc"
            "\x91\x16"s;
        Condition const Rsa8Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa8CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed9CondConditionFingerprint =
            "\x92\xfa\xfc\xc6\x2f\xe2\x8d\x8d\x25\x7c\xd4\x46\xab\xea\x82"
            "\xd0\x3f\x36\xbe\x1d\x11\x2b\xa0\xfe\xfe\xd4\x00\xd5\x7d\x9b"
            "\xf6\xc9"s;
        Condition const Ed9Cond{Type::ed25519Sha256,
                                131072,
                                makeSlice(Ed9CondConditionFingerprint),
                                std::bitset<5>{0}};
        auto const thresh3Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim10CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim10Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim10CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa11CondConditionFingerprint =
            "\xaf\x93\xfd\x22\x45\xc2\x08\xab\x43\xf7\x45\x56\x63\xec\xaf"
            "\x15\x33\xa0\x2a\xb4\x9e\x15\xb4\x6e\xda\x87\x35\xde\x09\x4b"
            "\x06\x31"s;
        Condition const Rsa11Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa11CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed12CondConditionFingerprint =
            "\x55\xcc\xd1\xa2\x2c\x90\x8d\xe3\x2e\x42\xd4\xe0\x65\xb2\xf7"
            "\xda\xc0\x07\x1e\xd3\x23\x0f\xfe\x78\x13\xa2\x86\x61\xc4\x34"
            "\x28\x50"s;
        Condition const Ed12Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed12CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const prefix2Prefix = "P2"s;
        auto const prefix2Msg = "P1abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix2MaxMsgLength = 14;
        auto const prefix1Prefix = "P1"s;
        auto const prefix1Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix1MaxMsgLength = 14;
        auto const rsa16Msg = "P14P13abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa16PublicKey{
            {0xe8, 0x03, 0x7c, 0xff, 0x40, 0x68, 0x5d, 0xc7, 0xb8, 0xd0, 0x9f,
             0x9a, 0x83, 0xf9, 0x02, 0xe6, 0xfe, 0xa5, 0xb9, 0x0e, 0x9f, 0xdc,
             0x44, 0x74, 0x59, 0x3e, 0xef, 0x61, 0xdc, 0xb6, 0x4b, 0x49, 0xfe,
             0x1a, 0x67, 0x73, 0x38, 0x7b, 0x1c, 0xb4, 0xfa, 0x24, 0x39, 0xe4,
             0xbb, 0x74, 0x1b, 0xe4, 0x66, 0xfd, 0x85, 0x6f, 0x8d, 0x92, 0x3e,
             0x04, 0x70, 0xb4, 0x21, 0x01, 0xcf, 0x07, 0xf2, 0xeb, 0x11, 0x2c,
             0xaa, 0x9d, 0x37, 0xbb, 0xf3, 0x8d, 0x9b, 0xbc, 0x17, 0x60, 0xe4,
             0xe3, 0xae, 0x79, 0x92, 0x97, 0x3a, 0xe8, 0xd8, 0x74, 0xc5, 0x9d,
             0xeb, 0x15, 0x22, 0x8b, 0xae, 0x51, 0x13, 0x78, 0x21, 0xca, 0xbd,
             0x6a, 0xa6, 0x24, 0x93, 0x8f, 0xe6, 0x23, 0x12, 0x52, 0xe1, 0x75,
             0xda, 0x55, 0x26, 0xcc, 0x95, 0xa0, 0x75, 0x31, 0x0a, 0x6e, 0x27,
             0x14, 0x63, 0x70, 0x04, 0xd7, 0xe4, 0x36, 0x21, 0x3a, 0x9e, 0xff,
             0xe3, 0x16, 0x21, 0xc1, 0xfc, 0x6d, 0xc5, 0xe2, 0x80, 0xb9, 0x26,
             0xc6, 0x4f, 0x3c, 0xc2, 0xd5, 0x25, 0xf1, 0xb9, 0x88, 0xac, 0xc7,
             0xfe, 0xde, 0xd6, 0x7e, 0x60, 0x41, 0x82, 0xde, 0x25, 0x28, 0x1f,
             0x09, 0xda, 0x10, 0x01, 0x27, 0xf4, 0x63, 0x10, 0xa2, 0x4e, 0x1d,
             0xc2, 0x19, 0x32, 0xb3, 0x87, 0xc2, 0xcf, 0xac, 0x3c, 0x2b, 0xcd,
             0x5e, 0x79, 0x1f, 0x19, 0xea, 0x70, 0x56, 0x31, 0x59, 0x0e, 0x13,
             0x95, 0x05, 0xb7, 0xf9, 0xff, 0xd9, 0x0b, 0x49, 0xce, 0xd0, 0x6f,
             0xae, 0x90, 0x44, 0xb3, 0x6b, 0x60, 0xc9, 0x72, 0xf7, 0x83, 0x24,
             0x5e, 0x15, 0x25, 0x1c, 0xb8, 0x76, 0x71, 0x84, 0x33, 0x14, 0xf1,
             0xf0, 0x07, 0x7f, 0x2f, 0x95, 0xee, 0x3c, 0x36, 0x67, 0x36, 0xb4,
             0xae, 0x1c, 0xb5, 0x02, 0xa2, 0xdc, 0x0e, 0xed, 0xf2, 0x63, 0x0d,
             0x52, 0x61, 0xe3}};
        std::array<std::uint8_t, 256> const rsa16Sig{
            {0x26, 0x8b, 0x4d, 0x1b, 0x8d, 0xc9, 0xab, 0xdf, 0x6f, 0xe3, 0x68,
             0x52, 0xb0, 0xce, 0x66, 0x61, 0x1a, 0x87, 0xb6, 0xa6, 0x57, 0x2c,
             0x84, 0x21, 0xa6, 0xf3, 0x88, 0x55, 0x7b, 0x3a, 0x70, 0x07, 0x12,
             0xc7, 0x34, 0xda, 0x38, 0x05, 0x65, 0xe8, 0xb4, 0x26, 0x17, 0x68,
             0xd7, 0xfe, 0xda, 0x23, 0xe4, 0xfb, 0x58, 0x21, 0x64, 0x36, 0xaf,
             0x77, 0x84, 0xce, 0x37, 0xf4, 0xac, 0x35, 0x3d, 0xd5, 0x07, 0x22,
             0x56, 0xda, 0x96, 0x46, 0xeb, 0xdd, 0x6b, 0x1d, 0x09, 0xba, 0x79,
             0x8e, 0xf3, 0x6e, 0xb2, 0x23, 0x74, 0xb3, 0xdf, 0x1b, 0x50, 0x9d,
             0x57, 0xac, 0xf8, 0xdf, 0x88, 0x9e, 0x76, 0x15, 0x3d, 0x39, 0x0c,
             0x93, 0xa5, 0x3d, 0x2b, 0xbb, 0xa2, 0x00, 0xe9, 0x26, 0x37, 0x0a,
             0x5a, 0x95, 0x5c, 0xb9, 0x1c, 0x0e, 0x9f, 0xfe, 0x14, 0x51, 0x2c,
             0x76, 0x07, 0xc8, 0xfc, 0x43, 0xaa, 0x4a, 0x8e, 0xe5, 0x1f, 0xd1,
             0x58, 0x65, 0xba, 0xa4, 0x57, 0x25, 0x2c, 0xd1, 0x02, 0x13, 0xc8,
             0x8d, 0x14, 0xb1, 0xe8, 0x80, 0x0c, 0xd2, 0xae, 0xb0, 0x47, 0x80,
             0xcd, 0x48, 0x61, 0xa4, 0xbf, 0x73, 0xab, 0x8a, 0x5d, 0xd5, 0xf4,
             0x62, 0x63, 0x0c, 0x1e, 0x8b, 0xe8, 0x78, 0xd4, 0xae, 0xc8, 0xff,
             0x77, 0xc0, 0x91, 0xdc, 0x21, 0xb4, 0xdc, 0x2d, 0x18, 0x1e, 0x7e,
             0x26, 0x4c, 0xf6, 0x42, 0x54, 0xbb, 0x89, 0x1b, 0x2b, 0x5c, 0x69,
             0x32, 0xe1, 0x3e, 0xe4, 0x81, 0xb9, 0xeb, 0xd4, 0x42, 0x3c, 0x89,
             0x6d, 0x90, 0xf6, 0xf4, 0x8b, 0xb4, 0xce, 0x7f, 0x7f, 0xb4, 0x61,
             0x0a, 0xbe, 0x3b, 0x24, 0xa0, 0xd8, 0x5f, 0xf9, 0x06, 0xbe, 0x57,
             0xd2, 0x67, 0xde, 0x83, 0xa8, 0xa1, 0x7f, 0x5a, 0xa3, 0x68, 0x97,
             0x2c, 0x7c, 0x54, 0x16, 0x4a, 0x27, 0x01, 0x48, 0x3b, 0x18, 0xbc,
             0x6d, 0x49, 0x88}};
        auto const rsa18Msg = "P14P13abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa18PublicKey{
            {0xee, 0x21, 0x9d, 0x3a, 0x07, 0x91, 0x46, 0x8c, 0x0b, 0xfe, 0x9c,
             0xe9, 0x61, 0x7b, 0xd4, 0xf4, 0x10, 0x59, 0xe6, 0x20, 0x0d, 0xd2,
             0x48, 0x5f, 0xf8, 0x7e, 0x89, 0xf3, 0x16, 0x39, 0x5d, 0xc1, 0x53,
             0x72, 0x06, 0x1a, 0x36, 0xe7, 0x3f, 0x62, 0xcb, 0xc2, 0xbd, 0x44,
             0x9d, 0xa9, 0x0f, 0xb2, 0x03, 0xa8, 0xc7, 0xca, 0xaa, 0x6b, 0x2a,
             0x7b, 0xfe, 0x18, 0x93, 0x0c, 0x0e, 0x8e, 0x75, 0x56, 0xda, 0x2e,
             0x47, 0x6f, 0x14, 0x6a, 0x5b, 0xfd, 0x8c, 0x70, 0xda, 0x4b, 0x43,
             0xc8, 0x45, 0x51, 0x13, 0x0b, 0x22, 0x2f, 0x1a, 0x5f, 0x5c, 0x59,
             0x4c, 0xa0, 0x3f, 0x85, 0xd2, 0x2f, 0x81, 0x37, 0x57, 0x40, 0x51,
             0xb5, 0xf3, 0x1c, 0x20, 0x5b, 0x31, 0x95, 0xc7, 0x4b, 0x02, 0xb0,
             0x64, 0x9f, 0xdc, 0xcb, 0xc0, 0xa7, 0x76, 0x95, 0xbe, 0x4a, 0x1e,
             0xcb, 0xf7, 0x54, 0xcc, 0xa7, 0x9b, 0x51, 0xdd, 0xe5, 0x9f, 0xa0,
             0xbb, 0x2d, 0x4e, 0x8b, 0xf0, 0x24, 0xbb, 0xbf, 0xc3, 0xac, 0x4e,
             0x17, 0xfc, 0xd5, 0xf6, 0x6e, 0x3d, 0x78, 0xad, 0x5e, 0x68, 0x58,
             0xd7, 0x09, 0x3d, 0x1f, 0xd9, 0xf3, 0xc2, 0x7b, 0x62, 0x45, 0xe1,
             0xe9, 0xbe, 0x89, 0x72, 0x87, 0x40, 0x1d, 0x28, 0x9b, 0xf6, 0xc6,
             0x92, 0x23, 0x80, 0xaa, 0x05, 0x38, 0xaf, 0x97, 0x4c, 0x10, 0xde,
             0x84, 0x60, 0x13, 0x17, 0xda, 0xb9, 0xb0, 0xfc, 0x48, 0x09, 0x83,
             0x3f, 0x51, 0x75, 0x19, 0xad, 0x68, 0x35, 0xc7, 0x8c, 0xb0, 0xb3,
             0xd8, 0xff, 0x0f, 0xee, 0x77, 0xb4, 0x50, 0x3a, 0x5b, 0x92, 0x23,
             0xf9, 0x0f, 0xf5, 0x60, 0x86, 0x12, 0x57, 0xad, 0x52, 0xbe, 0x88,
             0x8a, 0x40, 0x08, 0x3e, 0x02, 0x0e, 0x2f, 0x1b, 0xa9, 0x29, 0x28,
             0x2b, 0x15, 0x53, 0x89, 0xef, 0x64, 0x1a, 0xc3, 0x4a, 0x12, 0x17,
             0x26, 0xb5, 0xeb}};
        std::array<std::uint8_t, 256> const rsa18Sig{
            {0x69, 0xdf, 0x69, 0x50, 0x25, 0x31, 0x3d, 0xac, 0x45, 0x17, 0x83,
             0xc1, 0xc4, 0x0c, 0x4f, 0x8f, 0x34, 0xfc, 0x81, 0xb9, 0xff, 0xb6,
             0x0b, 0x99, 0x9d, 0x44, 0xe8, 0x01, 0x5a, 0x16, 0x31, 0x08, 0xbe,
             0x78, 0xf8, 0x04, 0xe1, 0x6c, 0x82, 0x0e, 0x2f, 0xd5, 0xa8, 0x59,
             0x7d, 0x3b, 0x72, 0x78, 0xe1, 0xc2, 0x61, 0xaa, 0x87, 0x29, 0x4c,
             0x48, 0x12, 0xd5, 0x78, 0xeb, 0x78, 0x74, 0x4d, 0x40, 0xc6, 0x16,
             0x0d, 0xbf, 0x9d, 0x36, 0x17, 0xc8, 0x81, 0x54, 0x2a, 0xfa, 0x27,
             0x9a, 0xc6, 0x81, 0x55, 0xe8, 0xe6, 0x67, 0x44, 0x20, 0xc5, 0x37,
             0xcf, 0xb6, 0xda, 0xf7, 0xb5, 0x7a, 0xcc, 0xd6, 0xe4, 0x44, 0x04,
             0xdf, 0x36, 0xc7, 0x30, 0x9a, 0xff, 0xcb, 0x35, 0x0c, 0xf4, 0x27,
             0x32, 0xec, 0x2a, 0x04, 0xd9, 0x77, 0xcf, 0x4f, 0x71, 0xa7, 0xaa,
             0x5f, 0x17, 0xdf, 0xbf, 0x54, 0x67, 0xf1, 0xc0, 0x98, 0x93, 0x6b,
             0xc6, 0xd2, 0xc7, 0xa1, 0x20, 0xbe, 0x87, 0x4d, 0x1a, 0x19, 0xfb,
             0x2b, 0x28, 0xf2, 0xac, 0x55, 0xa6, 0x26, 0x40, 0x9b, 0xb8, 0x18,
             0x9f, 0x9c, 0xe9, 0x8d, 0x17, 0xa5, 0xea, 0xa0, 0xa3, 0xf0, 0x9a,
             0x68, 0x19, 0x5d, 0x20, 0xf2, 0x09, 0xc6, 0xdb, 0x4d, 0xa1, 0x63,
             0x34, 0x53, 0xaf, 0x7b, 0x53, 0x66, 0xfa, 0x19, 0x97, 0x7a, 0xf3,
             0x48, 0x6e, 0x1a, 0x4b, 0x28, 0x0a, 0x7f, 0xc6, 0x7e, 0xc8, 0xd8,
             0x59, 0x09, 0xbd, 0xe8, 0x9e, 0xbf, 0x0e, 0x38, 0x1b, 0x6b, 0xd2,
             0x69, 0x59, 0x20, 0xbe, 0x66, 0xff, 0x80, 0x05, 0x0f, 0xef, 0x51,
             0x44, 0x80, 0x93, 0x78, 0x5f, 0x22, 0x78, 0xb1, 0x4c, 0x10, 0xf7,
             0xa8, 0x34, 0x87, 0x4a, 0xb4, 0xcd, 0x46, 0xeb, 0xcd, 0x0e, 0x80,
             0x8a, 0x55, 0x42, 0x19, 0x5c, 0x9d, 0xc5, 0x2a, 0x8a, 0x61, 0x11,
             0x5a, 0xbe, 0x68}};
        auto const thresh17Msg = "P14P13abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim19CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim19Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim19CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa20CondConditionFingerprint =
            "\x8d\xb0\x2c\xb1\x28\xc3\xf4\x97\x50\x84\x64\x57\xca\xf4\x9d"
            "\x63\x08\x73\xfc\xde\x2f\x90\xf0\xf2\xec\x79\xa9\xc6\xa3\xf1"
            "\x33\xfd"s;
        Condition const Rsa20Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa20CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed21CondConditionFingerprint =
            "\x95\x3c\x86\x65\x91\x76\x69\x6b\x72\x61\xaa\x76\x15\x2a\xd7"
            "\x25\x4f\x32\xb7\x73\x7a\xb2\x49\x0c\x0b\xdf\xb5\x4e\x4a\x8b"
            "\xf7\x65"s;
        Condition const Ed21Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed21CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const thresh15Msg = "P14P13abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim22CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim22Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim22CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa23CondConditionFingerprint =
            "\x4a\x64\xbf\x23\xa9\x2b\xec\x55\x00\x3d\x55\xf5\xbf\x3f\x26"
            "\x49\x18\xbb\xe0\xda\xf8\x0c\xf4\x5c\x8a\x33\x74\xb6\x58\xa4"
            "\x38\x30"s;
        Condition const Rsa23Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa23CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed24CondConditionFingerprint =
            "\x6b\xf3\xe3\x0f\x92\x6d\x45\x8d\xae\xd2\x8a\x2a\x3e\x53\x37"
            "\x1f\x57\x82\x21\x60\xe4\x5b\x88\x9a\x9d\x13\xa2\x56\x13\x88"
            "\x9e\x21"s;
        Condition const Ed24Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed24CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const prefix14Prefix = "P14"s;
        auto const prefix14Msg = "P13abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix14MaxMsgLength = 14;
        auto const prefix13Prefix = "P13"s;
        auto const prefix13Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix13MaxMsgLength = 14;
        auto const rsa26Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa26PublicKey{
            {0xb5, 0x57, 0xe1, 0x34, 0xbf, 0x2e, 0x84, 0x70, 0x7c, 0x38, 0x6e,
             0x15, 0x48, 0x91, 0xa2, 0x92, 0x5e, 0xcd, 0x38, 0x82, 0x1e, 0xd9,
             0x87, 0x29, 0x5c, 0xbe, 0x27, 0x83, 0x24, 0xc4, 0x29, 0xa3, 0x5a,
             0x77, 0x08, 0xca, 0x20, 0xf3, 0xc2, 0xb7, 0xb8, 0xe8, 0x38, 0xbc,
             0x88, 0xfe, 0x33, 0x91, 0xcf, 0x15, 0x24, 0x52, 0x3d, 0x98, 0x86,
             0xc1, 0xc7, 0xdd, 0xb3, 0xfe, 0xfe, 0xcd, 0xc6, 0x72, 0x58, 0x1a,
             0x91, 0xb5, 0x41, 0xe0, 0xbb, 0xf9, 0xa9, 0x4e, 0x9d, 0x54, 0xa5,
             0xcb, 0x4a, 0xee, 0xd7, 0x04, 0xa4, 0xd7, 0x32, 0x6a, 0x28, 0x73,
             0xd9, 0x37, 0x14, 0x1a, 0x02, 0x65, 0x08, 0xf7, 0x8f, 0x2f, 0x54,
             0x78, 0x4d, 0x3b, 0x2a, 0xdd, 0x39, 0xdc, 0x5a, 0x37, 0xde, 0x2b,
             0x53, 0x7f, 0x2e, 0xf6, 0x9a, 0x30, 0x37, 0xa0, 0x13, 0xd7, 0x0f,
             0xe1, 0x22, 0xc7, 0xda, 0xf6, 0xb4, 0xda, 0x66, 0x9d, 0xe5, 0xfe,
             0x86, 0x0e, 0x44, 0xab, 0x0e, 0x4d, 0xf5, 0x19, 0xb5, 0x7a, 0x6a,
             0x31, 0x1d, 0x69, 0x49, 0xb9, 0x3f, 0xf6, 0x36, 0x46, 0x43, 0x98,
             0x79, 0xab, 0x66, 0x31, 0x88, 0x9b, 0xf7, 0xa4, 0x9e, 0x94, 0xb3,
             0x84, 0x5a, 0xb8, 0x83, 0xdf, 0xab, 0xc9, 0x5a, 0x22, 0xa6, 0x61,
             0x1a, 0xe7, 0x7f, 0x17, 0x28, 0xea, 0x2b, 0xb8, 0xcc, 0x3f, 0xdb,
             0xc6, 0x7f, 0x8b, 0xcb, 0x44, 0xda, 0x3e, 0x92, 0xda, 0x61, 0x47,
             0xda, 0x59, 0x4c, 0x59, 0x7e, 0x6b, 0x5e, 0x7f, 0x88, 0x47, 0x53,
             0x12, 0x06, 0x12, 0x0d, 0x0c, 0x78, 0xa4, 0x5a, 0x10, 0x0d, 0x07,
             0xd7, 0x3f, 0xca, 0x32, 0xed, 0xd5, 0x51, 0xf3, 0x3d, 0x99, 0x9d,
             0x32, 0xf6, 0x59, 0x17, 0x0a, 0x0f, 0x51, 0x32, 0xa2, 0xb7, 0x25,
             0x29, 0x84, 0xae, 0x4e, 0x1a, 0x34, 0xea, 0xea, 0x93, 0x67, 0x86,
             0x74, 0xcd, 0x73}};
        std::array<std::uint8_t, 256> const rsa26Sig{
            {0x4f, 0x9f, 0x00, 0x56, 0x3b, 0x16, 0x05, 0x68, 0x09, 0xf1, 0x89,
             0xd4, 0xc0, 0x82, 0xf5, 0xc2, 0x43, 0x18, 0x60, 0x9d, 0xa2, 0x85,
             0x8f, 0x41, 0xca, 0x22, 0x4a, 0x00, 0xcd, 0x8e, 0xa6, 0x43, 0xb8,
             0xc6, 0x60, 0x2b, 0x3f, 0x71, 0x4a, 0x3f, 0xe9, 0xdc, 0xd0, 0x3b,
             0x35, 0x25, 0x9e, 0x6b, 0xbd, 0xaa, 0x99, 0xd4, 0x7f, 0xc0, 0x85,
             0x36, 0x24, 0xeb, 0xfb, 0xbb, 0x0e, 0x6d, 0xb3, 0xd3, 0x46, 0x1c,
             0xff, 0x7a, 0xc6, 0xba, 0xb6, 0x56, 0x92, 0x8a, 0x54, 0xd6, 0x03,
             0xbe, 0x90, 0x01, 0x1d, 0x6b, 0xb5, 0x11, 0xa9, 0x07, 0xae, 0xad,
             0xd4, 0x80, 0x91, 0xc6, 0x86, 0x6e, 0x8d, 0x0c, 0x44, 0xe0, 0xcf,
             0x8d, 0x30, 0x33, 0x8e, 0x9a, 0x08, 0xc2, 0xc9, 0x28, 0x91, 0x77,
             0x87, 0xc0, 0x9a, 0xc5, 0x0e, 0x35, 0xbf, 0xae, 0x2d, 0xd8, 0xa5,
             0xcd, 0x8f, 0xd9, 0x6d, 0x0c, 0xd4, 0x42, 0x94, 0x5b, 0x7e, 0xb9,
             0xb0, 0x16, 0x92, 0xb3, 0x07, 0xc7, 0xe9, 0xf0, 0x44, 0x31, 0x9a,
             0xb2, 0x55, 0xa9, 0x38, 0xd7, 0x15, 0x82, 0xac, 0xe1, 0x8b, 0x24,
             0x44, 0x7d, 0x5e, 0x8f, 0xd3, 0xea, 0xaa, 0x25, 0x14, 0xb6, 0x26,
             0xe9, 0x2d, 0x4a, 0x22, 0x84, 0x43, 0xcc, 0x66, 0xba, 0xab, 0xf7,
             0xa9, 0x15, 0x33, 0xa8, 0xe6, 0x80, 0xa2, 0xcd, 0x76, 0x35, 0x2f,
             0x74, 0x25, 0xad, 0x48, 0x62, 0x8a, 0x36, 0x46, 0x45, 0x4e, 0xd6,
             0x05, 0xb7, 0xc0, 0x8e, 0x8a, 0x60, 0x2a, 0x31, 0x43, 0x7a, 0x16,
             0xc4, 0x5a, 0x4a, 0x8c, 0x1e, 0xac, 0x0b, 0x1d, 0x3a, 0x29, 0x90,
             0xae, 0xf3, 0x7b, 0xd3, 0xa9, 0xda, 0xff, 0x10, 0xd8, 0xb1, 0xbc,
             0x41, 0xab, 0x6d, 0x3b, 0xb6, 0x14, 0xd2, 0xa6, 0xd4, 0x69, 0x92,
             0x01, 0x10, 0x70, 0xbb, 0x72, 0xc6, 0x71, 0xe8, 0x2a, 0xf3, 0x3a,
             0x4e, 0x0b, 0x26}};
        auto const thresh25Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const thresh0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim27CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim27Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim27CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa28CondConditionFingerprint =
            "\x58\xac\x94\x55\x27\x79\x7a\x0c\xac\x84\x2d\x5c\x13\x32\xee"
            "\x84\x25\xb8\xb8\xec\x25\x0d\x40\xee\xc0\xd4\x79\x18\x3f\xc6"
            "\xbc\xd7"s;
        Condition const Rsa28Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa28CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed29CondConditionFingerprint =
            "\xc5\x39\xb2\xc7\xc4\x92\x8a\x29\xf3\x72\xb4\x6c\xa5\x0d\x8c"
            "\xbe\x43\xda\xc9\xac\x6c\x26\x7c\x44\xb9\x3f\xee\x40\xcc\x8e"
            "\x41\x3c"s;
        Condition const Ed29Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed29CondConditionFingerprint),
                                 std::bitset<5>{0}};

        auto rsa4 = std::make_unique<RsaSha256>(
            makeSlice(rsa4PublicKey), makeSlice(rsa4Sig));
        auto rsa6 = std::make_unique<RsaSha256>(
            makeSlice(rsa6PublicKey), makeSlice(rsa6Sig));
        std::vector<std::unique_ptr<Fulfillment>> thresh5Subfulfillments;
        thresh5Subfulfillments.emplace_back(std::move(rsa6));
        std::vector<Condition> thresh5Subconditions{
            {Preim7Cond, Rsa8Cond, Ed9Cond}};
        auto thresh5 = std::make_unique<ThresholdSha256>(
            std::move(thresh5Subfulfillments), std::move(thresh5Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh3Subfulfillments;
        thresh3Subfulfillments.emplace_back(std::move(rsa4));
        thresh3Subfulfillments.emplace_back(std::move(thresh5));
        std::vector<Condition> thresh3Subconditions{
            {Preim10Cond, Rsa11Cond, Ed12Cond}};
        auto thresh3 = std::make_unique<ThresholdSha256>(
            std::move(thresh3Subfulfillments), std::move(thresh3Subconditions));
        auto prefix2 = std::make_unique<PrefixSha256>(
            makeSlice(prefix2Prefix), prefix2MaxMsgLength, std::move(thresh3));
        auto prefix1 = std::make_unique<PrefixSha256>(
            makeSlice(prefix1Prefix), prefix1MaxMsgLength, std::move(prefix2));
        auto rsa16 = std::make_unique<RsaSha256>(
            makeSlice(rsa16PublicKey), makeSlice(rsa16Sig));
        auto rsa18 = std::make_unique<RsaSha256>(
            makeSlice(rsa18PublicKey), makeSlice(rsa18Sig));
        std::vector<std::unique_ptr<Fulfillment>> thresh17Subfulfillments;
        thresh17Subfulfillments.emplace_back(std::move(rsa18));
        std::vector<Condition> thresh17Subconditions{
            {Preim19Cond, Rsa20Cond, Ed21Cond}};
        auto thresh17 = std::make_unique<ThresholdSha256>(
            std::move(thresh17Subfulfillments),
            std::move(thresh17Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh15Subfulfillments;
        thresh15Subfulfillments.emplace_back(std::move(rsa16));
        thresh15Subfulfillments.emplace_back(std::move(thresh17));
        std::vector<Condition> thresh15Subconditions{
            {Preim22Cond, Rsa23Cond, Ed24Cond}};
        auto thresh15 = std::make_unique<ThresholdSha256>(
            std::move(thresh15Subfulfillments),
            std::move(thresh15Subconditions));
        auto prefix14 = std::make_unique<PrefixSha256>(
            makeSlice(prefix14Prefix),
            prefix14MaxMsgLength,
            std::move(thresh15));
        auto prefix13 = std::make_unique<PrefixSha256>(
            makeSlice(prefix13Prefix),
            prefix13MaxMsgLength,
            std::move(prefix14));
        auto rsa26 = std::make_unique<RsaSha256>(
            makeSlice(rsa26PublicKey), makeSlice(rsa26Sig));
        std::vector<std::unique_ptr<Fulfillment>> thresh25Subfulfillments;
        thresh25Subfulfillments.emplace_back(std::move(rsa26));
        std::vector<Condition> thresh25Subconditions{};
        auto thresh25 = std::make_unique<ThresholdSha256>(
            std::move(thresh25Subfulfillments),
            std::move(thresh25Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh0Subfulfillments;
        thresh0Subfulfillments.emplace_back(std::move(prefix1));
        thresh0Subfulfillments.emplace_back(std::move(prefix13));
        thresh0Subfulfillments.emplace_back(std::move(thresh25));
        std::vector<Condition> thresh0Subconditions{
            {Preim27Cond, Rsa28Cond, Ed29Cond}};
        ThresholdSha256 const thresh0(
            std::move(thresh0Subfulfillments), std::move(thresh0Subconditions));
        {
            auto const thresh0EncodedFulfillment =
                "\xa2\x82\x0d\x0f\xa0\x82\x0c\x90\xa1\x82\x05\x38\x80\x02\x50"
                "\x31\x81\x01\x0e\xa2\x82\x05\x2d\xa1\x82\x05\x29\x80\x02\x50"
                "\x32\x81\x01\x0e\xa2\x82\x05\x1e\xa2\x82\x05\x1a\xa0\x82\x04"
                "\x9b\xa2\x82\x02\x8b\xa0\x82\x02\x0c\xa3\x82\x02\x08\x80\x82"
                "\x01\x00\xd0\x07\xfc\x9d\xb0\xa1\xa6\x40\xe4\x52\x30\x42\x74"
                "\xfd\x35\x04\xde\x45\x68\xb3\x22\xdd\xff\x41\x43\x69\x33\xc0"
                "\xff\x35\xb6\x6d\x15\xe9\x54\x15\xeb\x1d\x07\xe2\x25\x2b\xdb"
                "\xaa\x16\x8d\x0d\x7f\x05\xf0\xd2\x7d\xb4\x9b\x51\x19\x20\x1e"
                "\x3d\xba\x50\x9e\x51\x13\x81\x43\x55\x96\xca\xdb\x88\x1f\xef"
                "\x2d\x38\x3f\xae\x8d\xac\xc8\x6f\x2b\xd5\xf0\x34\x1a\x99\x00"
                "\x7c\x6d\xb3\x1b\x1d\x68\xdb\xf8\x1c\x59\x3a\x63\x38\x7c\x1c"
                "\x14\xbc\x22\xcf\xc8\x9a\xc6\x96\x6f\x3d\x03\x0b\x61\x6b\x7d"
                "\x75\x97\xe8\x25\xb8\x2f\xfa\xf4\x07\x44\xdf\x00\x3d\xff\x0d"
                "\xd5\x7f\x7f\xf3\x0c\x13\xac\x8d\xf8\x8c\x79\xc5\xf3\x29\xdc"
                "\x23\x65\xd3\xd1\x1c\xa6\x14\x78\x6a\x1a\xe3\x15\x8d\x8b\xdc"
                "\xa0\x5a\xc7\x82\xb0\x03\x6c\x71\x43\x59\x24\xc7\x50\x64\xb2"
                "\xa7\x69\xf5\xbd\xe6\x5e\xaa\x77\x59\x60\x36\xc0\xe3\x42\x7f"
                "\x05\x3b\x4c\x02\x0e\x70\x5a\x70\xc5\x2a\xeb\x94\x4d\x15\x09"
                "\xef\xbb\x58\x42\x68\x05\x59\x70\xa0\x17\xb2\x8e\xdf\x7b\x40"
                "\x5d\x21\x1e\xfe\x62\x58\xde\xfb\x14\x91\x18\xf3\x4f\x9b\x36"
                "\x55\xcf\xb3\x5e\xec\x4f\xcc\x6d\x13\x58\xc8\xa3\xa3\xee\x23"
                "\x8a\xc2\xbf\x81\x82\x01\x00\x1f\xf0\xed\xe5\xbe\xfb\xcc\x37"
                "\xa1\x3c\x05\x0e\x6c\x43\x9f\x5a\xd7\xba\x5f\xea\x7e\x79\x23"
                "\xf0\xd4\xa6\xa5\x0c\x00\x08\x74\x69\x59\xcf\x9c\xa5\x77\x61"
                "\x88\xb8\x80\x1d\x1f\xf8\x4d\xd8\x89\xac\x06\x40\x03\xcc\xb7"
                "\xea\x52\xfc\x48\x85\xf6\x87\xbc\x1d\x4e\xac\x0e\xcc\x61\x09"
                "\x74\xb5\x5e\x3b\x7c\xf8\x55\xb5\x06\x22\xf4\xc6\xef\xfc\xbf"
                "\x14\x98\xa2\x29\xe0\xb6\x95\x5e\x25\xfd\x7a\x63\x7a\x78\x4e"
                "\xc1\xeb\x0c\x87\x92\x53\xd7\xde\x5d\x06\xc1\x68\xd1\x23\x84"
                "\xec\x8f\x49\xe3\xe7\x47\xfe\x16\xf7\x57\x6d\xa4\xbb\xf0\x19"
                "\x57\xa2\x9b\x99\x29\xd8\xea\xb7\x33\xf3\x7a\xc7\x20\x29\x9c"
                "\x8d\xa1\x5b\xe3\x59\x6d\x89\x00\x5d\xfd\x81\xb3\xbd\x21\xec"
                "\xc4\x30\x3d\x7d\x98\x2b\x47\xdb\x9b\x4c\x35\x58\x5c\x87\x05"
                "\x98\xae\xf9\x96\x68\x25\xd2\x4c\x6b\xc5\x1f\xe2\xa7\x52\xed"
                "\xb3\x54\x18\xd6\x45\xeb\xe1\x61\x53\x4c\xd3\x76\xfe\x3c\x49"
                "\x37\x56\xff\xa1\xd7\x27\x74\x3c\xb4\xc8\xb1\xa9\x7c\x14\xbc"
                "\x88\xc3\xc3\x81\xdc\x33\x69\x4c\x32\xc2\x0d\x4c\x05\xeb\x22"
                "\x08\x72\xe8\x4f\x41\xa9\x38\xaa\x40\xa0\x06\x54\x1a\x1d\xb8"
                "\x97\x8b\xd4\x20\xf0\x47\x85\x55\xa1\x79\xa0\x25\x80\x20\x5d"
                "\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b"
                "\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb"
                "\x4e\x81\x01\x09\xa3\x27\x80\x20\xd1\xb5\x1d\x35\x99\x9d\xb4"
                "\xc1\xaa\x81\x4d\xd7\x0e\xa9\x2a\x20\x7f\xe5\x5c\x75\xe8\x57"
                "\x8b\xbf\xe8\xd7\x1c\x7e\xb2\xbc\x91\x16\x81\x03\x01\x00\x00"
                "\xa4\x27\x80\x20\x92\xfa\xfc\xc6\x2f\xe2\x8d\x8d\x25\x7c\xd4"
                "\x46\xab\xea\x82\xd0\x3f\x36\xbe\x1d\x11\x2b\xa0\xfe\xfe\xd4"
                "\x00\xd5\x7d\x9b\xf6\xc9\x81\x03\x02\x00\x00\xa3\x82\x02\x08"
                "\x80\x82\x01\x00\xbe\x09\xc5\xa4\x27\x29\xdf\xd4\x67\x76\xbe"
                "\xbf\x2c\xf3\xa2\x0b\x42\xe4\xbf\xeb\xdd\x67\x20\xfb\x7a\x27"
                "\x93\xc0\x78\x47\x78\xd7\x15\x32\xee\x38\x81\x0d\x36\xa2\xc4"
                "\x65\x44\xe6\x62\x26\xb9\x58\x13\xa4\x15\x82\xab\xb1\x16\x61"
                "\xfc\x01\x98\xc6\x1a\x69\xc6\xba\x39\x3f\x01\x55\x3d\xd7\x8e"
                "\x14\x42\x6d\x78\x74\x9b\x28\xcb\x31\x39\x98\x5a\x11\xdc\xc1"
                "\x18\x9d\x8d\xb0\xcd\x1b\x4c\x10\xab\x14\x64\x19\xf1\x33\x15"
                "\x45\xc8\x92\x82\x03\x82\x8a\xaa\xad\x94\xfc\x24\x11\x96\x99"
                "\x7e\x94\x5a\x82\x57\x68\x61\x9f\x7b\x45\xe0\x99\x9e\x4f\x32"
                "\x50\x5f\x05\xc8\x11\xae\xc4\x0c\x63\x18\x0e\x02\x59\x36\x25"
                "\x92\x06\x32\xc7\x71\x47\x99\xcc\x0a\x6e\x0a\x58\x71\x3f\x5e"
                "\xb7\x78\xf7\x98\x79\xdf\x74\xa4\xeb\xa9\x00\xfd\x81\xb3\xcf"
                "\x04\x8c\x5d\x7d\xe7\xb2\x82\x90\x49\xbd\x69\xf3\x08\xe9\x92"
                "\xc6\x9e\x41\xba\x74\xd8\x8d\x81\x97\x6f\x86\xab\xc9\xf1\x02"
                "\x31\xb4\xce\x47\xb0\x39\xc8\xba\x51\xa7\x39\xf3\x71\xa2\x25"
                "\x27\x37\x6e\x09\x6f\x19\x59\xbc\x65\xd9\xcd\x12\xd3\x2c\xa2"
                "\x78\xfa\x23\x15\x1a\x82\x41\x91\x1b\xbe\x8a\xe7\xfe\x3c\x3c"
                "\x30\x32\xaa\xe9\xf3\x81\x82\x01\x00\x70\x2f\x61\x3c\x48\x3f"
                "\x46\x75\x41\x96\xe0\xb6\x67\x18\x94\x0e\xeb\x1c\x23\xb8\xfd"
                "\xc1\xa1\x8f\x68\xa0\x5e\xeb\x32\xc3\x26\xea\x0d\xef\x9a\x29"
                "\xea\xea\x29\xda\xbc\x17\x52\x68\x33\xd2\x8f\xb3\xd2\xaa\x47"
                "\x08\x59\xe1\xae\x90\x3b\xc2\xea\xed\x14\xd7\x6e\xce\xe9\x5a"
                "\x7d\x4f\xb7\x4b\x11\xec\xd6\x16\xf7\xdc\x4e\x2c\x8f\xe5\xdd"
                "\xd6\xb7\xd2\xeb\xc5\xf6\xdc\xe9\x87\xfd\x62\xd9\xc9\x98\x15"
                "\x27\xcb\xb1\x4c\x09\xf4\xb0\x0c\xf1\x2a\x54\x1a\x1e\x90\xa6"
                "\x90\x5d\xbe\x71\x24\x3d\xb4\x8c\x27\x56\xfa\x1f\x58\xda\x95"
                "\xa0\x4d\xc8\x35\x42\x7e\xe1\xe1\xda\x16\x5a\x57\xc6\xfa\xe0"
                "\xc8\x5a\x4b\x36\x40\x77\x81\xe5\xb4\x90\x1e\x70\x64\xfb\xfb"
                "\x80\x52\x9c\x16\x1f\x64\xe5\x88\x75\x60\xc2\x2c\x08\xe5\x5f"
                "\x5d\x8e\x85\x5d\xe2\xfb\x75\x34\x9b\x77\xc3\xa7\x37\xb5\x28"
                "\xaf\x97\x9a\x40\x1e\x30\x46\xba\xdd\xb3\xe8\x19\x1a\xda\xf5"
                "\x88\xea\x46\x93\xa3\x1f\x69\xb4\xbb\x07\x3c\x8b\x9e\x03\xca"
                "\x89\xf4\x62\x34\xea\x71\x76\x45\xe8\xbd\x3e\xcc\xe9\xd4\xf5"
                "\x79\x43\xaf\xab\xa5\x20\xf4\x91\x7f\xa1\x04\x3a\x8c\x77\xb5"
                "\x9b\x7d\xb6\xd2\xa6\x3c\x59\xbe\xf6\xbe\xa1\x79\xa0\x25\x80"
                "\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d"
                "\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93"
                "\x58\xeb\x4e\x81\x01\x09\xa3\x27\x80\x20\xaf\x93\xfd\x22\x45"
                "\xc2\x08\xab\x43\xf7\x45\x56\x63\xec\xaf\x15\x33\xa0\x2a\xb4"
                "\x9e\x15\xb4\x6e\xda\x87\x35\xde\x09\x4b\x06\x31\x81\x03\x01"
                "\x00\x00\xa4\x27\x80\x20\x55\xcc\xd1\xa2\x2c\x90\x8d\xe3\x2e"
                "\x42\xd4\xe0\x65\xb2\xf7\xda\xc0\x07\x1e\xd3\x23\x0f\xfe\x78"
                "\x13\xa2\x86\x61\xc4\x34\x28\x50\x81\x03\x02\x00\x00\xa1\x82"
                "\x05\x3a\x80\x03\x50\x31\x33\x81\x01\x0e\xa2\x82\x05\x2e\xa1"
                "\x82\x05\x2a\x80\x03\x50\x31\x34\x81\x01\x0e\xa2\x82\x05\x1e"
                "\xa2\x82\x05\x1a\xa0\x82\x04\x9b\xa2\x82\x02\x8b\xa0\x82\x02"
                "\x0c\xa3\x82\x02\x08\x80\x82\x01\x00\xee\x21\x9d\x3a\x07\x91"
                "\x46\x8c\x0b\xfe\x9c\xe9\x61\x7b\xd4\xf4\x10\x59\xe6\x20\x0d"
                "\xd2\x48\x5f\xf8\x7e\x89\xf3\x16\x39\x5d\xc1\x53\x72\x06\x1a"
                "\x36\xe7\x3f\x62\xcb\xc2\xbd\x44\x9d\xa9\x0f\xb2\x03\xa8\xc7"
                "\xca\xaa\x6b\x2a\x7b\xfe\x18\x93\x0c\x0e\x8e\x75\x56\xda\x2e"
                "\x47\x6f\x14\x6a\x5b\xfd\x8c\x70\xda\x4b\x43\xc8\x45\x51\x13"
                "\x0b\x22\x2f\x1a\x5f\x5c\x59\x4c\xa0\x3f\x85\xd2\x2f\x81\x37"
                "\x57\x40\x51\xb5\xf3\x1c\x20\x5b\x31\x95\xc7\x4b\x02\xb0\x64"
                "\x9f\xdc\xcb\xc0\xa7\x76\x95\xbe\x4a\x1e\xcb\xf7\x54\xcc\xa7"
                "\x9b\x51\xdd\xe5\x9f\xa0\xbb\x2d\x4e\x8b\xf0\x24\xbb\xbf\xc3"
                "\xac\x4e\x17\xfc\xd5\xf6\x6e\x3d\x78\xad\x5e\x68\x58\xd7\x09"
                "\x3d\x1f\xd9\xf3\xc2\x7b\x62\x45\xe1\xe9\xbe\x89\x72\x87\x40"
                "\x1d\x28\x9b\xf6\xc6\x92\x23\x80\xaa\x05\x38\xaf\x97\x4c\x10"
                "\xde\x84\x60\x13\x17\xda\xb9\xb0\xfc\x48\x09\x83\x3f\x51\x75"
                "\x19\xad\x68\x35\xc7\x8c\xb0\xb3\xd8\xff\x0f\xee\x77\xb4\x50"
                "\x3a\x5b\x92\x23\xf9\x0f\xf5\x60\x86\x12\x57\xad\x52\xbe\x88"
                "\x8a\x40\x08\x3e\x02\x0e\x2f\x1b\xa9\x29\x28\x2b\x15\x53\x89"
                "\xef\x64\x1a\xc3\x4a\x12\x17\x26\xb5\xeb\x81\x82\x01\x00\x69"
                "\xdf\x69\x50\x25\x31\x3d\xac\x45\x17\x83\xc1\xc4\x0c\x4f\x8f"
                "\x34\xfc\x81\xb9\xff\xb6\x0b\x99\x9d\x44\xe8\x01\x5a\x16\x31"
                "\x08\xbe\x78\xf8\x04\xe1\x6c\x82\x0e\x2f\xd5\xa8\x59\x7d\x3b"
                "\x72\x78\xe1\xc2\x61\xaa\x87\x29\x4c\x48\x12\xd5\x78\xeb\x78"
                "\x74\x4d\x40\xc6\x16\x0d\xbf\x9d\x36\x17\xc8\x81\x54\x2a\xfa"
                "\x27\x9a\xc6\x81\x55\xe8\xe6\x67\x44\x20\xc5\x37\xcf\xb6\xda"
                "\xf7\xb5\x7a\xcc\xd6\xe4\x44\x04\xdf\x36\xc7\x30\x9a\xff\xcb"
                "\x35\x0c\xf4\x27\x32\xec\x2a\x04\xd9\x77\xcf\x4f\x71\xa7\xaa"
                "\x5f\x17\xdf\xbf\x54\x67\xf1\xc0\x98\x93\x6b\xc6\xd2\xc7\xa1"
                "\x20\xbe\x87\x4d\x1a\x19\xfb\x2b\x28\xf2\xac\x55\xa6\x26\x40"
                "\x9b\xb8\x18\x9f\x9c\xe9\x8d\x17\xa5\xea\xa0\xa3\xf0\x9a\x68"
                "\x19\x5d\x20\xf2\x09\xc6\xdb\x4d\xa1\x63\x34\x53\xaf\x7b\x53"
                "\x66\xfa\x19\x97\x7a\xf3\x48\x6e\x1a\x4b\x28\x0a\x7f\xc6\x7e"
                "\xc8\xd8\x59\x09\xbd\xe8\x9e\xbf\x0e\x38\x1b\x6b\xd2\x69\x59"
                "\x20\xbe\x66\xff\x80\x05\x0f\xef\x51\x44\x80\x93\x78\x5f\x22"
                "\x78\xb1\x4c\x10\xf7\xa8\x34\x87\x4a\xb4\xcd\x46\xeb\xcd\x0e"
                "\x80\x8a\x55\x42\x19\x5c\x9d\xc5\x2a\x8a\x61\x11\x5a\xbe\x68"
                "\xa1\x79\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51"
                "\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68"
                "\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa3\x27\x80\x20"
                "\x8d\xb0\x2c\xb1\x28\xc3\xf4\x97\x50\x84\x64\x57\xca\xf4\x9d"
                "\x63\x08\x73\xfc\xde\x2f\x90\xf0\xf2\xec\x79\xa9\xc6\xa3\xf1"
                "\x33\xfd\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x95\x3c\x86\x65"
                "\x91\x76\x69\x6b\x72\x61\xaa\x76\x15\x2a\xd7\x25\x4f\x32\xb7"
                "\x73\x7a\xb2\x49\x0c\x0b\xdf\xb5\x4e\x4a\x8b\xf7\x65\x81\x03"
                "\x02\x00\x00\xa3\x82\x02\x08\x80\x82\x01\x00\xe8\x03\x7c\xff"
                "\x40\x68\x5d\xc7\xb8\xd0\x9f\x9a\x83\xf9\x02\xe6\xfe\xa5\xb9"
                "\x0e\x9f\xdc\x44\x74\x59\x3e\xef\x61\xdc\xb6\x4b\x49\xfe\x1a"
                "\x67\x73\x38\x7b\x1c\xb4\xfa\x24\x39\xe4\xbb\x74\x1b\xe4\x66"
                "\xfd\x85\x6f\x8d\x92\x3e\x04\x70\xb4\x21\x01\xcf\x07\xf2\xeb"
                "\x11\x2c\xaa\x9d\x37\xbb\xf3\x8d\x9b\xbc\x17\x60\xe4\xe3\xae"
                "\x79\x92\x97\x3a\xe8\xd8\x74\xc5\x9d\xeb\x15\x22\x8b\xae\x51"
                "\x13\x78\x21\xca\xbd\x6a\xa6\x24\x93\x8f\xe6\x23\x12\x52\xe1"
                "\x75\xda\x55\x26\xcc\x95\xa0\x75\x31\x0a\x6e\x27\x14\x63\x70"
                "\x04\xd7\xe4\x36\x21\x3a\x9e\xff\xe3\x16\x21\xc1\xfc\x6d\xc5"
                "\xe2\x80\xb9\x26\xc6\x4f\x3c\xc2\xd5\x25\xf1\xb9\x88\xac\xc7"
                "\xfe\xde\xd6\x7e\x60\x41\x82\xde\x25\x28\x1f\x09\xda\x10\x01"
                "\x27\xf4\x63\x10\xa2\x4e\x1d\xc2\x19\x32\xb3\x87\xc2\xcf\xac"
                "\x3c\x2b\xcd\x5e\x79\x1f\x19\xea\x70\x56\x31\x59\x0e\x13\x95"
                "\x05\xb7\xf9\xff\xd9\x0b\x49\xce\xd0\x6f\xae\x90\x44\xb3\x6b"
                "\x60\xc9\x72\xf7\x83\x24\x5e\x15\x25\x1c\xb8\x76\x71\x84\x33"
                "\x14\xf1\xf0\x07\x7f\x2f\x95\xee\x3c\x36\x67\x36\xb4\xae\x1c"
                "\xb5\x02\xa2\xdc\x0e\xed\xf2\x63\x0d\x52\x61\xe3\x81\x82\x01"
                "\x00\x26\x8b\x4d\x1b\x8d\xc9\xab\xdf\x6f\xe3\x68\x52\xb0\xce"
                "\x66\x61\x1a\x87\xb6\xa6\x57\x2c\x84\x21\xa6\xf3\x88\x55\x7b"
                "\x3a\x70\x07\x12\xc7\x34\xda\x38\x05\x65\xe8\xb4\x26\x17\x68"
                "\xd7\xfe\xda\x23\xe4\xfb\x58\x21\x64\x36\xaf\x77\x84\xce\x37"
                "\xf4\xac\x35\x3d\xd5\x07\x22\x56\xda\x96\x46\xeb\xdd\x6b\x1d"
                "\x09\xba\x79\x8e\xf3\x6e\xb2\x23\x74\xb3\xdf\x1b\x50\x9d\x57"
                "\xac\xf8\xdf\x88\x9e\x76\x15\x3d\x39\x0c\x93\xa5\x3d\x2b\xbb"
                "\xa2\x00\xe9\x26\x37\x0a\x5a\x95\x5c\xb9\x1c\x0e\x9f\xfe\x14"
                "\x51\x2c\x76\x07\xc8\xfc\x43\xaa\x4a\x8e\xe5\x1f\xd1\x58\x65"
                "\xba\xa4\x57\x25\x2c\xd1\x02\x13\xc8\x8d\x14\xb1\xe8\x80\x0c"
                "\xd2\xae\xb0\x47\x80\xcd\x48\x61\xa4\xbf\x73\xab\x8a\x5d\xd5"
                "\xf4\x62\x63\x0c\x1e\x8b\xe8\x78\xd4\xae\xc8\xff\x77\xc0\x91"
                "\xdc\x21\xb4\xdc\x2d\x18\x1e\x7e\x26\x4c\xf6\x42\x54\xbb\x89"
                "\x1b\x2b\x5c\x69\x32\xe1\x3e\xe4\x81\xb9\xeb\xd4\x42\x3c\x89"
                "\x6d\x90\xf6\xf4\x8b\xb4\xce\x7f\x7f\xb4\x61\x0a\xbe\x3b\x24"
                "\xa0\xd8\x5f\xf9\x06\xbe\x57\xd2\x67\xde\x83\xa8\xa1\x7f\x5a"
                "\xa3\x68\x97\x2c\x7c\x54\x16\x4a\x27\x01\x48\x3b\x18\xbc\x6d"
                "\x49\x88\xa1\x79\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75"
                "\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c"
                "\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa3\x27"
                "\x80\x20\x4a\x64\xbf\x23\xa9\x2b\xec\x55\x00\x3d\x55\xf5\xbf"
                "\x3f\x26\x49\x18\xbb\xe0\xda\xf8\x0c\xf4\x5c\x8a\x33\x74\xb6"
                "\x58\xa4\x38\x30\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x6b\xf3"
                "\xe3\x0f\x92\x6d\x45\x8d\xae\xd2\x8a\x2a\x3e\x53\x37\x1f\x57"
                "\x82\x21\x60\xe4\x5b\x88\x9a\x9d\x13\xa2\x56\x13\x88\x9e\x21"
                "\x81\x03\x02\x00\x00\xa2\x82\x02\x12\xa0\x82\x02\x0c\xa3\x82"
                "\x02\x08\x80\x82\x01\x00\xb5\x57\xe1\x34\xbf\x2e\x84\x70\x7c"
                "\x38\x6e\x15\x48\x91\xa2\x92\x5e\xcd\x38\x82\x1e\xd9\x87\x29"
                "\x5c\xbe\x27\x83\x24\xc4\x29\xa3\x5a\x77\x08\xca\x20\xf3\xc2"
                "\xb7\xb8\xe8\x38\xbc\x88\xfe\x33\x91\xcf\x15\x24\x52\x3d\x98"
                "\x86\xc1\xc7\xdd\xb3\xfe\xfe\xcd\xc6\x72\x58\x1a\x91\xb5\x41"
                "\xe0\xbb\xf9\xa9\x4e\x9d\x54\xa5\xcb\x4a\xee\xd7\x04\xa4\xd7"
                "\x32\x6a\x28\x73\xd9\x37\x14\x1a\x02\x65\x08\xf7\x8f\x2f\x54"
                "\x78\x4d\x3b\x2a\xdd\x39\xdc\x5a\x37\xde\x2b\x53\x7f\x2e\xf6"
                "\x9a\x30\x37\xa0\x13\xd7\x0f\xe1\x22\xc7\xda\xf6\xb4\xda\x66"
                "\x9d\xe5\xfe\x86\x0e\x44\xab\x0e\x4d\xf5\x19\xb5\x7a\x6a\x31"
                "\x1d\x69\x49\xb9\x3f\xf6\x36\x46\x43\x98\x79\xab\x66\x31\x88"
                "\x9b\xf7\xa4\x9e\x94\xb3\x84\x5a\xb8\x83\xdf\xab\xc9\x5a\x22"
                "\xa6\x61\x1a\xe7\x7f\x17\x28\xea\x2b\xb8\xcc\x3f\xdb\xc6\x7f"
                "\x8b\xcb\x44\xda\x3e\x92\xda\x61\x47\xda\x59\x4c\x59\x7e\x6b"
                "\x5e\x7f\x88\x47\x53\x12\x06\x12\x0d\x0c\x78\xa4\x5a\x10\x0d"
                "\x07\xd7\x3f\xca\x32\xed\xd5\x51\xf3\x3d\x99\x9d\x32\xf6\x59"
                "\x17\x0a\x0f\x51\x32\xa2\xb7\x25\x29\x84\xae\x4e\x1a\x34\xea"
                "\xea\x93\x67\x86\x74\xcd\x73\x81\x82\x01\x00\x4f\x9f\x00\x56"
                "\x3b\x16\x05\x68\x09\xf1\x89\xd4\xc0\x82\xf5\xc2\x43\x18\x60"
                "\x9d\xa2\x85\x8f\x41\xca\x22\x4a\x00\xcd\x8e\xa6\x43\xb8\xc6"
                "\x60\x2b\x3f\x71\x4a\x3f\xe9\xdc\xd0\x3b\x35\x25\x9e\x6b\xbd"
                "\xaa\x99\xd4\x7f\xc0\x85\x36\x24\xeb\xfb\xbb\x0e\x6d\xb3\xd3"
                "\x46\x1c\xff\x7a\xc6\xba\xb6\x56\x92\x8a\x54\xd6\x03\xbe\x90"
                "\x01\x1d\x6b\xb5\x11\xa9\x07\xae\xad\xd4\x80\x91\xc6\x86\x6e"
                "\x8d\x0c\x44\xe0\xcf\x8d\x30\x33\x8e\x9a\x08\xc2\xc9\x28\x91"
                "\x77\x87\xc0\x9a\xc5\x0e\x35\xbf\xae\x2d\xd8\xa5\xcd\x8f\xd9"
                "\x6d\x0c\xd4\x42\x94\x5b\x7e\xb9\xb0\x16\x92\xb3\x07\xc7\xe9"
                "\xf0\x44\x31\x9a\xb2\x55\xa9\x38\xd7\x15\x82\xac\xe1\x8b\x24"
                "\x44\x7d\x5e\x8f\xd3\xea\xaa\x25\x14\xb6\x26\xe9\x2d\x4a\x22"
                "\x84\x43\xcc\x66\xba\xab\xf7\xa9\x15\x33\xa8\xe6\x80\xa2\xcd"
                "\x76\x35\x2f\x74\x25\xad\x48\x62\x8a\x36\x46\x45\x4e\xd6\x05"
                "\xb7\xc0\x8e\x8a\x60\x2a\x31\x43\x7a\x16\xc4\x5a\x4a\x8c\x1e"
                "\xac\x0b\x1d\x3a\x29\x90\xae\xf3\x7b\xd3\xa9\xda\xff\x10\xd8"
                "\xb1\xbc\x41\xab\x6d\x3b\xb6\x14\xd2\xa6\xd4\x69\x92\x01\x10"
                "\x70\xbb\x72\xc6\x71\xe8\x2a\xf3\x3a\x4e\x0b\x26\xa1\x00\xa1"
                "\x79\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8"
                "\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc"
                "\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa3\x27\x80\x20\x58"
                "\xac\x94\x55\x27\x79\x7a\x0c\xac\x84\x2d\x5c\x13\x32\xee\x84"
                "\x25\xb8\xb8\xec\x25\x0d\x40\xee\xc0\xd4\x79\x18\x3f\xc6\xbc"
                "\xd7\x81\x03\x01\x00\x00\xa4\x27\x80\x20\xc5\x39\xb2\xc7\xc4"
                "\x92\x8a\x29\xf3\x72\xb4\x6c\xa5\x0d\x8c\xbe\x43\xda\xc9\xac"
                "\x6c\x26\x7c\x44\xb9\x3f\xee\x40\xcc\x8e\x41\x3c\x81\x03\x02"
                "\x00\x00"s;
            auto const thresh0EncodedCondition =
                "\xa2\x2b\x80\x20\x92\xbc\x08\x71\x1c\xc5\x3d\xaf\x1b\x80\x41"
                "\x30\x48\x12\x90\x7d\x2d\x2e\xdf\x41\xc5\xbf\xc1\x23\x53\xd9"
                "\xea\x1e\xf9\xc4\xea\x8c\x81\x03\x0a\x70\x42\x82\x02\x03\xd8"s;
            auto const thresh0EncodedFingerprint =
                "\x30\x82\x01\x07\x80\x01\x03\xa1\x82\x01\x00\xa0\x25\x80\x20"
                "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
                "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
                "\xeb\x4e\x81\x01\x09\xa1\x2b\x80\x20\x2c\x51\xc6\x86\x0c\xc6"
                "\x95\x7f\x99\x0c\xe8\x17\xc7\xa5\x18\xb7\xa1\x0f\x12\x19\xa6"
                "\x36\xe8\xa5\x60\x85\x01\x70\xdb\x3c\xcc\xfc\x81\x03\x04\x2c"
                "\x20\x82\x02\x03\xb8\xa1\x2b\x80\x20\x46\x57\x5c\xb4\x9b\x39"
                "\x1c\x47\xda\x42\xe8\xf9\xbf\x65\xee\x63\xa0\x8a\x4b\xb3\xdf"
                "\x11\x88\x8c\x9d\x72\xec\xbb\x69\x70\x66\xb7\x81\x03\x04\x2c"
                "\x22\x82\x02\x03\xb8\xa2\x2b\x80\x20\x9d\x40\xda\xe1\xb8\x80"
                "\x53\x4d\xbb\xe6\x39\x47\x3a\x9a\x9b\x08\x33\x20\x19\x7d\xc7"
                "\x4c\xec\x83\x97\xad\x9a\xcf\x0c\x2e\xa2\x9f\x81\x03\x01\x04"
                "\x00\x82\x02\x04\x10\xa3\x27\x80\x20\x58\xac\x94\x55\x27\x79"
                "\x7a\x0c\xac\x84\x2d\x5c\x13\x32\xee\x84\x25\xb8\xb8\xec\x25"
                "\x0d\x40\xee\xc0\xd4\x79\x18\x3f\xc6\xbc\xd7\x81\x03\x01\x00"
                "\x00\xa4\x27\x80\x20\xc5\x39\xb2\xc7\xc4\x92\x8a\x29\xf3\x72"
                "\xb4\x6c\xa5\x0d\x8c\xbe\x43\xda\xc9\xac\x6c\x26\x7c\x44\xb9"
                "\x3f\xee\x40\xcc\x8e\x41\x3c\x81\x03\x02\x00\x00"s;
            check(
                &thresh0,
                thresh0Msg,
                thresh0EncodedFulfillment,
                thresh0EncodedCondition,
                thresh0EncodedFingerprint);
        }
    }

    void
    testThresh37()
    {
        testcase("Thresh37");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * thresh0
        // ** Preim16Cond
        // ** Rsa17Cond
        // ** Ed18Cond
        // ** Prefix19Cond
        // ** Thresh31Cond
        // ** prefix1
        // *** prefix2
        // **** thresh3
        // ***** Preim10Cond
        // ***** Rsa11Cond
        // ***** Ed12Cond
        // ***** rsa4
        // ***** thresh5
        // ****** Preim7Cond
        // ****** Rsa8Cond
        // ****** Ed9Cond
        // ****** rsa6
        // ** preim13
        // ** rsa14
        // ** ed15

        auto const rsa4Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa4PublicKey{
            {0xbe, 0x09, 0xc5, 0xa4, 0x27, 0x29, 0xdf, 0xd4, 0x67, 0x76, 0xbe,
             0xbf, 0x2c, 0xf3, 0xa2, 0x0b, 0x42, 0xe4, 0xbf, 0xeb, 0xdd, 0x67,
             0x20, 0xfb, 0x7a, 0x27, 0x93, 0xc0, 0x78, 0x47, 0x78, 0xd7, 0x15,
             0x32, 0xee, 0x38, 0x81, 0x0d, 0x36, 0xa2, 0xc4, 0x65, 0x44, 0xe6,
             0x62, 0x26, 0xb9, 0x58, 0x13, 0xa4, 0x15, 0x82, 0xab, 0xb1, 0x16,
             0x61, 0xfc, 0x01, 0x98, 0xc6, 0x1a, 0x69, 0xc6, 0xba, 0x39, 0x3f,
             0x01, 0x55, 0x3d, 0xd7, 0x8e, 0x14, 0x42, 0x6d, 0x78, 0x74, 0x9b,
             0x28, 0xcb, 0x31, 0x39, 0x98, 0x5a, 0x11, 0xdc, 0xc1, 0x18, 0x9d,
             0x8d, 0xb0, 0xcd, 0x1b, 0x4c, 0x10, 0xab, 0x14, 0x64, 0x19, 0xf1,
             0x33, 0x15, 0x45, 0xc8, 0x92, 0x82, 0x03, 0x82, 0x8a, 0xaa, 0xad,
             0x94, 0xfc, 0x24, 0x11, 0x96, 0x99, 0x7e, 0x94, 0x5a, 0x82, 0x57,
             0x68, 0x61, 0x9f, 0x7b, 0x45, 0xe0, 0x99, 0x9e, 0x4f, 0x32, 0x50,
             0x5f, 0x05, 0xc8, 0x11, 0xae, 0xc4, 0x0c, 0x63, 0x18, 0x0e, 0x02,
             0x59, 0x36, 0x25, 0x92, 0x06, 0x32, 0xc7, 0x71, 0x47, 0x99, 0xcc,
             0x0a, 0x6e, 0x0a, 0x58, 0x71, 0x3f, 0x5e, 0xb7, 0x78, 0xf7, 0x98,
             0x79, 0xdf, 0x74, 0xa4, 0xeb, 0xa9, 0x00, 0xfd, 0x81, 0xb3, 0xcf,
             0x04, 0x8c, 0x5d, 0x7d, 0xe7, 0xb2, 0x82, 0x90, 0x49, 0xbd, 0x69,
             0xf3, 0x08, 0xe9, 0x92, 0xc6, 0x9e, 0x41, 0xba, 0x74, 0xd8, 0x8d,
             0x81, 0x97, 0x6f, 0x86, 0xab, 0xc9, 0xf1, 0x02, 0x31, 0xb4, 0xce,
             0x47, 0xb0, 0x39, 0xc8, 0xba, 0x51, 0xa7, 0x39, 0xf3, 0x71, 0xa2,
             0x25, 0x27, 0x37, 0x6e, 0x09, 0x6f, 0x19, 0x59, 0xbc, 0x65, 0xd9,
             0xcd, 0x12, 0xd3, 0x2c, 0xa2, 0x78, 0xfa, 0x23, 0x15, 0x1a, 0x82,
             0x41, 0x91, 0x1b, 0xbe, 0x8a, 0xe7, 0xfe, 0x3c, 0x3c, 0x30, 0x32,
             0xaa, 0xe9, 0xf3}};
        std::array<std::uint8_t, 256> const rsa4Sig{
            {0x67, 0xd0, 0xf6, 0xa5, 0xd2, 0xa5, 0x43, 0x83, 0xb7, 0x00, 0x18,
             0x99, 0x63, 0x8a, 0x26, 0x87, 0x3e, 0xb7, 0x25, 0xe0, 0x43, 0xba,
             0xd9, 0xe3, 0xde, 0x1b, 0x8a, 0x88, 0x84, 0xae, 0xb7, 0x92, 0x7f,
             0x5b, 0x4f, 0x80, 0x87, 0x7d, 0x63, 0x66, 0xbe, 0xc4, 0xec, 0x59,
             0x68, 0x83, 0x01, 0xb5, 0x71, 0x8c, 0x19, 0xf4, 0x38, 0xdf, 0xfd,
             0x1e, 0x88, 0x59, 0x87, 0x94, 0x9a, 0xb1, 0x8f, 0x2b, 0x90, 0x78,
             0x71, 0xa1, 0xdf, 0xd3, 0x18, 0x10, 0x81, 0xd3, 0x52, 0xb8, 0xd4,
             0x32, 0x6a, 0x21, 0xba, 0x6b, 0x60, 0xed, 0xb1, 0x75, 0xb2, 0x38,
             0xf9, 0x50, 0x87, 0xe4, 0x28, 0x05, 0x3d, 0x9d, 0xdd, 0x26, 0x2a,
             0x9c, 0x32, 0xc9, 0x6f, 0xaf, 0x29, 0x6b, 0xb5, 0x4e, 0xbd, 0xc9,
             0x37, 0x93, 0x4a, 0x72, 0x6e, 0xce, 0xac, 0x51, 0x9e, 0x4d, 0xb2,
             0xd9, 0x1d, 0xc9, 0xb0, 0x1b, 0x3f, 0xdd, 0xf5, 0x18, 0x0f, 0xc4,
             0x14, 0xf4, 0xb0, 0xe4, 0x8e, 0x52, 0xeb, 0x50, 0x39, 0x19, 0xc7,
             0xea, 0x05, 0xa6, 0x60, 0xd6, 0xc9, 0xab, 0xc1, 0xf5, 0xae, 0x1d,
             0x5f, 0xa0, 0xef, 0xb8, 0xe7, 0xe0, 0x12, 0x77, 0x7a, 0xda, 0xb9,
             0xfe, 0x33, 0x8e, 0xbe, 0x62, 0xc0, 0xd3, 0x69, 0xf6, 0x16, 0x45,
             0x04, 0x23, 0x2f, 0xb9, 0x8d, 0xd0, 0xc8, 0x56, 0x5f, 0x48, 0x83,
             0xb4, 0xca, 0x29, 0x2b, 0xc0, 0x3c, 0xb2, 0x2f, 0xb5, 0x95, 0x1b,
             0x1c, 0x49, 0xa2, 0x21, 0x95, 0x0a, 0xb6, 0xe6, 0x89, 0x64, 0x94,
             0x12, 0xf1, 0x27, 0x32, 0x84, 0x1e, 0x04, 0x38, 0x2f, 0xc2, 0xed,
             0xb4, 0xbe, 0xf6, 0x60, 0x1d, 0x5c, 0xad, 0xc5, 0x1c, 0x35, 0xf3,
             0x15, 0xa3, 0x7d, 0x6d, 0xd8, 0x97, 0x45, 0x9b, 0x3d, 0x2a, 0xcb,
             0xc0, 0xc5, 0x18, 0x43, 0x35, 0xeb, 0x2d, 0x39, 0x6b, 0xc6, 0x5d,
             0x86, 0xee, 0x26}};
        auto const rsa6Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa6PublicKey{
            {0xd0, 0x07, 0xfc, 0x9d, 0xb0, 0xa1, 0xa6, 0x40, 0xe4, 0x52, 0x30,
             0x42, 0x74, 0xfd, 0x35, 0x04, 0xde, 0x45, 0x68, 0xb3, 0x22, 0xdd,
             0xff, 0x41, 0x43, 0x69, 0x33, 0xc0, 0xff, 0x35, 0xb6, 0x6d, 0x15,
             0xe9, 0x54, 0x15, 0xeb, 0x1d, 0x07, 0xe2, 0x25, 0x2b, 0xdb, 0xaa,
             0x16, 0x8d, 0x0d, 0x7f, 0x05, 0xf0, 0xd2, 0x7d, 0xb4, 0x9b, 0x51,
             0x19, 0x20, 0x1e, 0x3d, 0xba, 0x50, 0x9e, 0x51, 0x13, 0x81, 0x43,
             0x55, 0x96, 0xca, 0xdb, 0x88, 0x1f, 0xef, 0x2d, 0x38, 0x3f, 0xae,
             0x8d, 0xac, 0xc8, 0x6f, 0x2b, 0xd5, 0xf0, 0x34, 0x1a, 0x99, 0x00,
             0x7c, 0x6d, 0xb3, 0x1b, 0x1d, 0x68, 0xdb, 0xf8, 0x1c, 0x59, 0x3a,
             0x63, 0x38, 0x7c, 0x1c, 0x14, 0xbc, 0x22, 0xcf, 0xc8, 0x9a, 0xc6,
             0x96, 0x6f, 0x3d, 0x03, 0x0b, 0x61, 0x6b, 0x7d, 0x75, 0x97, 0xe8,
             0x25, 0xb8, 0x2f, 0xfa, 0xf4, 0x07, 0x44, 0xdf, 0x00, 0x3d, 0xff,
             0x0d, 0xd5, 0x7f, 0x7f, 0xf3, 0x0c, 0x13, 0xac, 0x8d, 0xf8, 0x8c,
             0x79, 0xc5, 0xf3, 0x29, 0xdc, 0x23, 0x65, 0xd3, 0xd1, 0x1c, 0xa6,
             0x14, 0x78, 0x6a, 0x1a, 0xe3, 0x15, 0x8d, 0x8b, 0xdc, 0xa0, 0x5a,
             0xc7, 0x82, 0xb0, 0x03, 0x6c, 0x71, 0x43, 0x59, 0x24, 0xc7, 0x50,
             0x64, 0xb2, 0xa7, 0x69, 0xf5, 0xbd, 0xe6, 0x5e, 0xaa, 0x77, 0x59,
             0x60, 0x36, 0xc0, 0xe3, 0x42, 0x7f, 0x05, 0x3b, 0x4c, 0x02, 0x0e,
             0x70, 0x5a, 0x70, 0xc5, 0x2a, 0xeb, 0x94, 0x4d, 0x15, 0x09, 0xef,
             0xbb, 0x58, 0x42, 0x68, 0x05, 0x59, 0x70, 0xa0, 0x17, 0xb2, 0x8e,
             0xdf, 0x7b, 0x40, 0x5d, 0x21, 0x1e, 0xfe, 0x62, 0x58, 0xde, 0xfb,
             0x14, 0x91, 0x18, 0xf3, 0x4f, 0x9b, 0x36, 0x55, 0xcf, 0xb3, 0x5e,
             0xec, 0x4f, 0xcc, 0x6d, 0x13, 0x58, 0xc8, 0xa3, 0xa3, 0xee, 0x23,
             0x8a, 0xc2, 0xbf}};
        std::array<std::uint8_t, 256> const rsa6Sig{
            {0xbd, 0x71, 0xb4, 0x9c, 0x16, 0x5f, 0x54, 0x67, 0x49, 0x1c, 0x5e,
             0x86, 0xe3, 0x63, 0x4c, 0x2d, 0x53, 0x99, 0x38, 0xd2, 0x7a, 0xe9,
             0x17, 0x3b, 0x3d, 0xde, 0xc4, 0x44, 0xf1, 0xec, 0x7c, 0x4c, 0xeb,
             0xa5, 0x37, 0x1c, 0x48, 0x77, 0x48, 0x33, 0x74, 0x99, 0xe3, 0xbe,
             0x7d, 0x9b, 0x29, 0x2a, 0x75, 0x81, 0xcb, 0x55, 0x73, 0xe3, 0xe5,
             0x56, 0x0d, 0x40, 0xe4, 0xca, 0xc0, 0x57, 0x3b, 0xea, 0x49, 0x18,
             0x09, 0x21, 0x03, 0xfc, 0xb6, 0x3f, 0xe3, 0x41, 0x53, 0x41, 0xf4,
             0x79, 0x79, 0x3a, 0xaf, 0xea, 0xef, 0x66, 0x6b, 0x92, 0x1b, 0xb0,
             0x95, 0x66, 0x56, 0xee, 0xaa, 0x35, 0x4b, 0xd5, 0x09, 0x45, 0xa1,
             0x3c, 0x5f, 0xbd, 0x0c, 0x5d, 0xea, 0x6d, 0x90, 0x11, 0x1d, 0x15,
             0xc0, 0x70, 0x14, 0x74, 0xa2, 0x8c, 0xed, 0x13, 0x46, 0x42, 0xba,
             0x8e, 0x4d, 0x98, 0x88, 0xbc, 0x27, 0x75, 0x70, 0x16, 0x15, 0xae,
             0xa1, 0x83, 0xbc, 0x90, 0x85, 0x48, 0x25, 0xe5, 0x43, 0x5b, 0x02,
             0x50, 0xc2, 0x63, 0x0c, 0x98, 0x6f, 0x65, 0xdf, 0xdf, 0x4f, 0xc9,
             0xdb, 0xa3, 0xd6, 0x10, 0x46, 0x42, 0x41, 0xc2, 0x2b, 0x99, 0x28,
             0x84, 0x61, 0x38, 0xd5, 0x9d, 0x27, 0x6e, 0xea, 0xb4, 0x8f, 0xa6,
             0x06, 0xb9, 0x06, 0x24, 0x94, 0xf6, 0x59, 0x24, 0xf6, 0xae, 0x43,
             0x26, 0x8b, 0xd8, 0xc1, 0x75, 0x02, 0x53, 0xef, 0x97, 0x77, 0x15,
             0x83, 0xb7, 0xe6, 0xd0, 0x81, 0xd5, 0x21, 0xc1, 0x37, 0xb9, 0x48,
             0x25, 0x71, 0x4a, 0x24, 0x1c, 0x48, 0xc2, 0x92, 0xf2, 0xea, 0x92,
             0xa3, 0xdf, 0x24, 0x04, 0xef, 0xce, 0x6d, 0xe0, 0x28, 0x2d, 0x08,
             0x54, 0x31, 0x30, 0x10, 0xbe, 0x75, 0xd8, 0xa0, 0xaa, 0x69, 0xb4,
             0xaa, 0x3d, 0x77, 0x3c, 0xeb, 0x4c, 0x33, 0xaf, 0x77, 0xad, 0xed,
             0x7e, 0xdd, 0x0b}};
        auto const thresh5Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim7CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim7Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim7CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa8CondConditionFingerprint =
            "\xd1\xb5\x1d\x35\x99\x9d\xb4\xc1\xaa\x81\x4d\xd7\x0e\xa9\x2a"
            "\x20\x7f\xe5\x5c\x75\xe8\x57\x8b\xbf\xe8\xd7\x1c\x7e\xb2\xbc"
            "\x91\x16"s;
        Condition const Rsa8Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa8CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed9CondConditionFingerprint =
            "\x92\xfa\xfc\xc6\x2f\xe2\x8d\x8d\x25\x7c\xd4\x46\xab\xea\x82"
            "\xd0\x3f\x36\xbe\x1d\x11\x2b\xa0\xfe\xfe\xd4\x00\xd5\x7d\x9b"
            "\xf6\xc9"s;
        Condition const Ed9Cond{Type::ed25519Sha256,
                                131072,
                                makeSlice(Ed9CondConditionFingerprint),
                                std::bitset<5>{0}};
        auto const thresh3Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim10CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim10Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim10CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa11CondConditionFingerprint =
            "\xaf\x93\xfd\x22\x45\xc2\x08\xab\x43\xf7\x45\x56\x63\xec\xaf"
            "\x15\x33\xa0\x2a\xb4\x9e\x15\xb4\x6e\xda\x87\x35\xde\x09\x4b"
            "\x06\x31"s;
        Condition const Rsa11Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa11CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed12CondConditionFingerprint =
            "\x55\xcc\xd1\xa2\x2c\x90\x8d\xe3\x2e\x42\xd4\xe0\x65\xb2\xf7"
            "\xda\xc0\x07\x1e\xd3\x23\x0f\xfe\x78\x13\xa2\x86\x61\xc4\x34"
            "\x28\x50"s;
        Condition const Ed12Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed12CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const prefix2Prefix = "P2"s;
        auto const prefix2Msg = "P1abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix2MaxMsgLength = 14;
        auto const prefix1Prefix = "P1"s;
        auto const prefix1Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix1MaxMsgLength = 14;
        auto const preim13Preimage = "I am root"s;
        auto const preim13Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const rsa14Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa14PublicKey{
            {0xbd, 0x63, 0x74, 0xd9, 0xc0, 0x3e, 0x0c, 0x57, 0x55, 0x99, 0x00,
             0xf3, 0xa8, 0x03, 0xdc, 0x9a, 0x6c, 0x14, 0xfc, 0x83, 0x33, 0x63,
             0x87, 0x35, 0x9c, 0xfe, 0xc3, 0x00, 0xb4, 0x8b, 0x03, 0xc7, 0x5f,
             0x0a, 0xe2, 0x94, 0xaa, 0x3f, 0x76, 0x15, 0xb1, 0xb9, 0xf6, 0x5f,
             0x0a, 0x87, 0x0c, 0x5c, 0x35, 0xbc, 0x2f, 0x0f, 0x04, 0xdd, 0x9d,
             0x12, 0x8d, 0x94, 0xeb, 0x8b, 0x93, 0xb4, 0x4e, 0x96, 0x20, 0xb7,
             0x17, 0xa0, 0x8e, 0xff, 0x9e, 0x1f, 0x43, 0xbf, 0xd6, 0x6a, 0x1e,
             0xb6, 0x0d, 0x7f, 0x2c, 0x08, 0x67, 0xa5, 0xe7, 0xa3, 0xb6, 0xd2,
             0x63, 0x6a, 0xf2, 0xeb, 0xd1, 0x21, 0x83, 0x8f, 0xa0, 0x25, 0x4a,
             0xc6, 0xcb, 0x4e, 0x66, 0xc3, 0x5f, 0x37, 0xdf, 0x5c, 0x12, 0xb7,
             0xb8, 0xfa, 0x7a, 0x57, 0x91, 0x9d, 0x55, 0xa6, 0x96, 0x91, 0xee,
             0x94, 0xb0, 0xcc, 0x45, 0xd3, 0x76, 0x70, 0x6f, 0x12, 0xbd, 0x81,
             0x9d, 0x08, 0x1b, 0x6d, 0x55, 0x3c, 0x19, 0x56, 0x9c, 0xcf, 0xc4,
             0xb4, 0x63, 0x8a, 0x87, 0x35, 0x2b, 0x4c, 0xc6, 0xe1, 0x0d, 0x74,
             0x31, 0xaa, 0xc6, 0x25, 0x0d, 0x90, 0x55, 0x14, 0xf1, 0x73, 0x09,
             0x93, 0xba, 0xc6, 0xda, 0x52, 0x7f, 0xc2, 0xdd, 0x9d, 0xb2, 0x4f,
             0x92, 0x43, 0xa6, 0xc9, 0x2c, 0x22, 0xc4, 0x5a, 0x22, 0xc2, 0x56,
             0xac, 0xfa, 0x6a, 0x37, 0x6a, 0x0c, 0x22, 0x72, 0x5d, 0x30, 0x50,
             0x4a, 0x6b, 0x93, 0xab, 0xcf, 0x69, 0x5a, 0x09, 0xd2, 0x5a, 0x87,
             0x31, 0x80, 0xa7, 0x5b, 0xe4, 0x34, 0x42, 0x13, 0x44, 0x1d, 0xe6,
             0xf9, 0x27, 0x21, 0xa7, 0x03, 0x74, 0x64, 0x18, 0xfa, 0xd0, 0x68,
             0x28, 0x73, 0x37, 0x3c, 0xf6, 0x63, 0x10, 0x56, 0xcc, 0x25, 0x08,
             0xb9, 0xad, 0xc8, 0x25, 0x64, 0xd1, 0x9c, 0x7c, 0xe7, 0x6c, 0xa6,
             0x12, 0x2c, 0x7d}};
        std::array<std::uint8_t, 256> const rsa14Sig{
            {0x05, 0xf9, 0x79, 0x9b, 0xb3, 0x59, 0x13, 0x30, 0x63, 0x01, 0x2a,
             0x6b, 0x00, 0x4c, 0x11, 0x24, 0xce, 0xaf, 0x3e, 0x6d, 0x9b, 0xa8,
             0xd3, 0x63, 0x52, 0xc2, 0xc6, 0x5c, 0x88, 0xa8, 0x65, 0xfc, 0x61,
             0xd0, 0x92, 0x0f, 0x2c, 0x26, 0x68, 0xc8, 0x21, 0xcc, 0x82, 0x4b,
             0xbc, 0x59, 0x93, 0x52, 0x02, 0xc4, 0x61, 0x5a, 0xb2, 0x1f, 0xd5,
             0x6c, 0xc8, 0xdc, 0xc3, 0xff, 0x10, 0x88, 0x78, 0x01, 0xfd, 0x6c,
             0xdc, 0x94, 0xf6, 0xa8, 0xfc, 0x44, 0x47, 0xa4, 0x9d, 0x0b, 0xcb,
             0xdd, 0xa3, 0x5f, 0x90, 0xa4, 0x04, 0x2f, 0x27, 0xe3, 0xb2, 0x60,
             0xde, 0x67, 0x1b, 0x1f, 0x94, 0x7c, 0x04, 0x77, 0x0b, 0xd5, 0xc2,
             0x73, 0x39, 0x1a, 0x09, 0x16, 0xa7, 0x82, 0x0f, 0xe5, 0xdd, 0x74,
             0xeb, 0x7e, 0x16, 0xf2, 0x4e, 0xda, 0x0a, 0x85, 0x3a, 0x04, 0xbd,
             0x83, 0x5b, 0x07, 0x5d, 0x46, 0x79, 0x8d, 0x46, 0x95, 0xd2, 0x99,
             0x88, 0x94, 0x24, 0x3b, 0xb0, 0x3a, 0x1c, 0x78, 0x47, 0x22, 0xb1,
             0x0a, 0x69, 0x6b, 0x20, 0x8f, 0x07, 0x72, 0x7e, 0xe5, 0x30, 0x30,
             0x39, 0xe8, 0x5c, 0xb1, 0xaa, 0xbb, 0x80, 0x36, 0x52, 0x39, 0x70,
             0x3c, 0x51, 0x00, 0xa1, 0x22, 0x9d, 0xcf, 0x20, 0xd9, 0x6c, 0xb3,
             0x8b, 0x23, 0x61, 0x94, 0x47, 0x04, 0xf2, 0xd5, 0xb5, 0x90, 0x19,
             0xa9, 0xe0, 0x64, 0x6f, 0xe4, 0xa7, 0x4c, 0x8c, 0xe4, 0x25, 0x2a,
             0xe2, 0x05, 0xdd, 0x11, 0x7a, 0x2a, 0x15, 0x40, 0x68, 0xb0, 0xaf,
             0xa5, 0x04, 0x9b, 0xf6, 0x43, 0x07, 0xc8, 0xef, 0xab, 0x25, 0xdd,
             0x43, 0xdb, 0x52, 0x33, 0xfd, 0x58, 0xd8, 0x9b, 0xad, 0x9b, 0xd5,
             0xca, 0x46, 0xdb, 0xc4, 0x46, 0x81, 0x9d, 0x41, 0x38, 0x60, 0xde,
             0x7f, 0xe1, 0xdf, 0xba, 0xc8, 0x47, 0xf8, 0x40, 0x4e, 0x44, 0xc7,
             0x43, 0xd4, 0x42}};
        auto const ed15Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed15PublicKey{
            {0x37, 0x86, 0xc1, 0x8d, 0x06, 0xf2, 0xe9, 0x58, 0x82, 0x95, 0xcd,
             0xb6, 0x5d, 0x37, 0x28, 0xc9, 0x72, 0xa9, 0x41, 0x20, 0xdc, 0x78,
             0x3d, 0xac, 0x24, 0x8c, 0xb0, 0x6f, 0x1e, 0x44, 0x22, 0xc3}};
        std::array<std::uint8_t, 64> const ed15Sig{
            {0xd8, 0x59, 0x56, 0xbd, 0x99, 0x5c, 0xdd, 0xcd, 0x82, 0x9b, 0xea,
             0x14, 0x18, 0x09, 0x9a, 0x8c, 0x54, 0xff, 0xb3, 0xd4, 0xf3, 0xbf,
             0xc1, 0x4b, 0x70, 0x2a, 0xc9, 0x69, 0x5d, 0x42, 0x8a, 0x34, 0x08,
             0x74, 0x3a, 0xef, 0x8b, 0xd9, 0x2e, 0x7a, 0x0d, 0xb7, 0xdb, 0x68,
             0xb3, 0xa8, 0xb8, 0x12, 0x3a, 0x11, 0x60, 0x20, 0xee, 0xd9, 0x1e,
             0x4a, 0xb6, 0x33, 0x94, 0x27, 0x4e, 0x83, 0xf0, 0x0e}};
        std::array<std::uint8_t, 32> const ed15SigningKey{
            {0x0e, 0x2d, 0x40, 0x72, 0x23, 0x7c, 0x11, 0x66, 0xdb, 0xe2, 0xa2,
             0x6e, 0x4a, 0x4e, 0x95, 0x3a, 0x03, 0x78, 0x62, 0x84, 0x2b, 0x40,
             0x3e, 0xc5, 0xa8, 0x93, 0x4d, 0xb5, 0xe0, 0xe4, 0xc5, 0xdd}};
        (void)ed15SigningKey;
        auto const thresh0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim16CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim16Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim16CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa17CondConditionFingerprint =
            "\x78\xe3\x04\xf4\xa6\x16\x68\x4c\x1b\xcf\x3a\x32\xff\xbc\x75"
            "\x1a\xe6\x08\x9b\xff\xba\x79\xf4\x39\x7a\xfc\xe1\x6f\xff\x3e"
            "\xb3\x75"s;
        Condition const Rsa17Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa17CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed18CondConditionFingerprint =
            "\x0d\xea\xc5\x16\x5c\x62\xb8\xd1\xa4\xe7\x5a\x07\x58\x00\x79"
            "\x51\x88\x21\xe9\x4d\xba\x73\x7b\xad\x60\x9c\x5c\x26\x00\x2e"
            "\xd1\x51"s;
        Condition const Ed18Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed18CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Prefix19CondConditionFingerprint =
            "\xf7\x69\x49\x84\x5f\xb9\xe9\xa9\x41\xd3\x1f\xd5\x1f\xcc\x30"
            "\x12\x27\x2d\x05\x15\xad\xd9\x41\xd1\xcf\x68\xa1\x23\xb0\xfe"
            "\x13\xac"s;
        Condition const Prefix19Cond{
            Type::prefixSha256,
            273450,
            makeSlice(Prefix19CondConditionFingerprint),
            std::bitset<5>{29}};
        auto const Thresh31CondConditionFingerprint =
            "\x14\xe2\x21\xc5\x92\xb6\x3f\x66\xb2\xce\x07\xc4\x86\xe3\x14"
            "\x28\x95\xac\x99\x5f\xf0\x19\xd0\x77\x05\xb1\xd6\x31\xa9\xe0"
            "\x61\x31"s;
        Condition const Thresh31Cond{
            Type::thresholdSha256,
            66560,
            makeSlice(Thresh31CondConditionFingerprint),
            std::bitset<5>{8}};

        auto rsa4 = std::make_unique<RsaSha256>(
            makeSlice(rsa4PublicKey), makeSlice(rsa4Sig));
        auto rsa6 = std::make_unique<RsaSha256>(
            makeSlice(rsa6PublicKey), makeSlice(rsa6Sig));
        std::vector<std::unique_ptr<Fulfillment>> thresh5Subfulfillments;
        thresh5Subfulfillments.emplace_back(std::move(rsa6));
        std::vector<Condition> thresh5Subconditions{
            {Preim7Cond, Rsa8Cond, Ed9Cond}};
        auto thresh5 = std::make_unique<ThresholdSha256>(
            std::move(thresh5Subfulfillments), std::move(thresh5Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh3Subfulfillments;
        thresh3Subfulfillments.emplace_back(std::move(rsa4));
        thresh3Subfulfillments.emplace_back(std::move(thresh5));
        std::vector<Condition> thresh3Subconditions{
            {Preim10Cond, Rsa11Cond, Ed12Cond}};
        auto thresh3 = std::make_unique<ThresholdSha256>(
            std::move(thresh3Subfulfillments), std::move(thresh3Subconditions));
        auto prefix2 = std::make_unique<PrefixSha256>(
            makeSlice(prefix2Prefix), prefix2MaxMsgLength, std::move(thresh3));
        auto prefix1 = std::make_unique<PrefixSha256>(
            makeSlice(prefix1Prefix), prefix1MaxMsgLength, std::move(prefix2));
        auto preim13 =
            std::make_unique<PreimageSha256>(makeSlice(preim13Preimage));
        auto rsa14 = std::make_unique<RsaSha256>(
            makeSlice(rsa14PublicKey), makeSlice(rsa14Sig));
        auto ed15 = std::make_unique<Ed25519>(ed15PublicKey, ed15Sig);
        std::vector<std::unique_ptr<Fulfillment>> thresh0Subfulfillments;
        thresh0Subfulfillments.emplace_back(std::move(prefix1));
        thresh0Subfulfillments.emplace_back(std::move(preim13));
        thresh0Subfulfillments.emplace_back(std::move(rsa14));
        thresh0Subfulfillments.emplace_back(std::move(ed15));
        std::vector<Condition> thresh0Subconditions{
            {Preim16Cond, Rsa17Cond, Ed18Cond, Prefix19Cond, Thresh31Cond}};
        ThresholdSha256 const thresh0(
            std::move(thresh0Subfulfillments), std::move(thresh0Subconditions));
        {
            auto const thresh0EncodedFulfillment =
                "\xa2\x82\x08\x95\xa0\x82\x07\xbb\xa0\x0b\x80\x09\x49\x20\x61"
                "\x6d\x20\x72\x6f\x6f\x74\xa1\x82\x05\x38\x80\x02\x50\x31\x81"
                "\x01\x0e\xa2\x82\x05\x2d\xa1\x82\x05\x29\x80\x02\x50\x32\x81"
                "\x01\x0e\xa2\x82\x05\x1e\xa2\x82\x05\x1a\xa0\x82\x04\x9b\xa2"
                "\x82\x02\x8b\xa0\x82\x02\x0c\xa3\x82\x02\x08\x80\x82\x01\x00"
                "\xd0\x07\xfc\x9d\xb0\xa1\xa6\x40\xe4\x52\x30\x42\x74\xfd\x35"
                "\x04\xde\x45\x68\xb3\x22\xdd\xff\x41\x43\x69\x33\xc0\xff\x35"
                "\xb6\x6d\x15\xe9\x54\x15\xeb\x1d\x07\xe2\x25\x2b\xdb\xaa\x16"
                "\x8d\x0d\x7f\x05\xf0\xd2\x7d\xb4\x9b\x51\x19\x20\x1e\x3d\xba"
                "\x50\x9e\x51\x13\x81\x43\x55\x96\xca\xdb\x88\x1f\xef\x2d\x38"
                "\x3f\xae\x8d\xac\xc8\x6f\x2b\xd5\xf0\x34\x1a\x99\x00\x7c\x6d"
                "\xb3\x1b\x1d\x68\xdb\xf8\x1c\x59\x3a\x63\x38\x7c\x1c\x14\xbc"
                "\x22\xcf\xc8\x9a\xc6\x96\x6f\x3d\x03\x0b\x61\x6b\x7d\x75\x97"
                "\xe8\x25\xb8\x2f\xfa\xf4\x07\x44\xdf\x00\x3d\xff\x0d\xd5\x7f"
                "\x7f\xf3\x0c\x13\xac\x8d\xf8\x8c\x79\xc5\xf3\x29\xdc\x23\x65"
                "\xd3\xd1\x1c\xa6\x14\x78\x6a\x1a\xe3\x15\x8d\x8b\xdc\xa0\x5a"
                "\xc7\x82\xb0\x03\x6c\x71\x43\x59\x24\xc7\x50\x64\xb2\xa7\x69"
                "\xf5\xbd\xe6\x5e\xaa\x77\x59\x60\x36\xc0\xe3\x42\x7f\x05\x3b"
                "\x4c\x02\x0e\x70\x5a\x70\xc5\x2a\xeb\x94\x4d\x15\x09\xef\xbb"
                "\x58\x42\x68\x05\x59\x70\xa0\x17\xb2\x8e\xdf\x7b\x40\x5d\x21"
                "\x1e\xfe\x62\x58\xde\xfb\x14\x91\x18\xf3\x4f\x9b\x36\x55\xcf"
                "\xb3\x5e\xec\x4f\xcc\x6d\x13\x58\xc8\xa3\xa3\xee\x23\x8a\xc2"
                "\xbf\x81\x82\x01\x00\xbd\x71\xb4\x9c\x16\x5f\x54\x67\x49\x1c"
                "\x5e\x86\xe3\x63\x4c\x2d\x53\x99\x38\xd2\x7a\xe9\x17\x3b\x3d"
                "\xde\xc4\x44\xf1\xec\x7c\x4c\xeb\xa5\x37\x1c\x48\x77\x48\x33"
                "\x74\x99\xe3\xbe\x7d\x9b\x29\x2a\x75\x81\xcb\x55\x73\xe3\xe5"
                "\x56\x0d\x40\xe4\xca\xc0\x57\x3b\xea\x49\x18\x09\x21\x03\xfc"
                "\xb6\x3f\xe3\x41\x53\x41\xf4\x79\x79\x3a\xaf\xea\xef\x66\x6b"
                "\x92\x1b\xb0\x95\x66\x56\xee\xaa\x35\x4b\xd5\x09\x45\xa1\x3c"
                "\x5f\xbd\x0c\x5d\xea\x6d\x90\x11\x1d\x15\xc0\x70\x14\x74\xa2"
                "\x8c\xed\x13\x46\x42\xba\x8e\x4d\x98\x88\xbc\x27\x75\x70\x16"
                "\x15\xae\xa1\x83\xbc\x90\x85\x48\x25\xe5\x43\x5b\x02\x50\xc2"
                "\x63\x0c\x98\x6f\x65\xdf\xdf\x4f\xc9\xdb\xa3\xd6\x10\x46\x42"
                "\x41\xc2\x2b\x99\x28\x84\x61\x38\xd5\x9d\x27\x6e\xea\xb4\x8f"
                "\xa6\x06\xb9\x06\x24\x94\xf6\x59\x24\xf6\xae\x43\x26\x8b\xd8"
                "\xc1\x75\x02\x53\xef\x97\x77\x15\x83\xb7\xe6\xd0\x81\xd5\x21"
                "\xc1\x37\xb9\x48\x25\x71\x4a\x24\x1c\x48\xc2\x92\xf2\xea\x92"
                "\xa3\xdf\x24\x04\xef\xce\x6d\xe0\x28\x2d\x08\x54\x31\x30\x10"
                "\xbe\x75\xd8\xa0\xaa\x69\xb4\xaa\x3d\x77\x3c\xeb\x4c\x33\xaf"
                "\x77\xad\xed\x7e\xdd\x0b\xa1\x79\xa0\x25\x80\x20\x5d\xa0\x30"
                "\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c"
                "\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81"
                "\x01\x09\xa3\x27\x80\x20\xd1\xb5\x1d\x35\x99\x9d\xb4\xc1\xaa"
                "\x81\x4d\xd7\x0e\xa9\x2a\x20\x7f\xe5\x5c\x75\xe8\x57\x8b\xbf"
                "\xe8\xd7\x1c\x7e\xb2\xbc\x91\x16\x81\x03\x01\x00\x00\xa4\x27"
                "\x80\x20\x92\xfa\xfc\xc6\x2f\xe2\x8d\x8d\x25\x7c\xd4\x46\xab"
                "\xea\x82\xd0\x3f\x36\xbe\x1d\x11\x2b\xa0\xfe\xfe\xd4\x00\xd5"
                "\x7d\x9b\xf6\xc9\x81\x03\x02\x00\x00\xa3\x82\x02\x08\x80\x82"
                "\x01\x00\xbe\x09\xc5\xa4\x27\x29\xdf\xd4\x67\x76\xbe\xbf\x2c"
                "\xf3\xa2\x0b\x42\xe4\xbf\xeb\xdd\x67\x20\xfb\x7a\x27\x93\xc0"
                "\x78\x47\x78\xd7\x15\x32\xee\x38\x81\x0d\x36\xa2\xc4\x65\x44"
                "\xe6\x62\x26\xb9\x58\x13\xa4\x15\x82\xab\xb1\x16\x61\xfc\x01"
                "\x98\xc6\x1a\x69\xc6\xba\x39\x3f\x01\x55\x3d\xd7\x8e\x14\x42"
                "\x6d\x78\x74\x9b\x28\xcb\x31\x39\x98\x5a\x11\xdc\xc1\x18\x9d"
                "\x8d\xb0\xcd\x1b\x4c\x10\xab\x14\x64\x19\xf1\x33\x15\x45\xc8"
                "\x92\x82\x03\x82\x8a\xaa\xad\x94\xfc\x24\x11\x96\x99\x7e\x94"
                "\x5a\x82\x57\x68\x61\x9f\x7b\x45\xe0\x99\x9e\x4f\x32\x50\x5f"
                "\x05\xc8\x11\xae\xc4\x0c\x63\x18\x0e\x02\x59\x36\x25\x92\x06"
                "\x32\xc7\x71\x47\x99\xcc\x0a\x6e\x0a\x58\x71\x3f\x5e\xb7\x78"
                "\xf7\x98\x79\xdf\x74\xa4\xeb\xa9\x00\xfd\x81\xb3\xcf\x04\x8c"
                "\x5d\x7d\xe7\xb2\x82\x90\x49\xbd\x69\xf3\x08\xe9\x92\xc6\x9e"
                "\x41\xba\x74\xd8\x8d\x81\x97\x6f\x86\xab\xc9\xf1\x02\x31\xb4"
                "\xce\x47\xb0\x39\xc8\xba\x51\xa7\x39\xf3\x71\xa2\x25\x27\x37"
                "\x6e\x09\x6f\x19\x59\xbc\x65\xd9\xcd\x12\xd3\x2c\xa2\x78\xfa"
                "\x23\x15\x1a\x82\x41\x91\x1b\xbe\x8a\xe7\xfe\x3c\x3c\x30\x32"
                "\xaa\xe9\xf3\x81\x82\x01\x00\x67\xd0\xf6\xa5\xd2\xa5\x43\x83"
                "\xb7\x00\x18\x99\x63\x8a\x26\x87\x3e\xb7\x25\xe0\x43\xba\xd9"
                "\xe3\xde\x1b\x8a\x88\x84\xae\xb7\x92\x7f\x5b\x4f\x80\x87\x7d"
                "\x63\x66\xbe\xc4\xec\x59\x68\x83\x01\xb5\x71\x8c\x19\xf4\x38"
                "\xdf\xfd\x1e\x88\x59\x87\x94\x9a\xb1\x8f\x2b\x90\x78\x71\xa1"
                "\xdf\xd3\x18\x10\x81\xd3\x52\xb8\xd4\x32\x6a\x21\xba\x6b\x60"
                "\xed\xb1\x75\xb2\x38\xf9\x50\x87\xe4\x28\x05\x3d\x9d\xdd\x26"
                "\x2a\x9c\x32\xc9\x6f\xaf\x29\x6b\xb5\x4e\xbd\xc9\x37\x93\x4a"
                "\x72\x6e\xce\xac\x51\x9e\x4d\xb2\xd9\x1d\xc9\xb0\x1b\x3f\xdd"
                "\xf5\x18\x0f\xc4\x14\xf4\xb0\xe4\x8e\x52\xeb\x50\x39\x19\xc7"
                "\xea\x05\xa6\x60\xd6\xc9\xab\xc1\xf5\xae\x1d\x5f\xa0\xef\xb8"
                "\xe7\xe0\x12\x77\x7a\xda\xb9\xfe\x33\x8e\xbe\x62\xc0\xd3\x69"
                "\xf6\x16\x45\x04\x23\x2f\xb9\x8d\xd0\xc8\x56\x5f\x48\x83\xb4"
                "\xca\x29\x2b\xc0\x3c\xb2\x2f\xb5\x95\x1b\x1c\x49\xa2\x21\x95"
                "\x0a\xb6\xe6\x89\x64\x94\x12\xf1\x27\x32\x84\x1e\x04\x38\x2f"
                "\xc2\xed\xb4\xbe\xf6\x60\x1d\x5c\xad\xc5\x1c\x35\xf3\x15\xa3"
                "\x7d\x6d\xd8\x97\x45\x9b\x3d\x2a\xcb\xc0\xc5\x18\x43\x35\xeb"
                "\x2d\x39\x6b\xc6\x5d\x86\xee\x26\xa1\x79\xa0\x25\x80\x20\x5d"
                "\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b"
                "\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb"
                "\x4e\x81\x01\x09\xa3\x27\x80\x20\xaf\x93\xfd\x22\x45\xc2\x08"
                "\xab\x43\xf7\x45\x56\x63\xec\xaf\x15\x33\xa0\x2a\xb4\x9e\x15"
                "\xb4\x6e\xda\x87\x35\xde\x09\x4b\x06\x31\x81\x03\x01\x00\x00"
                "\xa4\x27\x80\x20\x55\xcc\xd1\xa2\x2c\x90\x8d\xe3\x2e\x42\xd4"
                "\xe0\x65\xb2\xf7\xda\xc0\x07\x1e\xd3\x23\x0f\xfe\x78\x13\xa2"
                "\x86\x61\xc4\x34\x28\x50\x81\x03\x02\x00\x00\xa3\x82\x02\x08"
                "\x80\x82\x01\x00\xbd\x63\x74\xd9\xc0\x3e\x0c\x57\x55\x99\x00"
                "\xf3\xa8\x03\xdc\x9a\x6c\x14\xfc\x83\x33\x63\x87\x35\x9c\xfe"
                "\xc3\x00\xb4\x8b\x03\xc7\x5f\x0a\xe2\x94\xaa\x3f\x76\x15\xb1"
                "\xb9\xf6\x5f\x0a\x87\x0c\x5c\x35\xbc\x2f\x0f\x04\xdd\x9d\x12"
                "\x8d\x94\xeb\x8b\x93\xb4\x4e\x96\x20\xb7\x17\xa0\x8e\xff\x9e"
                "\x1f\x43\xbf\xd6\x6a\x1e\xb6\x0d\x7f\x2c\x08\x67\xa5\xe7\xa3"
                "\xb6\xd2\x63\x6a\xf2\xeb\xd1\x21\x83\x8f\xa0\x25\x4a\xc6\xcb"
                "\x4e\x66\xc3\x5f\x37\xdf\x5c\x12\xb7\xb8\xfa\x7a\x57\x91\x9d"
                "\x55\xa6\x96\x91\xee\x94\xb0\xcc\x45\xd3\x76\x70\x6f\x12\xbd"
                "\x81\x9d\x08\x1b\x6d\x55\x3c\x19\x56\x9c\xcf\xc4\xb4\x63\x8a"
                "\x87\x35\x2b\x4c\xc6\xe1\x0d\x74\x31\xaa\xc6\x25\x0d\x90\x55"
                "\x14\xf1\x73\x09\x93\xba\xc6\xda\x52\x7f\xc2\xdd\x9d\xb2\x4f"
                "\x92\x43\xa6\xc9\x2c\x22\xc4\x5a\x22\xc2\x56\xac\xfa\x6a\x37"
                "\x6a\x0c\x22\x72\x5d\x30\x50\x4a\x6b\x93\xab\xcf\x69\x5a\x09"
                "\xd2\x5a\x87\x31\x80\xa7\x5b\xe4\x34\x42\x13\x44\x1d\xe6\xf9"
                "\x27\x21\xa7\x03\x74\x64\x18\xfa\xd0\x68\x28\x73\x37\x3c\xf6"
                "\x63\x10\x56\xcc\x25\x08\xb9\xad\xc8\x25\x64\xd1\x9c\x7c\xe7"
                "\x6c\xa6\x12\x2c\x7d\x81\x82\x01\x00\x05\xf9\x79\x9b\xb3\x59"
                "\x13\x30\x63\x01\x2a\x6b\x00\x4c\x11\x24\xce\xaf\x3e\x6d\x9b"
                "\xa8\xd3\x63\x52\xc2\xc6\x5c\x88\xa8\x65\xfc\x61\xd0\x92\x0f"
                "\x2c\x26\x68\xc8\x21\xcc\x82\x4b\xbc\x59\x93\x52\x02\xc4\x61"
                "\x5a\xb2\x1f\xd5\x6c\xc8\xdc\xc3\xff\x10\x88\x78\x01\xfd\x6c"
                "\xdc\x94\xf6\xa8\xfc\x44\x47\xa4\x9d\x0b\xcb\xdd\xa3\x5f\x90"
                "\xa4\x04\x2f\x27\xe3\xb2\x60\xde\x67\x1b\x1f\x94\x7c\x04\x77"
                "\x0b\xd5\xc2\x73\x39\x1a\x09\x16\xa7\x82\x0f\xe5\xdd\x74\xeb"
                "\x7e\x16\xf2\x4e\xda\x0a\x85\x3a\x04\xbd\x83\x5b\x07\x5d\x46"
                "\x79\x8d\x46\x95\xd2\x99\x88\x94\x24\x3b\xb0\x3a\x1c\x78\x47"
                "\x22\xb1\x0a\x69\x6b\x20\x8f\x07\x72\x7e\xe5\x30\x30\x39\xe8"
                "\x5c\xb1\xaa\xbb\x80\x36\x52\x39\x70\x3c\x51\x00\xa1\x22\x9d"
                "\xcf\x20\xd9\x6c\xb3\x8b\x23\x61\x94\x47\x04\xf2\xd5\xb5\x90"
                "\x19\xa9\xe0\x64\x6f\xe4\xa7\x4c\x8c\xe4\x25\x2a\xe2\x05\xdd"
                "\x11\x7a\x2a\x15\x40\x68\xb0\xaf\xa5\x04\x9b\xf6\x43\x07\xc8"
                "\xef\xab\x25\xdd\x43\xdb\x52\x33\xfd\x58\xd8\x9b\xad\x9b\xd5"
                "\xca\x46\xdb\xc4\x46\x81\x9d\x41\x38\x60\xde\x7f\xe1\xdf\xba"
                "\xc8\x47\xf8\x40\x4e\x44\xc7\x43\xd4\x42\xa4\x64\x80\x20\x37"
                "\x86\xc1\x8d\x06\xf2\xe9\x58\x82\x95\xcd\xb6\x5d\x37\x28\xc9"
                "\x72\xa9\x41\x20\xdc\x78\x3d\xac\x24\x8c\xb0\x6f\x1e\x44\x22"
                "\xc3\x81\x40\xd8\x59\x56\xbd\x99\x5c\xdd\xcd\x82\x9b\xea\x14"
                "\x18\x09\x9a\x8c\x54\xff\xb3\xd4\xf3\xbf\xc1\x4b\x70\x2a\xc9"
                "\x69\x5d\x42\x8a\x34\x08\x74\x3a\xef\x8b\xd9\x2e\x7a\x0d\xb7"
                "\xdb\x68\xb3\xa8\xb8\x12\x3a\x11\x60\x20\xee\xd9\x1e\x4a\xb6"
                "\x33\x94\x27\x4e\x83\xf0\x0e\xa1\x81\xd3\xa0\x25\x80\x20\x5d"
                "\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b"
                "\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb"
                "\x4e\x81\x01\x09\xa1\x2b\x80\x20\xf7\x69\x49\x84\x5f\xb9\xe9"
                "\xa9\x41\xd3\x1f\xd5\x1f\xcc\x30\x12\x27\x2d\x05\x15\xad\xd9"
                "\x41\xd1\xcf\x68\xa1\x23\xb0\xfe\x13\xac\x81\x03\x04\x2c\x2a"
                "\x82\x02\x03\xb8\xa2\x2b\x80\x20\x14\xe2\x21\xc5\x92\xb6\x3f"
                "\x66\xb2\xce\x07\xc4\x86\xe3\x14\x28\x95\xac\x99\x5f\xf0\x19"
                "\xd0\x77\x05\xb1\xd6\x31\xa9\xe0\x61\x31\x81\x03\x01\x04\x00"
                "\x82\x02\x04\x10\xa3\x27\x80\x20\x78\xe3\x04\xf4\xa6\x16\x68"
                "\x4c\x1b\xcf\x3a\x32\xff\xbc\x75\x1a\xe6\x08\x9b\xff\xba\x79"
                "\xf4\x39\x7a\xfc\xe1\x6f\xff\x3e\xb3\x75\x81\x03\x01\x00\x00"
                "\xa4\x27\x80\x20\x0d\xea\xc5\x16\x5c\x62\xb8\xd1\xa4\xe7\x5a"
                "\x07\x58\x00\x79\x51\x88\x21\xe9\x4d\xba\x73\x7b\xad\x60\x9c"
                "\x5c\x26\x00\x2e\xd1\x51\x81\x03\x02\x00\x00"s;
            auto const thresh0EncodedCondition =
                "\xa2\x2b\x80\x20\x31\xd3\x7f\x56\x8e\xe6\xcd\xf4\xbc\xde\xea"
                "\x41\x16\xe5\xc0\xca\xd4\x3e\xa0\xc8\xf2\x20\xd2\x3c\x91\x8e"
                "\x94\x39\xc7\x66\x3b\xda\x81\x03\x0c\x7c\x4a\x82\x02\x03\xd8"s;
            auto const thresh0EncodedFingerprint =
                "\x30\x82\x01\x80\x80\x01\x04\xa1\x82\x01\x79\xa0\x25\x80\x20"
                "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
                "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
                "\xeb\x4e\x81\x01\x09\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1"
                "\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21"
                "\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa1"
                "\x2b\x80\x20\x2c\x51\xc6\x86\x0c\xc6\x95\x7f\x99\x0c\xe8\x17"
                "\xc7\xa5\x18\xb7\xa1\x0f\x12\x19\xa6\x36\xe8\xa5\x60\x85\x01"
                "\x70\xdb\x3c\xcc\xfc\x81\x03\x04\x2c\x20\x82\x02\x03\xb8\xa1"
                "\x2b\x80\x20\xf7\x69\x49\x84\x5f\xb9\xe9\xa9\x41\xd3\x1f\xd5"
                "\x1f\xcc\x30\x12\x27\x2d\x05\x15\xad\xd9\x41\xd1\xcf\x68\xa1"
                "\x23\xb0\xfe\x13\xac\x81\x03\x04\x2c\x2a\x82\x02\x03\xb8\xa2"
                "\x2b\x80\x20\x14\xe2\x21\xc5\x92\xb6\x3f\x66\xb2\xce\x07\xc4"
                "\x86\xe3\x14\x28\x95\xac\x99\x5f\xf0\x19\xd0\x77\x05\xb1\xd6"
                "\x31\xa9\xe0\x61\x31\x81\x03\x01\x04\x00\x82\x02\x04\x10\xa3"
                "\x27\x80\x20\x32\xec\xaa\x5e\xa6\x88\xdc\xe4\x81\x0f\x93\x0f"
                "\x65\xde\x87\xfd\x54\x8c\x79\x04\x81\xe3\x63\x3f\x3d\x08\xa1"
                "\xba\x0a\x24\x2b\x46\x81\x03\x01\x00\x00\xa3\x27\x80\x20\x78"
                "\xe3\x04\xf4\xa6\x16\x68\x4c\x1b\xcf\x3a\x32\xff\xbc\x75\x1a"
                "\xe6\x08\x9b\xff\xba\x79\xf4\x39\x7a\xfc\xe1\x6f\xff\x3e\xb3"
                "\x75\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x0d\xea\xc5\x16\x5c"
                "\x62\xb8\xd1\xa4\xe7\x5a\x07\x58\x00\x79\x51\x88\x21\xe9\x4d"
                "\xba\x73\x7b\xad\x60\x9c\x5c\x26\x00\x2e\xd1\x51\x81\x03\x02"
                "\x00\x00\xa4\x27\x80\x20\x40\xd1\x9a\x63\x62\x9b\xc0\x76\xab"
                "\x11\x73\x42\x86\xb3\x20\x9d\x23\xe8\x5e\xee\xb9\x82\x5d\x93"
                "\xe3\xac\xad\xa0\x40\x41\x51\x1b\x81\x03\x02\x00\x00"s;
            check(
                &thresh0,
                thresh0Msg,
                thresh0EncodedFulfillment,
                thresh0EncodedCondition,
                thresh0EncodedFingerprint);
        }
    }

    void
    testThresh38()
    {
        testcase("Thresh38");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * thresh0
        // ** Preim40Cond
        // ** Rsa41Cond
        // ** Ed42Cond
        // ** prefix1
        // *** prefix2
        // **** thresh3
        // ***** Preim10Cond
        // ***** Rsa11Cond
        // ***** Ed12Cond
        // ***** Thresh13Cond
        // ***** rsa4
        // ***** thresh5
        // ****** Preim7Cond
        // ****** Rsa8Cond
        // ****** Ed9Cond
        // ****** rsa6
        // ** prefix18
        // *** prefix19
        // **** thresh20
        // ***** Preim27Cond
        // ***** Rsa28Cond
        // ***** Ed29Cond
        // ***** Thresh30Cond
        // ***** rsa21
        // ***** thresh22
        // ****** Preim24Cond
        // ****** Rsa25Cond
        // ****** Ed26Cond
        // ****** rsa23
        // ** thresh35
        // *** Preim37Cond
        // *** Rsa38Cond
        // *** Ed39Cond
        // *** rsa36

        auto const rsa4Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa4PublicKey{
            {0xbe, 0x09, 0xc5, 0xa4, 0x27, 0x29, 0xdf, 0xd4, 0x67, 0x76, 0xbe,
             0xbf, 0x2c, 0xf3, 0xa2, 0x0b, 0x42, 0xe4, 0xbf, 0xeb, 0xdd, 0x67,
             0x20, 0xfb, 0x7a, 0x27, 0x93, 0xc0, 0x78, 0x47, 0x78, 0xd7, 0x15,
             0x32, 0xee, 0x38, 0x81, 0x0d, 0x36, 0xa2, 0xc4, 0x65, 0x44, 0xe6,
             0x62, 0x26, 0xb9, 0x58, 0x13, 0xa4, 0x15, 0x82, 0xab, 0xb1, 0x16,
             0x61, 0xfc, 0x01, 0x98, 0xc6, 0x1a, 0x69, 0xc6, 0xba, 0x39, 0x3f,
             0x01, 0x55, 0x3d, 0xd7, 0x8e, 0x14, 0x42, 0x6d, 0x78, 0x74, 0x9b,
             0x28, 0xcb, 0x31, 0x39, 0x98, 0x5a, 0x11, 0xdc, 0xc1, 0x18, 0x9d,
             0x8d, 0xb0, 0xcd, 0x1b, 0x4c, 0x10, 0xab, 0x14, 0x64, 0x19, 0xf1,
             0x33, 0x15, 0x45, 0xc8, 0x92, 0x82, 0x03, 0x82, 0x8a, 0xaa, 0xad,
             0x94, 0xfc, 0x24, 0x11, 0x96, 0x99, 0x7e, 0x94, 0x5a, 0x82, 0x57,
             0x68, 0x61, 0x9f, 0x7b, 0x45, 0xe0, 0x99, 0x9e, 0x4f, 0x32, 0x50,
             0x5f, 0x05, 0xc8, 0x11, 0xae, 0xc4, 0x0c, 0x63, 0x18, 0x0e, 0x02,
             0x59, 0x36, 0x25, 0x92, 0x06, 0x32, 0xc7, 0x71, 0x47, 0x99, 0xcc,
             0x0a, 0x6e, 0x0a, 0x58, 0x71, 0x3f, 0x5e, 0xb7, 0x78, 0xf7, 0x98,
             0x79, 0xdf, 0x74, 0xa4, 0xeb, 0xa9, 0x00, 0xfd, 0x81, 0xb3, 0xcf,
             0x04, 0x8c, 0x5d, 0x7d, 0xe7, 0xb2, 0x82, 0x90, 0x49, 0xbd, 0x69,
             0xf3, 0x08, 0xe9, 0x92, 0xc6, 0x9e, 0x41, 0xba, 0x74, 0xd8, 0x8d,
             0x81, 0x97, 0x6f, 0x86, 0xab, 0xc9, 0xf1, 0x02, 0x31, 0xb4, 0xce,
             0x47, 0xb0, 0x39, 0xc8, 0xba, 0x51, 0xa7, 0x39, 0xf3, 0x71, 0xa2,
             0x25, 0x27, 0x37, 0x6e, 0x09, 0x6f, 0x19, 0x59, 0xbc, 0x65, 0xd9,
             0xcd, 0x12, 0xd3, 0x2c, 0xa2, 0x78, 0xfa, 0x23, 0x15, 0x1a, 0x82,
             0x41, 0x91, 0x1b, 0xbe, 0x8a, 0xe7, 0xfe, 0x3c, 0x3c, 0x30, 0x32,
             0xaa, 0xe9, 0xf3}};
        std::array<std::uint8_t, 256> const rsa4Sig{
            {0x04, 0x38, 0xce, 0xfd, 0xfe, 0x63, 0x4a, 0x02, 0xba, 0x44, 0x28,
             0xc7, 0x9a, 0x94, 0x85, 0x71, 0xd7, 0x17, 0xfc, 0x9c, 0x93, 0x80,
             0x18, 0x53, 0x70, 0x36, 0xa6, 0x3b, 0xde, 0xf5, 0x79, 0x14, 0xcb,
             0xfd, 0xe2, 0x2b, 0x1d, 0xe9, 0x2a, 0x1c, 0xe2, 0xc1, 0x61, 0x2e,
             0x1d, 0xc0, 0x0a, 0x70, 0x14, 0x1b, 0x34, 0xf8, 0x99, 0x90, 0x61,
             0xba, 0x51, 0x69, 0xa6, 0xea, 0x41, 0x6a, 0x7d, 0x67, 0xb2, 0xd8,
             0x04, 0x85, 0x79, 0x69, 0x31, 0x5d, 0x3a, 0xdd, 0xfb, 0xf4, 0x9a,
             0x47, 0xa1, 0xba, 0x77, 0x7e, 0xc1, 0xec, 0x1e, 0xe2, 0x61, 0x82,
             0x99, 0x64, 0x60, 0x0d, 0x9e, 0x08, 0x2c, 0xdd, 0x83, 0x74, 0x8f,
             0x1b, 0xd1, 0x07, 0xcf, 0x97, 0x34, 0x9e, 0x59, 0x70, 0xa4, 0xce,
             0x84, 0x98, 0xe0, 0x19, 0xd7, 0x57, 0x5c, 0x76, 0x11, 0xdd, 0xeb,
             0x2e, 0x59, 0x5a, 0xed, 0xaf, 0x29, 0xce, 0x3b, 0xdf, 0xb6, 0xb8,
             0x3e, 0xcf, 0xf3, 0x09, 0x6f, 0x5a, 0x34, 0xee, 0x9e, 0x88, 0x3b,
             0xd1, 0xad, 0xe0, 0x5c, 0x44, 0xb6, 0xea, 0x1f, 0xd0, 0x75, 0x91,
             0xd9, 0x94, 0x88, 0x6a, 0xa0, 0xff, 0xbb, 0xf9, 0x9a, 0x9c, 0x5c,
             0x3d, 0xab, 0x2c, 0x9e, 0x90, 0xe6, 0x48, 0x08, 0xb2, 0x41, 0xcc,
             0xe5, 0xd2, 0x54, 0x72, 0x25, 0xdb, 0x8e, 0xd3, 0xe4, 0x66, 0xa4,
             0xdc, 0x7c, 0x81, 0x5d, 0x7a, 0x1d, 0xb8, 0x0e, 0xfe, 0x53, 0xbd,
             0xf9, 0x5a, 0x53, 0x21, 0x0a, 0x70, 0xdf, 0x6f, 0x1a, 0xb8, 0x2c,
             0xe6, 0x8a, 0x27, 0x10, 0xc7, 0xd8, 0xa7, 0xd9, 0x6c, 0x4d, 0x48,
             0x22, 0x2d, 0x4f, 0x03, 0x4e, 0xbf, 0xc5, 0x3b, 0x3c, 0x49, 0x2f,
             0x32, 0x6d, 0x69, 0xfb, 0x98, 0x5a, 0x73, 0xec, 0xe1, 0xde, 0xfd,
             0x97, 0xb1, 0x14, 0x13, 0xdf, 0xdb, 0x59, 0x59, 0xdc, 0x44, 0xcc,
             0xdc, 0xeb, 0xee}};
        auto const rsa6Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa6PublicKey{
            {0xd0, 0x07, 0xfc, 0x9d, 0xb0, 0xa1, 0xa6, 0x40, 0xe4, 0x52, 0x30,
             0x42, 0x74, 0xfd, 0x35, 0x04, 0xde, 0x45, 0x68, 0xb3, 0x22, 0xdd,
             0xff, 0x41, 0x43, 0x69, 0x33, 0xc0, 0xff, 0x35, 0xb6, 0x6d, 0x15,
             0xe9, 0x54, 0x15, 0xeb, 0x1d, 0x07, 0xe2, 0x25, 0x2b, 0xdb, 0xaa,
             0x16, 0x8d, 0x0d, 0x7f, 0x05, 0xf0, 0xd2, 0x7d, 0xb4, 0x9b, 0x51,
             0x19, 0x20, 0x1e, 0x3d, 0xba, 0x50, 0x9e, 0x51, 0x13, 0x81, 0x43,
             0x55, 0x96, 0xca, 0xdb, 0x88, 0x1f, 0xef, 0x2d, 0x38, 0x3f, 0xae,
             0x8d, 0xac, 0xc8, 0x6f, 0x2b, 0xd5, 0xf0, 0x34, 0x1a, 0x99, 0x00,
             0x7c, 0x6d, 0xb3, 0x1b, 0x1d, 0x68, 0xdb, 0xf8, 0x1c, 0x59, 0x3a,
             0x63, 0x38, 0x7c, 0x1c, 0x14, 0xbc, 0x22, 0xcf, 0xc8, 0x9a, 0xc6,
             0x96, 0x6f, 0x3d, 0x03, 0x0b, 0x61, 0x6b, 0x7d, 0x75, 0x97, 0xe8,
             0x25, 0xb8, 0x2f, 0xfa, 0xf4, 0x07, 0x44, 0xdf, 0x00, 0x3d, 0xff,
             0x0d, 0xd5, 0x7f, 0x7f, 0xf3, 0x0c, 0x13, 0xac, 0x8d, 0xf8, 0x8c,
             0x79, 0xc5, 0xf3, 0x29, 0xdc, 0x23, 0x65, 0xd3, 0xd1, 0x1c, 0xa6,
             0x14, 0x78, 0x6a, 0x1a, 0xe3, 0x15, 0x8d, 0x8b, 0xdc, 0xa0, 0x5a,
             0xc7, 0x82, 0xb0, 0x03, 0x6c, 0x71, 0x43, 0x59, 0x24, 0xc7, 0x50,
             0x64, 0xb2, 0xa7, 0x69, 0xf5, 0xbd, 0xe6, 0x5e, 0xaa, 0x77, 0x59,
             0x60, 0x36, 0xc0, 0xe3, 0x42, 0x7f, 0x05, 0x3b, 0x4c, 0x02, 0x0e,
             0x70, 0x5a, 0x70, 0xc5, 0x2a, 0xeb, 0x94, 0x4d, 0x15, 0x09, 0xef,
             0xbb, 0x58, 0x42, 0x68, 0x05, 0x59, 0x70, 0xa0, 0x17, 0xb2, 0x8e,
             0xdf, 0x7b, 0x40, 0x5d, 0x21, 0x1e, 0xfe, 0x62, 0x58, 0xde, 0xfb,
             0x14, 0x91, 0x18, 0xf3, 0x4f, 0x9b, 0x36, 0x55, 0xcf, 0xb3, 0x5e,
             0xec, 0x4f, 0xcc, 0x6d, 0x13, 0x58, 0xc8, 0xa3, 0xa3, 0xee, 0x23,
             0x8a, 0xc2, 0xbf}};
        std::array<std::uint8_t, 256> const rsa6Sig{
            {0x1c, 0x32, 0xd4, 0xb9, 0x5b, 0x5f, 0x32, 0xef, 0xce, 0x9f, 0x5b,
             0x73, 0xbd, 0x4a, 0x23, 0x7e, 0xf1, 0xbc, 0x7e, 0xad, 0x16, 0x2a,
             0x34, 0xa2, 0xa9, 0x7d, 0x49, 0x16, 0x7f, 0x87, 0x04, 0xe6, 0x76,
             0x4d, 0xde, 0x04, 0x31, 0x4b, 0xc1, 0x39, 0xcd, 0x7b, 0x97, 0xcc,
             0x35, 0x16, 0xcb, 0xa8, 0x82, 0xf3, 0xce, 0xc2, 0xd6, 0xf9, 0xcf,
             0x08, 0xb3, 0xc3, 0xa8, 0x9e, 0xb6, 0x76, 0x95, 0x1d, 0x0d, 0x6f,
             0x82, 0x4e, 0x85, 0x84, 0x82, 0x60, 0x64, 0x58, 0x60, 0xf0, 0xa3,
             0xda, 0xe2, 0x5a, 0x2f, 0x9b, 0x10, 0x3a, 0x4d, 0xbf, 0x87, 0x9c,
             0x24, 0x24, 0x64, 0xa3, 0x92, 0x27, 0x79, 0x24, 0xff, 0x55, 0x5c,
             0xd0, 0x74, 0xd5, 0x1e, 0xd0, 0x40, 0xb5, 0x50, 0x6a, 0x24, 0x2e,
             0x70, 0x12, 0xba, 0xfb, 0xa4, 0x27, 0x1a, 0xea, 0xf6, 0xe5, 0xcf,
             0xb8, 0x55, 0xd9, 0x96, 0xdf, 0x60, 0xe8, 0x28, 0x92, 0x4c, 0xe7,
             0x39, 0x7d, 0xf1, 0xfd, 0x9a, 0x8b, 0x30, 0xb3, 0x77, 0x32, 0xc3,
             0x10, 0x91, 0xdc, 0xc7, 0x8c, 0x18, 0x59, 0x59, 0xf2, 0x98, 0x47,
             0x8b, 0x53, 0xc5, 0xcd, 0x44, 0x96, 0x46, 0xf5, 0x7b, 0x05, 0xa7,
             0x48, 0x13, 0xc1, 0x5b, 0x12, 0xca, 0x30, 0xf6, 0x48, 0x29, 0xca,
             0x51, 0x9d, 0xc0, 0xa5, 0x00, 0x5a, 0x14, 0x47, 0x3a, 0x53, 0x6f,
             0xdd, 0xbb, 0xd6, 0x32, 0xf7, 0x4e, 0x48, 0xfb, 0xdc, 0xdd, 0x04,
             0xcb, 0x0c, 0x5a, 0x99, 0x1b, 0x98, 0xe1, 0xc4, 0x78, 0x67, 0xcb,
             0xff, 0x7a, 0xee, 0x28, 0x97, 0x05, 0xf9, 0x16, 0xcf, 0x5f, 0xb5,
             0x7f, 0xed, 0xf9, 0xce, 0x87, 0xd6, 0x7b, 0x93, 0x1c, 0x9a, 0xc5,
             0x57, 0xb8, 0x7a, 0x08, 0x2b, 0xd1, 0x1e, 0x16, 0x80, 0xc2, 0x23,
             0x7c, 0x0f, 0x09, 0xd5, 0x3e, 0x4a, 0x9c, 0x7e, 0xbc, 0xc1, 0x04,
             0xfe, 0xa5, 0xe2}};
        auto const thresh5Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim7CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim7Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim7CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa8CondConditionFingerprint =
            "\xd1\xb5\x1d\x35\x99\x9d\xb4\xc1\xaa\x81\x4d\xd7\x0e\xa9\x2a"
            "\x20\x7f\xe5\x5c\x75\xe8\x57\x8b\xbf\xe8\xd7\x1c\x7e\xb2\xbc"
            "\x91\x16"s;
        Condition const Rsa8Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa8CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed9CondConditionFingerprint =
            "\x92\xfa\xfc\xc6\x2f\xe2\x8d\x8d\x25\x7c\xd4\x46\xab\xea\x82"
            "\xd0\x3f\x36\xbe\x1d\x11\x2b\xa0\xfe\xfe\xd4\x00\xd5\x7d\x9b"
            "\xf6\xc9"s;
        Condition const Ed9Cond{Type::ed25519Sha256,
                                131072,
                                makeSlice(Ed9CondConditionFingerprint),
                                std::bitset<5>{0}};
        auto const thresh3Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim10CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim10Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim10CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa11CondConditionFingerprint =
            "\xaf\x93\xfd\x22\x45\xc2\x08\xab\x43\xf7\x45\x56\x63\xec\xaf"
            "\x15\x33\xa0\x2a\xb4\x9e\x15\xb4\x6e\xda\x87\x35\xde\x09\x4b"
            "\x06\x31"s;
        Condition const Rsa11Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa11CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed12CondConditionFingerprint =
            "\x55\xcc\xd1\xa2\x2c\x90\x8d\xe3\x2e\x42\xd4\xe0\x65\xb2\xf7"
            "\xda\xc0\x07\x1e\xd3\x23\x0f\xfe\x78\x13\xa2\x86\x61\xc4\x34"
            "\x28\x50"s;
        Condition const Ed12Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed12CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Thresh13CondConditionFingerprint =
            "\xd9\x95\x6e\x6e\x8b\x3b\x8b\x3b\xd7\x11\x4b\x11\x21\x26\x48"
            "\xbd\x92\x55\x47\x42\x66\x8f\xc1\x5f\xb4\x03\x78\x32\x05\xc5"
            "\x0e\x82"s;
        Condition const Thresh13Cond{
            Type::thresholdSha256,
            135168,
            makeSlice(Thresh13CondConditionFingerprint),
            std::bitset<5>{25}};
        auto const prefix2Prefix = "P2"s;
        auto const prefix2Msg = "P1abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix2MaxMsgLength = 14;
        auto const prefix1Prefix = "P1"s;
        auto const prefix1Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix1MaxMsgLength = 14;
        auto const rsa21Msg = "P19P18abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa21PublicKey{
            {0xde, 0x0b, 0xb1, 0x46, 0x39, 0xfb, 0xd2, 0xb8, 0x93, 0x21, 0x77,
             0x88, 0xa7, 0x0a, 0x28, 0x65, 0x39, 0x85, 0xe3, 0xf0, 0x3f, 0xd4,
             0x20, 0xd4, 0x55, 0x63, 0x43, 0xcf, 0x85, 0x3e, 0x08, 0xa5, 0xd3,
             0xf3, 0x5b, 0xa9, 0x47, 0xaf, 0x21, 0x49, 0xfa, 0x99, 0x3c, 0x97,
             0x49, 0x2e, 0x3b, 0xd7, 0x22, 0x7c, 0xb6, 0x70, 0xe0, 0x82, 0x9d,
             0xd2, 0x09, 0x7c, 0xc2, 0xc2, 0x03, 0x2b, 0xb2, 0x9e, 0x55, 0x3c,
             0xc9, 0xb5, 0x48, 0x91, 0xdc, 0xfd, 0x86, 0x68, 0x2c, 0x0e, 0x5b,
             0xba, 0x03, 0xaa, 0x7c, 0xa6, 0x18, 0x02, 0x10, 0x59, 0x1b, 0x7a,
             0x4a, 0x5c, 0xda, 0xe7, 0x2f, 0x3c, 0xa6, 0xff, 0x58, 0x23, 0x7b,
             0x3e, 0x80, 0x69, 0x54, 0x68, 0xb5, 0x4c, 0x13, 0xb6, 0x71, 0xa4,
             0x68, 0xc6, 0xc2, 0xa3, 0xd1, 0xe6, 0x00, 0xff, 0x2a, 0xc4, 0x2d,
             0x39, 0xa1, 0xe7, 0xae, 0xd5, 0xe2, 0xb4, 0x0a, 0x1c, 0x98, 0xd1,
             0x20, 0x13, 0xfa, 0xd2, 0xb4, 0xcd, 0x27, 0xb2, 0x1a, 0x89, 0xd9,
             0xc2, 0x2d, 0x69, 0x87, 0x81, 0x0b, 0x99, 0x4b, 0x5a, 0xc8, 0xa4,
             0x09, 0x5f, 0x04, 0xe7, 0xf2, 0xa6, 0x2b, 0x75, 0xcd, 0x02, 0x20,
             0x8f, 0x71, 0xb7, 0x1b, 0x7a, 0x2f, 0xe0, 0xf0, 0x7b, 0x19, 0x51,
             0xa9, 0x27, 0xea, 0xaa, 0x1c, 0xba, 0xa9, 0xf8, 0x96, 0x74, 0xb7,
             0x08, 0x27, 0x2d, 0xc5, 0x48, 0x0d, 0x81, 0x3d, 0x9a, 0xdb, 0x4d,
             0x29, 0x82, 0x22, 0x56, 0x19, 0x63, 0xac, 0x94, 0x55, 0xd4, 0x56,
             0x7e, 0x5a, 0x2f, 0x75, 0x82, 0xcb, 0xb5, 0x95, 0x9a, 0x35, 0x10,
             0x74, 0xc6, 0xa9, 0x10, 0x8a, 0xdb, 0x72, 0xfe, 0x57, 0x6a, 0x34,
             0x46, 0xc8, 0x45, 0x7c, 0xb0, 0xc8, 0x19, 0xc9, 0x0e, 0x22, 0xd2,
             0x6f, 0xa5, 0x8f, 0x99, 0x55, 0x4f, 0xc9, 0x4c, 0xa0, 0xd3, 0xf0,
             0x94, 0x07, 0x69}};
        std::array<std::uint8_t, 256> const rsa21Sig{
            {0x6a, 0x93, 0xb8, 0x62, 0xfd, 0x07, 0xbe, 0x02, 0xc2, 0xfd, 0x13,
             0x03, 0xaa, 0x8b, 0x32, 0xc1, 0xf4, 0xc3, 0xd1, 0x60, 0x79, 0x00,
             0x33, 0x9c, 0x16, 0x48, 0x40, 0x11, 0xef, 0xba, 0x98, 0xe9, 0x00,
             0xb6, 0xbb, 0x5d, 0x40, 0xa3, 0xcb, 0x9c, 0x05, 0xe5, 0xa3, 0x5a,
             0xb6, 0x11, 0x64, 0x78, 0x5c, 0xae, 0xd7, 0xff, 0x7f, 0x1b, 0x44,
             0x03, 0x53, 0x78, 0x44, 0x17, 0xab, 0x42, 0x59, 0x18, 0x25, 0xff,
             0x00, 0x9f, 0x31, 0x16, 0xe2, 0x99, 0x8d, 0x04, 0x2c, 0xee, 0x40,
             0x1e, 0xdb, 0xbe, 0x85, 0x6a, 0x49, 0xd8, 0xf1, 0xeb, 0xb5, 0x23,
             0x89, 0x9e, 0x6e, 0xb4, 0x69, 0x59, 0xaa, 0x84, 0x04, 0x52, 0xb8,
             0x4e, 0x1a, 0xf1, 0xf9, 0xb1, 0xd7, 0xa4, 0xab, 0x80, 0x0e, 0x86,
             0x02, 0x96, 0x04, 0xa3, 0xc5, 0x81, 0x7f, 0x78, 0xe6, 0x2a, 0xd5,
             0x66, 0x8f, 0x2c, 0x45, 0x84, 0xe0, 0x51, 0xc8, 0x80, 0x6d, 0xea,
             0xca, 0x2b, 0xf2, 0xe8, 0xf7, 0x74, 0x13, 0x58, 0x99, 0x20, 0x0e,
             0x84, 0x4b, 0x41, 0x58, 0x72, 0x09, 0x88, 0xd4, 0xc4, 0xa8, 0x2a,
             0x3f, 0x7d, 0x7f, 0x7f, 0x19, 0xb3, 0x46, 0xa7, 0xb6, 0x88, 0x48,
             0x16, 0xc8, 0xa6, 0x8e, 0xef, 0x25, 0x39, 0xce, 0xb7, 0x41, 0x61,
             0xcf, 0x10, 0x3c, 0x6d, 0x08, 0x0a, 0x6f, 0xba, 0xea, 0xf4, 0xec,
             0xea, 0xa7, 0xd2, 0xa7, 0x90, 0xbd, 0x57, 0x83, 0xb5, 0xbe, 0xf3,
             0xc3, 0x9c, 0xe3, 0x07, 0x78, 0xf5, 0x80, 0x01, 0x94, 0xbc, 0x5c,
             0xe9, 0x79, 0x13, 0xf4, 0x26, 0x9d, 0x03, 0x87, 0x56, 0x58, 0xc6,
             0x45, 0x0f, 0xaf, 0x05, 0xcc, 0x09, 0x03, 0x16, 0x81, 0x43, 0xff,
             0x20, 0x75, 0xa7, 0xcc, 0x52, 0xb4, 0xa5, 0xf6, 0x3a, 0xea, 0xf7,
             0x42, 0x6d, 0x24, 0x2f, 0x89, 0x58, 0xc2, 0x21, 0x54, 0xc9, 0x82,
             0x99, 0xac, 0x19}};
        auto const rsa23Msg = "P19P18abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa23PublicKey{
            {0xd7, 0x79, 0x96, 0xb4, 0xf5, 0x56, 0xa2, 0xdf, 0x83, 0xa7, 0x6e,
             0x70, 0xe7, 0xc9, 0xfb, 0x04, 0xba, 0x4b, 0x39, 0x10, 0xe2, 0xe7,
             0x8a, 0xc6, 0x59, 0x85, 0x88, 0xde, 0x26, 0x73, 0xfb, 0x5e, 0x7f,
             0x66, 0x34, 0xab, 0x29, 0x2d, 0xf1, 0x46, 0xf5, 0xbd, 0x4c, 0x4d,
             0x52, 0x5e, 0x4e, 0xf8, 0xd0, 0xdb, 0x85, 0x7a, 0xce, 0xa4, 0xb0,
             0x7e, 0xf0, 0x0f, 0x04, 0x58, 0x4c, 0x61, 0x75, 0x64, 0x81, 0x8e,
             0xb0, 0xeb, 0x49, 0x3e, 0xc2, 0x30, 0x28, 0x03, 0xf9, 0x70, 0x4d,
             0x47, 0xc0, 0x11, 0x7f, 0xb1, 0x25, 0x71, 0x0f, 0x13, 0x5d, 0x52,
             0x46, 0x38, 0x3b, 0x9f, 0xf6, 0x61, 0x57, 0xc3, 0xfc, 0x98, 0xfb,
             0x4c, 0xa2, 0xed, 0x0c, 0xaa, 0xa9, 0x5c, 0x53, 0x7e, 0xc0, 0xd3,
             0x1f, 0x9f, 0xe3, 0xea, 0x40, 0x24, 0x1a, 0x4f, 0x0d, 0x50, 0x5e,
             0x6f, 0xe8, 0xe5, 0xea, 0x12, 0xe5, 0xfc, 0x49, 0xb6, 0xb6, 0x6d,
             0xdd, 0xc9, 0x83, 0x68, 0x29, 0x26, 0x39, 0xc7, 0x76, 0xf7, 0xfa,
             0x70, 0xb3, 0xac, 0xe0, 0xf6, 0xfe, 0xf3, 0x9a, 0xdd, 0xc5, 0x2b,
             0x1c, 0x97, 0x7b, 0x6e, 0xa4, 0x49, 0xb9, 0xa4, 0x22, 0x16, 0xcb,
             0xe0, 0x5b, 0x47, 0xc9, 0x40, 0x07, 0x20, 0xbe, 0x3c, 0xf9, 0x80,
             0x47, 0xf5, 0x8f, 0x65, 0x94, 0x57, 0x61, 0x4a, 0x73, 0x8c, 0x2f,
             0x3c, 0x5e, 0x31, 0xae, 0xff, 0x45, 0xd7, 0x8f, 0x39, 0xce, 0x94,
             0x04, 0x79, 0xec, 0xaa, 0x71, 0x08, 0x9e, 0x34, 0xa1, 0x71, 0x35,
             0x66, 0xe9, 0x54, 0xee, 0xff, 0x90, 0xce, 0x8f, 0x51, 0x96, 0xa6,
             0x14, 0x66, 0x35, 0xa4, 0x62, 0xbf, 0x99, 0xe7, 0xab, 0x6e, 0x1e,
             0x29, 0x14, 0x6e, 0x84, 0x87, 0xad, 0x99, 0xad, 0x35, 0xc4, 0xfe,
             0xb9, 0x38, 0x08, 0x1b, 0xc3, 0x8c, 0x69, 0x99, 0x8a, 0x32, 0x90,
             0x69, 0xa4, 0x5f}};
        std::array<std::uint8_t, 256> const rsa23Sig{
            {0x77, 0x13, 0x98, 0x35, 0x5d, 0xae, 0x7d, 0xcb, 0x15, 0x7e, 0x71,
             0x85, 0xe4, 0xa2, 0x42, 0xba, 0xe8, 0x32, 0xac, 0x1e, 0xb7, 0xb5,
             0x61, 0x73, 0xc7, 0xf6, 0xb3, 0x61, 0x6a, 0xd9, 0x32, 0xfb, 0x7c,
             0xb0, 0x31, 0x67, 0xdb, 0x12, 0xd3, 0xce, 0x32, 0x92, 0x74, 0x6a,
             0xf1, 0x89, 0xed, 0x85, 0x49, 0x2f, 0x83, 0xd7, 0x4f, 0xda, 0x5c,
             0x98, 0x33, 0x50, 0x69, 0x59, 0x80, 0x46, 0xe8, 0x9f, 0x18, 0x12,
             0x11, 0xcc, 0x4f, 0xd7, 0x29, 0x31, 0xb3, 0x21, 0xf0, 0xb2, 0xe8,
             0x08, 0x9a, 0x33, 0xc6, 0x51, 0xee, 0x69, 0x27, 0xd0, 0x46, 0xf4,
             0xcf, 0x28, 0x9b, 0x29, 0x3a, 0xde, 0xad, 0xec, 0xd1, 0x2c, 0xe8,
             0xc9, 0x74, 0x1e, 0x16, 0xb8, 0x8e, 0x93, 0xb6, 0x03, 0xb1, 0x50,
             0xeb, 0xe1, 0xf3, 0xe0, 0x7a, 0x07, 0xb4, 0x41, 0xd4, 0x4a, 0x0a,
             0x32, 0x55, 0x8a, 0xf2, 0xa0, 0x3b, 0x6a, 0x4e, 0x1c, 0xe0, 0xe7,
             0x89, 0xb8, 0xdc, 0x87, 0xfb, 0x5d, 0xd1, 0xdb, 0xc4, 0xeb, 0xd3,
             0x6f, 0xe7, 0xcf, 0x99, 0xdf, 0xa9, 0x3b, 0x0d, 0xe9, 0xdf, 0x25,
             0xb6, 0x2c, 0x6c, 0x01, 0x5f, 0xf2, 0xc2, 0xa5, 0xe1, 0x91, 0x7e,
             0x54, 0xae, 0x40, 0x85, 0x99, 0x99, 0x91, 0xe0, 0x05, 0xcb, 0xff,
             0x10, 0x61, 0xbc, 0x57, 0x7e, 0x75, 0xb7, 0xb0, 0x10, 0x4f, 0x8e,
             0x73, 0xb8, 0xa5, 0x2d, 0x3f, 0x98, 0xae, 0xe0, 0x98, 0xcd, 0xb4,
             0x6f, 0x8d, 0xbb, 0x79, 0xb6, 0x81, 0x5a, 0xf9, 0x8f, 0x38, 0x8e,
             0x4b, 0x99, 0xa6, 0x2a, 0x6a, 0x99, 0x7a, 0x84, 0x01, 0xcf, 0x99,
             0x7c, 0x78, 0x56, 0x95, 0xf6, 0x67, 0x8b, 0x7e, 0x0f, 0x07, 0x7c,
             0x17, 0xa7, 0xe3, 0x6b, 0x44, 0xa2, 0x53, 0x8f, 0xa6, 0x26, 0xe9,
             0x2e, 0x4b, 0x6b, 0xef, 0xfe, 0x4c, 0x99, 0xde, 0x8e, 0xcf, 0x9d,
             0x4b, 0x62, 0x37}};
        auto const thresh22Msg = "P19P18abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim24CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim24Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim24CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa25CondConditionFingerprint =
            "\xb2\x7f\x94\xe3\xdf\x0c\x9a\x71\x3a\xd2\xeb\x71\x91\x72\x40"
            "\xb9\xcb\xb7\xac\xbc\x77\x0a\x08\x85\x07\xa3\x85\x4e\x7e\xc9"
            "\x50\x96"s;
        Condition const Rsa25Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa25CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed26CondConditionFingerprint =
            "\xd6\x2f\x07\xbd\x56\xfe\x9a\x02\x8c\x98\x1a\x72\x17\xb6\x26"
            "\x90\x51\xaf\xe4\xea\x51\x64\xe0\x58\x3e\x85\xc9\x29\x22\x94"
            "\xa1\xbf"s;
        Condition const Ed26Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed26CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const thresh20Msg = "P19P18abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim27CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim27Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim27CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa28CondConditionFingerprint =
            "\x58\xac\x94\x55\x27\x79\x7a\x0c\xac\x84\x2d\x5c\x13\x32\xee"
            "\x84\x25\xb8\xb8\xec\x25\x0d\x40\xee\xc0\xd4\x79\x18\x3f\xc6"
            "\xbc\xd7"s;
        Condition const Rsa28Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa28CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed29CondConditionFingerprint =
            "\xc5\x39\xb2\xc7\xc4\x92\x8a\x29\xf3\x72\xb4\x6c\xa5\x0d\x8c"
            "\xbe\x43\xda\xc9\xac\x6c\x26\x7c\x44\xb9\x3f\xee\x40\xcc\x8e"
            "\x41\x3c"s;
        Condition const Ed29Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed29CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Thresh30CondConditionFingerprint =
            "\x55\x54\x55\x25\x4a\x1e\xf0\x5c\x22\x0f\xc2\x46\xc5\x9b\x13"
            "\x25\x51\x61\xdf\x62\x52\x25\x82\x17\xe4\xd6\xdf\x1f\xfd\x8c"
            "\x68\x15"s;
        Condition const Thresh30Cond{
            Type::thresholdSha256,
            135168,
            makeSlice(Thresh30CondConditionFingerprint),
            std::bitset<5>{25}};
        auto const prefix19Prefix = "P19"s;
        auto const prefix19Msg = "P18abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix19MaxMsgLength = 14;
        auto const prefix18Prefix = "P18"s;
        auto const prefix18Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix18MaxMsgLength = 14;
        auto const rsa36Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa36PublicKey{
            {0xad, 0xe5, 0x0b, 0x45, 0xd6, 0x59, 0x1f, 0x85, 0xec, 0x50, 0x5f,
             0x4a, 0x96, 0x9d, 0xfd, 0x6e, 0x29, 0x58, 0x1c, 0xf5, 0xb2, 0xb4,
             0x29, 0x81, 0x6a, 0x97, 0xbc, 0x46, 0x54, 0xf0, 0xd2, 0x6e, 0x09,
             0xf4, 0x1a, 0x52, 0x29, 0x95, 0x0c, 0xe1, 0x75, 0xd5, 0xff, 0xbb,
             0xff, 0x4b, 0xa0, 0x87, 0x36, 0x20, 0x94, 0x4b, 0xb9, 0x09, 0x91,
             0x4b, 0x62, 0xcf, 0xab, 0x7e, 0x27, 0x94, 0xf7, 0x5a, 0x6b, 0xd1,
             0x13, 0x30, 0xd4, 0x9e, 0x1d, 0x20, 0xb3, 0xaf, 0x54, 0x91, 0x50,
             0xc9, 0x0b, 0x41, 0x67, 0x39, 0x4e, 0xaa, 0x29, 0xd0, 0xd1, 0xa5,
             0x54, 0xb0, 0x6f, 0xfe, 0xb4, 0x8b, 0x63, 0x9c, 0x10, 0x09, 0xe9,
             0xdb, 0x2b, 0xd0, 0x55, 0xe1, 0x89, 0x03, 0x41, 0x6b, 0x97, 0x7b,
             0xd0, 0x09, 0xfc, 0x59, 0xcc, 0x6b, 0x58, 0xca, 0xdb, 0x33, 0xe1,
             0x5a, 0x28, 0x4f, 0x32, 0x80, 0x71, 0x12, 0x73, 0xeb, 0x27, 0x2b,
             0x27, 0x59, 0x3f, 0x38, 0x0f, 0x70, 0x63, 0x45, 0x1e, 0xb3, 0x26,
             0xfc, 0x0f, 0x1f, 0xf1, 0xcd, 0xc9, 0xff, 0xd9, 0xb3, 0xb8, 0xe0,
             0x3c, 0x35, 0x2e, 0xbf, 0x74, 0x87, 0xf2, 0x48, 0xa6, 0x19, 0x1d,
             0xa0, 0x77, 0x86, 0x07, 0xa7, 0x3b, 0x3b, 0x6b, 0x5f, 0x31, 0x2d,
             0x84, 0x24, 0x05, 0xca, 0x7b, 0x3a, 0x70, 0xce, 0xf3, 0x51, 0x6a,
             0x7b, 0xf5, 0x00, 0x67, 0x07, 0xee, 0xdf, 0xce, 0x52, 0xd7, 0x71,
             0x86, 0xdf, 0x90, 0x30, 0xf6, 0x6c, 0xdd, 0x1b, 0x37, 0xc3, 0x71,
             0x01, 0x28, 0x5f, 0x32, 0xa2, 0x5e, 0x44, 0x86, 0xd7, 0x06, 0xc4,
             0x8b, 0xf1, 0x29, 0x75, 0x74, 0x42, 0x87, 0x7f, 0x5f, 0x09, 0x36,
             0xfe, 0xcc, 0x4c, 0x24, 0xc1, 0xf4, 0x95, 0x3a, 0xd7, 0x01, 0x76,
             0x8a, 0xfa, 0xac, 0x2c, 0x55, 0x31, 0x18, 0xfe, 0x41, 0xfc, 0xbf,
             0xd8, 0x07, 0x0f}};
        std::array<std::uint8_t, 256> const rsa36Sig{
            {0x0d, 0xa9, 0x8d, 0x40, 0x9c, 0xf3, 0xc6, 0xfa, 0x57, 0x6a, 0x6b,
             0x9c, 0xa2, 0x0e, 0x86, 0x6d, 0x33, 0x7e, 0x6b, 0xef, 0x35, 0xe7,
             0x74, 0xea, 0xa5, 0xa7, 0xc4, 0x21, 0xf7, 0x9d, 0x8c, 0x98, 0x62,
             0x00, 0xf8, 0x20, 0x95, 0x4c, 0xbf, 0x5e, 0x90, 0xd6, 0xbd, 0x52,
             0x7f, 0x00, 0xb3, 0x3b, 0x3f, 0xdb, 0x80, 0x49, 0x8f, 0x6a, 0xcd,
             0xec, 0x86, 0x7d, 0xac, 0x72, 0xcb, 0xc0, 0xb9, 0x1f, 0xc8, 0x3c,
             0x54, 0x2d, 0x25, 0x4a, 0xe7, 0xca, 0xcf, 0x06, 0x91, 0x72, 0x53,
             0x01, 0xf8, 0x9e, 0x49, 0x75, 0x84, 0xb2, 0x3f, 0x92, 0xfa, 0xfe,
             0x61, 0x83, 0xbd, 0x42, 0xa2, 0x6d, 0x7a, 0x1d, 0xce, 0x47, 0xb6,
             0xf8, 0xe4, 0xd8, 0x3d, 0xaf, 0x52, 0x58, 0x72, 0xba, 0x4a, 0x4b,
             0x9a, 0xaa, 0x21, 0x11, 0xbe, 0x98, 0x84, 0xa7, 0x01, 0x49, 0x55,
             0xd3, 0x4f, 0xc9, 0xf2, 0x35, 0x02, 0xad, 0x59, 0x44, 0x19, 0x46,
             0xb8, 0x71, 0x2d, 0xa4, 0xb8, 0xc8, 0xcb, 0x37, 0xd9, 0xe8, 0x6b,
             0xa5, 0xbe, 0x1d, 0x06, 0x80, 0x0b, 0x17, 0xcd, 0xc3, 0xad, 0xda,
             0x01, 0x72, 0xda, 0x03, 0xc4, 0x64, 0xd6, 0x7c, 0xab, 0xf8, 0x60,
             0xfa, 0x5e, 0x8d, 0xb8, 0x28, 0xa3, 0x96, 0xd6, 0x1b, 0xc2, 0x2d,
             0x09, 0x4c, 0xe8, 0x84, 0xcd, 0xcd, 0x09, 0x90, 0x02, 0x6a, 0x78,
             0x30, 0xd1, 0xc6, 0x3a, 0x0f, 0x8b, 0xf9, 0x45, 0x83, 0x77, 0x24,
             0xb5, 0x75, 0xbf, 0xb1, 0x3d, 0x54, 0x7d, 0x94, 0x07, 0xb6, 0x02,
             0xcd, 0xa6, 0xf1, 0xe6, 0x75, 0xbc, 0x67, 0xce, 0xc7, 0x71, 0x00,
             0x16, 0x66, 0xe4, 0x33, 0x0e, 0x2e, 0x08, 0x1a, 0x5f, 0x8e, 0x04,
             0x66, 0x98, 0xc5, 0xf9, 0x9b, 0x55, 0x43, 0x05, 0x34, 0xd9, 0x7c,
             0xb7, 0x20, 0xa0, 0x85, 0x2d, 0xf1, 0x11, 0x77, 0xc1, 0x82, 0xd0,
             0x2b, 0xf9, 0xdf}};
        auto const thresh35Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim37CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim37Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim37CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa38CondConditionFingerprint =
            "\x13\xb3\xe0\x2d\xea\x58\x68\x9a\xa7\x10\x7e\xb2\x1a\x12\x55"
            "\x79\xd6\xfe\xde\x57\x0f\x6c\x6b\xde\xd7\xfd\x12\xeb\xa6\x1d"
            "\xad\x43"s;
        Condition const Rsa38Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa38CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed39CondConditionFingerprint =
            "\xbe\x9b\x3b\xe3\x70\xfc\xc2\x29\xaa\xe9\x72\x91\x42\x6b\xd7"
            "\x1f\x1a\x25\x7d\xde\xa8\x39\xfb\xce\x5c\xaa\x63\xde\xfd\x1d"
            "\x23\xcf"s;
        Condition const Ed39Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed39CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const thresh0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim40CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim40Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim40CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa41CondConditionFingerprint =
            "\xf3\xe3\x0d\x35\x45\x3f\x9f\x57\x07\x0b\x13\x04\x4d\x62\x56"
            "\x30\x18\x34\x88\x02\x22\xa6\x94\x6e\xba\x97\xa4\x4a\x64\x5d"
            "\x05\xd1"s;
        Condition const Rsa41Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa41CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed42CondConditionFingerprint =
            "\xe3\x9a\x66\x70\xcd\x9b\x26\x4a\x79\xac\x64\xbe\x92\xbb\xfb"
            "\x70\x0b\xdc\x9c\xbd\x13\x61\xb7\x00\x22\xaa\x2f\xdc\x96\xc9"
            "\x45\x44"s;
        Condition const Ed42Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed42CondConditionFingerprint),
                                 std::bitset<5>{0}};

        auto rsa4 = std::make_unique<RsaSha256>(
            makeSlice(rsa4PublicKey), makeSlice(rsa4Sig));
        auto rsa6 = std::make_unique<RsaSha256>(
            makeSlice(rsa6PublicKey), makeSlice(rsa6Sig));
        std::vector<std::unique_ptr<Fulfillment>> thresh5Subfulfillments;
        thresh5Subfulfillments.emplace_back(std::move(rsa6));
        std::vector<Condition> thresh5Subconditions{
            {Preim7Cond, Rsa8Cond, Ed9Cond}};
        auto thresh5 = std::make_unique<ThresholdSha256>(
            std::move(thresh5Subfulfillments), std::move(thresh5Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh3Subfulfillments;
        thresh3Subfulfillments.emplace_back(std::move(rsa4));
        thresh3Subfulfillments.emplace_back(std::move(thresh5));
        std::vector<Condition> thresh3Subconditions{
            {Preim10Cond, Rsa11Cond, Ed12Cond, Thresh13Cond}};
        auto thresh3 = std::make_unique<ThresholdSha256>(
            std::move(thresh3Subfulfillments), std::move(thresh3Subconditions));
        auto prefix2 = std::make_unique<PrefixSha256>(
            makeSlice(prefix2Prefix), prefix2MaxMsgLength, std::move(thresh3));
        auto prefix1 = std::make_unique<PrefixSha256>(
            makeSlice(prefix1Prefix), prefix1MaxMsgLength, std::move(prefix2));
        auto rsa21 = std::make_unique<RsaSha256>(
            makeSlice(rsa21PublicKey), makeSlice(rsa21Sig));
        auto rsa23 = std::make_unique<RsaSha256>(
            makeSlice(rsa23PublicKey), makeSlice(rsa23Sig));
        std::vector<std::unique_ptr<Fulfillment>> thresh22Subfulfillments;
        thresh22Subfulfillments.emplace_back(std::move(rsa23));
        std::vector<Condition> thresh22Subconditions{
            {Preim24Cond, Rsa25Cond, Ed26Cond}};
        auto thresh22 = std::make_unique<ThresholdSha256>(
            std::move(thresh22Subfulfillments),
            std::move(thresh22Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh20Subfulfillments;
        thresh20Subfulfillments.emplace_back(std::move(rsa21));
        thresh20Subfulfillments.emplace_back(std::move(thresh22));
        std::vector<Condition> thresh20Subconditions{
            {Preim27Cond, Rsa28Cond, Ed29Cond, Thresh30Cond}};
        auto thresh20 = std::make_unique<ThresholdSha256>(
            std::move(thresh20Subfulfillments),
            std::move(thresh20Subconditions));
        auto prefix19 = std::make_unique<PrefixSha256>(
            makeSlice(prefix19Prefix),
            prefix19MaxMsgLength,
            std::move(thresh20));
        auto prefix18 = std::make_unique<PrefixSha256>(
            makeSlice(prefix18Prefix),
            prefix18MaxMsgLength,
            std::move(prefix19));
        auto rsa36 = std::make_unique<RsaSha256>(
            makeSlice(rsa36PublicKey), makeSlice(rsa36Sig));
        std::vector<std::unique_ptr<Fulfillment>> thresh35Subfulfillments;
        thresh35Subfulfillments.emplace_back(std::move(rsa36));
        std::vector<Condition> thresh35Subconditions{
            {Preim37Cond, Rsa38Cond, Ed39Cond}};
        auto thresh35 = std::make_unique<ThresholdSha256>(
            std::move(thresh35Subfulfillments),
            std::move(thresh35Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh0Subfulfillments;
        thresh0Subfulfillments.emplace_back(std::move(prefix1));
        thresh0Subfulfillments.emplace_back(std::move(prefix18));
        thresh0Subfulfillments.emplace_back(std::move(thresh35));
        std::vector<Condition> thresh0Subconditions{
            {Preim40Cond, Rsa41Cond, Ed42Cond}};
        ThresholdSha256 const thresh0(
            std::move(thresh0Subfulfillments), std::move(thresh0Subconditions));
        {
            auto const thresh0EncodedFulfillment =
                "\xa2\x82\x0d\xe4\xa0\x82\x0d\x65\xa1\x82\x05\x66\x80\x02\x50"
                "\x31\x81\x01\x0e\xa2\x82\x05\x5b\xa1\x82\x05\x57\x80\x02\x50"
                "\x32\x81\x01\x0e\xa2\x82\x05\x4c\xa2\x82\x05\x48\xa0\x82\x04"
                "\x9b\xa2\x82\x02\x8b\xa0\x82\x02\x0c\xa3\x82\x02\x08\x80\x82"
                "\x01\x00\xd0\x07\xfc\x9d\xb0\xa1\xa6\x40\xe4\x52\x30\x42\x74"
                "\xfd\x35\x04\xde\x45\x68\xb3\x22\xdd\xff\x41\x43\x69\x33\xc0"
                "\xff\x35\xb6\x6d\x15\xe9\x54\x15\xeb\x1d\x07\xe2\x25\x2b\xdb"
                "\xaa\x16\x8d\x0d\x7f\x05\xf0\xd2\x7d\xb4\x9b\x51\x19\x20\x1e"
                "\x3d\xba\x50\x9e\x51\x13\x81\x43\x55\x96\xca\xdb\x88\x1f\xef"
                "\x2d\x38\x3f\xae\x8d\xac\xc8\x6f\x2b\xd5\xf0\x34\x1a\x99\x00"
                "\x7c\x6d\xb3\x1b\x1d\x68\xdb\xf8\x1c\x59\x3a\x63\x38\x7c\x1c"
                "\x14\xbc\x22\xcf\xc8\x9a\xc6\x96\x6f\x3d\x03\x0b\x61\x6b\x7d"
                "\x75\x97\xe8\x25\xb8\x2f\xfa\xf4\x07\x44\xdf\x00\x3d\xff\x0d"
                "\xd5\x7f\x7f\xf3\x0c\x13\xac\x8d\xf8\x8c\x79\xc5\xf3\x29\xdc"
                "\x23\x65\xd3\xd1\x1c\xa6\x14\x78\x6a\x1a\xe3\x15\x8d\x8b\xdc"
                "\xa0\x5a\xc7\x82\xb0\x03\x6c\x71\x43\x59\x24\xc7\x50\x64\xb2"
                "\xa7\x69\xf5\xbd\xe6\x5e\xaa\x77\x59\x60\x36\xc0\xe3\x42\x7f"
                "\x05\x3b\x4c\x02\x0e\x70\x5a\x70\xc5\x2a\xeb\x94\x4d\x15\x09"
                "\xef\xbb\x58\x42\x68\x05\x59\x70\xa0\x17\xb2\x8e\xdf\x7b\x40"
                "\x5d\x21\x1e\xfe\x62\x58\xde\xfb\x14\x91\x18\xf3\x4f\x9b\x36"
                "\x55\xcf\xb3\x5e\xec\x4f\xcc\x6d\x13\x58\xc8\xa3\xa3\xee\x23"
                "\x8a\xc2\xbf\x81\x82\x01\x00\x1c\x32\xd4\xb9\x5b\x5f\x32\xef"
                "\xce\x9f\x5b\x73\xbd\x4a\x23\x7e\xf1\xbc\x7e\xad\x16\x2a\x34"
                "\xa2\xa9\x7d\x49\x16\x7f\x87\x04\xe6\x76\x4d\xde\x04\x31\x4b"
                "\xc1\x39\xcd\x7b\x97\xcc\x35\x16\xcb\xa8\x82\xf3\xce\xc2\xd6"
                "\xf9\xcf\x08\xb3\xc3\xa8\x9e\xb6\x76\x95\x1d\x0d\x6f\x82\x4e"
                "\x85\x84\x82\x60\x64\x58\x60\xf0\xa3\xda\xe2\x5a\x2f\x9b\x10"
                "\x3a\x4d\xbf\x87\x9c\x24\x24\x64\xa3\x92\x27\x79\x24\xff\x55"
                "\x5c\xd0\x74\xd5\x1e\xd0\x40\xb5\x50\x6a\x24\x2e\x70\x12\xba"
                "\xfb\xa4\x27\x1a\xea\xf6\xe5\xcf\xb8\x55\xd9\x96\xdf\x60\xe8"
                "\x28\x92\x4c\xe7\x39\x7d\xf1\xfd\x9a\x8b\x30\xb3\x77\x32\xc3"
                "\x10\x91\xdc\xc7\x8c\x18\x59\x59\xf2\x98\x47\x8b\x53\xc5\xcd"
                "\x44\x96\x46\xf5\x7b\x05\xa7\x48\x13\xc1\x5b\x12\xca\x30\xf6"
                "\x48\x29\xca\x51\x9d\xc0\xa5\x00\x5a\x14\x47\x3a\x53\x6f\xdd"
                "\xbb\xd6\x32\xf7\x4e\x48\xfb\xdc\xdd\x04\xcb\x0c\x5a\x99\x1b"
                "\x98\xe1\xc4\x78\x67\xcb\xff\x7a\xee\x28\x97\x05\xf9\x16\xcf"
                "\x5f\xb5\x7f\xed\xf9\xce\x87\xd6\x7b\x93\x1c\x9a\xc5\x57\xb8"
                "\x7a\x08\x2b\xd1\x1e\x16\x80\xc2\x23\x7c\x0f\x09\xd5\x3e\x4a"
                "\x9c\x7e\xbc\xc1\x04\xfe\xa5\xe2\xa1\x79\xa0\x25\x80\x20\x5d"
                "\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b"
                "\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb"
                "\x4e\x81\x01\x09\xa3\x27\x80\x20\xd1\xb5\x1d\x35\x99\x9d\xb4"
                "\xc1\xaa\x81\x4d\xd7\x0e\xa9\x2a\x20\x7f\xe5\x5c\x75\xe8\x57"
                "\x8b\xbf\xe8\xd7\x1c\x7e\xb2\xbc\x91\x16\x81\x03\x01\x00\x00"
                "\xa4\x27\x80\x20\x92\xfa\xfc\xc6\x2f\xe2\x8d\x8d\x25\x7c\xd4"
                "\x46\xab\xea\x82\xd0\x3f\x36\xbe\x1d\x11\x2b\xa0\xfe\xfe\xd4"
                "\x00\xd5\x7d\x9b\xf6\xc9\x81\x03\x02\x00\x00\xa3\x82\x02\x08"
                "\x80\x82\x01\x00\xbe\x09\xc5\xa4\x27\x29\xdf\xd4\x67\x76\xbe"
                "\xbf\x2c\xf3\xa2\x0b\x42\xe4\xbf\xeb\xdd\x67\x20\xfb\x7a\x27"
                "\x93\xc0\x78\x47\x78\xd7\x15\x32\xee\x38\x81\x0d\x36\xa2\xc4"
                "\x65\x44\xe6\x62\x26\xb9\x58\x13\xa4\x15\x82\xab\xb1\x16\x61"
                "\xfc\x01\x98\xc6\x1a\x69\xc6\xba\x39\x3f\x01\x55\x3d\xd7\x8e"
                "\x14\x42\x6d\x78\x74\x9b\x28\xcb\x31\x39\x98\x5a\x11\xdc\xc1"
                "\x18\x9d\x8d\xb0\xcd\x1b\x4c\x10\xab\x14\x64\x19\xf1\x33\x15"
                "\x45\xc8\x92\x82\x03\x82\x8a\xaa\xad\x94\xfc\x24\x11\x96\x99"
                "\x7e\x94\x5a\x82\x57\x68\x61\x9f\x7b\x45\xe0\x99\x9e\x4f\x32"
                "\x50\x5f\x05\xc8\x11\xae\xc4\x0c\x63\x18\x0e\x02\x59\x36\x25"
                "\x92\x06\x32\xc7\x71\x47\x99\xcc\x0a\x6e\x0a\x58\x71\x3f\x5e"
                "\xb7\x78\xf7\x98\x79\xdf\x74\xa4\xeb\xa9\x00\xfd\x81\xb3\xcf"
                "\x04\x8c\x5d\x7d\xe7\xb2\x82\x90\x49\xbd\x69\xf3\x08\xe9\x92"
                "\xc6\x9e\x41\xba\x74\xd8\x8d\x81\x97\x6f\x86\xab\xc9\xf1\x02"
                "\x31\xb4\xce\x47\xb0\x39\xc8\xba\x51\xa7\x39\xf3\x71\xa2\x25"
                "\x27\x37\x6e\x09\x6f\x19\x59\xbc\x65\xd9\xcd\x12\xd3\x2c\xa2"
                "\x78\xfa\x23\x15\x1a\x82\x41\x91\x1b\xbe\x8a\xe7\xfe\x3c\x3c"
                "\x30\x32\xaa\xe9\xf3\x81\x82\x01\x00\x04\x38\xce\xfd\xfe\x63"
                "\x4a\x02\xba\x44\x28\xc7\x9a\x94\x85\x71\xd7\x17\xfc\x9c\x93"
                "\x80\x18\x53\x70\x36\xa6\x3b\xde\xf5\x79\x14\xcb\xfd\xe2\x2b"
                "\x1d\xe9\x2a\x1c\xe2\xc1\x61\x2e\x1d\xc0\x0a\x70\x14\x1b\x34"
                "\xf8\x99\x90\x61\xba\x51\x69\xa6\xea\x41\x6a\x7d\x67\xb2\xd8"
                "\x04\x85\x79\x69\x31\x5d\x3a\xdd\xfb\xf4\x9a\x47\xa1\xba\x77"
                "\x7e\xc1\xec\x1e\xe2\x61\x82\x99\x64\x60\x0d\x9e\x08\x2c\xdd"
                "\x83\x74\x8f\x1b\xd1\x07\xcf\x97\x34\x9e\x59\x70\xa4\xce\x84"
                "\x98\xe0\x19\xd7\x57\x5c\x76\x11\xdd\xeb\x2e\x59\x5a\xed\xaf"
                "\x29\xce\x3b\xdf\xb6\xb8\x3e\xcf\xf3\x09\x6f\x5a\x34\xee\x9e"
                "\x88\x3b\xd1\xad\xe0\x5c\x44\xb6\xea\x1f\xd0\x75\x91\xd9\x94"
                "\x88\x6a\xa0\xff\xbb\xf9\x9a\x9c\x5c\x3d\xab\x2c\x9e\x90\xe6"
                "\x48\x08\xb2\x41\xcc\xe5\xd2\x54\x72\x25\xdb\x8e\xd3\xe4\x66"
                "\xa4\xdc\x7c\x81\x5d\x7a\x1d\xb8\x0e\xfe\x53\xbd\xf9\x5a\x53"
                "\x21\x0a\x70\xdf\x6f\x1a\xb8\x2c\xe6\x8a\x27\x10\xc7\xd8\xa7"
                "\xd9\x6c\x4d\x48\x22\x2d\x4f\x03\x4e\xbf\xc5\x3b\x3c\x49\x2f"
                "\x32\x6d\x69\xfb\x98\x5a\x73\xec\xe1\xde\xfd\x97\xb1\x14\x13"
                "\xdf\xdb\x59\x59\xdc\x44\xcc\xdc\xeb\xee\xa1\x81\xa6\xa0\x25"
                "\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54"
                "\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee"
                "\x93\x58\xeb\x4e\x81\x01\x09\xa2\x2b\x80\x20\xd9\x95\x6e\x6e"
                "\x8b\x3b\x8b\x3b\xd7\x11\x4b\x11\x21\x26\x48\xbd\x92\x55\x47"
                "\x42\x66\x8f\xc1\x5f\xb4\x03\x78\x32\x05\xc5\x0e\x82\x81\x03"
                "\x02\x10\x00\x82\x02\x03\x98\xa3\x27\x80\x20\xaf\x93\xfd\x22"
                "\x45\xc2\x08\xab\x43\xf7\x45\x56\x63\xec\xaf\x15\x33\xa0\x2a"
                "\xb4\x9e\x15\xb4\x6e\xda\x87\x35\xde\x09\x4b\x06\x31\x81\x03"
                "\x01\x00\x00\xa4\x27\x80\x20\x55\xcc\xd1\xa2\x2c\x90\x8d\xe3"
                "\x2e\x42\xd4\xe0\x65\xb2\xf7\xda\xc0\x07\x1e\xd3\x23\x0f\xfe"
                "\x78\x13\xa2\x86\x61\xc4\x34\x28\x50\x81\x03\x02\x00\x00\xa1"
                "\x82\x05\x68\x80\x03\x50\x31\x38\x81\x01\x0e\xa2\x82\x05\x5c"
                "\xa1\x82\x05\x58\x80\x03\x50\x31\x39\x81\x01\x0e\xa2\x82\x05"
                "\x4c\xa2\x82\x05\x48\xa0\x82\x04\x9b\xa2\x82\x02\x8b\xa0\x82"
                "\x02\x0c\xa3\x82\x02\x08\x80\x82\x01\x00\xd7\x79\x96\xb4\xf5"
                "\x56\xa2\xdf\x83\xa7\x6e\x70\xe7\xc9\xfb\x04\xba\x4b\x39\x10"
                "\xe2\xe7\x8a\xc6\x59\x85\x88\xde\x26\x73\xfb\x5e\x7f\x66\x34"
                "\xab\x29\x2d\xf1\x46\xf5\xbd\x4c\x4d\x52\x5e\x4e\xf8\xd0\xdb"
                "\x85\x7a\xce\xa4\xb0\x7e\xf0\x0f\x04\x58\x4c\x61\x75\x64\x81"
                "\x8e\xb0\xeb\x49\x3e\xc2\x30\x28\x03\xf9\x70\x4d\x47\xc0\x11"
                "\x7f\xb1\x25\x71\x0f\x13\x5d\x52\x46\x38\x3b\x9f\xf6\x61\x57"
                "\xc3\xfc\x98\xfb\x4c\xa2\xed\x0c\xaa\xa9\x5c\x53\x7e\xc0\xd3"
                "\x1f\x9f\xe3\xea\x40\x24\x1a\x4f\x0d\x50\x5e\x6f\xe8\xe5\xea"
                "\x12\xe5\xfc\x49\xb6\xb6\x6d\xdd\xc9\x83\x68\x29\x26\x39\xc7"
                "\x76\xf7\xfa\x70\xb3\xac\xe0\xf6\xfe\xf3\x9a\xdd\xc5\x2b\x1c"
                "\x97\x7b\x6e\xa4\x49\xb9\xa4\x22\x16\xcb\xe0\x5b\x47\xc9\x40"
                "\x07\x20\xbe\x3c\xf9\x80\x47\xf5\x8f\x65\x94\x57\x61\x4a\x73"
                "\x8c\x2f\x3c\x5e\x31\xae\xff\x45\xd7\x8f\x39\xce\x94\x04\x79"
                "\xec\xaa\x71\x08\x9e\x34\xa1\x71\x35\x66\xe9\x54\xee\xff\x90"
                "\xce\x8f\x51\x96\xa6\x14\x66\x35\xa4\x62\xbf\x99\xe7\xab\x6e"
                "\x1e\x29\x14\x6e\x84\x87\xad\x99\xad\x35\xc4\xfe\xb9\x38\x08"
                "\x1b\xc3\x8c\x69\x99\x8a\x32\x90\x69\xa4\x5f\x81\x82\x01\x00"
                "\x77\x13\x98\x35\x5d\xae\x7d\xcb\x15\x7e\x71\x85\xe4\xa2\x42"
                "\xba\xe8\x32\xac\x1e\xb7\xb5\x61\x73\xc7\xf6\xb3\x61\x6a\xd9"
                "\x32\xfb\x7c\xb0\x31\x67\xdb\x12\xd3\xce\x32\x92\x74\x6a\xf1"
                "\x89\xed\x85\x49\x2f\x83\xd7\x4f\xda\x5c\x98\x33\x50\x69\x59"
                "\x80\x46\xe8\x9f\x18\x12\x11\xcc\x4f\xd7\x29\x31\xb3\x21\xf0"
                "\xb2\xe8\x08\x9a\x33\xc6\x51\xee\x69\x27\xd0\x46\xf4\xcf\x28"
                "\x9b\x29\x3a\xde\xad\xec\xd1\x2c\xe8\xc9\x74\x1e\x16\xb8\x8e"
                "\x93\xb6\x03\xb1\x50\xeb\xe1\xf3\xe0\x7a\x07\xb4\x41\xd4\x4a"
                "\x0a\x32\x55\x8a\xf2\xa0\x3b\x6a\x4e\x1c\xe0\xe7\x89\xb8\xdc"
                "\x87\xfb\x5d\xd1\xdb\xc4\xeb\xd3\x6f\xe7\xcf\x99\xdf\xa9\x3b"
                "\x0d\xe9\xdf\x25\xb6\x2c\x6c\x01\x5f\xf2\xc2\xa5\xe1\x91\x7e"
                "\x54\xae\x40\x85\x99\x99\x91\xe0\x05\xcb\xff\x10\x61\xbc\x57"
                "\x7e\x75\xb7\xb0\x10\x4f\x8e\x73\xb8\xa5\x2d\x3f\x98\xae\xe0"
                "\x98\xcd\xb4\x6f\x8d\xbb\x79\xb6\x81\x5a\xf9\x8f\x38\x8e\x4b"
                "\x99\xa6\x2a\x6a\x99\x7a\x84\x01\xcf\x99\x7c\x78\x56\x95\xf6"
                "\x67\x8b\x7e\x0f\x07\x7c\x17\xa7\xe3\x6b\x44\xa2\x53\x8f\xa6"
                "\x26\xe9\x2e\x4b\x6b\xef\xfe\x4c\x99\xde\x8e\xcf\x9d\x4b\x62"
                "\x37\xa1\x79\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11"
                "\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2"
                "\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa3\x27\x80"
                "\x20\xb2\x7f\x94\xe3\xdf\x0c\x9a\x71\x3a\xd2\xeb\x71\x91\x72"
                "\x40\xb9\xcb\xb7\xac\xbc\x77\x0a\x08\x85\x07\xa3\x85\x4e\x7e"
                "\xc9\x50\x96\x81\x03\x01\x00\x00\xa4\x27\x80\x20\xd6\x2f\x07"
                "\xbd\x56\xfe\x9a\x02\x8c\x98\x1a\x72\x17\xb6\x26\x90\x51\xaf"
                "\xe4\xea\x51\x64\xe0\x58\x3e\x85\xc9\x29\x22\x94\xa1\xbf\x81"
                "\x03\x02\x00\x00\xa3\x82\x02\x08\x80\x82\x01\x00\xde\x0b\xb1"
                "\x46\x39\xfb\xd2\xb8\x93\x21\x77\x88\xa7\x0a\x28\x65\x39\x85"
                "\xe3\xf0\x3f\xd4\x20\xd4\x55\x63\x43\xcf\x85\x3e\x08\xa5\xd3"
                "\xf3\x5b\xa9\x47\xaf\x21\x49\xfa\x99\x3c\x97\x49\x2e\x3b\xd7"
                "\x22\x7c\xb6\x70\xe0\x82\x9d\xd2\x09\x7c\xc2\xc2\x03\x2b\xb2"
                "\x9e\x55\x3c\xc9\xb5\x48\x91\xdc\xfd\x86\x68\x2c\x0e\x5b\xba"
                "\x03\xaa\x7c\xa6\x18\x02\x10\x59\x1b\x7a\x4a\x5c\xda\xe7\x2f"
                "\x3c\xa6\xff\x58\x23\x7b\x3e\x80\x69\x54\x68\xb5\x4c\x13\xb6"
                "\x71\xa4\x68\xc6\xc2\xa3\xd1\xe6\x00\xff\x2a\xc4\x2d\x39\xa1"
                "\xe7\xae\xd5\xe2\xb4\x0a\x1c\x98\xd1\x20\x13\xfa\xd2\xb4\xcd"
                "\x27\xb2\x1a\x89\xd9\xc2\x2d\x69\x87\x81\x0b\x99\x4b\x5a\xc8"
                "\xa4\x09\x5f\x04\xe7\xf2\xa6\x2b\x75\xcd\x02\x20\x8f\x71\xb7"
                "\x1b\x7a\x2f\xe0\xf0\x7b\x19\x51\xa9\x27\xea\xaa\x1c\xba\xa9"
                "\xf8\x96\x74\xb7\x08\x27\x2d\xc5\x48\x0d\x81\x3d\x9a\xdb\x4d"
                "\x29\x82\x22\x56\x19\x63\xac\x94\x55\xd4\x56\x7e\x5a\x2f\x75"
                "\x82\xcb\xb5\x95\x9a\x35\x10\x74\xc6\xa9\x10\x8a\xdb\x72\xfe"
                "\x57\x6a\x34\x46\xc8\x45\x7c\xb0\xc8\x19\xc9\x0e\x22\xd2\x6f"
                "\xa5\x8f\x99\x55\x4f\xc9\x4c\xa0\xd3\xf0\x94\x07\x69\x81\x82"
                "\x01\x00\x6a\x93\xb8\x62\xfd\x07\xbe\x02\xc2\xfd\x13\x03\xaa"
                "\x8b\x32\xc1\xf4\xc3\xd1\x60\x79\x00\x33\x9c\x16\x48\x40\x11"
                "\xef\xba\x98\xe9\x00\xb6\xbb\x5d\x40\xa3\xcb\x9c\x05\xe5\xa3"
                "\x5a\xb6\x11\x64\x78\x5c\xae\xd7\xff\x7f\x1b\x44\x03\x53\x78"
                "\x44\x17\xab\x42\x59\x18\x25\xff\x00\x9f\x31\x16\xe2\x99\x8d"
                "\x04\x2c\xee\x40\x1e\xdb\xbe\x85\x6a\x49\xd8\xf1\xeb\xb5\x23"
                "\x89\x9e\x6e\xb4\x69\x59\xaa\x84\x04\x52\xb8\x4e\x1a\xf1\xf9"
                "\xb1\xd7\xa4\xab\x80\x0e\x86\x02\x96\x04\xa3\xc5\x81\x7f\x78"
                "\xe6\x2a\xd5\x66\x8f\x2c\x45\x84\xe0\x51\xc8\x80\x6d\xea\xca"
                "\x2b\xf2\xe8\xf7\x74\x13\x58\x99\x20\x0e\x84\x4b\x41\x58\x72"
                "\x09\x88\xd4\xc4\xa8\x2a\x3f\x7d\x7f\x7f\x19\xb3\x46\xa7\xb6"
                "\x88\x48\x16\xc8\xa6\x8e\xef\x25\x39\xce\xb7\x41\x61\xcf\x10"
                "\x3c\x6d\x08\x0a\x6f\xba\xea\xf4\xec\xea\xa7\xd2\xa7\x90\xbd"
                "\x57\x83\xb5\xbe\xf3\xc3\x9c\xe3\x07\x78\xf5\x80\x01\x94\xbc"
                "\x5c\xe9\x79\x13\xf4\x26\x9d\x03\x87\x56\x58\xc6\x45\x0f\xaf"
                "\x05\xcc\x09\x03\x16\x81\x43\xff\x20\x75\xa7\xcc\x52\xb4\xa5"
                "\xf6\x3a\xea\xf7\x42\x6d\x24\x2f\x89\x58\xc2\x21\x54\xc9\x82"
                "\x99\xac\x19\xa1\x81\xa6\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd"
                "\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33"
                "\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09"
                "\xa2\x2b\x80\x20\x55\x54\x55\x25\x4a\x1e\xf0\x5c\x22\x0f\xc2"
                "\x46\xc5\x9b\x13\x25\x51\x61\xdf\x62\x52\x25\x82\x17\xe4\xd6"
                "\xdf\x1f\xfd\x8c\x68\x15\x81\x03\x02\x10\x00\x82\x02\x03\x98"
                "\xa3\x27\x80\x20\x58\xac\x94\x55\x27\x79\x7a\x0c\xac\x84\x2d"
                "\x5c\x13\x32\xee\x84\x25\xb8\xb8\xec\x25\x0d\x40\xee\xc0\xd4"
                "\x79\x18\x3f\xc6\xbc\xd7\x81\x03\x01\x00\x00\xa4\x27\x80\x20"
                "\xc5\x39\xb2\xc7\xc4\x92\x8a\x29\xf3\x72\xb4\x6c\xa5\x0d\x8c"
                "\xbe\x43\xda\xc9\xac\x6c\x26\x7c\x44\xb9\x3f\xee\x40\xcc\x8e"
                "\x41\x3c\x81\x03\x02\x00\x00\xa2\x82\x02\x8b\xa0\x82\x02\x0c"
                "\xa3\x82\x02\x08\x80\x82\x01\x00\xad\xe5\x0b\x45\xd6\x59\x1f"
                "\x85\xec\x50\x5f\x4a\x96\x9d\xfd\x6e\x29\x58\x1c\xf5\xb2\xb4"
                "\x29\x81\x6a\x97\xbc\x46\x54\xf0\xd2\x6e\x09\xf4\x1a\x52\x29"
                "\x95\x0c\xe1\x75\xd5\xff\xbb\xff\x4b\xa0\x87\x36\x20\x94\x4b"
                "\xb9\x09\x91\x4b\x62\xcf\xab\x7e\x27\x94\xf7\x5a\x6b\xd1\x13"
                "\x30\xd4\x9e\x1d\x20\xb3\xaf\x54\x91\x50\xc9\x0b\x41\x67\x39"
                "\x4e\xaa\x29\xd0\xd1\xa5\x54\xb0\x6f\xfe\xb4\x8b\x63\x9c\x10"
                "\x09\xe9\xdb\x2b\xd0\x55\xe1\x89\x03\x41\x6b\x97\x7b\xd0\x09"
                "\xfc\x59\xcc\x6b\x58\xca\xdb\x33\xe1\x5a\x28\x4f\x32\x80\x71"
                "\x12\x73\xeb\x27\x2b\x27\x59\x3f\x38\x0f\x70\x63\x45\x1e\xb3"
                "\x26\xfc\x0f\x1f\xf1\xcd\xc9\xff\xd9\xb3\xb8\xe0\x3c\x35\x2e"
                "\xbf\x74\x87\xf2\x48\xa6\x19\x1d\xa0\x77\x86\x07\xa7\x3b\x3b"
                "\x6b\x5f\x31\x2d\x84\x24\x05\xca\x7b\x3a\x70\xce\xf3\x51\x6a"
                "\x7b\xf5\x00\x67\x07\xee\xdf\xce\x52\xd7\x71\x86\xdf\x90\x30"
                "\xf6\x6c\xdd\x1b\x37\xc3\x71\x01\x28\x5f\x32\xa2\x5e\x44\x86"
                "\xd7\x06\xc4\x8b\xf1\x29\x75\x74\x42\x87\x7f\x5f\x09\x36\xfe"
                "\xcc\x4c\x24\xc1\xf4\x95\x3a\xd7\x01\x76\x8a\xfa\xac\x2c\x55"
                "\x31\x18\xfe\x41\xfc\xbf\xd8\x07\x0f\x81\x82\x01\x00\x0d\xa9"
                "\x8d\x40\x9c\xf3\xc6\xfa\x57\x6a\x6b\x9c\xa2\x0e\x86\x6d\x33"
                "\x7e\x6b\xef\x35\xe7\x74\xea\xa5\xa7\xc4\x21\xf7\x9d\x8c\x98"
                "\x62\x00\xf8\x20\x95\x4c\xbf\x5e\x90\xd6\xbd\x52\x7f\x00\xb3"
                "\x3b\x3f\xdb\x80\x49\x8f\x6a\xcd\xec\x86\x7d\xac\x72\xcb\xc0"
                "\xb9\x1f\xc8\x3c\x54\x2d\x25\x4a\xe7\xca\xcf\x06\x91\x72\x53"
                "\x01\xf8\x9e\x49\x75\x84\xb2\x3f\x92\xfa\xfe\x61\x83\xbd\x42"
                "\xa2\x6d\x7a\x1d\xce\x47\xb6\xf8\xe4\xd8\x3d\xaf\x52\x58\x72"
                "\xba\x4a\x4b\x9a\xaa\x21\x11\xbe\x98\x84\xa7\x01\x49\x55\xd3"
                "\x4f\xc9\xf2\x35\x02\xad\x59\x44\x19\x46\xb8\x71\x2d\xa4\xb8"
                "\xc8\xcb\x37\xd9\xe8\x6b\xa5\xbe\x1d\x06\x80\x0b\x17\xcd\xc3"
                "\xad\xda\x01\x72\xda\x03\xc4\x64\xd6\x7c\xab\xf8\x60\xfa\x5e"
                "\x8d\xb8\x28\xa3\x96\xd6\x1b\xc2\x2d\x09\x4c\xe8\x84\xcd\xcd"
                "\x09\x90\x02\x6a\x78\x30\xd1\xc6\x3a\x0f\x8b\xf9\x45\x83\x77"
                "\x24\xb5\x75\xbf\xb1\x3d\x54\x7d\x94\x07\xb6\x02\xcd\xa6\xf1"
                "\xe6\x75\xbc\x67\xce\xc7\x71\x00\x16\x66\xe4\x33\x0e\x2e\x08"
                "\x1a\x5f\x8e\x04\x66\x98\xc5\xf9\x9b\x55\x43\x05\x34\xd9\x7c"
                "\xb7\x20\xa0\x85\x2d\xf1\x11\x77\xc1\x82\xd0\x2b\xf9\xdf\xa1"
                "\x79\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8"
                "\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc"
                "\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa3\x27\x80\x20\x13"
                "\xb3\xe0\x2d\xea\x58\x68\x9a\xa7\x10\x7e\xb2\x1a\x12\x55\x79"
                "\xd6\xfe\xde\x57\x0f\x6c\x6b\xde\xd7\xfd\x12\xeb\xa6\x1d\xad"
                "\x43\x81\x03\x01\x00\x00\xa4\x27\x80\x20\xbe\x9b\x3b\xe3\x70"
                "\xfc\xc2\x29\xaa\xe9\x72\x91\x42\x6b\xd7\x1f\x1a\x25\x7d\xde"
                "\xa8\x39\xfb\xce\x5c\xaa\x63\xde\xfd\x1d\x23\xcf\x81\x03\x02"
                "\x00\x00\xa1\x79\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75"
                "\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c"
                "\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa3\x27"
                "\x80\x20\xf3\xe3\x0d\x35\x45\x3f\x9f\x57\x07\x0b\x13\x04\x4d"
                "\x62\x56\x30\x18\x34\x88\x02\x22\xa6\x94\x6e\xba\x97\xa4\x4a"
                "\x64\x5d\x05\xd1\x81\x03\x01\x00\x00\xa4\x27\x80\x20\xe3\x9a"
                "\x66\x70\xcd\x9b\x26\x4a\x79\xac\x64\xbe\x92\xbb\xfb\x70\x0b"
                "\xdc\x9c\xbd\x13\x61\xb7\x00\x22\xaa\x2f\xdc\x96\xc9\x45\x44"
                "\x81\x03\x02\x00\x00"s;
            auto const thresh0EncodedCondition =
                "\xa2\x2b\x80\x20\x86\xb9\xec\x6e\x59\xdd\x56\x47\x1b\x8f\x41"
                "\xd5\x90\x02\xec\x1f\xf8\x9f\xc9\x3e\x8b\x91\x6c\xac\x5c\xa3"
                "\x72\xfc\x38\x9d\xf9\xe0\x81\x03\x0a\xa8\x42\x82\x02\x03\xd8"s;
            auto const thresh0EncodedFingerprint =
                "\x30\x82\x01\x07\x80\x01\x03\xa1\x82\x01\x00\xa0\x25\x80\x20"
                "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
                "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
                "\xeb\x4e\x81\x01\x09\xa1\x2b\x80\x20\x7d\x6b\x1d\x3a\x39\xdd"
                "\xe8\xad\x49\x8e\xef\x5c\x90\x07\x2d\x5c\xdc\x6f\x86\xb5\x92"
                "\x39\x94\x20\xde\x21\x13\xdc\x6c\x05\xed\x27\x81\x03\x04\x40"
                "\x20\x82\x02\x03\xb8\xa1\x2b\x80\x20\xa6\x11\xe9\xe4\x4e\x6d"
                "\x8e\x10\x17\x62\x86\x91\xf0\xc2\x5e\x6b\x7e\xc8\xc6\x61\x22"
                "\xd1\x5c\x31\xde\x4b\x39\x93\xcf\xc4\xcc\x46\x81\x03\x04\x40"
                "\x22\x82\x02\x03\xb8\xa2\x2b\x80\x20\xa0\x48\x99\x88\x6d\x79"
                "\x6d\x2e\xc7\x98\xbd\xf5\x15\xe7\x3d\xcc\x0f\xc1\x39\x0b\x11"
                "\xeb\x31\xad\x86\x45\x30\x56\xb4\x61\xb8\x82\x81\x03\x02\x10"
                "\x00\x82\x02\x03\x98\xa3\x27\x80\x20\xf3\xe3\x0d\x35\x45\x3f"
                "\x9f\x57\x07\x0b\x13\x04\x4d\x62\x56\x30\x18\x34\x88\x02\x22"
                "\xa6\x94\x6e\xba\x97\xa4\x4a\x64\x5d\x05\xd1\x81\x03\x01\x00"
                "\x00\xa4\x27\x80\x20\xe3\x9a\x66\x70\xcd\x9b\x26\x4a\x79\xac"
                "\x64\xbe\x92\xbb\xfb\x70\x0b\xdc\x9c\xbd\x13\x61\xb7\x00\x22"
                "\xaa\x2f\xdc\x96\xc9\x45\x44\x81\x03\x02\x00\x00"s;
            check(
                &thresh0,
                thresh0Msg,
                thresh0EncodedFulfillment,
                thresh0EncodedCondition,
                thresh0EncodedFingerprint);
        }
    }

    void
    testThresh39()
    {
        testcase("Thresh39");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * thresh0
        // ** Preim21Cond
        // ** Rsa22Cond
        // ** Ed23Cond
        // ** Prefix24Cond
        // ** Thresh41Cond
        // ** prefix1
        // *** prefix2
        // **** thresh3
        // ***** Preim10Cond
        // ***** Rsa11Cond
        // ***** Ed12Cond
        // ***** Thresh13Cond
        // ***** rsa4
        // ***** thresh5
        // ****** Preim7Cond
        // ****** Rsa8Cond
        // ****** Ed9Cond
        // ****** rsa6
        // ** preim18
        // ** rsa19
        // ** ed20

        auto const rsa4Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa4PublicKey{
            {0xbe, 0x09, 0xc5, 0xa4, 0x27, 0x29, 0xdf, 0xd4, 0x67, 0x76, 0xbe,
             0xbf, 0x2c, 0xf3, 0xa2, 0x0b, 0x42, 0xe4, 0xbf, 0xeb, 0xdd, 0x67,
             0x20, 0xfb, 0x7a, 0x27, 0x93, 0xc0, 0x78, 0x47, 0x78, 0xd7, 0x15,
             0x32, 0xee, 0x38, 0x81, 0x0d, 0x36, 0xa2, 0xc4, 0x65, 0x44, 0xe6,
             0x62, 0x26, 0xb9, 0x58, 0x13, 0xa4, 0x15, 0x82, 0xab, 0xb1, 0x16,
             0x61, 0xfc, 0x01, 0x98, 0xc6, 0x1a, 0x69, 0xc6, 0xba, 0x39, 0x3f,
             0x01, 0x55, 0x3d, 0xd7, 0x8e, 0x14, 0x42, 0x6d, 0x78, 0x74, 0x9b,
             0x28, 0xcb, 0x31, 0x39, 0x98, 0x5a, 0x11, 0xdc, 0xc1, 0x18, 0x9d,
             0x8d, 0xb0, 0xcd, 0x1b, 0x4c, 0x10, 0xab, 0x14, 0x64, 0x19, 0xf1,
             0x33, 0x15, 0x45, 0xc8, 0x92, 0x82, 0x03, 0x82, 0x8a, 0xaa, 0xad,
             0x94, 0xfc, 0x24, 0x11, 0x96, 0x99, 0x7e, 0x94, 0x5a, 0x82, 0x57,
             0x68, 0x61, 0x9f, 0x7b, 0x45, 0xe0, 0x99, 0x9e, 0x4f, 0x32, 0x50,
             0x5f, 0x05, 0xc8, 0x11, 0xae, 0xc4, 0x0c, 0x63, 0x18, 0x0e, 0x02,
             0x59, 0x36, 0x25, 0x92, 0x06, 0x32, 0xc7, 0x71, 0x47, 0x99, 0xcc,
             0x0a, 0x6e, 0x0a, 0x58, 0x71, 0x3f, 0x5e, 0xb7, 0x78, 0xf7, 0x98,
             0x79, 0xdf, 0x74, 0xa4, 0xeb, 0xa9, 0x00, 0xfd, 0x81, 0xb3, 0xcf,
             0x04, 0x8c, 0x5d, 0x7d, 0xe7, 0xb2, 0x82, 0x90, 0x49, 0xbd, 0x69,
             0xf3, 0x08, 0xe9, 0x92, 0xc6, 0x9e, 0x41, 0xba, 0x74, 0xd8, 0x8d,
             0x81, 0x97, 0x6f, 0x86, 0xab, 0xc9, 0xf1, 0x02, 0x31, 0xb4, 0xce,
             0x47, 0xb0, 0x39, 0xc8, 0xba, 0x51, 0xa7, 0x39, 0xf3, 0x71, 0xa2,
             0x25, 0x27, 0x37, 0x6e, 0x09, 0x6f, 0x19, 0x59, 0xbc, 0x65, 0xd9,
             0xcd, 0x12, 0xd3, 0x2c, 0xa2, 0x78, 0xfa, 0x23, 0x15, 0x1a, 0x82,
             0x41, 0x91, 0x1b, 0xbe, 0x8a, 0xe7, 0xfe, 0x3c, 0x3c, 0x30, 0x32,
             0xaa, 0xe9, 0xf3}};
        std::array<std::uint8_t, 256> const rsa4Sig{
            {0x0c, 0xa9, 0x69, 0xe7, 0x57, 0x3a, 0x2b, 0x04, 0x8c, 0x07, 0x15,
             0x58, 0xe5, 0x1f, 0x94, 0x3d, 0x54, 0x04, 0x21, 0xe8, 0x33, 0x21,
             0xc3, 0xb8, 0xef, 0x65, 0x5b, 0x00, 0xee, 0x69, 0x89, 0x14, 0xef,
             0x65, 0x7e, 0xf6, 0xc4, 0x0e, 0x2f, 0x29, 0x88, 0x85, 0x29, 0xcc,
             0x09, 0x35, 0xef, 0xbf, 0x21, 0x43, 0x0e, 0x6a, 0x08, 0xb1, 0x5e,
             0xa9, 0x95, 0xe9, 0xbc, 0x93, 0x44, 0x6b, 0xa7, 0x02, 0xf1, 0xe6,
             0xae, 0x10, 0x00, 0xa9, 0x48, 0x50, 0x37, 0x4c, 0x6a, 0x8d, 0x4c,
             0xd1, 0x53, 0x63, 0x4c, 0x76, 0x5a, 0xd1, 0xb7, 0x4c, 0x6b, 0x45,
             0x72, 0x99, 0x53, 0x52, 0x8c, 0x8a, 0xf1, 0x0f, 0xe6, 0x59, 0xeb,
             0x43, 0x25, 0x07, 0x12, 0xf3, 0xd0, 0xe9, 0xc0, 0xa4, 0x1c, 0xed,
             0x46, 0x7e, 0xa1, 0xb4, 0x3d, 0xe4, 0x46, 0xd5, 0xbe, 0xe2, 0x0a,
             0xc7, 0x22, 0xcd, 0x43, 0x1d, 0x1e, 0x63, 0x2e, 0xb2, 0x25, 0x29,
             0x32, 0x4c, 0xd2, 0xa1, 0xbe, 0x9a, 0xcb, 0xca, 0x8d, 0xca, 0x02,
             0xf5, 0x5e, 0x97, 0xc7, 0x6a, 0x05, 0x91, 0xb9, 0x74, 0xa5, 0xd4,
             0xca, 0x45, 0xef, 0xc9, 0x9e, 0xff, 0x2d, 0x37, 0x8c, 0xed, 0x99,
             0x38, 0x16, 0x75, 0x88, 0x94, 0x1f, 0xe9, 0x7d, 0xa8, 0xf2, 0x5a,
             0x58, 0x0a, 0x73, 0x30, 0x13, 0xf3, 0xbc, 0x66, 0x0c, 0x48, 0xfa,
             0xcc, 0x99, 0xac, 0x89, 0x12, 0x17, 0x2a, 0x19, 0x79, 0x6b, 0x0f,
             0x41, 0xb2, 0x01, 0xd6, 0x6f, 0xb8, 0x33, 0x6c, 0xbf, 0x97, 0xd4,
             0x0a, 0x89, 0x62, 0xd6, 0x0b, 0x2c, 0x17, 0xfa, 0x3c, 0x15, 0xce,
             0x3d, 0x47, 0xc5, 0x8f, 0xdb, 0xee, 0x37, 0x2a, 0x97, 0x6d, 0xbc,
             0x2c, 0xf8, 0xa1, 0x05, 0xf8, 0xbb, 0x4c, 0x67, 0x08, 0x21, 0xd5,
             0x59, 0x50, 0x83, 0x44, 0x2c, 0x6e, 0x43, 0xf5, 0xc8, 0xa9, 0x2d,
             0xb8, 0x80, 0xd1}};
        auto const rsa6Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa6PublicKey{
            {0xd0, 0x07, 0xfc, 0x9d, 0xb0, 0xa1, 0xa6, 0x40, 0xe4, 0x52, 0x30,
             0x42, 0x74, 0xfd, 0x35, 0x04, 0xde, 0x45, 0x68, 0xb3, 0x22, 0xdd,
             0xff, 0x41, 0x43, 0x69, 0x33, 0xc0, 0xff, 0x35, 0xb6, 0x6d, 0x15,
             0xe9, 0x54, 0x15, 0xeb, 0x1d, 0x07, 0xe2, 0x25, 0x2b, 0xdb, 0xaa,
             0x16, 0x8d, 0x0d, 0x7f, 0x05, 0xf0, 0xd2, 0x7d, 0xb4, 0x9b, 0x51,
             0x19, 0x20, 0x1e, 0x3d, 0xba, 0x50, 0x9e, 0x51, 0x13, 0x81, 0x43,
             0x55, 0x96, 0xca, 0xdb, 0x88, 0x1f, 0xef, 0x2d, 0x38, 0x3f, 0xae,
             0x8d, 0xac, 0xc8, 0x6f, 0x2b, 0xd5, 0xf0, 0x34, 0x1a, 0x99, 0x00,
             0x7c, 0x6d, 0xb3, 0x1b, 0x1d, 0x68, 0xdb, 0xf8, 0x1c, 0x59, 0x3a,
             0x63, 0x38, 0x7c, 0x1c, 0x14, 0xbc, 0x22, 0xcf, 0xc8, 0x9a, 0xc6,
             0x96, 0x6f, 0x3d, 0x03, 0x0b, 0x61, 0x6b, 0x7d, 0x75, 0x97, 0xe8,
             0x25, 0xb8, 0x2f, 0xfa, 0xf4, 0x07, 0x44, 0xdf, 0x00, 0x3d, 0xff,
             0x0d, 0xd5, 0x7f, 0x7f, 0xf3, 0x0c, 0x13, 0xac, 0x8d, 0xf8, 0x8c,
             0x79, 0xc5, 0xf3, 0x29, 0xdc, 0x23, 0x65, 0xd3, 0xd1, 0x1c, 0xa6,
             0x14, 0x78, 0x6a, 0x1a, 0xe3, 0x15, 0x8d, 0x8b, 0xdc, 0xa0, 0x5a,
             0xc7, 0x82, 0xb0, 0x03, 0x6c, 0x71, 0x43, 0x59, 0x24, 0xc7, 0x50,
             0x64, 0xb2, 0xa7, 0x69, 0xf5, 0xbd, 0xe6, 0x5e, 0xaa, 0x77, 0x59,
             0x60, 0x36, 0xc0, 0xe3, 0x42, 0x7f, 0x05, 0x3b, 0x4c, 0x02, 0x0e,
             0x70, 0x5a, 0x70, 0xc5, 0x2a, 0xeb, 0x94, 0x4d, 0x15, 0x09, 0xef,
             0xbb, 0x58, 0x42, 0x68, 0x05, 0x59, 0x70, 0xa0, 0x17, 0xb2, 0x8e,
             0xdf, 0x7b, 0x40, 0x5d, 0x21, 0x1e, 0xfe, 0x62, 0x58, 0xde, 0xfb,
             0x14, 0x91, 0x18, 0xf3, 0x4f, 0x9b, 0x36, 0x55, 0xcf, 0xb3, 0x5e,
             0xec, 0x4f, 0xcc, 0x6d, 0x13, 0x58, 0xc8, 0xa3, 0xa3, 0xee, 0x23,
             0x8a, 0xc2, 0xbf}};
        std::array<std::uint8_t, 256> const rsa6Sig{
            {0xaf, 0x09, 0x5d, 0x6d, 0x02, 0x61, 0x12, 0x63, 0x08, 0x46, 0x3b,
             0x75, 0x87, 0xbb, 0x2c, 0x70, 0xe7, 0x69, 0x40, 0x9b, 0x89, 0x6a,
             0x25, 0x04, 0xd5, 0x7b, 0xf1, 0x33, 0x22, 0x72, 0x34, 0x97, 0x24,
             0x25, 0x5d, 0x8a, 0x00, 0xa4, 0xff, 0xa3, 0x84, 0x17, 0x4e, 0xbb,
             0xd9, 0x71, 0x88, 0x79, 0xd5, 0x39, 0xb2, 0x3d, 0xc7, 0x01, 0x0f,
             0x20, 0xc5, 0x70, 0xf8, 0xa6, 0x2e, 0x8f, 0xe4, 0xd7, 0xf0, 0xf1,
             0x7c, 0xf0, 0x5f, 0x58, 0x28, 0xb0, 0x6d, 0xad, 0xb8, 0xb5, 0x40,
             0x13, 0x0b, 0x8f, 0xe9, 0xe7, 0x84, 0x5f, 0xdf, 0xa2, 0xce, 0xce,
             0x49, 0x4f, 0x2a, 0xdd, 0x90, 0x13, 0x4e, 0xd6, 0x2f, 0xa6, 0x71,
             0x48, 0x8e, 0x90, 0x9a, 0x33, 0x28, 0xeb, 0x50, 0x54, 0x32, 0xc6,
             0x01, 0x7e, 0xb7, 0xeb, 0xef, 0xcb, 0xd2, 0xea, 0x4a, 0x3b, 0x91,
             0xa4, 0xa6, 0xe7, 0x99, 0x27, 0x9a, 0x98, 0x83, 0x28, 0x69, 0xc2,
             0x20, 0xf6, 0x34, 0xc8, 0x33, 0x93, 0x9b, 0x0f, 0xee, 0x09, 0xdf,
             0x90, 0x66, 0xca, 0x46, 0x3b, 0x48, 0xdd, 0x1e, 0x0f, 0x43, 0xf5,
             0xf2, 0x48, 0x7b, 0xed, 0x06, 0x8e, 0x69, 0x72, 0xd3, 0x38, 0x67,
             0x3e, 0x57, 0x3a, 0x3d, 0x31, 0xc7, 0x66, 0xf0, 0x3d, 0x68, 0xb0,
             0x23, 0x4d, 0x67, 0x43, 0x31, 0xf3, 0xb5, 0x35, 0x49, 0xfd, 0xca,
             0x23, 0x76, 0x0b, 0xe1, 0x92, 0x1a, 0xb5, 0x3f, 0x9c, 0x47, 0x01,
             0x28, 0x83, 0xbd, 0x21, 0x51, 0x53, 0xec, 0x18, 0xad, 0xd2, 0xbf,
             0xfb, 0x6f, 0x86, 0x0b, 0x82, 0x0a, 0xce, 0xb5, 0x5d, 0x60, 0xba,
             0x84, 0x6f, 0xcf, 0xbe, 0x35, 0x0c, 0xe0, 0x60, 0x1a, 0x58, 0x0e,
             0xb1, 0xbc, 0x7d, 0xc3, 0xc8, 0x13, 0x10, 0x0d, 0xc4, 0x9b, 0x09,
             0x08, 0x3f, 0xc2, 0x32, 0xb6, 0xe7, 0x6f, 0x79, 0xe1, 0x28, 0xdd,
             0xf1, 0x69, 0x1b}};
        auto const thresh5Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim7CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim7Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim7CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa8CondConditionFingerprint =
            "\xd1\xb5\x1d\x35\x99\x9d\xb4\xc1\xaa\x81\x4d\xd7\x0e\xa9\x2a"
            "\x20\x7f\xe5\x5c\x75\xe8\x57\x8b\xbf\xe8\xd7\x1c\x7e\xb2\xbc"
            "\x91\x16"s;
        Condition const Rsa8Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa8CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed9CondConditionFingerprint =
            "\x92\xfa\xfc\xc6\x2f\xe2\x8d\x8d\x25\x7c\xd4\x46\xab\xea\x82"
            "\xd0\x3f\x36\xbe\x1d\x11\x2b\xa0\xfe\xfe\xd4\x00\xd5\x7d\x9b"
            "\xf6\xc9"s;
        Condition const Ed9Cond{Type::ed25519Sha256,
                                131072,
                                makeSlice(Ed9CondConditionFingerprint),
                                std::bitset<5>{0}};
        auto const thresh3Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim10CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim10Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim10CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa11CondConditionFingerprint =
            "\xaf\x93\xfd\x22\x45\xc2\x08\xab\x43\xf7\x45\x56\x63\xec\xaf"
            "\x15\x33\xa0\x2a\xb4\x9e\x15\xb4\x6e\xda\x87\x35\xde\x09\x4b"
            "\x06\x31"s;
        Condition const Rsa11Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa11CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed12CondConditionFingerprint =
            "\x55\xcc\xd1\xa2\x2c\x90\x8d\xe3\x2e\x42\xd4\xe0\x65\xb2\xf7"
            "\xda\xc0\x07\x1e\xd3\x23\x0f\xfe\x78\x13\xa2\x86\x61\xc4\x34"
            "\x28\x50"s;
        Condition const Ed12Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed12CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Thresh13CondConditionFingerprint =
            "\xd9\x95\x6e\x6e\x8b\x3b\x8b\x3b\xd7\x11\x4b\x11\x21\x26\x48"
            "\xbd\x92\x55\x47\x42\x66\x8f\xc1\x5f\xb4\x03\x78\x32\x05\xc5"
            "\x0e\x82"s;
        Condition const Thresh13Cond{
            Type::thresholdSha256,
            135168,
            makeSlice(Thresh13CondConditionFingerprint),
            std::bitset<5>{25}};
        auto const prefix2Prefix = "P2"s;
        auto const prefix2Msg = "P1abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix2MaxMsgLength = 14;
        auto const prefix1Prefix = "P1"s;
        auto const prefix1Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix1MaxMsgLength = 14;
        auto const preim18Preimage = "I am root"s;
        auto const preim18Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const rsa19Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa19PublicKey{
            {0xc0, 0x81, 0x79, 0x3f, 0x26, 0x8f, 0xe8, 0x48, 0xf1, 0x9c, 0xd2,
             0x09, 0x7c, 0x96, 0x0d, 0x3c, 0xbb, 0x85, 0xdb, 0x1f, 0xab, 0xbe,
             0x97, 0x7d, 0xc0, 0x31, 0x07, 0xb0, 0x2e, 0xb9, 0x5c, 0x2c, 0xae,
             0x82, 0xf5, 0x3e, 0xb6, 0x91, 0xb8, 0x88, 0x2a, 0xa4, 0xa7, 0x81,
             0x97, 0xa5, 0x71, 0xad, 0x09, 0x4d, 0xfc, 0x25, 0x41, 0x3e, 0xe0,
             0xa3, 0xa6, 0x19, 0xba, 0x8f, 0x02, 0x41, 0x8d, 0x05, 0x51, 0xcd,
             0xf8, 0x22, 0xb3, 0x7a, 0x6e, 0x94, 0x7e, 0xaa, 0x58, 0xda, 0x02,
             0xae, 0x73, 0x00, 0x94, 0x1c, 0xb5, 0xb5, 0x26, 0x9f, 0xc5, 0x8b,
             0x04, 0xe0, 0xe0, 0x73, 0x96, 0x4b, 0xaf, 0x6d, 0x0a, 0xe4, 0x25,
             0x90, 0x2d, 0x13, 0x3c, 0xbe, 0x0e, 0x68, 0x7d, 0xfe, 0xa6, 0x12,
             0x6b, 0xb6, 0xec, 0xa0, 0xda, 0x2b, 0x22, 0x31, 0xe6, 0x05, 0x76,
             0xf5, 0x98, 0x8e, 0x76, 0x86, 0xbe, 0xc6, 0x07, 0x73, 0x52, 0x20,
             0x13, 0x8f, 0x93, 0x1f, 0xd9, 0x73, 0xfa, 0xb3, 0xed, 0x50, 0x1b,
             0xf7, 0x68, 0xf6, 0x60, 0xa3, 0x12, 0x73, 0x10, 0xda, 0x06, 0x70,
             0x69, 0xcb, 0xb5, 0x6c, 0x85, 0x29, 0xe8, 0x9e, 0x29, 0xb1, 0x4d,
             0x7e, 0x7e, 0xce, 0x15, 0xf5, 0x25, 0x55, 0xc5, 0x89, 0x7e, 0x34,
             0x48, 0x34, 0x43, 0x30, 0x2b, 0x6a, 0x8a, 0x6d, 0x1b, 0x55, 0x2a,
             0x2c, 0xf4, 0xcd, 0xc1, 0x72, 0x78, 0xda, 0x0d, 0x54, 0x32, 0x46,
             0x93, 0xd7, 0x96, 0xce, 0x33, 0x06, 0xe9, 0x7a, 0x7b, 0x6d, 0xe9,
             0x54, 0xe4, 0xbe, 0x56, 0x37, 0xa7, 0x7c, 0xc8, 0xba, 0x17, 0xb1,
             0xba, 0x76, 0xd7, 0x7f, 0xca, 0x7f, 0xfe, 0x60, 0x7d, 0x60, 0x27,
             0xd0, 0x80, 0x65, 0x74, 0xdc, 0xd6, 0xc8, 0x58, 0x4d, 0xcd, 0x8e,
             0xc9, 0x4e, 0xb2, 0x3e, 0x6e, 0x4f, 0xfa, 0x22, 0xfa, 0x9f, 0x3a,
             0x9f, 0x14, 0xeb}};
        std::array<std::uint8_t, 256> const rsa19Sig{
            {0xbe, 0xbe, 0xed, 0x8a, 0x13, 0x9f, 0x4c, 0x52, 0xe4, 0x5c, 0x3a,
             0x6f, 0xe9, 0x44, 0x14, 0x60, 0x6b, 0xb4, 0xce, 0x91, 0xef, 0x46,
             0x02, 0xcb, 0x9d, 0x84, 0x9c, 0x2f, 0xcf, 0x0c, 0xe8, 0x77, 0x12,
             0x76, 0xc2, 0xcf, 0x41, 0xd8, 0x37, 0xbb, 0x02, 0xb0, 0x1a, 0x39,
             0x3d, 0xd4, 0xc9, 0xfc, 0x11, 0xa3, 0xca, 0x22, 0xd2, 0x03, 0x1d,
             0x6c, 0x11, 0x7e, 0xac, 0x58, 0xf4, 0x1c, 0xeb, 0xc7, 0x2f, 0xf6,
             0x1b, 0x24, 0x69, 0xd6, 0xc6, 0x05, 0x44, 0x5b, 0x9c, 0x78, 0xb5,
             0xb3, 0xe4, 0xd8, 0x9e, 0x97, 0xf5, 0x1d, 0xf2, 0xc8, 0x3f, 0xdf,
             0xa6, 0x89, 0x89, 0xc5, 0xd6, 0x50, 0x29, 0xc0, 0x77, 0xb7, 0x53,
             0xb1, 0x55, 0xc8, 0x19, 0x11, 0x93, 0x27, 0x4c, 0xc7, 0xe0, 0x0c,
             0x8f, 0x20, 0x17, 0xf7, 0x80, 0xe9, 0xf5, 0xc0, 0x3e, 0xad, 0x67,
             0x88, 0x49, 0xee, 0xda, 0x1c, 0x87, 0xce, 0x4f, 0xb4, 0xf0, 0x6a,
             0x27, 0xf8, 0xa1, 0x34, 0x9c, 0xf6, 0x2c, 0x6d, 0x0f, 0x0e, 0xa4,
             0x4e, 0xa0, 0x6e, 0xe7, 0xaa, 0x14, 0x6f, 0x6e, 0x87, 0x26, 0x3a,
             0x35, 0x69, 0xdd, 0x3e, 0x8c, 0xb4, 0x47, 0x03, 0xc9, 0x1b, 0x68,
             0xa0, 0x44, 0x94, 0x19, 0x4e, 0x93, 0xd8, 0x77, 0xbb, 0xef, 0x25,
             0xba, 0xb8, 0xb9, 0xbd, 0x6f, 0x08, 0xce, 0xa6, 0xe9, 0x1c, 0x03,
             0x39, 0xbe, 0xcd, 0xe9, 0xae, 0x99, 0xcd, 0x0b, 0x7f, 0xc1, 0x5e,
             0x2c, 0xbd, 0x38, 0x57, 0x67, 0x1c, 0xca, 0x2e, 0x16, 0x13, 0xeb,
             0xc4, 0x94, 0x07, 0xf0, 0x4e, 0xf9, 0x57, 0xc2, 0xeb, 0xaa, 0x80,
             0xce, 0x72, 0x9f, 0x84, 0x0f, 0x01, 0xbf, 0x28, 0x17, 0x7c, 0x8c,
             0x5c, 0x93, 0x3a, 0x00, 0x40, 0x47, 0xaf, 0x50, 0xff, 0x62, 0x1a,
             0x4d, 0xaf, 0x31, 0xe7, 0x6a, 0x06, 0xd8, 0x89, 0xa0, 0xb2, 0xb9,
             0x02, 0x88, 0xf4}};
        auto const ed20Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed20PublicKey{
            {0x63, 0x87, 0xe7, 0xfd, 0x5e, 0x93, 0x76, 0x3e, 0x74, 0x42, 0x8e,
             0xd5, 0xc9, 0x79, 0xa6, 0xa9, 0xc4, 0x3d, 0x61, 0x14, 0x7b, 0x49,
             0xf3, 0xda, 0x52, 0xc2, 0x74, 0x9b, 0x62, 0xae, 0x8c, 0x90}};
        std::array<std::uint8_t, 64> const ed20Sig{
            {0x4f, 0x9d, 0xaf, 0x7e, 0x00, 0x50, 0x3d, 0xdc, 0xb2, 0xd9, 0x56,
             0x79, 0x61, 0xb7, 0xcb, 0xe6, 0x2d, 0xf3, 0xc8, 0xce, 0x6f, 0x7a,
             0xde, 0x9a, 0x85, 0xf8, 0xc5, 0xc7, 0x93, 0x7d, 0xf8, 0xdc, 0xdb,
             0xbc, 0x12, 0x87, 0x0d, 0x42, 0x62, 0xc8, 0xc8, 0xd0, 0xbd, 0xb7,
             0xa9, 0x05, 0x0c, 0x57, 0x2a, 0xf5, 0x59, 0x83, 0x81, 0x69, 0xc8,
             0xbc, 0xec, 0x4b, 0xf8, 0xf6, 0xbd, 0xc7, 0x70, 0x0f}};
        std::array<std::uint8_t, 32> const ed20SigningKey{
            {0x15, 0xe5, 0xd2, 0xb8, 0x15, 0x1f, 0xe1, 0x89, 0x7e, 0x3f, 0x33,
             0x3b, 0x27, 0xed, 0x94, 0xb6, 0xe4, 0x47, 0x82, 0xa0, 0xa8, 0x40,
             0xb9, 0x4d, 0xa8, 0x65, 0xb8, 0x79, 0x2b, 0x0f, 0x1b, 0x4c}};
        (void)ed20SigningKey;
        auto const thresh0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim21CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim21Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim21CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa22CondConditionFingerprint =
            "\x1a\x59\xf0\xd9\x99\xe2\xac\x9a\xc7\x84\xc3\xe7\x21\x3d\x86"
            "\x3b\x18\xfd\x67\xc1\x70\x5f\x36\x60\xc3\x4d\xb6\x1c\x84\x53"
            "\x7e\xda"s;
        Condition const Rsa22Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa22CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed23CondConditionFingerprint =
            "\x1a\x18\x47\x1f\xd0\x23\xc4\x4d\x07\x5b\x1e\x43\xa6\x28\x54"
            "\xce\xec\x02\x4d\xc1\x00\x3c\x0c\x55\x02\xa3\xa3\x28\x38\x88"
            "\x5c\x84"s;
        Condition const Ed23Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed23CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Prefix24CondConditionFingerprint =
            "\xe2\x16\xc6\x1f\x51\xe5\x17\xeb\xee\xaf\x26\xc6\x01\x3f\xa0"
            "\x7b\x73\x8a\x5a\x20\xfc\xf6\x16\x78\x45\xdd\x04\x79\xcf\xde"
            "\xb5\xe3"s;
        Condition const Prefix24Cond{
            Type::prefixSha256,
            278570,
            makeSlice(Prefix24CondConditionFingerprint),
            std::bitset<5>{29}};
        auto const Thresh41CondConditionFingerprint =
            "\x2d\x8d\x98\x48\x0b\x95\xae\xf0\x08\xb6\x83\xab\xce\x39\x57"
            "\x9d\xda\x0f\x1e\xdb\x17\x71\x7b\x9e\xf9\x9f\xd5\x29\x40\xf0"
            "\x39\x83"s;
        Condition const Thresh41Cond{
            Type::thresholdSha256,
            135168,
            makeSlice(Thresh41CondConditionFingerprint),
            std::bitset<5>{25}};

        auto rsa4 = std::make_unique<RsaSha256>(
            makeSlice(rsa4PublicKey), makeSlice(rsa4Sig));
        auto rsa6 = std::make_unique<RsaSha256>(
            makeSlice(rsa6PublicKey), makeSlice(rsa6Sig));
        std::vector<std::unique_ptr<Fulfillment>> thresh5Subfulfillments;
        thresh5Subfulfillments.emplace_back(std::move(rsa6));
        std::vector<Condition> thresh5Subconditions{
            {Preim7Cond, Rsa8Cond, Ed9Cond}};
        auto thresh5 = std::make_unique<ThresholdSha256>(
            std::move(thresh5Subfulfillments), std::move(thresh5Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh3Subfulfillments;
        thresh3Subfulfillments.emplace_back(std::move(rsa4));
        thresh3Subfulfillments.emplace_back(std::move(thresh5));
        std::vector<Condition> thresh3Subconditions{
            {Preim10Cond, Rsa11Cond, Ed12Cond, Thresh13Cond}};
        auto thresh3 = std::make_unique<ThresholdSha256>(
            std::move(thresh3Subfulfillments), std::move(thresh3Subconditions));
        auto prefix2 = std::make_unique<PrefixSha256>(
            makeSlice(prefix2Prefix), prefix2MaxMsgLength, std::move(thresh3));
        auto prefix1 = std::make_unique<PrefixSha256>(
            makeSlice(prefix1Prefix), prefix1MaxMsgLength, std::move(prefix2));
        auto preim18 =
            std::make_unique<PreimageSha256>(makeSlice(preim18Preimage));
        auto rsa19 = std::make_unique<RsaSha256>(
            makeSlice(rsa19PublicKey), makeSlice(rsa19Sig));
        auto ed20 = std::make_unique<Ed25519>(ed20PublicKey, ed20Sig);
        std::vector<std::unique_ptr<Fulfillment>> thresh0Subfulfillments;
        thresh0Subfulfillments.emplace_back(std::move(prefix1));
        thresh0Subfulfillments.emplace_back(std::move(preim18));
        thresh0Subfulfillments.emplace_back(std::move(rsa19));
        thresh0Subfulfillments.emplace_back(std::move(ed20));
        std::vector<Condition> thresh0Subconditions{
            {Preim21Cond, Rsa22Cond, Ed23Cond, Prefix24Cond, Thresh41Cond}};
        ThresholdSha256 const thresh0(
            std::move(thresh0Subfulfillments), std::move(thresh0Subconditions));
        {
            auto const thresh0EncodedFulfillment =
                "\xa2\x82\x08\xc3\xa0\x82\x07\xe9\xa0\x0b\x80\x09\x49\x20\x61"
                "\x6d\x20\x72\x6f\x6f\x74\xa1\x82\x05\x66\x80\x02\x50\x31\x81"
                "\x01\x0e\xa2\x82\x05\x5b\xa1\x82\x05\x57\x80\x02\x50\x32\x81"
                "\x01\x0e\xa2\x82\x05\x4c\xa2\x82\x05\x48\xa0\x82\x04\x9b\xa2"
                "\x82\x02\x8b\xa0\x82\x02\x0c\xa3\x82\x02\x08\x80\x82\x01\x00"
                "\xd0\x07\xfc\x9d\xb0\xa1\xa6\x40\xe4\x52\x30\x42\x74\xfd\x35"
                "\x04\xde\x45\x68\xb3\x22\xdd\xff\x41\x43\x69\x33\xc0\xff\x35"
                "\xb6\x6d\x15\xe9\x54\x15\xeb\x1d\x07\xe2\x25\x2b\xdb\xaa\x16"
                "\x8d\x0d\x7f\x05\xf0\xd2\x7d\xb4\x9b\x51\x19\x20\x1e\x3d\xba"
                "\x50\x9e\x51\x13\x81\x43\x55\x96\xca\xdb\x88\x1f\xef\x2d\x38"
                "\x3f\xae\x8d\xac\xc8\x6f\x2b\xd5\xf0\x34\x1a\x99\x00\x7c\x6d"
                "\xb3\x1b\x1d\x68\xdb\xf8\x1c\x59\x3a\x63\x38\x7c\x1c\x14\xbc"
                "\x22\xcf\xc8\x9a\xc6\x96\x6f\x3d\x03\x0b\x61\x6b\x7d\x75\x97"
                "\xe8\x25\xb8\x2f\xfa\xf4\x07\x44\xdf\x00\x3d\xff\x0d\xd5\x7f"
                "\x7f\xf3\x0c\x13\xac\x8d\xf8\x8c\x79\xc5\xf3\x29\xdc\x23\x65"
                "\xd3\xd1\x1c\xa6\x14\x78\x6a\x1a\xe3\x15\x8d\x8b\xdc\xa0\x5a"
                "\xc7\x82\xb0\x03\x6c\x71\x43\x59\x24\xc7\x50\x64\xb2\xa7\x69"
                "\xf5\xbd\xe6\x5e\xaa\x77\x59\x60\x36\xc0\xe3\x42\x7f\x05\x3b"
                "\x4c\x02\x0e\x70\x5a\x70\xc5\x2a\xeb\x94\x4d\x15\x09\xef\xbb"
                "\x58\x42\x68\x05\x59\x70\xa0\x17\xb2\x8e\xdf\x7b\x40\x5d\x21"
                "\x1e\xfe\x62\x58\xde\xfb\x14\x91\x18\xf3\x4f\x9b\x36\x55\xcf"
                "\xb3\x5e\xec\x4f\xcc\x6d\x13\x58\xc8\xa3\xa3\xee\x23\x8a\xc2"
                "\xbf\x81\x82\x01\x00\xaf\x09\x5d\x6d\x02\x61\x12\x63\x08\x46"
                "\x3b\x75\x87\xbb\x2c\x70\xe7\x69\x40\x9b\x89\x6a\x25\x04\xd5"
                "\x7b\xf1\x33\x22\x72\x34\x97\x24\x25\x5d\x8a\x00\xa4\xff\xa3"
                "\x84\x17\x4e\xbb\xd9\x71\x88\x79\xd5\x39\xb2\x3d\xc7\x01\x0f"
                "\x20\xc5\x70\xf8\xa6\x2e\x8f\xe4\xd7\xf0\xf1\x7c\xf0\x5f\x58"
                "\x28\xb0\x6d\xad\xb8\xb5\x40\x13\x0b\x8f\xe9\xe7\x84\x5f\xdf"
                "\xa2\xce\xce\x49\x4f\x2a\xdd\x90\x13\x4e\xd6\x2f\xa6\x71\x48"
                "\x8e\x90\x9a\x33\x28\xeb\x50\x54\x32\xc6\x01\x7e\xb7\xeb\xef"
                "\xcb\xd2\xea\x4a\x3b\x91\xa4\xa6\xe7\x99\x27\x9a\x98\x83\x28"
                "\x69\xc2\x20\xf6\x34\xc8\x33\x93\x9b\x0f\xee\x09\xdf\x90\x66"
                "\xca\x46\x3b\x48\xdd\x1e\x0f\x43\xf5\xf2\x48\x7b\xed\x06\x8e"
                "\x69\x72\xd3\x38\x67\x3e\x57\x3a\x3d\x31\xc7\x66\xf0\x3d\x68"
                "\xb0\x23\x4d\x67\x43\x31\xf3\xb5\x35\x49\xfd\xca\x23\x76\x0b"
                "\xe1\x92\x1a\xb5\x3f\x9c\x47\x01\x28\x83\xbd\x21\x51\x53\xec"
                "\x18\xad\xd2\xbf\xfb\x6f\x86\x0b\x82\x0a\xce\xb5\x5d\x60\xba"
                "\x84\x6f\xcf\xbe\x35\x0c\xe0\x60\x1a\x58\x0e\xb1\xbc\x7d\xc3"
                "\xc8\x13\x10\x0d\xc4\x9b\x09\x08\x3f\xc2\x32\xb6\xe7\x6f\x79"
                "\xe1\x28\xdd\xf1\x69\x1b\xa1\x79\xa0\x25\x80\x20\x5d\xa0\x30"
                "\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c"
                "\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81"
                "\x01\x09\xa3\x27\x80\x20\xd1\xb5\x1d\x35\x99\x9d\xb4\xc1\xaa"
                "\x81\x4d\xd7\x0e\xa9\x2a\x20\x7f\xe5\x5c\x75\xe8\x57\x8b\xbf"
                "\xe8\xd7\x1c\x7e\xb2\xbc\x91\x16\x81\x03\x01\x00\x00\xa4\x27"
                "\x80\x20\x92\xfa\xfc\xc6\x2f\xe2\x8d\x8d\x25\x7c\xd4\x46\xab"
                "\xea\x82\xd0\x3f\x36\xbe\x1d\x11\x2b\xa0\xfe\xfe\xd4\x00\xd5"
                "\x7d\x9b\xf6\xc9\x81\x03\x02\x00\x00\xa3\x82\x02\x08\x80\x82"
                "\x01\x00\xbe\x09\xc5\xa4\x27\x29\xdf\xd4\x67\x76\xbe\xbf\x2c"
                "\xf3\xa2\x0b\x42\xe4\xbf\xeb\xdd\x67\x20\xfb\x7a\x27\x93\xc0"
                "\x78\x47\x78\xd7\x15\x32\xee\x38\x81\x0d\x36\xa2\xc4\x65\x44"
                "\xe6\x62\x26\xb9\x58\x13\xa4\x15\x82\xab\xb1\x16\x61\xfc\x01"
                "\x98\xc6\x1a\x69\xc6\xba\x39\x3f\x01\x55\x3d\xd7\x8e\x14\x42"
                "\x6d\x78\x74\x9b\x28\xcb\x31\x39\x98\x5a\x11\xdc\xc1\x18\x9d"
                "\x8d\xb0\xcd\x1b\x4c\x10\xab\x14\x64\x19\xf1\x33\x15\x45\xc8"
                "\x92\x82\x03\x82\x8a\xaa\xad\x94\xfc\x24\x11\x96\x99\x7e\x94"
                "\x5a\x82\x57\x68\x61\x9f\x7b\x45\xe0\x99\x9e\x4f\x32\x50\x5f"
                "\x05\xc8\x11\xae\xc4\x0c\x63\x18\x0e\x02\x59\x36\x25\x92\x06"
                "\x32\xc7\x71\x47\x99\xcc\x0a\x6e\x0a\x58\x71\x3f\x5e\xb7\x78"
                "\xf7\x98\x79\xdf\x74\xa4\xeb\xa9\x00\xfd\x81\xb3\xcf\x04\x8c"
                "\x5d\x7d\xe7\xb2\x82\x90\x49\xbd\x69\xf3\x08\xe9\x92\xc6\x9e"
                "\x41\xba\x74\xd8\x8d\x81\x97\x6f\x86\xab\xc9\xf1\x02\x31\xb4"
                "\xce\x47\xb0\x39\xc8\xba\x51\xa7\x39\xf3\x71\xa2\x25\x27\x37"
                "\x6e\x09\x6f\x19\x59\xbc\x65\xd9\xcd\x12\xd3\x2c\xa2\x78\xfa"
                "\x23\x15\x1a\x82\x41\x91\x1b\xbe\x8a\xe7\xfe\x3c\x3c\x30\x32"
                "\xaa\xe9\xf3\x81\x82\x01\x00\x0c\xa9\x69\xe7\x57\x3a\x2b\x04"
                "\x8c\x07\x15\x58\xe5\x1f\x94\x3d\x54\x04\x21\xe8\x33\x21\xc3"
                "\xb8\xef\x65\x5b\x00\xee\x69\x89\x14\xef\x65\x7e\xf6\xc4\x0e"
                "\x2f\x29\x88\x85\x29\xcc\x09\x35\xef\xbf\x21\x43\x0e\x6a\x08"
                "\xb1\x5e\xa9\x95\xe9\xbc\x93\x44\x6b\xa7\x02\xf1\xe6\xae\x10"
                "\x00\xa9\x48\x50\x37\x4c\x6a\x8d\x4c\xd1\x53\x63\x4c\x76\x5a"
                "\xd1\xb7\x4c\x6b\x45\x72\x99\x53\x52\x8c\x8a\xf1\x0f\xe6\x59"
                "\xeb\x43\x25\x07\x12\xf3\xd0\xe9\xc0\xa4\x1c\xed\x46\x7e\xa1"
                "\xb4\x3d\xe4\x46\xd5\xbe\xe2\x0a\xc7\x22\xcd\x43\x1d\x1e\x63"
                "\x2e\xb2\x25\x29\x32\x4c\xd2\xa1\xbe\x9a\xcb\xca\x8d\xca\x02"
                "\xf5\x5e\x97\xc7\x6a\x05\x91\xb9\x74\xa5\xd4\xca\x45\xef\xc9"
                "\x9e\xff\x2d\x37\x8c\xed\x99\x38\x16\x75\x88\x94\x1f\xe9\x7d"
                "\xa8\xf2\x5a\x58\x0a\x73\x30\x13\xf3\xbc\x66\x0c\x48\xfa\xcc"
                "\x99\xac\x89\x12\x17\x2a\x19\x79\x6b\x0f\x41\xb2\x01\xd6\x6f"
                "\xb8\x33\x6c\xbf\x97\xd4\x0a\x89\x62\xd6\x0b\x2c\x17\xfa\x3c"
                "\x15\xce\x3d\x47\xc5\x8f\xdb\xee\x37\x2a\x97\x6d\xbc\x2c\xf8"
                "\xa1\x05\xf8\xbb\x4c\x67\x08\x21\xd5\x59\x50\x83\x44\x2c\x6e"
                "\x43\xf5\xc8\xa9\x2d\xb8\x80\xd1\xa1\x81\xa6\xa0\x25\x80\x20"
                "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
                "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
                "\xeb\x4e\x81\x01\x09\xa2\x2b\x80\x20\xd9\x95\x6e\x6e\x8b\x3b"
                "\x8b\x3b\xd7\x11\x4b\x11\x21\x26\x48\xbd\x92\x55\x47\x42\x66"
                "\x8f\xc1\x5f\xb4\x03\x78\x32\x05\xc5\x0e\x82\x81\x03\x02\x10"
                "\x00\x82\x02\x03\x98\xa3\x27\x80\x20\xaf\x93\xfd\x22\x45\xc2"
                "\x08\xab\x43\xf7\x45\x56\x63\xec\xaf\x15\x33\xa0\x2a\xb4\x9e"
                "\x15\xb4\x6e\xda\x87\x35\xde\x09\x4b\x06\x31\x81\x03\x01\x00"
                "\x00\xa4\x27\x80\x20\x55\xcc\xd1\xa2\x2c\x90\x8d\xe3\x2e\x42"
                "\xd4\xe0\x65\xb2\xf7\xda\xc0\x07\x1e\xd3\x23\x0f\xfe\x78\x13"
                "\xa2\x86\x61\xc4\x34\x28\x50\x81\x03\x02\x00\x00\xa3\x82\x02"
                "\x08\x80\x82\x01\x00\xc0\x81\x79\x3f\x26\x8f\xe8\x48\xf1\x9c"
                "\xd2\x09\x7c\x96\x0d\x3c\xbb\x85\xdb\x1f\xab\xbe\x97\x7d\xc0"
                "\x31\x07\xb0\x2e\xb9\x5c\x2c\xae\x82\xf5\x3e\xb6\x91\xb8\x88"
                "\x2a\xa4\xa7\x81\x97\xa5\x71\xad\x09\x4d\xfc\x25\x41\x3e\xe0"
                "\xa3\xa6\x19\xba\x8f\x02\x41\x8d\x05\x51\xcd\xf8\x22\xb3\x7a"
                "\x6e\x94\x7e\xaa\x58\xda\x02\xae\x73\x00\x94\x1c\xb5\xb5\x26"
                "\x9f\xc5\x8b\x04\xe0\xe0\x73\x96\x4b\xaf\x6d\x0a\xe4\x25\x90"
                "\x2d\x13\x3c\xbe\x0e\x68\x7d\xfe\xa6\x12\x6b\xb6\xec\xa0\xda"
                "\x2b\x22\x31\xe6\x05\x76\xf5\x98\x8e\x76\x86\xbe\xc6\x07\x73"
                "\x52\x20\x13\x8f\x93\x1f\xd9\x73\xfa\xb3\xed\x50\x1b\xf7\x68"
                "\xf6\x60\xa3\x12\x73\x10\xda\x06\x70\x69\xcb\xb5\x6c\x85\x29"
                "\xe8\x9e\x29\xb1\x4d\x7e\x7e\xce\x15\xf5\x25\x55\xc5\x89\x7e"
                "\x34\x48\x34\x43\x30\x2b\x6a\x8a\x6d\x1b\x55\x2a\x2c\xf4\xcd"
                "\xc1\x72\x78\xda\x0d\x54\x32\x46\x93\xd7\x96\xce\x33\x06\xe9"
                "\x7a\x7b\x6d\xe9\x54\xe4\xbe\x56\x37\xa7\x7c\xc8\xba\x17\xb1"
                "\xba\x76\xd7\x7f\xca\x7f\xfe\x60\x7d\x60\x27\xd0\x80\x65\x74"
                "\xdc\xd6\xc8\x58\x4d\xcd\x8e\xc9\x4e\xb2\x3e\x6e\x4f\xfa\x22"
                "\xfa\x9f\x3a\x9f\x14\xeb\x81\x82\x01\x00\xbe\xbe\xed\x8a\x13"
                "\x9f\x4c\x52\xe4\x5c\x3a\x6f\xe9\x44\x14\x60\x6b\xb4\xce\x91"
                "\xef\x46\x02\xcb\x9d\x84\x9c\x2f\xcf\x0c\xe8\x77\x12\x76\xc2"
                "\xcf\x41\xd8\x37\xbb\x02\xb0\x1a\x39\x3d\xd4\xc9\xfc\x11\xa3"
                "\xca\x22\xd2\x03\x1d\x6c\x11\x7e\xac\x58\xf4\x1c\xeb\xc7\x2f"
                "\xf6\x1b\x24\x69\xd6\xc6\x05\x44\x5b\x9c\x78\xb5\xb3\xe4\xd8"
                "\x9e\x97\xf5\x1d\xf2\xc8\x3f\xdf\xa6\x89\x89\xc5\xd6\x50\x29"
                "\xc0\x77\xb7\x53\xb1\x55\xc8\x19\x11\x93\x27\x4c\xc7\xe0\x0c"
                "\x8f\x20\x17\xf7\x80\xe9\xf5\xc0\x3e\xad\x67\x88\x49\xee\xda"
                "\x1c\x87\xce\x4f\xb4\xf0\x6a\x27\xf8\xa1\x34\x9c\xf6\x2c\x6d"
                "\x0f\x0e\xa4\x4e\xa0\x6e\xe7\xaa\x14\x6f\x6e\x87\x26\x3a\x35"
                "\x69\xdd\x3e\x8c\xb4\x47\x03\xc9\x1b\x68\xa0\x44\x94\x19\x4e"
                "\x93\xd8\x77\xbb\xef\x25\xba\xb8\xb9\xbd\x6f\x08\xce\xa6\xe9"
                "\x1c\x03\x39\xbe\xcd\xe9\xae\x99\xcd\x0b\x7f\xc1\x5e\x2c\xbd"
                "\x38\x57\x67\x1c\xca\x2e\x16\x13\xeb\xc4\x94\x07\xf0\x4e\xf9"
                "\x57\xc2\xeb\xaa\x80\xce\x72\x9f\x84\x0f\x01\xbf\x28\x17\x7c"
                "\x8c\x5c\x93\x3a\x00\x40\x47\xaf\x50\xff\x62\x1a\x4d\xaf\x31"
                "\xe7\x6a\x06\xd8\x89\xa0\xb2\xb9\x02\x88\xf4\xa4\x64\x80\x20"
                "\x63\x87\xe7\xfd\x5e\x93\x76\x3e\x74\x42\x8e\xd5\xc9\x79\xa6"
                "\xa9\xc4\x3d\x61\x14\x7b\x49\xf3\xda\x52\xc2\x74\x9b\x62\xae"
                "\x8c\x90\x81\x40\x4f\x9d\xaf\x7e\x00\x50\x3d\xdc\xb2\xd9\x56"
                "\x79\x61\xb7\xcb\xe6\x2d\xf3\xc8\xce\x6f\x7a\xde\x9a\x85\xf8"
                "\xc5\xc7\x93\x7d\xf8\xdc\xdb\xbc\x12\x87\x0d\x42\x62\xc8\xc8"
                "\xd0\xbd\xb7\xa9\x05\x0c\x57\x2a\xf5\x59\x83\x81\x69\xc8\xbc"
                "\xec\x4b\xf8\xf6\xbd\xc7\x70\x0f\xa1\x81\xd3\xa0\x25\x80\x20"
                "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
                "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
                "\xeb\x4e\x81\x01\x09\xa1\x2b\x80\x20\xe2\x16\xc6\x1f\x51\xe5"
                "\x17\xeb\xee\xaf\x26\xc6\x01\x3f\xa0\x7b\x73\x8a\x5a\x20\xfc"
                "\xf6\x16\x78\x45\xdd\x04\x79\xcf\xde\xb5\xe3\x81\x03\x04\x40"
                "\x2a\x82\x02\x03\xb8\xa2\x2b\x80\x20\x2d\x8d\x98\x48\x0b\x95"
                "\xae\xf0\x08\xb6\x83\xab\xce\x39\x57\x9d\xda\x0f\x1e\xdb\x17"
                "\x71\x7b\x9e\xf9\x9f\xd5\x29\x40\xf0\x39\x83\x81\x03\x02\x10"
                "\x00\x82\x02\x03\x98\xa3\x27\x80\x20\x1a\x59\xf0\xd9\x99\xe2"
                "\xac\x9a\xc7\x84\xc3\xe7\x21\x3d\x86\x3b\x18\xfd\x67\xc1\x70"
                "\x5f\x36\x60\xc3\x4d\xb6\x1c\x84\x53\x7e\xda\x81\x03\x01\x00"
                "\x00\xa4\x27\x80\x20\x1a\x18\x47\x1f\xd0\x23\xc4\x4d\x07\x5b"
                "\x1e\x43\xa6\x28\x54\xce\xec\x02\x4d\xc1\x00\x3c\x0c\x55\x02"
                "\xa3\xa3\x28\x38\x88\x5c\x84\x81\x03\x02\x00\x00"s;
            auto const thresh0EncodedCondition =
                "\xa2\x2b\x80\x20\x53\xd4\x19\xe5\x47\xbe\x0e\x53\x07\x32\xcd"
                "\x83\x3b\x2b\xac\x0f\xd6\x43\xa2\x72\xf1\x5a\x61\x8b\x12\xa8"
                "\x62\x9b\x20\xf0\x0d\x0d\x81\x03\x0c\xb4\x4a\x82\x02\x03\xd8"s;
            auto const thresh0EncodedFingerprint =
                "\x30\x82\x01\x80\x80\x01\x04\xa1\x82\x01\x79\xa0\x25\x80\x20"
                "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
                "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
                "\xeb\x4e\x81\x01\x09\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1"
                "\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21"
                "\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa1"
                "\x2b\x80\x20\x7d\x6b\x1d\x3a\x39\xdd\xe8\xad\x49\x8e\xef\x5c"
                "\x90\x07\x2d\x5c\xdc\x6f\x86\xb5\x92\x39\x94\x20\xde\x21\x13"
                "\xdc\x6c\x05\xed\x27\x81\x03\x04\x40\x20\x82\x02\x03\xb8\xa1"
                "\x2b\x80\x20\xe2\x16\xc6\x1f\x51\xe5\x17\xeb\xee\xaf\x26\xc6"
                "\x01\x3f\xa0\x7b\x73\x8a\x5a\x20\xfc\xf6\x16\x78\x45\xdd\x04"
                "\x79\xcf\xde\xb5\xe3\x81\x03\x04\x40\x2a\x82\x02\x03\xb8\xa2"
                "\x2b\x80\x20\x2d\x8d\x98\x48\x0b\x95\xae\xf0\x08\xb6\x83\xab"
                "\xce\x39\x57\x9d\xda\x0f\x1e\xdb\x17\x71\x7b\x9e\xf9\x9f\xd5"
                "\x29\x40\xf0\x39\x83\x81\x03\x02\x10\x00\x82\x02\x03\x98\xa3"
                "\x27\x80\x20\x19\x8c\xcc\x4c\x02\x17\xf3\xb7\xc0\x65\x68\xae"
                "\xf6\xd8\x1a\x44\xd5\x39\x52\x93\x1c\xb2\x4f\x8f\xb3\x6f\x21"
                "\xfc\x18\x2c\x58\x10\x81\x03\x01\x00\x00\xa3\x27\x80\x20\x1a"
                "\x59\xf0\xd9\x99\xe2\xac\x9a\xc7\x84\xc3\xe7\x21\x3d\x86\x3b"
                "\x18\xfd\x67\xc1\x70\x5f\x36\x60\xc3\x4d\xb6\x1c\x84\x53\x7e"
                "\xda\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x1a\x18\x47\x1f\xd0"
                "\x23\xc4\x4d\x07\x5b\x1e\x43\xa6\x28\x54\xce\xec\x02\x4d\xc1"
                "\x00\x3c\x0c\x55\x02\xa3\xa3\x28\x38\x88\x5c\x84\x81\x03\x02"
                "\x00\x00\xa4\x27\x80\x20\xa1\xa0\xd1\xf4\xea\x8d\x9a\x14\x25"
                "\xca\x52\x3a\x77\x7e\xf4\x0d\x86\x56\xc7\x22\x12\xd3\xa3\xc2"
                "\x32\xa3\x2b\x80\x96\xf3\xd4\x23\x81\x03\x02\x00\x00"s;
            check(
                &thresh0,
                thresh0Msg,
                thresh0EncodedFulfillment,
                thresh0EncodedCondition,
                thresh0EncodedFingerprint);
        }
    }

    void
    testThresh40()
    {
        testcase("Thresh40");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * thresh0
        // ** Preim16Cond
        // ** Rsa17Cond
        // ** Ed18Cond
        // ** thresh1
        // *** rsa2
        // ** prefix3
        // *** prefix4
        // **** rsa5
        // ** thresh6
        // *** Preim13Cond
        // *** Rsa14Cond
        // *** Ed15Cond
        // *** rsa7
        // *** thresh8
        // **** Preim10Cond
        // **** Rsa11Cond
        // **** Ed12Cond
        // **** rsa9

        auto const rsa2Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa2PublicKey{
            {0xba, 0x2c, 0x3b, 0x50, 0xb6, 0xbf, 0xf9, 0x0f, 0x1d, 0xd7, 0x32,
             0x4c, 0x01, 0x5f, 0xff, 0x2f, 0x2a, 0xf6, 0x33, 0xd0, 0xfb, 0xea,
             0x1f, 0xa4, 0xf2, 0x2d, 0x22, 0x8a, 0x19, 0x95, 0xa9, 0x17, 0xb7,
             0x4f, 0x17, 0xcf, 0x55, 0xcd, 0x1a, 0x3a, 0x5f, 0x07, 0x73, 0xcc,
             0xaa, 0x21, 0x70, 0x64, 0xb3, 0xa0, 0xf4, 0xb7, 0x30, 0xa3, 0x82,
             0x37, 0x93, 0xc6, 0x59, 0xde, 0x1b, 0xa1, 0x16, 0x90, 0x5a, 0x1a,
             0xf6, 0x73, 0xab, 0x92, 0xc8, 0x2f, 0xf4, 0x6f, 0x5c, 0xf2, 0x22,
             0x1d, 0x30, 0xf8, 0x03, 0xd8, 0x9b, 0x5f, 0x73, 0x72, 0x8e, 0x5f,
             0xd5, 0x37, 0x4b, 0x43, 0xda, 0xfe, 0x84, 0x21, 0x67, 0xe8, 0xe3,
             0xd7, 0x91, 0x3f, 0x24, 0x1d, 0xfb, 0x1f, 0x12, 0x6e, 0xcb, 0xfc,
             0xb7, 0x5b, 0x0a, 0x35, 0x73, 0x3b, 0xce, 0x44, 0x34, 0x8e, 0xcd,
             0x53, 0xa4, 0xcf, 0xa7, 0x63, 0x73, 0xcd, 0x31, 0x0f, 0xe0, 0x75,
             0x8d, 0xe4, 0xa9, 0xdc, 0xfe, 0xf0, 0xc9, 0x3d, 0x26, 0xaf, 0xbf,
             0x7b, 0x0f, 0x0e, 0x17, 0xb9, 0xd0, 0x4a, 0x32, 0x80, 0x64, 0x6b,
             0x54, 0x73, 0x5a, 0x50, 0xc7, 0x31, 0x59, 0xf9, 0x73, 0x72, 0xa5,
             0x79, 0xba, 0xdb, 0xa1, 0x14, 0x8d, 0x77, 0x67, 0x3e, 0xc0, 0x5b,
             0xec, 0x6f, 0x0b, 0xf7, 0xc5, 0xee, 0x5a, 0xa6, 0x8d, 0x49, 0x63,
             0x81, 0xbb, 0xd1, 0xf9, 0x9e, 0xbb, 0xed, 0xb2, 0xa9, 0x18, 0x60,
             0xa7, 0xee, 0xeb, 0x30, 0xa1, 0x92, 0x93, 0xe8, 0xd8, 0x34, 0x9e,
             0xac, 0xd6, 0x23, 0xfc, 0x7f, 0xcb, 0xe7, 0xfe, 0xa7, 0xe6, 0x42,
             0xac, 0x77, 0x11, 0xc0, 0x67, 0x77, 0xd1, 0xaa, 0x5e, 0xed, 0x3b,
             0xd5, 0xa5, 0x8d, 0x34, 0x7c, 0xd9, 0x57, 0x44, 0xa7, 0xc5, 0x44,
             0x2e, 0x1e, 0xe7, 0x63, 0xd8, 0x53, 0x1b, 0x9a, 0xd9, 0x67, 0x02,
             0x13, 0x32, 0x61}};
        std::array<std::uint8_t, 256> const rsa2Sig{
            {0x7b, 0x9a, 0x6c, 0xbe, 0x81, 0xd9, 0x0a, 0x86, 0x1b, 0xdb, 0x4a,
             0x48, 0x78, 0x1a, 0xd4, 0x37, 0x6b, 0x73, 0xd9, 0xdb, 0x1d, 0x91,
             0x14, 0x33, 0x40, 0x18, 0xcd, 0x20, 0xa3, 0x4a, 0x1d, 0x7b, 0x62,
             0x32, 0xf4, 0xb8, 0xa2, 0x8a, 0xe2, 0x65, 0x79, 0xd6, 0x29, 0x37,
             0xf9, 0x82, 0x85, 0xe5, 0x3a, 0x69, 0xf7, 0x31, 0x21, 0xf4, 0x59,
             0xaf, 0x67, 0xf6, 0xcf, 0x17, 0x27, 0x1c, 0xf5, 0x4f, 0x3d, 0x0e,
             0xeb, 0x1d, 0x8b, 0xe8, 0xfd, 0x9e, 0x5f, 0xe2, 0x82, 0x70, 0x45,
             0xb2, 0x91, 0x85, 0x31, 0xdb, 0xd7, 0x42, 0x60, 0x61, 0xfd, 0x62,
             0xb6, 0x23, 0x81, 0x9b, 0x54, 0x5f, 0xc1, 0xbd, 0x9e, 0x3b, 0x05,
             0xcd, 0x27, 0xd8, 0xbf, 0x4c, 0x93, 0x16, 0xb0, 0x3e, 0x75, 0xa9,
             0xc9, 0x98, 0x46, 0x8d, 0xe0, 0xb4, 0x61, 0x1a, 0x71, 0xf1, 0xaa,
             0x4d, 0xb3, 0xd7, 0x9b, 0x39, 0x5f, 0xe6, 0x3f, 0x07, 0xda, 0x00,
             0xf9, 0x7f, 0xe1, 0x0d, 0xa5, 0x54, 0x75, 0xa9, 0xf9, 0x66, 0xcb,
             0xf1, 0x2e, 0xbc, 0x6b, 0x0b, 0xf3, 0xc0, 0x98, 0x88, 0x88, 0x9c,
             0xd5, 0x43, 0x4e, 0x67, 0xa4, 0x43, 0xfc, 0x36, 0x86, 0xde, 0xca,
             0x0b, 0xd9, 0x00, 0x91, 0x03, 0xbe, 0xb9, 0xaf, 0x1b, 0x5e, 0x76,
             0x50, 0x94, 0x42, 0x50, 0xc6, 0x88, 0xa0, 0x13, 0xd2, 0x97, 0x69,
             0x80, 0xcb, 0xc4, 0x04, 0x22, 0x03, 0x5e, 0xa9, 0x7f, 0xc3, 0x49,
             0xee, 0x13, 0x5c, 0x43, 0xae, 0xbc, 0x8d, 0x99, 0xfa, 0x26, 0x7c,
             0x71, 0x34, 0xf0, 0x2e, 0xbb, 0x39, 0x31, 0xed, 0x7b, 0x10, 0xbf,
             0x41, 0xa6, 0xa2, 0x5a, 0xa0, 0x3b, 0x5f, 0x17, 0xbc, 0xe6, 0x91,
             0x42, 0xf6, 0x2e, 0x54, 0x59, 0x0a, 0x67, 0x86, 0xa5, 0x72, 0xe2,
             0xc1, 0x56, 0x56, 0xae, 0xcf, 0x87, 0x62, 0x33, 0x84, 0x43, 0x2a,
             0xf4, 0x46, 0x96}};
        auto const thresh1Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const rsa5Msg = "P4P3abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa5PublicKey{
            {0xc0, 0x00, 0xef, 0x8f, 0x4b, 0x81, 0x10, 0x1e, 0x52, 0xe0, 0x07,
             0x9f, 0x68, 0xe7, 0x2f, 0x92, 0xd4, 0x77, 0x3c, 0x1f, 0xa3, 0xff,
             0x72, 0x64, 0x5b, 0x37, 0xf1, 0xf3, 0xa3, 0xc5, 0xfb, 0xcd, 0xfb,
             0xda, 0xcc, 0x8b, 0x52, 0xe1, 0xde, 0xbc, 0x28, 0x8d, 0xe5, 0xad,
             0xab, 0x86, 0x61, 0x45, 0x97, 0x65, 0x37, 0x68, 0x26, 0x21, 0x92,
             0x17, 0xa3, 0xb0, 0x74, 0x5c, 0x8a, 0x45, 0x8d, 0x87, 0x5b, 0x9b,
             0xd1, 0x7b, 0x07, 0xc4, 0x8c, 0x67, 0xa0, 0xe9, 0x82, 0x0c, 0xe0,
             0x6b, 0xea, 0x91, 0x5c, 0xba, 0xe3, 0xd9, 0x9d, 0x39, 0xfd, 0x77,
             0xac, 0xcb, 0x33, 0x9b, 0x28, 0x51, 0x8d, 0xbf, 0x3e, 0xe4, 0x94,
             0x1c, 0x9a, 0x60, 0x71, 0x4b, 0x34, 0x07, 0x30, 0xda, 0x42, 0x46,
             0x0e, 0xb8, 0xb7, 0x2c, 0xf5, 0x2f, 0x4b, 0x9e, 0xe7, 0x64, 0x81,
             0xa1, 0xa2, 0x05, 0x66, 0x92, 0xe6, 0x75, 0x9f, 0x37, 0xae, 0x40,
             0xa9, 0x16, 0x08, 0x19, 0xe8, 0xdc, 0x47, 0xd6, 0x03, 0x29, 0xab,
             0xcc, 0x58, 0xa2, 0x37, 0x2a, 0x32, 0xb8, 0x15, 0xc7, 0x51, 0x91,
             0x73, 0xb9, 0x1d, 0xc6, 0xd0, 0x4f, 0x85, 0x86, 0xd5, 0xb3, 0x21,
             0x1a, 0x2a, 0x6c, 0xeb, 0x7f, 0xfe, 0x84, 0x17, 0x10, 0x2d, 0x0e,
             0xb4, 0xe1, 0xc2, 0x48, 0x4c, 0x3f, 0x61, 0xc7, 0x59, 0x75, 0xa7,
             0xc1, 0x75, 0xce, 0x67, 0x17, 0x42, 0x2a, 0x2f, 0x96, 0xef, 0x8a,
             0x2d, 0x74, 0xd2, 0x13, 0x68, 0xe1, 0xe9, 0xea, 0xfb, 0x73, 0x68,
             0xed, 0x8d, 0xd3, 0xac, 0x49, 0x09, 0xf9, 0xec, 0x62, 0xdf, 0x53,
             0xab, 0xfe, 0x90, 0x64, 0x4b, 0x92, 0x60, 0x0d, 0xdd, 0x00, 0xfe,
             0x02, 0xe6, 0xf3, 0x9b, 0x2b, 0xac, 0x4f, 0x70, 0xe8, 0x5b, 0x69,
             0x9c, 0x40, 0xd3, 0xeb, 0x37, 0xad, 0x6f, 0x37, 0xab, 0xf3, 0x79,
             0x8e, 0xcb, 0x1d}};
        std::array<std::uint8_t, 256> const rsa5Sig{
            {0x11, 0xbf, 0xe6, 0x8d, 0xc2, 0xc4, 0xff, 0x9f, 0x81, 0x03, 0xa0,
             0x07, 0x0b, 0xed, 0x23, 0xc2, 0x92, 0x1c, 0xf6, 0xa4, 0x18, 0x64,
             0x54, 0x8f, 0xf0, 0xfb, 0xde, 0x1e, 0xe2, 0xd9, 0x56, 0x67, 0xb0,
             0xf8, 0x13, 0xb8, 0x28, 0xe8, 0x17, 0x69, 0x3f, 0x32, 0x9e, 0xd8,
             0x3a, 0xcc, 0x19, 0x8e, 0xbe, 0x23, 0x76, 0xe5, 0x93, 0x06, 0xc5,
             0x7d, 0xb1, 0x37, 0x29, 0xa0, 0xc9, 0x22, 0x02, 0xfb, 0x38, 0xf0,
             0x36, 0xcd, 0xed, 0xb5, 0x55, 0xb8, 0xc9, 0x50, 0x40, 0x0c, 0x85,
             0x58, 0x08, 0x36, 0xa0, 0x58, 0xe5, 0x6b, 0x32, 0xc8, 0x74, 0x11,
             0x03, 0x4c, 0x81, 0x4d, 0xaf, 0xe0, 0xe0, 0xe9, 0x38, 0x0a, 0x70,
             0xe5, 0x05, 0x94, 0x66, 0x6e, 0xa4, 0xa3, 0x0d, 0x0e, 0x84, 0x79,
             0xd8, 0x32, 0x50, 0xbc, 0xe6, 0x5d, 0x7b, 0xb8, 0xd1, 0x5b, 0x6f,
             0xdb, 0x7d, 0x32, 0xb3, 0x14, 0xf0, 0x2b, 0x0b, 0x7f, 0x88, 0x66,
             0xa9, 0xea, 0x98, 0x1f, 0xfb, 0xcd, 0x09, 0x5b, 0xb1, 0xd6, 0x02,
             0x1b, 0x6d, 0x51, 0xe7, 0xb7, 0xf2, 0x06, 0x1c, 0xc3, 0x37, 0x61,
             0xab, 0xe1, 0x44, 0xaa, 0xa3, 0x7f, 0x07, 0x75, 0x12, 0x54, 0xd8,
             0x98, 0xa0, 0xb7, 0x37, 0x90, 0x86, 0x1d, 0x7a, 0xc4, 0x0a, 0x75,
             0x99, 0xc9, 0x0d, 0xd7, 0x79, 0x72, 0xca, 0x38, 0xb4, 0x5d, 0x70,
             0xe6, 0xec, 0x0b, 0xb9, 0x37, 0x97, 0x8e, 0x73, 0x96, 0x7c, 0xae,
             0x82, 0x54, 0xa5, 0xf6, 0x70, 0x3c, 0x09, 0x7a, 0x0b, 0x56, 0xa4,
             0xaa, 0x72, 0xaa, 0x51, 0xa1, 0x32, 0x44, 0x46, 0x94, 0xe6, 0xac,
             0x4c, 0x6d, 0x6f, 0x5b, 0xb5, 0xfa, 0x0d, 0x74, 0xd0, 0xf0, 0xce,
             0xdc, 0x02, 0x9b, 0xb1, 0x77, 0x65, 0x97, 0x2b, 0x35, 0x8e, 0x8f,
             0xe9, 0x0c, 0xb2, 0x12, 0xd6, 0xc0, 0x82, 0xa6, 0x55, 0x12, 0x69,
             0xeb, 0x1e, 0x35}};
        auto const prefix4Prefix = "P4"s;
        auto const prefix4Msg = "P3abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix4MaxMsgLength = 14;
        auto const prefix3Prefix = "P3"s;
        auto const prefix3Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix3MaxMsgLength = 14;
        auto const rsa7Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa7PublicKey{
            {0xb5, 0x8b, 0xa2, 0xa1, 0xc0, 0x5b, 0xc3, 0xa3, 0x64, 0xe9, 0x88,
             0xe3, 0x25, 0x89, 0xa0, 0x6d, 0x73, 0x8a, 0x46, 0x09, 0x58, 0xb4,
             0x85, 0x66, 0x87, 0x56, 0x85, 0x39, 0xee, 0x6d, 0x77, 0xbb, 0x99,
             0x57, 0x90, 0x0e, 0x9c, 0x9c, 0xd5, 0x40, 0xc4, 0x8b, 0x37, 0xb1,
             0xfe, 0x78, 0xb7, 0xe1, 0xe8, 0xb7, 0x74, 0xee, 0x74, 0x9c, 0xe5,
             0xa3, 0xdd, 0xb7, 0x87, 0x77, 0xb7, 0x14, 0x08, 0x71, 0xc4, 0xec,
             0x85, 0xe2, 0xe3, 0xc1, 0x1e, 0x34, 0x14, 0x21, 0xe1, 0xac, 0xd3,
             0x20, 0x0f, 0xb8, 0x11, 0x24, 0x69, 0xa3, 0x7d, 0x98, 0x35, 0x2a,
             0xdf, 0x56, 0x7d, 0x30, 0xf7, 0x31, 0x64, 0x73, 0xcf, 0x0c, 0x9e,
             0xa6, 0x3b, 0x7d, 0x93, 0xb1, 0xc4, 0xb6, 0x78, 0x39, 0x52, 0x3b,
             0x4d, 0xb6, 0xb2, 0x55, 0x17, 0x95, 0x27, 0xbd, 0xd6, 0xc1, 0x28,
             0x7b, 0x82, 0xbb, 0xeb, 0xea, 0xec, 0x7e, 0x48, 0x35, 0xb3, 0x4b,
             0x78, 0x30, 0xc4, 0x66, 0x32, 0x39, 0x2d, 0xd6, 0x5f, 0x59, 0xeb,
             0x81, 0x64, 0x68, 0xdb, 0x94, 0xf4, 0x8e, 0x5f, 0x34, 0x4f, 0x3b,
             0x03, 0xe5, 0xa6, 0x1b, 0x30, 0x6c, 0xea, 0xe8, 0xc6, 0x36, 0xf8,
             0xee, 0x0b, 0x0f, 0xb5, 0xd2, 0xe7, 0xa4, 0x0a, 0xbc, 0xef, 0x80,
             0x7e, 0xb1, 0x9b, 0xda, 0xe6, 0x40, 0x4a, 0x3f, 0x6f, 0xd1, 0x5a,
             0x64, 0x84, 0xb2, 0x5c, 0xd2, 0xf0, 0x38, 0x7c, 0xcb, 0xd1, 0xcd,
             0xdd, 0x37, 0x3f, 0x76, 0xe7, 0x08, 0x25, 0xe5, 0xd3, 0xd9, 0xe3,
             0x21, 0x1b, 0x88, 0x41, 0x3d, 0x2d, 0x32, 0xff, 0xd3, 0xfe, 0x4d,
             0x40, 0x85, 0x1b, 0x0f, 0xd6, 0xab, 0x4e, 0xb7, 0x38, 0x68, 0xe9,
             0x67, 0xc7, 0xb5, 0xd1, 0x38, 0xdb, 0x85, 0x2e, 0x2f, 0x76, 0xea,
             0x4a, 0xce, 0xff, 0x08, 0x5e, 0x93, 0x87, 0x98, 0xf7, 0x95, 0xeb,
             0x49, 0xf6, 0x8d}};
        std::array<std::uint8_t, 256> const rsa7Sig{
            {0x9d, 0x2b, 0xe9, 0xcd, 0x80, 0xb3, 0x11, 0x85, 0x19, 0x7f, 0x3f,
             0x11, 0xf7, 0x0c, 0xea, 0x13, 0x36, 0xa1, 0x24, 0x90, 0xd7, 0xb1,
             0x32, 0xbf, 0x04, 0x20, 0x40, 0x8f, 0x47, 0xff, 0x5f, 0xfe, 0x16,
             0x5a, 0x85, 0xc8, 0x8e, 0xa1, 0xcd, 0x82, 0x06, 0xed, 0x02, 0x29,
             0xe7, 0x72, 0x98, 0x08, 0xd5, 0x3d, 0x04, 0xcd, 0x02, 0x31, 0x51,
             0x4a, 0x64, 0x10, 0xea, 0xfd, 0x0c, 0x03, 0x64, 0x0a, 0xc8, 0x8c,
             0x85, 0x6f, 0x80, 0x9a, 0x8d, 0xad, 0xb5, 0x1e, 0x64, 0x90, 0xff,
             0x7e, 0x9d, 0x98, 0x46, 0xd2, 0x3a, 0xd5, 0xaf, 0x35, 0xf8, 0xc0,
             0x9e, 0x48, 0x13, 0xc9, 0x14, 0x70, 0x23, 0x12, 0x31, 0x0b, 0x8d,
             0x2d, 0x40, 0x17, 0x1b, 0x0e, 0x86, 0x0a, 0x03, 0xe8, 0x05, 0xfa,
             0x19, 0x08, 0x75, 0x94, 0xa4, 0xfe, 0x9e, 0xe7, 0x04, 0x76, 0x2c,
             0x3c, 0xa5, 0x73, 0x43, 0x1a, 0x90, 0xee, 0x1d, 0x43, 0xd8, 0xc6,
             0x1f, 0xfe, 0x9d, 0x8e, 0xf7, 0x7c, 0xee, 0x2f, 0xfd, 0x98, 0x01,
             0xe0, 0xf2, 0x70, 0x89, 0x26, 0x2e, 0x0b, 0x6e, 0xa3, 0x14, 0x96,
             0xa6, 0x21, 0xd7, 0x3e, 0x17, 0xf4, 0x13, 0x73, 0x3d, 0x50, 0x08,
             0x4b, 0x98, 0x99, 0x23, 0x18, 0x12, 0x3a, 0x65, 0x33, 0x7d, 0xc1,
             0xad, 0x9e, 0xfe, 0x64, 0x75, 0x9d, 0x2c, 0x68, 0x90, 0x0e, 0xe0,
             0x34, 0x41, 0x6b, 0x82, 0x49, 0x75, 0x28, 0x1d, 0x5c, 0x62, 0x25,
             0xad, 0xec, 0x92, 0x31, 0x0e, 0x94, 0x88, 0x65, 0x7e, 0x2f, 0xb1,
             0x3d, 0xef, 0xc5, 0x43, 0x37, 0xc1, 0xa3, 0xc0, 0xa2, 0xec, 0xc8,
             0x25, 0x04, 0xf4, 0xe2, 0xa6, 0x25, 0x55, 0xb2, 0xf3, 0xa0, 0x6b,
             0x5a, 0x74, 0x3d, 0x24, 0x2e, 0xa2, 0x17, 0x80, 0x46, 0x89, 0xa2,
             0xf7, 0x70, 0x17, 0xc1, 0x20, 0xc1, 0xb0, 0xda, 0xff, 0xa0, 0xf9,
             0x15, 0x08, 0x25}};
        auto const rsa9Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa9PublicKey{
            {0xb6, 0x7b, 0xe2, 0x98, 0x9f, 0xff, 0x6c, 0x37, 0xd0, 0xb6, 0x64,
             0x19, 0xfb, 0xa0, 0x21, 0x18, 0xe2, 0xc0, 0xd1, 0x92, 0xbd, 0x04,
             0xa6, 0xd2, 0xb4, 0x7e, 0xc6, 0x6a, 0x1a, 0x34, 0x20, 0x7b, 0xfe,
             0x84, 0xeb, 0xe8, 0xc1, 0x6f, 0xfd, 0xdc, 0x0a, 0xfe, 0x60, 0x55,
             0xb6, 0xfc, 0x86, 0x5a, 0x21, 0xbf, 0xf1, 0x39, 0xfa, 0xec, 0x42,
             0xca, 0x57, 0xb3, 0x3e, 0x3f, 0xe6, 0x26, 0x5a, 0xb7, 0x4a, 0x5f,
             0xbb, 0xb1, 0xf5, 0x91, 0x85, 0x92, 0x3e, 0x6a, 0x18, 0x48, 0x4d,
             0x9e, 0xdd, 0x08, 0x25, 0xa3, 0x3b, 0x3d, 0x75, 0x9a, 0xbe, 0xee,
             0x0d, 0x6e, 0xd2, 0x5d, 0xe2, 0xbd, 0xed, 0x45, 0x60, 0xef, 0xa0,
             0x37, 0xfd, 0xbb, 0xcf, 0x30, 0x97, 0xf1, 0x5b, 0xc8, 0x9c, 0x29,
             0x33, 0x67, 0x3e, 0x23, 0x33, 0x7f, 0x36, 0xd4, 0x75, 0x8b, 0xa1,
             0xcf, 0x9e, 0xe6, 0xc5, 0x63, 0x63, 0xb0, 0x3f, 0xa0, 0xc2, 0xa2,
             0x10, 0xc9, 0xb2, 0x6b, 0xaa, 0x67, 0xc9, 0xf5, 0xb8, 0xbf, 0x5b,
             0x97, 0xe5, 0x29, 0xf2, 0xbb, 0xc7, 0x22, 0x0f, 0x1f, 0xc1, 0xf6,
             0xca, 0x4a, 0x8a, 0x46, 0x89, 0xa0, 0xca, 0x4e, 0x49, 0x9d, 0xfc,
             0x23, 0xd3, 0xb4, 0xdb, 0xc6, 0x84, 0x45, 0xbd, 0x9f, 0x10, 0x86,
             0xe2, 0xf0, 0x47, 0x7b, 0x75, 0xbf, 0x25, 0x99, 0x02, 0x2c, 0xdb,
             0x6b, 0xd6, 0x2b, 0x67, 0x0d, 0xcd, 0x46, 0x63, 0xbd, 0xce, 0x1c,
             0xc5, 0x56, 0x63, 0x58, 0x5b, 0xc8, 0xb2, 0x58, 0x42, 0xf6, 0xaf,
             0xce, 0x47, 0xb2, 0xa9, 0x2a, 0x71, 0x8b, 0x82, 0xf4, 0x72, 0xff,
             0xef, 0xe7, 0xc1, 0x70, 0x12, 0xfa, 0xb8, 0xad, 0xb2, 0xfe, 0xa9,
             0x14, 0xe7, 0xc2, 0xec, 0x12, 0xbf, 0x29, 0x5a, 0x65, 0x91, 0x74,
             0x82, 0xd3, 0x77, 0x1f, 0x14, 0xbf, 0x5f, 0x41, 0x11, 0x6c, 0x7c,
             0x22, 0x70, 0x65}};
        std::array<std::uint8_t, 256> const rsa9Sig{
            {0xae, 0x83, 0xdf, 0x44, 0xd1, 0x8f, 0xe0, 0x04, 0xd6, 0x29, 0xfb,
             0x0b, 0xf7, 0x5f, 0x61, 0x42, 0xd6, 0x8a, 0x0d, 0xc6, 0x3d, 0xc5,
             0x08, 0x5f, 0x90, 0x80, 0x38, 0x22, 0x2a, 0xaf, 0x98, 0xa6, 0x6e,
             0xc4, 0x7c, 0x88, 0xff, 0xec, 0x8e, 0x9b, 0x2e, 0xd5, 0x4f, 0xc1,
             0x0d, 0xe8, 0x44, 0x9e, 0xba, 0xc3, 0x1e, 0x6a, 0x60, 0x1c, 0xcf,
             0x00, 0x62, 0x35, 0x99, 0xc7, 0x6f, 0xd6, 0x27, 0xda, 0x58, 0x4f,
             0x51, 0xe9, 0xa4, 0x7d, 0xa5, 0x6c, 0xd7, 0x5e, 0xbb, 0x99, 0xa2,
             0xa2, 0x81, 0xec, 0x84, 0xec, 0x2f, 0xe1, 0xed, 0xb5, 0x81, 0xb1,
             0xb4, 0xa9, 0xc5, 0xad, 0x81, 0xfc, 0xaf, 0xd2, 0x8c, 0xa9, 0x3e,
             0x8a, 0x94, 0x4c, 0x24, 0x00, 0x86, 0x47, 0x4e, 0xb3, 0x55, 0x03,
             0x36, 0x02, 0xf0, 0x45, 0x12, 0x6d, 0x25, 0x99, 0x3c, 0x7e, 0x1b,
             0xc8, 0xc4, 0x1c, 0x3e, 0xbd, 0x4f, 0x26, 0x73, 0x44, 0x9b, 0xa8,
             0x61, 0x6e, 0xda, 0xfe, 0xdb, 0xae, 0xdd, 0x20, 0x2d, 0xce, 0x3c,
             0x57, 0x65, 0x19, 0xec, 0x21, 0xd8, 0x7e, 0x5f, 0x33, 0x20, 0xc4,
             0xcf, 0x70, 0xbd, 0x76, 0x9d, 0xf3, 0x3d, 0x32, 0x63, 0xa1, 0xe3,
             0xcc, 0x15, 0xd7, 0x59, 0x3d, 0xd8, 0x6b, 0x6d, 0x83, 0x3b, 0xb5,
             0x47, 0x51, 0xce, 0xe2, 0x1f, 0xd2, 0x9b, 0x73, 0xdb, 0x91, 0x32,
             0xe3, 0x74, 0x7b, 0x4a, 0x92, 0x7b, 0xa7, 0x51, 0x5f, 0x19, 0x8d,
             0x58, 0xc0, 0x7a, 0x6f, 0x9b, 0x74, 0xd2, 0x71, 0x84, 0x07, 0xa7,
             0x59, 0x3b, 0xb1, 0x8c, 0x91, 0xfe, 0x0b, 0xf1, 0xd8, 0x14, 0xf0,
             0x35, 0x62, 0x38, 0x4d, 0x94, 0x71, 0xba, 0x6d, 0xa3, 0x2e, 0xb2,
             0xa7, 0xf6, 0xdc, 0xa7, 0x60, 0x54, 0x11, 0x83, 0xdb, 0x20, 0xa2,
             0xe8, 0xc1, 0x81, 0xfe, 0xfc, 0xee, 0xfd, 0x21, 0xa6, 0xaa, 0x3d,
             0x45, 0x48, 0x71}};
        auto const thresh8Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim10CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim10Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim10CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa11CondConditionFingerprint =
            "\xaf\x93\xfd\x22\x45\xc2\x08\xab\x43\xf7\x45\x56\x63\xec\xaf"
            "\x15\x33\xa0\x2a\xb4\x9e\x15\xb4\x6e\xda\x87\x35\xde\x09\x4b"
            "\x06\x31"s;
        Condition const Rsa11Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa11CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed12CondConditionFingerprint =
            "\x55\xcc\xd1\xa2\x2c\x90\x8d\xe3\x2e\x42\xd4\xe0\x65\xb2\xf7"
            "\xda\xc0\x07\x1e\xd3\x23\x0f\xfe\x78\x13\xa2\x86\x61\xc4\x34"
            "\x28\x50"s;
        Condition const Ed12Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed12CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const thresh6Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim13CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim13Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim13CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa14CondConditionFingerprint =
            "\x32\xec\xaa\x5e\xa6\x88\xdc\xe4\x81\x0f\x93\x0f\x65\xde\x87"
            "\xfd\x54\x8c\x79\x04\x81\xe3\x63\x3f\x3d\x08\xa1\xba\x0a\x24"
            "\x2b\x46"s;
        Condition const Rsa14Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa14CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed15CondConditionFingerprint =
            "\x40\xd1\x9a\x63\x62\x9b\xc0\x76\xab\x11\x73\x42\x86\xb3\x20"
            "\x9d\x23\xe8\x5e\xee\xb9\x82\x5d\x93\xe3\xac\xad\xa0\x40\x41"
            "\x51\x1b"s;
        Condition const Ed15Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed15CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const thresh0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim16CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim16Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim16CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa17CondConditionFingerprint =
            "\x78\xe3\x04\xf4\xa6\x16\x68\x4c\x1b\xcf\x3a\x32\xff\xbc\x75"
            "\x1a\xe6\x08\x9b\xff\xba\x79\xf4\x39\x7a\xfc\xe1\x6f\xff\x3e"
            "\xb3\x75"s;
        Condition const Rsa17Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa17CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed18CondConditionFingerprint =
            "\x0d\xea\xc5\x16\x5c\x62\xb8\xd1\xa4\xe7\x5a\x07\x58\x00\x79"
            "\x51\x88\x21\xe9\x4d\xba\x73\x7b\xad\x60\x9c\x5c\x26\x00\x2e"
            "\xd1\x51"s;
        Condition const Ed18Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed18CondConditionFingerprint),
                                 std::bitset<5>{0}};

        auto rsa2 = std::make_unique<RsaSha256>(
            makeSlice(rsa2PublicKey), makeSlice(rsa2Sig));
        std::vector<std::unique_ptr<Fulfillment>> thresh1Subfulfillments;
        thresh1Subfulfillments.emplace_back(std::move(rsa2));
        std::vector<Condition> thresh1Subconditions{};
        auto thresh1 = std::make_unique<ThresholdSha256>(
            std::move(thresh1Subfulfillments), std::move(thresh1Subconditions));
        auto rsa5 = std::make_unique<RsaSha256>(
            makeSlice(rsa5PublicKey), makeSlice(rsa5Sig));
        auto prefix4 = std::make_unique<PrefixSha256>(
            makeSlice(prefix4Prefix), prefix4MaxMsgLength, std::move(rsa5));
        auto prefix3 = std::make_unique<PrefixSha256>(
            makeSlice(prefix3Prefix), prefix3MaxMsgLength, std::move(prefix4));
        auto rsa7 = std::make_unique<RsaSha256>(
            makeSlice(rsa7PublicKey), makeSlice(rsa7Sig));
        auto rsa9 = std::make_unique<RsaSha256>(
            makeSlice(rsa9PublicKey), makeSlice(rsa9Sig));
        std::vector<std::unique_ptr<Fulfillment>> thresh8Subfulfillments;
        thresh8Subfulfillments.emplace_back(std::move(rsa9));
        std::vector<Condition> thresh8Subconditions{
            {Preim10Cond, Rsa11Cond, Ed12Cond}};
        auto thresh8 = std::make_unique<ThresholdSha256>(
            std::move(thresh8Subfulfillments), std::move(thresh8Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh6Subfulfillments;
        thresh6Subfulfillments.emplace_back(std::move(rsa7));
        thresh6Subfulfillments.emplace_back(std::move(thresh8));
        std::vector<Condition> thresh6Subconditions{
            {Preim13Cond, Rsa14Cond, Ed15Cond}};
        auto thresh6 = std::make_unique<ThresholdSha256>(
            std::move(thresh6Subfulfillments), std::move(thresh6Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh0Subfulfillments;
        thresh0Subfulfillments.emplace_back(std::move(thresh1));
        thresh0Subfulfillments.emplace_back(std::move(prefix3));
        thresh0Subfulfillments.emplace_back(std::move(thresh6));
        std::vector<Condition> thresh0Subconditions{
            {Preim16Cond, Rsa17Cond, Ed18Cond}};
        ThresholdSha256 const thresh0(
            std::move(thresh0Subfulfillments), std::move(thresh0Subconditions));
        {
            auto const thresh0EncodedFulfillment =
                "\xa2\x82\x09\xdd\xa0\x82\x09\x5e\xa1\x82\x02\x26\x80\x02\x50"
                "\x33\x81\x01\x0e\xa2\x82\x02\x1b\xa1\x82\x02\x17\x80\x02\x50"
                "\x34\x81\x01\x0e\xa2\x82\x02\x0c\xa3\x82\x02\x08\x80\x82\x01"
                "\x00\xc0\x00\xef\x8f\x4b\x81\x10\x1e\x52\xe0\x07\x9f\x68\xe7"
                "\x2f\x92\xd4\x77\x3c\x1f\xa3\xff\x72\x64\x5b\x37\xf1\xf3\xa3"
                "\xc5\xfb\xcd\xfb\xda\xcc\x8b\x52\xe1\xde\xbc\x28\x8d\xe5\xad"
                "\xab\x86\x61\x45\x97\x65\x37\x68\x26\x21\x92\x17\xa3\xb0\x74"
                "\x5c\x8a\x45\x8d\x87\x5b\x9b\xd1\x7b\x07\xc4\x8c\x67\xa0\xe9"
                "\x82\x0c\xe0\x6b\xea\x91\x5c\xba\xe3\xd9\x9d\x39\xfd\x77\xac"
                "\xcb\x33\x9b\x28\x51\x8d\xbf\x3e\xe4\x94\x1c\x9a\x60\x71\x4b"
                "\x34\x07\x30\xda\x42\x46\x0e\xb8\xb7\x2c\xf5\x2f\x4b\x9e\xe7"
                "\x64\x81\xa1\xa2\x05\x66\x92\xe6\x75\x9f\x37\xae\x40\xa9\x16"
                "\x08\x19\xe8\xdc\x47\xd6\x03\x29\xab\xcc\x58\xa2\x37\x2a\x32"
                "\xb8\x15\xc7\x51\x91\x73\xb9\x1d\xc6\xd0\x4f\x85\x86\xd5\xb3"
                "\x21\x1a\x2a\x6c\xeb\x7f\xfe\x84\x17\x10\x2d\x0e\xb4\xe1\xc2"
                "\x48\x4c\x3f\x61\xc7\x59\x75\xa7\xc1\x75\xce\x67\x17\x42\x2a"
                "\x2f\x96\xef\x8a\x2d\x74\xd2\x13\x68\xe1\xe9\xea\xfb\x73\x68"
                "\xed\x8d\xd3\xac\x49\x09\xf9\xec\x62\xdf\x53\xab\xfe\x90\x64"
                "\x4b\x92\x60\x0d\xdd\x00\xfe\x02\xe6\xf3\x9b\x2b\xac\x4f\x70"
                "\xe8\x5b\x69\x9c\x40\xd3\xeb\x37\xad\x6f\x37\xab\xf3\x79\x8e"
                "\xcb\x1d\x81\x82\x01\x00\x11\xbf\xe6\x8d\xc2\xc4\xff\x9f\x81"
                "\x03\xa0\x07\x0b\xed\x23\xc2\x92\x1c\xf6\xa4\x18\x64\x54\x8f"
                "\xf0\xfb\xde\x1e\xe2\xd9\x56\x67\xb0\xf8\x13\xb8\x28\xe8\x17"
                "\x69\x3f\x32\x9e\xd8\x3a\xcc\x19\x8e\xbe\x23\x76\xe5\x93\x06"
                "\xc5\x7d\xb1\x37\x29\xa0\xc9\x22\x02\xfb\x38\xf0\x36\xcd\xed"
                "\xb5\x55\xb8\xc9\x50\x40\x0c\x85\x58\x08\x36\xa0\x58\xe5\x6b"
                "\x32\xc8\x74\x11\x03\x4c\x81\x4d\xaf\xe0\xe0\xe9\x38\x0a\x70"
                "\xe5\x05\x94\x66\x6e\xa4\xa3\x0d\x0e\x84\x79\xd8\x32\x50\xbc"
                "\xe6\x5d\x7b\xb8\xd1\x5b\x6f\xdb\x7d\x32\xb3\x14\xf0\x2b\x0b"
                "\x7f\x88\x66\xa9\xea\x98\x1f\xfb\xcd\x09\x5b\xb1\xd6\x02\x1b"
                "\x6d\x51\xe7\xb7\xf2\x06\x1c\xc3\x37\x61\xab\xe1\x44\xaa\xa3"
                "\x7f\x07\x75\x12\x54\xd8\x98\xa0\xb7\x37\x90\x86\x1d\x7a\xc4"
                "\x0a\x75\x99\xc9\x0d\xd7\x79\x72\xca\x38\xb4\x5d\x70\xe6\xec"
                "\x0b\xb9\x37\x97\x8e\x73\x96\x7c\xae\x82\x54\xa5\xf6\x70\x3c"
                "\x09\x7a\x0b\x56\xa4\xaa\x72\xaa\x51\xa1\x32\x44\x46\x94\xe6"
                "\xac\x4c\x6d\x6f\x5b\xb5\xfa\x0d\x74\xd0\xf0\xce\xdc\x02\x9b"
                "\xb1\x77\x65\x97\x2b\x35\x8e\x8f\xe9\x0c\xb2\x12\xd6\xc0\x82"
                "\xa6\x55\x12\x69\xeb\x1e\x35\xa2\x82\x02\x12\xa0\x82\x02\x0c"
                "\xa3\x82\x02\x08\x80\x82\x01\x00\xba\x2c\x3b\x50\xb6\xbf\xf9"
                "\x0f\x1d\xd7\x32\x4c\x01\x5f\xff\x2f\x2a\xf6\x33\xd0\xfb\xea"
                "\x1f\xa4\xf2\x2d\x22\x8a\x19\x95\xa9\x17\xb7\x4f\x17\xcf\x55"
                "\xcd\x1a\x3a\x5f\x07\x73\xcc\xaa\x21\x70\x64\xb3\xa0\xf4\xb7"
                "\x30\xa3\x82\x37\x93\xc6\x59\xde\x1b\xa1\x16\x90\x5a\x1a\xf6"
                "\x73\xab\x92\xc8\x2f\xf4\x6f\x5c\xf2\x22\x1d\x30\xf8\x03\xd8"
                "\x9b\x5f\x73\x72\x8e\x5f\xd5\x37\x4b\x43\xda\xfe\x84\x21\x67"
                "\xe8\xe3\xd7\x91\x3f\x24\x1d\xfb\x1f\x12\x6e\xcb\xfc\xb7\x5b"
                "\x0a\x35\x73\x3b\xce\x44\x34\x8e\xcd\x53\xa4\xcf\xa7\x63\x73"
                "\xcd\x31\x0f\xe0\x75\x8d\xe4\xa9\xdc\xfe\xf0\xc9\x3d\x26\xaf"
                "\xbf\x7b\x0f\x0e\x17\xb9\xd0\x4a\x32\x80\x64\x6b\x54\x73\x5a"
                "\x50\xc7\x31\x59\xf9\x73\x72\xa5\x79\xba\xdb\xa1\x14\x8d\x77"
                "\x67\x3e\xc0\x5b\xec\x6f\x0b\xf7\xc5\xee\x5a\xa6\x8d\x49\x63"
                "\x81\xbb\xd1\xf9\x9e\xbb\xed\xb2\xa9\x18\x60\xa7\xee\xeb\x30"
                "\xa1\x92\x93\xe8\xd8\x34\x9e\xac\xd6\x23\xfc\x7f\xcb\xe7\xfe"
                "\xa7\xe6\x42\xac\x77\x11\xc0\x67\x77\xd1\xaa\x5e\xed\x3b\xd5"
                "\xa5\x8d\x34\x7c\xd9\x57\x44\xa7\xc5\x44\x2e\x1e\xe7\x63\xd8"
                "\x53\x1b\x9a\xd9\x67\x02\x13\x32\x61\x81\x82\x01\x00\x7b\x9a"
                "\x6c\xbe\x81\xd9\x0a\x86\x1b\xdb\x4a\x48\x78\x1a\xd4\x37\x6b"
                "\x73\xd9\xdb\x1d\x91\x14\x33\x40\x18\xcd\x20\xa3\x4a\x1d\x7b"
                "\x62\x32\xf4\xb8\xa2\x8a\xe2\x65\x79\xd6\x29\x37\xf9\x82\x85"
                "\xe5\x3a\x69\xf7\x31\x21\xf4\x59\xaf\x67\xf6\xcf\x17\x27\x1c"
                "\xf5\x4f\x3d\x0e\xeb\x1d\x8b\xe8\xfd\x9e\x5f\xe2\x82\x70\x45"
                "\xb2\x91\x85\x31\xdb\xd7\x42\x60\x61\xfd\x62\xb6\x23\x81\x9b"
                "\x54\x5f\xc1\xbd\x9e\x3b\x05\xcd\x27\xd8\xbf\x4c\x93\x16\xb0"
                "\x3e\x75\xa9\xc9\x98\x46\x8d\xe0\xb4\x61\x1a\x71\xf1\xaa\x4d"
                "\xb3\xd7\x9b\x39\x5f\xe6\x3f\x07\xda\x00\xf9\x7f\xe1\x0d\xa5"
                "\x54\x75\xa9\xf9\x66\xcb\xf1\x2e\xbc\x6b\x0b\xf3\xc0\x98\x88"
                "\x88\x9c\xd5\x43\x4e\x67\xa4\x43\xfc\x36\x86\xde\xca\x0b\xd9"
                "\x00\x91\x03\xbe\xb9\xaf\x1b\x5e\x76\x50\x94\x42\x50\xc6\x88"
                "\xa0\x13\xd2\x97\x69\x80\xcb\xc4\x04\x22\x03\x5e\xa9\x7f\xc3"
                "\x49\xee\x13\x5c\x43\xae\xbc\x8d\x99\xfa\x26\x7c\x71\x34\xf0"
                "\x2e\xbb\x39\x31\xed\x7b\x10\xbf\x41\xa6\xa2\x5a\xa0\x3b\x5f"
                "\x17\xbc\xe6\x91\x42\xf6\x2e\x54\x59\x0a\x67\x86\xa5\x72\xe2"
                "\xc1\x56\x56\xae\xcf\x87\x62\x33\x84\x43\x2a\xf4\x46\x96\xa1"
                "\x00\xa2\x82\x05\x1a\xa0\x82\x04\x9b\xa2\x82\x02\x8b\xa0\x82"
                "\x02\x0c\xa3\x82\x02\x08\x80\x82\x01\x00\xb6\x7b\xe2\x98\x9f"
                "\xff\x6c\x37\xd0\xb6\x64\x19\xfb\xa0\x21\x18\xe2\xc0\xd1\x92"
                "\xbd\x04\xa6\xd2\xb4\x7e\xc6\x6a\x1a\x34\x20\x7b\xfe\x84\xeb"
                "\xe8\xc1\x6f\xfd\xdc\x0a\xfe\x60\x55\xb6\xfc\x86\x5a\x21\xbf"
                "\xf1\x39\xfa\xec\x42\xca\x57\xb3\x3e\x3f\xe6\x26\x5a\xb7\x4a"
                "\x5f\xbb\xb1\xf5\x91\x85\x92\x3e\x6a\x18\x48\x4d\x9e\xdd\x08"
                "\x25\xa3\x3b\x3d\x75\x9a\xbe\xee\x0d\x6e\xd2\x5d\xe2\xbd\xed"
                "\x45\x60\xef\xa0\x37\xfd\xbb\xcf\x30\x97\xf1\x5b\xc8\x9c\x29"
                "\x33\x67\x3e\x23\x33\x7f\x36\xd4\x75\x8b\xa1\xcf\x9e\xe6\xc5"
                "\x63\x63\xb0\x3f\xa0\xc2\xa2\x10\xc9\xb2\x6b\xaa\x67\xc9\xf5"
                "\xb8\xbf\x5b\x97\xe5\x29\xf2\xbb\xc7\x22\x0f\x1f\xc1\xf6\xca"
                "\x4a\x8a\x46\x89\xa0\xca\x4e\x49\x9d\xfc\x23\xd3\xb4\xdb\xc6"
                "\x84\x45\xbd\x9f\x10\x86\xe2\xf0\x47\x7b\x75\xbf\x25\x99\x02"
                "\x2c\xdb\x6b\xd6\x2b\x67\x0d\xcd\x46\x63\xbd\xce\x1c\xc5\x56"
                "\x63\x58\x5b\xc8\xb2\x58\x42\xf6\xaf\xce\x47\xb2\xa9\x2a\x71"
                "\x8b\x82\xf4\x72\xff\xef\xe7\xc1\x70\x12\xfa\xb8\xad\xb2\xfe"
                "\xa9\x14\xe7\xc2\xec\x12\xbf\x29\x5a\x65\x91\x74\x82\xd3\x77"
                "\x1f\x14\xbf\x5f\x41\x11\x6c\x7c\x22\x70\x65\x81\x82\x01\x00"
                "\xae\x83\xdf\x44\xd1\x8f\xe0\x04\xd6\x29\xfb\x0b\xf7\x5f\x61"
                "\x42\xd6\x8a\x0d\xc6\x3d\xc5\x08\x5f\x90\x80\x38\x22\x2a\xaf"
                "\x98\xa6\x6e\xc4\x7c\x88\xff\xec\x8e\x9b\x2e\xd5\x4f\xc1\x0d"
                "\xe8\x44\x9e\xba\xc3\x1e\x6a\x60\x1c\xcf\x00\x62\x35\x99\xc7"
                "\x6f\xd6\x27\xda\x58\x4f\x51\xe9\xa4\x7d\xa5\x6c\xd7\x5e\xbb"
                "\x99\xa2\xa2\x81\xec\x84\xec\x2f\xe1\xed\xb5\x81\xb1\xb4\xa9"
                "\xc5\xad\x81\xfc\xaf\xd2\x8c\xa9\x3e\x8a\x94\x4c\x24\x00\x86"
                "\x47\x4e\xb3\x55\x03\x36\x02\xf0\x45\x12\x6d\x25\x99\x3c\x7e"
                "\x1b\xc8\xc4\x1c\x3e\xbd\x4f\x26\x73\x44\x9b\xa8\x61\x6e\xda"
                "\xfe\xdb\xae\xdd\x20\x2d\xce\x3c\x57\x65\x19\xec\x21\xd8\x7e"
                "\x5f\x33\x20\xc4\xcf\x70\xbd\x76\x9d\xf3\x3d\x32\x63\xa1\xe3"
                "\xcc\x15\xd7\x59\x3d\xd8\x6b\x6d\x83\x3b\xb5\x47\x51\xce\xe2"
                "\x1f\xd2\x9b\x73\xdb\x91\x32\xe3\x74\x7b\x4a\x92\x7b\xa7\x51"
                "\x5f\x19\x8d\x58\xc0\x7a\x6f\x9b\x74\xd2\x71\x84\x07\xa7\x59"
                "\x3b\xb1\x8c\x91\xfe\x0b\xf1\xd8\x14\xf0\x35\x62\x38\x4d\x94"
                "\x71\xba\x6d\xa3\x2e\xb2\xa7\xf6\xdc\xa7\x60\x54\x11\x83\xdb"
                "\x20\xa2\xe8\xc1\x81\xfe\xfc\xee\xfd\x21\xa6\xaa\x3d\x45\x48"
                "\x71\xa1\x79\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11"
                "\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2"
                "\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa3\x27\x80"
                "\x20\xaf\x93\xfd\x22\x45\xc2\x08\xab\x43\xf7\x45\x56\x63\xec"
                "\xaf\x15\x33\xa0\x2a\xb4\x9e\x15\xb4\x6e\xda\x87\x35\xde\x09"
                "\x4b\x06\x31\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x55\xcc\xd1"
                "\xa2\x2c\x90\x8d\xe3\x2e\x42\xd4\xe0\x65\xb2\xf7\xda\xc0\x07"
                "\x1e\xd3\x23\x0f\xfe\x78\x13\xa2\x86\x61\xc4\x34\x28\x50\x81"
                "\x03\x02\x00\x00\xa3\x82\x02\x08\x80\x82\x01\x00\xb5\x8b\xa2"
                "\xa1\xc0\x5b\xc3\xa3\x64\xe9\x88\xe3\x25\x89\xa0\x6d\x73\x8a"
                "\x46\x09\x58\xb4\x85\x66\x87\x56\x85\x39\xee\x6d\x77\xbb\x99"
                "\x57\x90\x0e\x9c\x9c\xd5\x40\xc4\x8b\x37\xb1\xfe\x78\xb7\xe1"
                "\xe8\xb7\x74\xee\x74\x9c\xe5\xa3\xdd\xb7\x87\x77\xb7\x14\x08"
                "\x71\xc4\xec\x85\xe2\xe3\xc1\x1e\x34\x14\x21\xe1\xac\xd3\x20"
                "\x0f\xb8\x11\x24\x69\xa3\x7d\x98\x35\x2a\xdf\x56\x7d\x30\xf7"
                "\x31\x64\x73\xcf\x0c\x9e\xa6\x3b\x7d\x93\xb1\xc4\xb6\x78\x39"
                "\x52\x3b\x4d\xb6\xb2\x55\x17\x95\x27\xbd\xd6\xc1\x28\x7b\x82"
                "\xbb\xeb\xea\xec\x7e\x48\x35\xb3\x4b\x78\x30\xc4\x66\x32\x39"
                "\x2d\xd6\x5f\x59\xeb\x81\x64\x68\xdb\x94\xf4\x8e\x5f\x34\x4f"
                "\x3b\x03\xe5\xa6\x1b\x30\x6c\xea\xe8\xc6\x36\xf8\xee\x0b\x0f"
                "\xb5\xd2\xe7\xa4\x0a\xbc\xef\x80\x7e\xb1\x9b\xda\xe6\x40\x4a"
                "\x3f\x6f\xd1\x5a\x64\x84\xb2\x5c\xd2\xf0\x38\x7c\xcb\xd1\xcd"
                "\xdd\x37\x3f\x76\xe7\x08\x25\xe5\xd3\xd9\xe3\x21\x1b\x88\x41"
                "\x3d\x2d\x32\xff\xd3\xfe\x4d\x40\x85\x1b\x0f\xd6\xab\x4e\xb7"
                "\x38\x68\xe9\x67\xc7\xb5\xd1\x38\xdb\x85\x2e\x2f\x76\xea\x4a"
                "\xce\xff\x08\x5e\x93\x87\x98\xf7\x95\xeb\x49\xf6\x8d\x81\x82"
                "\x01\x00\x9d\x2b\xe9\xcd\x80\xb3\x11\x85\x19\x7f\x3f\x11\xf7"
                "\x0c\xea\x13\x36\xa1\x24\x90\xd7\xb1\x32\xbf\x04\x20\x40\x8f"
                "\x47\xff\x5f\xfe\x16\x5a\x85\xc8\x8e\xa1\xcd\x82\x06\xed\x02"
                "\x29\xe7\x72\x98\x08\xd5\x3d\x04\xcd\x02\x31\x51\x4a\x64\x10"
                "\xea\xfd\x0c\x03\x64\x0a\xc8\x8c\x85\x6f\x80\x9a\x8d\xad\xb5"
                "\x1e\x64\x90\xff\x7e\x9d\x98\x46\xd2\x3a\xd5\xaf\x35\xf8\xc0"
                "\x9e\x48\x13\xc9\x14\x70\x23\x12\x31\x0b\x8d\x2d\x40\x17\x1b"
                "\x0e\x86\x0a\x03\xe8\x05\xfa\x19\x08\x75\x94\xa4\xfe\x9e\xe7"
                "\x04\x76\x2c\x3c\xa5\x73\x43\x1a\x90\xee\x1d\x43\xd8\xc6\x1f"
                "\xfe\x9d\x8e\xf7\x7c\xee\x2f\xfd\x98\x01\xe0\xf2\x70\x89\x26"
                "\x2e\x0b\x6e\xa3\x14\x96\xa6\x21\xd7\x3e\x17\xf4\x13\x73\x3d"
                "\x50\x08\x4b\x98\x99\x23\x18\x12\x3a\x65\x33\x7d\xc1\xad\x9e"
                "\xfe\x64\x75\x9d\x2c\x68\x90\x0e\xe0\x34\x41\x6b\x82\x49\x75"
                "\x28\x1d\x5c\x62\x25\xad\xec\x92\x31\x0e\x94\x88\x65\x7e\x2f"
                "\xb1\x3d\xef\xc5\x43\x37\xc1\xa3\xc0\xa2\xec\xc8\x25\x04\xf4"
                "\xe2\xa6\x25\x55\xb2\xf3\xa0\x6b\x5a\x74\x3d\x24\x2e\xa2\x17"
                "\x80\x46\x89\xa2\xf7\x70\x17\xc1\x20\xc1\xb0\xda\xff\xa0\xf9"
                "\x15\x08\x25\xa1\x79\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1"
                "\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21"
                "\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa3"
                "\x27\x80\x20\x32\xec\xaa\x5e\xa6\x88\xdc\xe4\x81\x0f\x93\x0f"
                "\x65\xde\x87\xfd\x54\x8c\x79\x04\x81\xe3\x63\x3f\x3d\x08\xa1"
                "\xba\x0a\x24\x2b\x46\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x40"
                "\xd1\x9a\x63\x62\x9b\xc0\x76\xab\x11\x73\x42\x86\xb3\x20\x9d"
                "\x23\xe8\x5e\xee\xb9\x82\x5d\x93\xe3\xac\xad\xa0\x40\x41\x51"
                "\x1b\x81\x03\x02\x00\x00\xa1\x79\xa0\x25\x80\x20\x5d\xa0\x30"
                "\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c"
                "\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81"
                "\x01\x09\xa3\x27\x80\x20\x78\xe3\x04\xf4\xa6\x16\x68\x4c\x1b"
                "\xcf\x3a\x32\xff\xbc\x75\x1a\xe6\x08\x9b\xff\xba\x79\xf4\x39"
                "\x7a\xfc\xe1\x6f\xff\x3e\xb3\x75\x81\x03\x01\x00\x00\xa4\x27"
                "\x80\x20\x0d\xea\xc5\x16\x5c\x62\xb8\xd1\xa4\xe7\x5a\x07\x58"
                "\x00\x79\x51\x88\x21\xe9\x4d\xba\x73\x7b\xad\x60\x9c\x5c\x26"
                "\x00\x2e\xd1\x51\x81\x03\x02\x00\x00"s;
            auto const thresh0EncodedCondition =
                "\xa2\x2b\x80\x20\xa4\xc5\xde\xc7\xd5\x32\x5d\xec\xa7\xa9\x20"
                "\x61\x3a\x11\xf5\x37\x02\x58\x32\x65\x3d\xa0\xb2\x8d\x07\x59"
                "\x4f\x94\x80\x09\xe7\x8d\x81\x03\x07\x44\x20\x82\x02\x03\xd8"s;
            auto const thresh0EncodedFingerprint =
                "\x30\x82\x01\x07\x80\x01\x03\xa1\x82\x01\x00\xa0\x25\x80\x20"
                "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
                "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
                "\xeb\x4e\x81\x01\x09\xa1\x2b\x80\x20\x8a\xbe\xcc\x2c\xfb\x6d"
                "\xc1\x02\x22\x41\x0d\xd1\xef\x2f\xb5\xbe\x2a\xa6\x25\x01\x31"
                "\xef\x11\x79\x84\x58\xbd\xdd\x23\xef\x22\x54\x81\x03\x01\x08"
                "\x20\x82\x02\x04\x10\xa2\x2b\x80\x20\x65\xf4\x40\x85\xdb\x45"
                "\xe6\x70\x4f\xea\x50\xb1\x1f\x52\x95\x31\xa0\xaa\xbc\x0a\x38"
                "\x50\xef\xb8\x18\x9b\x69\x80\xc2\xb0\xb1\xea\x81\x03\x04\x24"
                "\x00\x82\x02\x03\x98\xa2\x2b\x80\x20\x8a\x64\x29\x50\xef\xe8"
                "\x27\x2b\xb4\x67\x7a\x9c\x43\x7a\x57\x15\xf0\x1a\x03\x82\x05"
                "\x69\x6d\xf5\x71\x02\xdf\x09\x48\x2b\x36\x94\x81\x03\x01\x04"
                "\x00\x82\x02\x04\x10\xa3\x27\x80\x20\x78\xe3\x04\xf4\xa6\x16"
                "\x68\x4c\x1b\xcf\x3a\x32\xff\xbc\x75\x1a\xe6\x08\x9b\xff\xba"
                "\x79\xf4\x39\x7a\xfc\xe1\x6f\xff\x3e\xb3\x75\x81\x03\x01\x00"
                "\x00\xa4\x27\x80\x20\x0d\xea\xc5\x16\x5c\x62\xb8\xd1\xa4\xe7"
                "\x5a\x07\x58\x00\x79\x51\x88\x21\xe9\x4d\xba\x73\x7b\xad\x60"
                "\x9c\x5c\x26\x00\x2e\xd1\x51\x81\x03\x02\x00\x00"s;
            check(
                &thresh0,
                thresh0Msg,
                thresh0EncodedFulfillment,
                thresh0EncodedCondition,
                thresh0EncodedFingerprint);
        }
    }

    void
    testThresh41()
    {
        testcase("Thresh41");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * thresh0
        // ** Preim6Cond
        // ** Rsa7Cond
        // ** Ed8Cond
        // ** Prefix9Cond
        // ** Thresh12Cond
        // ** thresh1
        // *** rsa2
        // ** preim3
        // ** rsa4
        // ** ed5

        auto const rsa2Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa2PublicKey{
            {0xba, 0x2c, 0x3b, 0x50, 0xb6, 0xbf, 0xf9, 0x0f, 0x1d, 0xd7, 0x32,
             0x4c, 0x01, 0x5f, 0xff, 0x2f, 0x2a, 0xf6, 0x33, 0xd0, 0xfb, 0xea,
             0x1f, 0xa4, 0xf2, 0x2d, 0x22, 0x8a, 0x19, 0x95, 0xa9, 0x17, 0xb7,
             0x4f, 0x17, 0xcf, 0x55, 0xcd, 0x1a, 0x3a, 0x5f, 0x07, 0x73, 0xcc,
             0xaa, 0x21, 0x70, 0x64, 0xb3, 0xa0, 0xf4, 0xb7, 0x30, 0xa3, 0x82,
             0x37, 0x93, 0xc6, 0x59, 0xde, 0x1b, 0xa1, 0x16, 0x90, 0x5a, 0x1a,
             0xf6, 0x73, 0xab, 0x92, 0xc8, 0x2f, 0xf4, 0x6f, 0x5c, 0xf2, 0x22,
             0x1d, 0x30, 0xf8, 0x03, 0xd8, 0x9b, 0x5f, 0x73, 0x72, 0x8e, 0x5f,
             0xd5, 0x37, 0x4b, 0x43, 0xda, 0xfe, 0x84, 0x21, 0x67, 0xe8, 0xe3,
             0xd7, 0x91, 0x3f, 0x24, 0x1d, 0xfb, 0x1f, 0x12, 0x6e, 0xcb, 0xfc,
             0xb7, 0x5b, 0x0a, 0x35, 0x73, 0x3b, 0xce, 0x44, 0x34, 0x8e, 0xcd,
             0x53, 0xa4, 0xcf, 0xa7, 0x63, 0x73, 0xcd, 0x31, 0x0f, 0xe0, 0x75,
             0x8d, 0xe4, 0xa9, 0xdc, 0xfe, 0xf0, 0xc9, 0x3d, 0x26, 0xaf, 0xbf,
             0x7b, 0x0f, 0x0e, 0x17, 0xb9, 0xd0, 0x4a, 0x32, 0x80, 0x64, 0x6b,
             0x54, 0x73, 0x5a, 0x50, 0xc7, 0x31, 0x59, 0xf9, 0x73, 0x72, 0xa5,
             0x79, 0xba, 0xdb, 0xa1, 0x14, 0x8d, 0x77, 0x67, 0x3e, 0xc0, 0x5b,
             0xec, 0x6f, 0x0b, 0xf7, 0xc5, 0xee, 0x5a, 0xa6, 0x8d, 0x49, 0x63,
             0x81, 0xbb, 0xd1, 0xf9, 0x9e, 0xbb, 0xed, 0xb2, 0xa9, 0x18, 0x60,
             0xa7, 0xee, 0xeb, 0x30, 0xa1, 0x92, 0x93, 0xe8, 0xd8, 0x34, 0x9e,
             0xac, 0xd6, 0x23, 0xfc, 0x7f, 0xcb, 0xe7, 0xfe, 0xa7, 0xe6, 0x42,
             0xac, 0x77, 0x11, 0xc0, 0x67, 0x77, 0xd1, 0xaa, 0x5e, 0xed, 0x3b,
             0xd5, 0xa5, 0x8d, 0x34, 0x7c, 0xd9, 0x57, 0x44, 0xa7, 0xc5, 0x44,
             0x2e, 0x1e, 0xe7, 0x63, 0xd8, 0x53, 0x1b, 0x9a, 0xd9, 0x67, 0x02,
             0x13, 0x32, 0x61}};
        std::array<std::uint8_t, 256> const rsa2Sig{
            {0x53, 0xd3, 0x39, 0x94, 0x99, 0x12, 0x80, 0x36, 0x6e, 0x68, 0x11,
             0x3a, 0x31, 0x2c, 0xec, 0x3e, 0xb4, 0x64, 0xbd, 0x35, 0x61, 0x23,
             0xc6, 0x60, 0xf4, 0x0c, 0x2e, 0x8b, 0x73, 0x2e, 0xa4, 0x94, 0xff,
             0x94, 0x02, 0x72, 0xbb, 0xb2, 0x6a, 0xa5, 0x4b, 0x9e, 0x0b, 0x15,
             0xb6, 0x8d, 0x1f, 0xab, 0x32, 0x67, 0xf0, 0xa3, 0xc1, 0x67, 0xeb,
             0xc4, 0xa4, 0xe7, 0x27, 0x8b, 0x67, 0x42, 0xf3, 0x3c, 0x00, 0xfa,
             0x20, 0xcf, 0x8e, 0x95, 0x21, 0x41, 0xcf, 0x46, 0x2f, 0x37, 0xf9,
             0xbd, 0xe7, 0x74, 0xeb, 0xf4, 0x3a, 0x9d, 0x77, 0x88, 0x97, 0x66,
             0xc5, 0xae, 0xf1, 0x33, 0xd6, 0xda, 0xc6, 0x03, 0x20, 0x6b, 0x64,
             0x2b, 0xb7, 0xa5, 0xd8, 0xd6, 0x83, 0x6d, 0xed, 0x15, 0x93, 0xe7,
             0xa8, 0x81, 0x0f, 0x31, 0x14, 0x80, 0xce, 0x85, 0xdd, 0xe9, 0xa3,
             0x82, 0xbf, 0x53, 0x8e, 0x95, 0xe8, 0xa3, 0xe9, 0xc1, 0x99, 0x50,
             0x2e, 0x65, 0x7a, 0x2f, 0x79, 0x7b, 0xb1, 0x98, 0xaa, 0x02, 0x80,
             0xaa, 0x54, 0xd4, 0xc0, 0xdd, 0xbc, 0x3b, 0x0d, 0x85, 0x4d, 0x54,
             0x3c, 0x60, 0xd6, 0xcd, 0xd8, 0x92, 0x71, 0x5d, 0x85, 0x84, 0x2e,
             0xde, 0x68, 0x5c, 0x28, 0x8f, 0xd4, 0xb5, 0x20, 0xcd, 0xb9, 0xa5,
             0x00, 0x2e, 0xe5, 0xc1, 0x96, 0x82, 0xfc, 0x32, 0x0d, 0x95, 0xd7,
             0x68, 0x26, 0x9a, 0x9f, 0x67, 0x0f, 0xee, 0xdb, 0x63, 0x21, 0x71,
             0x7e, 0xc1, 0xc1, 0x03, 0xa2, 0x6f, 0xac, 0xe6, 0x75, 0x6b, 0x41,
             0xaa, 0xe3, 0xb4, 0x29, 0xc1, 0xa8, 0xc7, 0x9e, 0x8e, 0xc0, 0x95,
             0x86, 0x47, 0x52, 0x49, 0xb3, 0x9e, 0x8c, 0x4d, 0x65, 0xb5, 0x28,
             0xfc, 0xab, 0x27, 0xe0, 0x6d, 0x4d, 0x05, 0x7e, 0x0b, 0x04, 0x6b,
             0x08, 0x90, 0x90, 0x1a, 0x9f, 0x52, 0x28, 0x83, 0xde, 0x6f, 0x1b,
             0x38, 0x3e, 0x2e}};
        auto const thresh1Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const preim3Preimage = "I am root"s;
        auto const preim3Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const rsa4Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa4PublicKey{
            {0xbe, 0x09, 0xc5, 0xa4, 0x27, 0x29, 0xdf, 0xd4, 0x67, 0x76, 0xbe,
             0xbf, 0x2c, 0xf3, 0xa2, 0x0b, 0x42, 0xe4, 0xbf, 0xeb, 0xdd, 0x67,
             0x20, 0xfb, 0x7a, 0x27, 0x93, 0xc0, 0x78, 0x47, 0x78, 0xd7, 0x15,
             0x32, 0xee, 0x38, 0x81, 0x0d, 0x36, 0xa2, 0xc4, 0x65, 0x44, 0xe6,
             0x62, 0x26, 0xb9, 0x58, 0x13, 0xa4, 0x15, 0x82, 0xab, 0xb1, 0x16,
             0x61, 0xfc, 0x01, 0x98, 0xc6, 0x1a, 0x69, 0xc6, 0xba, 0x39, 0x3f,
             0x01, 0x55, 0x3d, 0xd7, 0x8e, 0x14, 0x42, 0x6d, 0x78, 0x74, 0x9b,
             0x28, 0xcb, 0x31, 0x39, 0x98, 0x5a, 0x11, 0xdc, 0xc1, 0x18, 0x9d,
             0x8d, 0xb0, 0xcd, 0x1b, 0x4c, 0x10, 0xab, 0x14, 0x64, 0x19, 0xf1,
             0x33, 0x15, 0x45, 0xc8, 0x92, 0x82, 0x03, 0x82, 0x8a, 0xaa, 0xad,
             0x94, 0xfc, 0x24, 0x11, 0x96, 0x99, 0x7e, 0x94, 0x5a, 0x82, 0x57,
             0x68, 0x61, 0x9f, 0x7b, 0x45, 0xe0, 0x99, 0x9e, 0x4f, 0x32, 0x50,
             0x5f, 0x05, 0xc8, 0x11, 0xae, 0xc4, 0x0c, 0x63, 0x18, 0x0e, 0x02,
             0x59, 0x36, 0x25, 0x92, 0x06, 0x32, 0xc7, 0x71, 0x47, 0x99, 0xcc,
             0x0a, 0x6e, 0x0a, 0x58, 0x71, 0x3f, 0x5e, 0xb7, 0x78, 0xf7, 0x98,
             0x79, 0xdf, 0x74, 0xa4, 0xeb, 0xa9, 0x00, 0xfd, 0x81, 0xb3, 0xcf,
             0x04, 0x8c, 0x5d, 0x7d, 0xe7, 0xb2, 0x82, 0x90, 0x49, 0xbd, 0x69,
             0xf3, 0x08, 0xe9, 0x92, 0xc6, 0x9e, 0x41, 0xba, 0x74, 0xd8, 0x8d,
             0x81, 0x97, 0x6f, 0x86, 0xab, 0xc9, 0xf1, 0x02, 0x31, 0xb4, 0xce,
             0x47, 0xb0, 0x39, 0xc8, 0xba, 0x51, 0xa7, 0x39, 0xf3, 0x71, 0xa2,
             0x25, 0x27, 0x37, 0x6e, 0x09, 0x6f, 0x19, 0x59, 0xbc, 0x65, 0xd9,
             0xcd, 0x12, 0xd3, 0x2c, 0xa2, 0x78, 0xfa, 0x23, 0x15, 0x1a, 0x82,
             0x41, 0x91, 0x1b, 0xbe, 0x8a, 0xe7, 0xfe, 0x3c, 0x3c, 0x30, 0x32,
             0xaa, 0xe9, 0xf3}};
        std::array<std::uint8_t, 256> const rsa4Sig{
            {0x60, 0xec, 0xad, 0xad, 0xfc, 0x74, 0xbb, 0xcf, 0x00, 0x8b, 0x93,
             0x91, 0xa2, 0x7a, 0xd6, 0xd7, 0x70, 0x43, 0x95, 0x24, 0x0c, 0xf5,
             0xd3, 0x7b, 0x1d, 0x07, 0xfd, 0x65, 0x2c, 0x42, 0xe3, 0x68, 0xcb,
             0xb8, 0x27, 0x52, 0x24, 0x91, 0x05, 0xe8, 0xf3, 0xbd, 0x12, 0xb1,
             0xb0, 0x56, 0xb0, 0x8c, 0x7d, 0x1b, 0xf7, 0xd8, 0xc3, 0xd6, 0x25,
             0xac, 0x73, 0xc1, 0x2b, 0x8e, 0xa5, 0x94, 0xfa, 0x63, 0xc4, 0x01,
             0x10, 0xc5, 0x91, 0x4e, 0x2e, 0x3c, 0x3f, 0xf3, 0xfa, 0xc2, 0x76,
             0x1d, 0xc5, 0x21, 0x14, 0xb7, 0x70, 0x61, 0xdc, 0xa4, 0x5b, 0xd3,
             0x68, 0x1a, 0xba, 0x67, 0x03, 0xab, 0x84, 0x91, 0xb0, 0xc0, 0xbd,
             0x06, 0xfc, 0x2e, 0xa9, 0x91, 0xc8, 0x00, 0x28, 0x32, 0xbc, 0x88,
             0x5d, 0x54, 0xfe, 0xe4, 0x18, 0xf0, 0x48, 0x80, 0x03, 0xf5, 0x4d,
             0xa1, 0xb2, 0x04, 0xe3, 0xb6, 0x67, 0xf4, 0x2b, 0x01, 0xea, 0x62,
             0x64, 0x2d, 0x04, 0x86, 0x5a, 0xe6, 0x1e, 0xcc, 0x62, 0x2b, 0x59,
             0xdf, 0xbd, 0x00, 0x45, 0xd6, 0x9e, 0xf3, 0x16, 0xee, 0xa9, 0xa4,
             0x03, 0xd3, 0x3e, 0xd7, 0x4c, 0x9c, 0x27, 0x65, 0x48, 0x7a, 0xb5,
             0x09, 0x4c, 0x6e, 0x8e, 0x9f, 0x38, 0x90, 0x19, 0x0c, 0xb7, 0x48,
             0xa7, 0xe5, 0x74, 0x1f, 0x4a, 0xc1, 0x3b, 0x09, 0xe1, 0x07, 0xe1,
             0x92, 0xcd, 0x42, 0xce, 0x1a, 0xbe, 0x0f, 0x7f, 0xbe, 0xa3, 0x81,
             0xb8, 0x70, 0x0c, 0xb9, 0x8a, 0x20, 0x38, 0x31, 0xfa, 0xd6, 0x0b,
             0x37, 0x3c, 0xbf, 0xbb, 0x10, 0x91, 0xe7, 0x51, 0x86, 0x69, 0x72,
             0xf3, 0xc3, 0x66, 0xb0, 0xa9, 0x43, 0x82, 0x71, 0x5e, 0xca, 0x4d,
             0x75, 0xe0, 0xf2, 0x97, 0xdc, 0x11, 0xe5, 0x01, 0x5c, 0x9a, 0x6e,
             0x00, 0xb1, 0x0d, 0x6a, 0x57, 0xba, 0x3c, 0x25, 0x4d, 0x25, 0xa5,
             0x3a, 0x23, 0x86}};
        auto const ed5Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed5PublicKey{
            {0xae, 0xbc, 0xe5, 0x4b, 0x88, 0x09, 0x8d, 0x4f, 0xc4, 0xe1, 0x22,
             0xa0, 0x7c, 0x41, 0x05, 0xd7, 0x9f, 0xbe, 0xc8, 0x3d, 0x1d, 0x7e,
             0xd6, 0x55, 0xf4, 0x01, 0x67, 0x68, 0x93, 0x55, 0x85, 0xdf}};
        std::array<std::uint8_t, 64> const ed5Sig{
            {0x30, 0xe8, 0x22, 0x9b, 0x51, 0x8c, 0xaa, 0x86, 0x9b, 0xd0, 0xb2,
             0x06, 0xe0, 0xf0, 0xf2, 0xc0, 0x87, 0x43, 0x0f, 0xb0, 0xbd, 0xe1,
             0xeb, 0x17, 0x7f, 0x85, 0xe8, 0x79, 0xc6, 0xa2, 0x9d, 0x19, 0x17,
             0x07, 0x7e, 0x56, 0x06, 0xcb, 0x5a, 0xe1, 0xca, 0x36, 0x5c, 0x0a,
             0xb5, 0x81, 0x2a, 0x42, 0xf6, 0xcc, 0x6e, 0x04, 0xe2, 0x61, 0x8b,
             0x12, 0x16, 0xc2, 0x36, 0xfc, 0xd5, 0xd8, 0xfc, 0x0c}};
        std::array<std::uint8_t, 32> const ed5SigningKey{
            {0x42, 0x67, 0x67, 0xc0, 0xba, 0xdf, 0xb4, 0xd3, 0xf5, 0xc5, 0x1f,
             0x71, 0x97, 0x8a, 0xb4, 0x8e, 0x9a, 0xea, 0x3e, 0xec, 0xaf, 0xdc,
             0xc7, 0x2b, 0x01, 0x1b, 0x06, 0x8f, 0x05, 0x56, 0x63, 0xbc}};
        (void)ed5SigningKey;
        auto const thresh0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim6CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim6Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim6CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa7CondConditionFingerprint =
            "\x6c\x7b\xea\x83\xa1\xf4\x82\x3d\x36\xe7\x6e\xae\x1a\xbc\xa0"
            "\xba\x90\x3d\x96\xc1\xe6\xad\x3a\x47\xa5\xcb\x88\xab\x3c\x5f"
            "\xcc\xd5"s;
        Condition const Rsa7Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa7CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed8CondConditionFingerprint =
            "\xf1\x68\x96\xa6\x2e\xef\x7f\x47\x06\x51\x4c\xc6\x7e\x24\xf7"
            "\x29\x84\x9c\xd6\xb0\xd9\x4b\xd9\x0f\xc9\x34\x01\x9d\x92\xeb"
            "\xbc\x0a"s;
        Condition const Ed8Cond{Type::ed25519Sha256,
                                131072,
                                makeSlice(Ed8CondConditionFingerprint),
                                std::bitset<5>{0}};
        auto const Prefix9CondConditionFingerprint =
            "\xf0\x59\xa5\x5a\x8c\x03\x13\x40\x20\xb6\x34\x9a\x7a\x4e\x97"
            "\x77\x00\xbe\x0c\xd9\xcd\xd2\xe6\xe5\xbf\x5b\x62\x3d\xc6\x15"
            "\x4c\xda"s;
        Condition const Prefix9Cond{Type::prefixSha256,
                                    67626,
                                    makeSlice(Prefix9CondConditionFingerprint),
                                    std::bitset<5>{8}};
        auto const Thresh12CondConditionFingerprint =
            "\xe0\x26\x19\x16\x42\xd0\x79\x91\x2a\x7c\xc1\x43\x2e\xd8\xed"
            "\xef\x8d\x7b\xfa\x68\x5b\x65\x3e\x14\xb6\x54\xac\xe7\x54\x67"
            "\x5d\x16"s;
        Condition const Thresh12Cond{
            Type::thresholdSha256,
            271360,
            makeSlice(Thresh12CondConditionFingerprint),
            std::bitset<5>{25}};

        auto rsa2 = std::make_unique<RsaSha256>(
            makeSlice(rsa2PublicKey), makeSlice(rsa2Sig));
        std::vector<std::unique_ptr<Fulfillment>> thresh1Subfulfillments;
        thresh1Subfulfillments.emplace_back(std::move(rsa2));
        std::vector<Condition> thresh1Subconditions{};
        auto thresh1 = std::make_unique<ThresholdSha256>(
            std::move(thresh1Subfulfillments), std::move(thresh1Subconditions));
        auto preim3 =
            std::make_unique<PreimageSha256>(makeSlice(preim3Preimage));
        auto rsa4 = std::make_unique<RsaSha256>(
            makeSlice(rsa4PublicKey), makeSlice(rsa4Sig));
        auto ed5 = std::make_unique<Ed25519>(ed5PublicKey, ed5Sig);
        std::vector<std::unique_ptr<Fulfillment>> thresh0Subfulfillments;
        thresh0Subfulfillments.emplace_back(std::move(thresh1));
        thresh0Subfulfillments.emplace_back(std::move(preim3));
        thresh0Subfulfillments.emplace_back(std::move(rsa4));
        thresh0Subfulfillments.emplace_back(std::move(ed5));
        std::vector<Condition> thresh0Subconditions{
            {Preim6Cond, Rsa7Cond, Ed8Cond, Prefix9Cond, Thresh12Cond}};
        ThresholdSha256 const thresh0(
            std::move(thresh0Subfulfillments), std::move(thresh0Subconditions));
        {
            auto const thresh0EncodedFulfillment =
                "\xa2\x82\x05\x6f\xa0\x82\x04\x95\xa0\x0b\x80\x09\x49\x20\x61"
                "\x6d\x20\x72\x6f\x6f\x74\xa2\x82\x02\x12\xa0\x82\x02\x0c\xa3"
                "\x82\x02\x08\x80\x82\x01\x00\xba\x2c\x3b\x50\xb6\xbf\xf9\x0f"
                "\x1d\xd7\x32\x4c\x01\x5f\xff\x2f\x2a\xf6\x33\xd0\xfb\xea\x1f"
                "\xa4\xf2\x2d\x22\x8a\x19\x95\xa9\x17\xb7\x4f\x17\xcf\x55\xcd"
                "\x1a\x3a\x5f\x07\x73\xcc\xaa\x21\x70\x64\xb3\xa0\xf4\xb7\x30"
                "\xa3\x82\x37\x93\xc6\x59\xde\x1b\xa1\x16\x90\x5a\x1a\xf6\x73"
                "\xab\x92\xc8\x2f\xf4\x6f\x5c\xf2\x22\x1d\x30\xf8\x03\xd8\x9b"
                "\x5f\x73\x72\x8e\x5f\xd5\x37\x4b\x43\xda\xfe\x84\x21\x67\xe8"
                "\xe3\xd7\x91\x3f\x24\x1d\xfb\x1f\x12\x6e\xcb\xfc\xb7\x5b\x0a"
                "\x35\x73\x3b\xce\x44\x34\x8e\xcd\x53\xa4\xcf\xa7\x63\x73\xcd"
                "\x31\x0f\xe0\x75\x8d\xe4\xa9\xdc\xfe\xf0\xc9\x3d\x26\xaf\xbf"
                "\x7b\x0f\x0e\x17\xb9\xd0\x4a\x32\x80\x64\x6b\x54\x73\x5a\x50"
                "\xc7\x31\x59\xf9\x73\x72\xa5\x79\xba\xdb\xa1\x14\x8d\x77\x67"
                "\x3e\xc0\x5b\xec\x6f\x0b\xf7\xc5\xee\x5a\xa6\x8d\x49\x63\x81"
                "\xbb\xd1\xf9\x9e\xbb\xed\xb2\xa9\x18\x60\xa7\xee\xeb\x30\xa1"
                "\x92\x93\xe8\xd8\x34\x9e\xac\xd6\x23\xfc\x7f\xcb\xe7\xfe\xa7"
                "\xe6\x42\xac\x77\x11\xc0\x67\x77\xd1\xaa\x5e\xed\x3b\xd5\xa5"
                "\x8d\x34\x7c\xd9\x57\x44\xa7\xc5\x44\x2e\x1e\xe7\x63\xd8\x53"
                "\x1b\x9a\xd9\x67\x02\x13\x32\x61\x81\x82\x01\x00\x53\xd3\x39"
                "\x94\x99\x12\x80\x36\x6e\x68\x11\x3a\x31\x2c\xec\x3e\xb4\x64"
                "\xbd\x35\x61\x23\xc6\x60\xf4\x0c\x2e\x8b\x73\x2e\xa4\x94\xff"
                "\x94\x02\x72\xbb\xb2\x6a\xa5\x4b\x9e\x0b\x15\xb6\x8d\x1f\xab"
                "\x32\x67\xf0\xa3\xc1\x67\xeb\xc4\xa4\xe7\x27\x8b\x67\x42\xf3"
                "\x3c\x00\xfa\x20\xcf\x8e\x95\x21\x41\xcf\x46\x2f\x37\xf9\xbd"
                "\xe7\x74\xeb\xf4\x3a\x9d\x77\x88\x97\x66\xc5\xae\xf1\x33\xd6"
                "\xda\xc6\x03\x20\x6b\x64\x2b\xb7\xa5\xd8\xd6\x83\x6d\xed\x15"
                "\x93\xe7\xa8\x81\x0f\x31\x14\x80\xce\x85\xdd\xe9\xa3\x82\xbf"
                "\x53\x8e\x95\xe8\xa3\xe9\xc1\x99\x50\x2e\x65\x7a\x2f\x79\x7b"
                "\xb1\x98\xaa\x02\x80\xaa\x54\xd4\xc0\xdd\xbc\x3b\x0d\x85\x4d"
                "\x54\x3c\x60\xd6\xcd\xd8\x92\x71\x5d\x85\x84\x2e\xde\x68\x5c"
                "\x28\x8f\xd4\xb5\x20\xcd\xb9\xa5\x00\x2e\xe5\xc1\x96\x82\xfc"
                "\x32\x0d\x95\xd7\x68\x26\x9a\x9f\x67\x0f\xee\xdb\x63\x21\x71"
                "\x7e\xc1\xc1\x03\xa2\x6f\xac\xe6\x75\x6b\x41\xaa\xe3\xb4\x29"
                "\xc1\xa8\xc7\x9e\x8e\xc0\x95\x86\x47\x52\x49\xb3\x9e\x8c\x4d"
                "\x65\xb5\x28\xfc\xab\x27\xe0\x6d\x4d\x05\x7e\x0b\x04\x6b\x08"
                "\x90\x90\x1a\x9f\x52\x28\x83\xde\x6f\x1b\x38\x3e\x2e\xa1\x00"
                "\xa3\x82\x02\x08\x80\x82\x01\x00\xbe\x09\xc5\xa4\x27\x29\xdf"
                "\xd4\x67\x76\xbe\xbf\x2c\xf3\xa2\x0b\x42\xe4\xbf\xeb\xdd\x67"
                "\x20\xfb\x7a\x27\x93\xc0\x78\x47\x78\xd7\x15\x32\xee\x38\x81"
                "\x0d\x36\xa2\xc4\x65\x44\xe6\x62\x26\xb9\x58\x13\xa4\x15\x82"
                "\xab\xb1\x16\x61\xfc\x01\x98\xc6\x1a\x69\xc6\xba\x39\x3f\x01"
                "\x55\x3d\xd7\x8e\x14\x42\x6d\x78\x74\x9b\x28\xcb\x31\x39\x98"
                "\x5a\x11\xdc\xc1\x18\x9d\x8d\xb0\xcd\x1b\x4c\x10\xab\x14\x64"
                "\x19\xf1\x33\x15\x45\xc8\x92\x82\x03\x82\x8a\xaa\xad\x94\xfc"
                "\x24\x11\x96\x99\x7e\x94\x5a\x82\x57\x68\x61\x9f\x7b\x45\xe0"
                "\x99\x9e\x4f\x32\x50\x5f\x05\xc8\x11\xae\xc4\x0c\x63\x18\x0e"
                "\x02\x59\x36\x25\x92\x06\x32\xc7\x71\x47\x99\xcc\x0a\x6e\x0a"
                "\x58\x71\x3f\x5e\xb7\x78\xf7\x98\x79\xdf\x74\xa4\xeb\xa9\x00"
                "\xfd\x81\xb3\xcf\x04\x8c\x5d\x7d\xe7\xb2\x82\x90\x49\xbd\x69"
                "\xf3\x08\xe9\x92\xc6\x9e\x41\xba\x74\xd8\x8d\x81\x97\x6f\x86"
                "\xab\xc9\xf1\x02\x31\xb4\xce\x47\xb0\x39\xc8\xba\x51\xa7\x39"
                "\xf3\x71\xa2\x25\x27\x37\x6e\x09\x6f\x19\x59\xbc\x65\xd9\xcd"
                "\x12\xd3\x2c\xa2\x78\xfa\x23\x15\x1a\x82\x41\x91\x1b\xbe\x8a"
                "\xe7\xfe\x3c\x3c\x30\x32\xaa\xe9\xf3\x81\x82\x01\x00\x60\xec"
                "\xad\xad\xfc\x74\xbb\xcf\x00\x8b\x93\x91\xa2\x7a\xd6\xd7\x70"
                "\x43\x95\x24\x0c\xf5\xd3\x7b\x1d\x07\xfd\x65\x2c\x42\xe3\x68"
                "\xcb\xb8\x27\x52\x24\x91\x05\xe8\xf3\xbd\x12\xb1\xb0\x56\xb0"
                "\x8c\x7d\x1b\xf7\xd8\xc3\xd6\x25\xac\x73\xc1\x2b\x8e\xa5\x94"
                "\xfa\x63\xc4\x01\x10\xc5\x91\x4e\x2e\x3c\x3f\xf3\xfa\xc2\x76"
                "\x1d\xc5\x21\x14\xb7\x70\x61\xdc\xa4\x5b\xd3\x68\x1a\xba\x67"
                "\x03\xab\x84\x91\xb0\xc0\xbd\x06\xfc\x2e\xa9\x91\xc8\x00\x28"
                "\x32\xbc\x88\x5d\x54\xfe\xe4\x18\xf0\x48\x80\x03\xf5\x4d\xa1"
                "\xb2\x04\xe3\xb6\x67\xf4\x2b\x01\xea\x62\x64\x2d\x04\x86\x5a"
                "\xe6\x1e\xcc\x62\x2b\x59\xdf\xbd\x00\x45\xd6\x9e\xf3\x16\xee"
                "\xa9\xa4\x03\xd3\x3e\xd7\x4c\x9c\x27\x65\x48\x7a\xb5\x09\x4c"
                "\x6e\x8e\x9f\x38\x90\x19\x0c\xb7\x48\xa7\xe5\x74\x1f\x4a\xc1"
                "\x3b\x09\xe1\x07\xe1\x92\xcd\x42\xce\x1a\xbe\x0f\x7f\xbe\xa3"
                "\x81\xb8\x70\x0c\xb9\x8a\x20\x38\x31\xfa\xd6\x0b\x37\x3c\xbf"
                "\xbb\x10\x91\xe7\x51\x86\x69\x72\xf3\xc3\x66\xb0\xa9\x43\x82"
                "\x71\x5e\xca\x4d\x75\xe0\xf2\x97\xdc\x11\xe5\x01\x5c\x9a\x6e"
                "\x00\xb1\x0d\x6a\x57\xba\x3c\x25\x4d\x25\xa5\x3a\x23\x86\xa4"
                "\x64\x80\x20\xae\xbc\xe5\x4b\x88\x09\x8d\x4f\xc4\xe1\x22\xa0"
                "\x7c\x41\x05\xd7\x9f\xbe\xc8\x3d\x1d\x7e\xd6\x55\xf4\x01\x67"
                "\x68\x93\x55\x85\xdf\x81\x40\x30\xe8\x22\x9b\x51\x8c\xaa\x86"
                "\x9b\xd0\xb2\x06\xe0\xf0\xf2\xc0\x87\x43\x0f\xb0\xbd\xe1\xeb"
                "\x17\x7f\x85\xe8\x79\xc6\xa2\x9d\x19\x17\x07\x7e\x56\x06\xcb"
                "\x5a\xe1\xca\x36\x5c\x0a\xb5\x81\x2a\x42\xf6\xcc\x6e\x04\xe2"
                "\x61\x8b\x12\x16\xc2\x36\xfc\xd5\xd8\xfc\x0c\xa1\x81\xd3\xa0"
                "\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e"
                "\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53"
                "\xee\x93\x58\xeb\x4e\x81\x01\x09\xa1\x2b\x80\x20\xf0\x59\xa5"
                "\x5a\x8c\x03\x13\x40\x20\xb6\x34\x9a\x7a\x4e\x97\x77\x00\xbe"
                "\x0c\xd9\xcd\xd2\xe6\xe5\xbf\x5b\x62\x3d\xc6\x15\x4c\xda\x81"
                "\x03\x01\x08\x2a\x82\x02\x04\x10\xa2\x2b\x80\x20\xe0\x26\x19"
                "\x16\x42\xd0\x79\x91\x2a\x7c\xc1\x43\x2e\xd8\xed\xef\x8d\x7b"
                "\xfa\x68\x5b\x65\x3e\x14\xb6\x54\xac\xe7\x54\x67\x5d\x16\x81"
                "\x03\x04\x24\x00\x82\x02\x03\x98\xa3\x27\x80\x20\x6c\x7b\xea"
                "\x83\xa1\xf4\x82\x3d\x36\xe7\x6e\xae\x1a\xbc\xa0\xba\x90\x3d"
                "\x96\xc1\xe6\xad\x3a\x47\xa5\xcb\x88\xab\x3c\x5f\xcc\xd5\x81"
                "\x03\x01\x00\x00\xa4\x27\x80\x20\xf1\x68\x96\xa6\x2e\xef\x7f"
                "\x47\x06\x51\x4c\xc6\x7e\x24\xf7\x29\x84\x9c\xd6\xb0\xd9\x4b"
                "\xd9\x0f\xc9\x34\x01\x9d\x92\xeb\xbc\x0a\x81\x03\x02\x00\x00"s;
            auto const thresh0EncodedCondition =
                "\xa2\x2b\x80\x20\xbe\x4b\x72\xad\x4e\x89\xed\xc7\x06\x8e\x77"
                "\xa0\x43\xe8\x00\xb8\x43\x0c\xe0\x85\x09\xb1\xd1\xad\xc6\x5b"
                "\x55\x18\x5f\xe7\xd5\xc6\x81\x03\x09\x50\x2a\x82\x02\x03\xd8"s;
            auto const thresh0EncodedFingerprint =
                "\x30\x82\x01\x80\x80\x01\x04\xa1\x82\x01\x79\xa0\x25\x80\x20"
                "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
                "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
                "\xeb\x4e\x81\x01\x09\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1"
                "\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21"
                "\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa1"
                "\x2b\x80\x20\xf0\x59\xa5\x5a\x8c\x03\x13\x40\x20\xb6\x34\x9a"
                "\x7a\x4e\x97\x77\x00\xbe\x0c\xd9\xcd\xd2\xe6\xe5\xbf\x5b\x62"
                "\x3d\xc6\x15\x4c\xda\x81\x03\x01\x08\x2a\x82\x02\x04\x10\xa2"
                "\x2b\x80\x20\x8a\x64\x29\x50\xef\xe8\x27\x2b\xb4\x67\x7a\x9c"
                "\x43\x7a\x57\x15\xf0\x1a\x03\x82\x05\x69\x6d\xf5\x71\x02\xdf"
                "\x09\x48\x2b\x36\x94\x81\x03\x01\x04\x00\x82\x02\x04\x10\xa2"
                "\x2b\x80\x20\xe0\x26\x19\x16\x42\xd0\x79\x91\x2a\x7c\xc1\x43"
                "\x2e\xd8\xed\xef\x8d\x7b\xfa\x68\x5b\x65\x3e\x14\xb6\x54\xac"
                "\xe7\x54\x67\x5d\x16\x81\x03\x04\x24\x00\x82\x02\x03\x98\xa3"
                "\x27\x80\x20\x3a\x82\x3b\x32\x38\xb1\x3c\x17\x87\x60\x62\xec"
                "\xcf\x91\xb0\xaf\xaa\xe5\x11\xe6\xfb\xe2\xb0\x3d\x70\x4d\x1d"
                "\xad\xd6\x7c\xee\xa6\x81\x03\x01\x00\x00\xa3\x27\x80\x20\x6c"
                "\x7b\xea\x83\xa1\xf4\x82\x3d\x36\xe7\x6e\xae\x1a\xbc\xa0\xba"
                "\x90\x3d\x96\xc1\xe6\xad\x3a\x47\xa5\xcb\x88\xab\x3c\x5f\xcc"
                "\xd5\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x90\xce\xed\x45\x98"
                "\x68\xff\x19\x2b\x27\xc1\x2a\xa2\x6e\x2e\x82\xf3\xbd\x71\x13"
                "\x61\xb0\x76\x40\x4d\x48\xea\x16\xfb\x27\x57\xdc\x81\x03\x02"
                "\x00\x00\xa4\x27\x80\x20\xf1\x68\x96\xa6\x2e\xef\x7f\x47\x06"
                "\x51\x4c\xc6\x7e\x24\xf7\x29\x84\x9c\xd6\xb0\xd9\x4b\xd9\x0f"
                "\xc9\x34\x01\x9d\x92\xeb\xbc\x0a\x81\x03\x02\x00\x00"s;
            check(
                &thresh0,
                thresh0Msg,
                thresh0EncodedFulfillment,
                thresh0EncodedCondition,
                thresh0EncodedFingerprint);
        }
    }

    void
    testThresh42()
    {
        testcase("Thresh42");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * thresh0
        // ** Preim25Cond
        // ** Rsa26Cond
        // ** Ed27Cond
        // ** thresh1
        // *** Preim3Cond
        // *** Rsa4Cond
        // *** Ed5Cond
        // *** rsa2
        // ** prefix6
        // *** prefix7
        // **** prefix8
        // ***** rsa9
        // ** thresh10
        // *** Preim17Cond
        // *** Rsa18Cond
        // *** Ed19Cond
        // *** Thresh20Cond
        // *** rsa11
        // *** thresh12
        // **** Preim14Cond
        // **** Rsa15Cond
        // **** Ed16Cond
        // **** rsa13

        auto const rsa2Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa2PublicKey{
            {0xba, 0x2c, 0x3b, 0x50, 0xb6, 0xbf, 0xf9, 0x0f, 0x1d, 0xd7, 0x32,
             0x4c, 0x01, 0x5f, 0xff, 0x2f, 0x2a, 0xf6, 0x33, 0xd0, 0xfb, 0xea,
             0x1f, 0xa4, 0xf2, 0x2d, 0x22, 0x8a, 0x19, 0x95, 0xa9, 0x17, 0xb7,
             0x4f, 0x17, 0xcf, 0x55, 0xcd, 0x1a, 0x3a, 0x5f, 0x07, 0x73, 0xcc,
             0xaa, 0x21, 0x70, 0x64, 0xb3, 0xa0, 0xf4, 0xb7, 0x30, 0xa3, 0x82,
             0x37, 0x93, 0xc6, 0x59, 0xde, 0x1b, 0xa1, 0x16, 0x90, 0x5a, 0x1a,
             0xf6, 0x73, 0xab, 0x92, 0xc8, 0x2f, 0xf4, 0x6f, 0x5c, 0xf2, 0x22,
             0x1d, 0x30, 0xf8, 0x03, 0xd8, 0x9b, 0x5f, 0x73, 0x72, 0x8e, 0x5f,
             0xd5, 0x37, 0x4b, 0x43, 0xda, 0xfe, 0x84, 0x21, 0x67, 0xe8, 0xe3,
             0xd7, 0x91, 0x3f, 0x24, 0x1d, 0xfb, 0x1f, 0x12, 0x6e, 0xcb, 0xfc,
             0xb7, 0x5b, 0x0a, 0x35, 0x73, 0x3b, 0xce, 0x44, 0x34, 0x8e, 0xcd,
             0x53, 0xa4, 0xcf, 0xa7, 0x63, 0x73, 0xcd, 0x31, 0x0f, 0xe0, 0x75,
             0x8d, 0xe4, 0xa9, 0xdc, 0xfe, 0xf0, 0xc9, 0x3d, 0x26, 0xaf, 0xbf,
             0x7b, 0x0f, 0x0e, 0x17, 0xb9, 0xd0, 0x4a, 0x32, 0x80, 0x64, 0x6b,
             0x54, 0x73, 0x5a, 0x50, 0xc7, 0x31, 0x59, 0xf9, 0x73, 0x72, 0xa5,
             0x79, 0xba, 0xdb, 0xa1, 0x14, 0x8d, 0x77, 0x67, 0x3e, 0xc0, 0x5b,
             0xec, 0x6f, 0x0b, 0xf7, 0xc5, 0xee, 0x5a, 0xa6, 0x8d, 0x49, 0x63,
             0x81, 0xbb, 0xd1, 0xf9, 0x9e, 0xbb, 0xed, 0xb2, 0xa9, 0x18, 0x60,
             0xa7, 0xee, 0xeb, 0x30, 0xa1, 0x92, 0x93, 0xe8, 0xd8, 0x34, 0x9e,
             0xac, 0xd6, 0x23, 0xfc, 0x7f, 0xcb, 0xe7, 0xfe, 0xa7, 0xe6, 0x42,
             0xac, 0x77, 0x11, 0xc0, 0x67, 0x77, 0xd1, 0xaa, 0x5e, 0xed, 0x3b,
             0xd5, 0xa5, 0x8d, 0x34, 0x7c, 0xd9, 0x57, 0x44, 0xa7, 0xc5, 0x44,
             0x2e, 0x1e, 0xe7, 0x63, 0xd8, 0x53, 0x1b, 0x9a, 0xd9, 0x67, 0x02,
             0x13, 0x32, 0x61}};
        std::array<std::uint8_t, 256> const rsa2Sig{
            {0x76, 0x33, 0x4c, 0xa5, 0x51, 0xcd, 0xde, 0xea, 0xb5, 0x68, 0x6e,
             0x6e, 0xed, 0xf2, 0x06, 0x4c, 0xf2, 0x9e, 0x60, 0x69, 0x88, 0xfa,
             0xde, 0x6d, 0x36, 0xb8, 0xba, 0x82, 0xb7, 0xca, 0x0e, 0xcd, 0x15,
             0x6b, 0x04, 0xc4, 0x69, 0xf1, 0x0e, 0xa0, 0xac, 0xe6, 0xd9, 0x8c,
             0xfa, 0x9b, 0x50, 0x51, 0xf7, 0x81, 0x42, 0xb3, 0x10, 0x7c, 0x08,
             0xb9, 0xa5, 0xf8, 0x37, 0x46, 0xe4, 0x8b, 0x25, 0x1a, 0x2a, 0xa2,
             0xbc, 0xd9, 0x05, 0x3a, 0x76, 0xd5, 0xbc, 0x96, 0xf5, 0x05, 0x4c,
             0xce, 0x20, 0xf1, 0x02, 0x93, 0xc4, 0xaf, 0xdb, 0x2d, 0x02, 0xba,
             0xc2, 0x8c, 0xbd, 0x26, 0xe5, 0xbe, 0x12, 0xda, 0x74, 0x78, 0x0d,
             0x01, 0xdd, 0x8a, 0x18, 0x95, 0xe7, 0xd3, 0xc4, 0xa5, 0xc0, 0x0b,
             0xe3, 0x90, 0x45, 0x78, 0xef, 0xad, 0x35, 0xda, 0x3d, 0xaa, 0x28,
             0x9d, 0x5e, 0xa9, 0x8d, 0x2a, 0x18, 0xc8, 0x0c, 0x81, 0x72, 0xe8,
             0x48, 0x96, 0x4a, 0xd0, 0x96, 0x2d, 0xfc, 0x59, 0xb6, 0xc7, 0x3e,
             0xf6, 0x60, 0xf9, 0xf5, 0xa5, 0x8f, 0x3e, 0x98, 0x14, 0x13, 0xe4,
             0xcd, 0x7c, 0x83, 0xd9, 0xb4, 0xb5, 0xec, 0x31, 0xa3, 0xa0, 0x2d,
             0x60, 0xef, 0x36, 0x18, 0xfa, 0x86, 0x2d, 0x06, 0x3d, 0x1b, 0x33,
             0x3e, 0xe8, 0x75, 0x48, 0xbe, 0x95, 0xd7, 0xb5, 0xf8, 0xc5, 0xfa,
             0x09, 0x52, 0x7b, 0x81, 0x49, 0xb9, 0xb2, 0x1a, 0x59, 0x52, 0xf6,
             0x74, 0xff, 0x5b, 0xf4, 0xd9, 0xf5, 0xa2, 0x7b, 0x5b, 0x37, 0x08,
             0xcb, 0xfe, 0x16, 0xa1, 0xd7, 0x4d, 0xd7, 0xd8, 0x89, 0xe3, 0xda,
             0x18, 0x2c, 0xe9, 0x1d, 0x7d, 0x2b, 0x9b, 0x60, 0x9c, 0x41, 0x7b,
             0x55, 0x49, 0xdd, 0x25, 0xe6, 0x13, 0x56, 0x41, 0x19, 0x02, 0x4d,
             0xd4, 0x05, 0xaa, 0xb8, 0xbc, 0x08, 0x0c, 0x8d, 0x5c, 0xcc, 0x3a,
             0xa2, 0xb9, 0x80}};
        auto const thresh1Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim3CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim3Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim3CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa4CondConditionFingerprint =
            "\x3a\x82\x3b\x32\x38\xb1\x3c\x17\x87\x60\x62\xec\xcf\x91\xb0"
            "\xaf\xaa\xe5\x11\xe6\xfb\xe2\xb0\x3d\x70\x4d\x1d\xad\xd6\x7c"
            "\xee\xa6"s;
        Condition const Rsa4Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa4CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed5CondConditionFingerprint =
            "\x90\xce\xed\x45\x98\x68\xff\x19\x2b\x27\xc1\x2a\xa2\x6e\x2e"
            "\x82\xf3\xbd\x71\x13\x61\xb0\x76\x40\x4d\x48\xea\x16\xfb\x27"
            "\x57\xdc"s;
        Condition const Ed5Cond{Type::ed25519Sha256,
                                131072,
                                makeSlice(Ed5CondConditionFingerprint),
                                std::bitset<5>{0}};
        auto const rsa9Msg = "P8P7P6abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa9PublicKey{
            {0xb6, 0x7b, 0xe2, 0x98, 0x9f, 0xff, 0x6c, 0x37, 0xd0, 0xb6, 0x64,
             0x19, 0xfb, 0xa0, 0x21, 0x18, 0xe2, 0xc0, 0xd1, 0x92, 0xbd, 0x04,
             0xa6, 0xd2, 0xb4, 0x7e, 0xc6, 0x6a, 0x1a, 0x34, 0x20, 0x7b, 0xfe,
             0x84, 0xeb, 0xe8, 0xc1, 0x6f, 0xfd, 0xdc, 0x0a, 0xfe, 0x60, 0x55,
             0xb6, 0xfc, 0x86, 0x5a, 0x21, 0xbf, 0xf1, 0x39, 0xfa, 0xec, 0x42,
             0xca, 0x57, 0xb3, 0x3e, 0x3f, 0xe6, 0x26, 0x5a, 0xb7, 0x4a, 0x5f,
             0xbb, 0xb1, 0xf5, 0x91, 0x85, 0x92, 0x3e, 0x6a, 0x18, 0x48, 0x4d,
             0x9e, 0xdd, 0x08, 0x25, 0xa3, 0x3b, 0x3d, 0x75, 0x9a, 0xbe, 0xee,
             0x0d, 0x6e, 0xd2, 0x5d, 0xe2, 0xbd, 0xed, 0x45, 0x60, 0xef, 0xa0,
             0x37, 0xfd, 0xbb, 0xcf, 0x30, 0x97, 0xf1, 0x5b, 0xc8, 0x9c, 0x29,
             0x33, 0x67, 0x3e, 0x23, 0x33, 0x7f, 0x36, 0xd4, 0x75, 0x8b, 0xa1,
             0xcf, 0x9e, 0xe6, 0xc5, 0x63, 0x63, 0xb0, 0x3f, 0xa0, 0xc2, 0xa2,
             0x10, 0xc9, 0xb2, 0x6b, 0xaa, 0x67, 0xc9, 0xf5, 0xb8, 0xbf, 0x5b,
             0x97, 0xe5, 0x29, 0xf2, 0xbb, 0xc7, 0x22, 0x0f, 0x1f, 0xc1, 0xf6,
             0xca, 0x4a, 0x8a, 0x46, 0x89, 0xa0, 0xca, 0x4e, 0x49, 0x9d, 0xfc,
             0x23, 0xd3, 0xb4, 0xdb, 0xc6, 0x84, 0x45, 0xbd, 0x9f, 0x10, 0x86,
             0xe2, 0xf0, 0x47, 0x7b, 0x75, 0xbf, 0x25, 0x99, 0x02, 0x2c, 0xdb,
             0x6b, 0xd6, 0x2b, 0x67, 0x0d, 0xcd, 0x46, 0x63, 0xbd, 0xce, 0x1c,
             0xc5, 0x56, 0x63, 0x58, 0x5b, 0xc8, 0xb2, 0x58, 0x42, 0xf6, 0xaf,
             0xce, 0x47, 0xb2, 0xa9, 0x2a, 0x71, 0x8b, 0x82, 0xf4, 0x72, 0xff,
             0xef, 0xe7, 0xc1, 0x70, 0x12, 0xfa, 0xb8, 0xad, 0xb2, 0xfe, 0xa9,
             0x14, 0xe7, 0xc2, 0xec, 0x12, 0xbf, 0x29, 0x5a, 0x65, 0x91, 0x74,
             0x82, 0xd3, 0x77, 0x1f, 0x14, 0xbf, 0x5f, 0x41, 0x11, 0x6c, 0x7c,
             0x22, 0x70, 0x65}};
        std::array<std::uint8_t, 256> const rsa9Sig{
            {0x16, 0x84, 0xf9, 0x95, 0x77, 0xd4, 0x1c, 0x73, 0x07, 0x88, 0xb2,
             0x61, 0x29, 0x27, 0x84, 0x76, 0xbc, 0x3e, 0x97, 0xe3, 0x73, 0x4a,
             0xf9, 0xfe, 0xcc, 0xa7, 0xc1, 0xe0, 0xc9, 0xe9, 0x6c, 0x4c, 0xf3,
             0xab, 0x2b, 0x06, 0x68, 0xe5, 0x17, 0x24, 0x01, 0x62, 0xa8, 0x93,
             0x0c, 0x73, 0xfd, 0x30, 0x01, 0x4e, 0x4b, 0x6f, 0xdb, 0xa9, 0x9b,
             0x4d, 0x9d, 0x45, 0x3a, 0x5f, 0x0a, 0x76, 0x15, 0xf9, 0xb5, 0x8f,
             0xe5, 0x6c, 0x43, 0xdb, 0x86, 0xee, 0x4b, 0x67, 0x6a, 0x79, 0x93,
             0xb0, 0xd4, 0x3d, 0x87, 0x80, 0x29, 0x89, 0xb7, 0xc5, 0x52, 0xfd,
             0x44, 0x1e, 0x3b, 0x1a, 0x0b, 0x13, 0xbc, 0x90, 0x19, 0xc4, 0x44,
             0x3f, 0x9c, 0xab, 0x86, 0x9a, 0xa9, 0xd9, 0xc8, 0x3b, 0x3b, 0xbd,
             0x9a, 0x0f, 0xf0, 0xe9, 0x39, 0xdf, 0x74, 0x07, 0x6f, 0xf5, 0x9a,
             0x34, 0x0d, 0x64, 0x94, 0xa8, 0x94, 0xfb, 0x25, 0x6a, 0xdc, 0x27,
             0x1b, 0x97, 0xbb, 0x60, 0x36, 0xae, 0xd4, 0x34, 0x0b, 0xc2, 0xf1,
             0x47, 0x7d, 0x90, 0xd8, 0xf8, 0x4a, 0x15, 0xac, 0xae, 0x89, 0xe7,
             0xb5, 0xd1, 0x2c, 0xff, 0x48, 0x21, 0xb0, 0x8d, 0xc4, 0x9f, 0x83,
             0xb3, 0x83, 0xaa, 0x87, 0x69, 0x6f, 0x45, 0x5b, 0x69, 0x77, 0xcb,
             0xd9, 0x67, 0xee, 0x7d, 0x8b, 0x70, 0xe1, 0xd7, 0xbb, 0xdd, 0x5f,
             0x23, 0xd4, 0x2b, 0x33, 0x2c, 0x6c, 0x6e, 0x0b, 0x51, 0x97, 0x77,
             0xc0, 0x74, 0x4e, 0xce, 0xbb, 0x79, 0xf5, 0xa2, 0x87, 0x7c, 0x32,
             0x1f, 0xd9, 0xd9, 0x32, 0x87, 0x69, 0xd2, 0xf6, 0xfa, 0x17, 0x5d,
             0xbe, 0x62, 0x3a, 0x7e, 0x68, 0xca, 0x0d, 0x85, 0x65, 0xb6, 0xe2,
             0x19, 0x40, 0x55, 0xd1, 0x5f, 0x6f, 0xef, 0xf1, 0xb2, 0xae, 0x73,
             0xe9, 0x59, 0x7e, 0x19, 0xa7, 0x73, 0xaa, 0x1e, 0x2e, 0xca, 0x82,
             0x59, 0xfb, 0x51}};
        auto const prefix8Prefix = "P8"s;
        auto const prefix8Msg = "P7P6abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix8MaxMsgLength = 14;
        auto const prefix7Prefix = "P7"s;
        auto const prefix7Msg = "P6abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix7MaxMsgLength = 14;
        auto const prefix6Prefix = "P6"s;
        auto const prefix6Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix6MaxMsgLength = 14;
        auto const rsa11Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa11PublicKey{
            {0xa8, 0xc7, 0x5e, 0x5a, 0xe9, 0xc7, 0xcb, 0xbc, 0x9c, 0x92, 0xb7,
             0xb8, 0x76, 0x67, 0x90, 0xc2, 0x53, 0xa9, 0x3a, 0x4b, 0x2c, 0xab,
             0xdb, 0x80, 0x6e, 0xec, 0x50, 0xbe, 0x9e, 0x5e, 0x96, 0x64, 0x8f,
             0xdf, 0x93, 0xb2, 0xb0, 0xc0, 0xb9, 0x7d, 0xc6, 0xc9, 0x75, 0x6b,
             0x73, 0xb1, 0xd6, 0x0b, 0xe5, 0xbb, 0x2a, 0xf5, 0xdc, 0xc0, 0xd5,
             0x09, 0x95, 0xd3, 0xf5, 0xcf, 0x82, 0xb9, 0x43, 0x93, 0xdf, 0x5a,
             0xd4, 0x4f, 0xa0, 0x60, 0x20, 0x41, 0x01, 0xb0, 0x8f, 0x2a, 0x58,
             0xd5, 0x05, 0xa1, 0x71, 0x14, 0x29, 0x91, 0xd6, 0x79, 0x5a, 0xb3,
             0x3b, 0xbe, 0x29, 0x3c, 0x68, 0x87, 0x48, 0x94, 0xb7, 0xb3, 0x29,
             0xd9, 0xff, 0xeb, 0x06, 0xfd, 0x1d, 0xcf, 0x3e, 0x7c, 0x14, 0x95,
             0xfa, 0xa3, 0xc0, 0x25, 0x46, 0xa4, 0xd3, 0x2d, 0xb5, 0x5f, 0x6b,
             0x86, 0x18, 0xb4, 0x2f, 0x7b, 0x07, 0x76, 0xf9, 0xf8, 0x6d, 0x57,
             0x62, 0x41, 0x79, 0x30, 0x3c, 0x81, 0x6e, 0x8a, 0xda, 0x87, 0x6e,
             0x1d, 0x64, 0x6d, 0x39, 0x40, 0xd5, 0x5a, 0xb2, 0x2d, 0xba, 0xb8,
             0x7a, 0x3b, 0x60, 0xd6, 0x96, 0x55, 0xfe, 0x1e, 0x71, 0x09, 0x33,
             0xad, 0x05, 0xb2, 0x73, 0xd2, 0x2b, 0xf1, 0x26, 0x06, 0xd9, 0x15,
             0xfc, 0x48, 0x36, 0xa4, 0xa2, 0x25, 0x90, 0x96, 0x9c, 0x3a, 0x6a,
             0x0a, 0xd8, 0x9b, 0x4f, 0xc6, 0x1a, 0xef, 0x18, 0xe9, 0x34, 0x0f,
             0x85, 0x06, 0xbc, 0xc0, 0xeb, 0x4d, 0x3b, 0x6c, 0x7e, 0xa8, 0x54,
             0x01, 0x03, 0x0c, 0x5c, 0x24, 0x58, 0x61, 0xcd, 0xf1, 0x31, 0x88,
             0x5e, 0x00, 0x15, 0x1e, 0x9a, 0x81, 0x99, 0x0b, 0x1a, 0x33, 0xc5,
             0xa6, 0x6c, 0xb4, 0xfb, 0x4e, 0x84, 0x94, 0x9c, 0x7e, 0x2b, 0x00,
             0x4d, 0x5c, 0xcf, 0xc2, 0xa6, 0xa5, 0x36, 0xc6, 0xee, 0x72, 0x8e,
             0x1e, 0x18, 0xaf}};
        std::array<std::uint8_t, 256> const rsa11Sig{
            {0x35, 0xa6, 0x29, 0x12, 0xab, 0x15, 0xce, 0x7a, 0xf3, 0x97, 0xec,
             0x74, 0x3e, 0x02, 0xd5, 0x4f, 0x1a, 0x7e, 0x81, 0x5a, 0xaa, 0xc2,
             0xfd, 0xe3, 0x3f, 0x41, 0xae, 0x36, 0x2d, 0xe7, 0x5f, 0x53, 0xb2,
             0xca, 0x7a, 0x17, 0x26, 0x5d, 0xb7, 0xef, 0xc1, 0x02, 0x3d, 0x53,
             0xce, 0x0e, 0x0b, 0x5e, 0xa8, 0xe1, 0xb2, 0x49, 0x19, 0x54, 0x9e,
             0x3c, 0x81, 0xfe, 0x53, 0xe8, 0x7f, 0xd2, 0xb3, 0xd3, 0x2d, 0x9e,
             0xec, 0xc0, 0xc4, 0xc4, 0x14, 0xf3, 0x9e, 0xd5, 0x0d, 0xc1, 0x2a,
             0xa3, 0xc3, 0x5b, 0xd4, 0xe6, 0x66, 0xf1, 0x44, 0xa6, 0x6b, 0x20,
             0x23, 0xe4, 0xdb, 0xaa, 0xfc, 0x83, 0xa7, 0xed, 0x15, 0x0d, 0x69,
             0x47, 0xa8, 0x0b, 0xdd, 0xda, 0x23, 0x46, 0xe5, 0x8f, 0x9b, 0x98,
             0xdb, 0x23, 0xca, 0x59, 0x9b, 0xe9, 0x5c, 0x88, 0x8c, 0x15, 0x75,
             0x3a, 0x78, 0xa8, 0xce, 0x75, 0x6f, 0x7d, 0x64, 0x77, 0x6f, 0x78,
             0x4a, 0x13, 0x77, 0x65, 0xbd, 0x60, 0xa7, 0x01, 0xc9, 0xda, 0xcc,
             0x53, 0xe0, 0x4b, 0x1c, 0x42, 0xf9, 0x08, 0x72, 0x8f, 0x41, 0x2b,
             0xec, 0x5f, 0x2a, 0x1f, 0x99, 0x37, 0x64, 0x5c, 0xdc, 0x9a, 0x1e,
             0x42, 0xad, 0x11, 0xb2, 0xb7, 0xcf, 0x26, 0xae, 0x6a, 0x25, 0x64,
             0x9e, 0x3a, 0xf4, 0x42, 0xc5, 0x16, 0x97, 0xb6, 0xcc, 0x9c, 0xc7,
             0x72, 0xd8, 0x64, 0x75, 0x1d, 0x8d, 0x6b, 0x11, 0x36, 0x14, 0x33,
             0xb9, 0x41, 0xae, 0x21, 0xf9, 0xf6, 0xc3, 0x30, 0xdc, 0x05, 0x12,
             0xf6, 0x63, 0x52, 0xbf, 0xca, 0x68, 0x43, 0x9e, 0x75, 0xd2, 0x3f,
             0x15, 0x64, 0x89, 0x7c, 0xc2, 0xa8, 0x59, 0xce, 0xc3, 0xa2, 0x0a,
             0x07, 0xa3, 0x8e, 0x8d, 0xff, 0xb4, 0xdf, 0xc1, 0x60, 0x2d, 0x9f,
             0x24, 0x05, 0x7d, 0x69, 0x43, 0xf0, 0x6d, 0xd6, 0x07, 0x68, 0x52,
             0xf1, 0xdb, 0xd0}};
        auto const rsa13Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa13PublicKey{
            {0xa5, 0x6c, 0x6d, 0x89, 0xc2, 0xbd, 0x2a, 0x99, 0x3f, 0xd0, 0x75,
             0x47, 0xc8, 0xa6, 0x47, 0x1a, 0x64, 0xff, 0x2e, 0x22, 0x3a, 0x4d,
             0xfb, 0x10, 0x3c, 0x24, 0xdb, 0x1d, 0x2b, 0x62, 0x0e, 0xf0, 0xf1,
             0x37, 0x5e, 0x1a, 0x3d, 0x5c, 0x78, 0xe7, 0x4e, 0x6b, 0x1e, 0xf8,
             0xf8, 0x3d, 0x42, 0x6b, 0xf0, 0xb8, 0x34, 0xcb, 0x15, 0x43, 0x86,
             0xe6, 0xaf, 0x86, 0x90, 0x9c, 0xd2, 0x73, 0x65, 0x27, 0xed, 0x8e,
             0xf6, 0xa0, 0xb8, 0xcc, 0xc6, 0x03, 0xf9, 0xab, 0x6c, 0xd0, 0x8c,
             0x6e, 0xfc, 0xa4, 0x05, 0x78, 0x82, 0x2f, 0x80, 0xcc, 0x8e, 0xb8,
             0x1a, 0x95, 0x5d, 0x1b, 0xf8, 0xc9, 0x4f, 0x62, 0x93, 0x55, 0x03,
             0x1b, 0x77, 0xc6, 0x87, 0x1d, 0x00, 0xf6, 0x94, 0x3e, 0x0c, 0x1b,
             0x93, 0x67, 0x80, 0x98, 0x7e, 0x5f, 0x96, 0xda, 0x65, 0xef, 0x2f,
             0xa6, 0x7f, 0xdf, 0xa9, 0x03, 0xfa, 0x57, 0x7c, 0xe8, 0xeb, 0xb9,
             0x81, 0xd1, 0x66, 0x00, 0x0e, 0x62, 0xbd, 0x65, 0xc5, 0x75, 0x3a,
             0xf2, 0x2c, 0x05, 0x71, 0x67, 0x68, 0x18, 0xbe, 0xe5, 0xcb, 0xf1,
             0xbc, 0x26, 0x92, 0xb3, 0x8a, 0x63, 0x1e, 0x4b, 0x41, 0x30, 0xbb,
             0x6c, 0x9e, 0x30, 0x29, 0xc7, 0x3a, 0xe4, 0x2b, 0x8a, 0x6c, 0xd6,
             0xac, 0x0b, 0x80, 0x83, 0x9c, 0x27, 0x28, 0xd5, 0x1a, 0x05, 0xa8,
             0x2e, 0x0c, 0x12, 0x09, 0xac, 0x4d, 0x45, 0x39, 0x55, 0xf0, 0x04,
             0xf3, 0xed, 0x62, 0x9b, 0x34, 0x82, 0xed, 0xae, 0xe5, 0x8f, 0x24,
             0xcd, 0x14, 0x33, 0x07, 0x15, 0x4a, 0x26, 0x5e, 0x03, 0x13, 0x66,
             0x8f, 0x39, 0xfb, 0xf7, 0xce, 0x9b, 0x8f, 0x58, 0x23, 0xc5, 0x9c,
             0xa7, 0x42, 0x26, 0x68, 0x3a, 0x53, 0x5e, 0x0e, 0xcf, 0xef, 0x94,
             0x1a, 0x6a, 0xf2, 0x0e, 0x66, 0x34, 0x02, 0xf1, 0x39, 0xc9, 0x9f,
             0xa7, 0x3f, 0xe3}};
        std::array<std::uint8_t, 256> const rsa13Sig{
            {0x3a, 0xc0, 0xc1, 0xfc, 0xf5, 0xe5, 0x38, 0xa3, 0xc1, 0x1c, 0xf6,
             0xde, 0x93, 0xe0, 0x68, 0x46, 0x7f, 0x89, 0xe0, 0x86, 0xa5, 0x7a,
             0x50, 0x05, 0xcd, 0xb2, 0x1f, 0x9e, 0x6d, 0x97, 0x1e, 0xe0, 0xd9,
             0xf2, 0xbe, 0x04, 0x71, 0xad, 0xd1, 0xfe, 0x59, 0x2b, 0xa5, 0xb3,
             0x9b, 0x30, 0x40, 0xd7, 0xa8, 0x39, 0xdc, 0x2f, 0x0d, 0xf2, 0xcc,
             0xa5, 0x32, 0x7c, 0x81, 0x98, 0x62, 0xe5, 0x2e, 0xac, 0xb8, 0x1e,
             0x1d, 0x2a, 0x52, 0xac, 0x6c, 0x8f, 0xeb, 0x98, 0xa3, 0x43, 0x16,
             0x47, 0xcc, 0x4c, 0x40, 0x7d, 0x7f, 0xbe, 0x31, 0xae, 0xfd, 0xec,
             0x31, 0xf1, 0x43, 0x6b, 0x31, 0xb8, 0xf0, 0xa9, 0x02, 0x1b, 0x1c,
             0xf9, 0xca, 0xe5, 0x9c, 0xf0, 0xf2, 0x2b, 0x4a, 0x23, 0x8a, 0xcf,
             0xe0, 0xab, 0x16, 0x53, 0x90, 0x0e, 0xa6, 0x47, 0xd2, 0x2e, 0xa0,
             0x04, 0xdb, 0xae, 0x11, 0x04, 0x75, 0x6b, 0x91, 0x71, 0x06, 0xdd,
             0xe0, 0x8b, 0x20, 0xe1, 0xdc, 0xbb, 0xcf, 0xc2, 0x50, 0xc4, 0x13,
             0xf7, 0xaa, 0x09, 0x63, 0x35, 0xb3, 0x1c, 0x67, 0xcf, 0x30, 0xb5,
             0x0e, 0xbe, 0x78, 0x93, 0x55, 0x25, 0xbf, 0x72, 0x9f, 0x32, 0x4f,
             0xa2, 0x17, 0x30, 0x2e, 0x55, 0x90, 0x06, 0x08, 0x39, 0x34, 0x0d,
             0xd0, 0x2a, 0xe3, 0xeb, 0xba, 0x29, 0x15, 0x92, 0x58, 0x75, 0xb5,
             0x8c, 0x72, 0x99, 0xf5, 0xe8, 0x1c, 0x3e, 0x12, 0x57, 0x1a, 0x4e,
             0xfd, 0xfc, 0xfc, 0x53, 0x04, 0x9f, 0x85, 0x34, 0xd0, 0xa8, 0x67,
             0x24, 0x30, 0x45, 0xea, 0x32, 0x06, 0x6a, 0x52, 0x22, 0x03, 0x4b,
             0x9b, 0xd0, 0x3b, 0x0f, 0x47, 0x29, 0xd2, 0xc8, 0x6e, 0x6d, 0x9d,
             0x1b, 0x06, 0xda, 0x8d, 0x9f, 0x29, 0xcb, 0x03, 0xbe, 0xf5, 0x44,
             0xb8, 0x18, 0xe3, 0x07, 0x3d, 0x8f, 0xa8, 0xad, 0x94, 0x88, 0xab,
             0x4d, 0xee, 0xa4}};
        auto const thresh12Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim14CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim14Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim14CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa15CondConditionFingerprint =
            "\x55\x6b\x6d\xe3\x00\xd4\xf3\x7e\x75\x3a\x68\xfc\x25\xdf\xf2"
            "\xf7\x18\x54\xa5\x55\x0c\xa5\xa9\x65\xbf\x66\x9e\x4e\x49\x56"
            "\x1e\xf1"s;
        Condition const Rsa15Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa15CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed16CondConditionFingerprint =
            "\xe4\x66\x69\x86\x87\x57\x0e\xac\xf1\xfd\x06\x81\x48\x90\x82"
            "\x42\x48\x50\x75\x8e\xd4\x2d\xf3\x02\x37\x89\x28\xc5\x68\xd7"
            "\xa0\x11"s;
        Condition const Ed16Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed16CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const thresh10Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim17CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim17Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim17CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa18CondConditionFingerprint =
            "\x9d\xbe\x65\xf4\xae\x81\x90\x79\x09\x18\xa2\x66\x12\x9c\x10"
            "\x94\x66\x21\x94\x70\x60\x20\x4a\x3d\x5f\xb3\x62\xb6\x06\x46"
            "\x37\xfe"s;
        Condition const Rsa18Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa18CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed19CondConditionFingerprint =
            "\xe5\x88\xb7\x6e\xec\x2d\xaf\x47\xc7\xa2\xf4\x6e\xbf\x7f\x5e"
            "\x46\xd7\xfa\x33\x2c\x0a\x7e\x86\x1d\x8c\x38\xa8\x93\x52\xe8"
            "\x97\xe9"s;
        Condition const Ed19Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed19CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Thresh20CondConditionFingerprint =
            "\x26\x8c\x0c\x19\xbd\x11\x1f\x7a\xc4\x25\xcb\x7b\xa3\x1c\xa9"
            "\x3e\xc0\x93\x28\xab\x94\x04\x5f\xee\x7e\x53\xb3\xcd\xda\x51"
            "\x06\x40"s;
        Condition const Thresh20Cond{
            Type::thresholdSha256,
            135168,
            makeSlice(Thresh20CondConditionFingerprint),
            std::bitset<5>{25}};
        auto const thresh0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim25CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim25Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim25CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa26CondConditionFingerprint =
            "\xd6\x40\x0d\x21\x44\x8a\xd4\x5a\xe6\x10\x3f\xd4\x3a\x14\x5a"
            "\x5b\x87\x86\x20\x3c\x43\x20\x9d\x9d\x0c\x75\x57\x80\x7d\xda"
            "\x9d\x06"s;
        Condition const Rsa26Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa26CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed27CondConditionFingerprint =
            "\x6a\x26\x73\x6f\xc3\xbf\x25\x73\x8e\x3b\x27\x79\x47\xa5\x37"
            "\x7c\x78\xa0\x72\xd8\x77\x91\xfc\x45\x87\x7f\x11\x57\xfe\x94"
            "\x57\x45"s;
        Condition const Ed27Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed27CondConditionFingerprint),
                                 std::bitset<5>{0}};

        auto rsa2 = std::make_unique<RsaSha256>(
            makeSlice(rsa2PublicKey), makeSlice(rsa2Sig));
        std::vector<std::unique_ptr<Fulfillment>> thresh1Subfulfillments;
        thresh1Subfulfillments.emplace_back(std::move(rsa2));
        std::vector<Condition> thresh1Subconditions{
            {Preim3Cond, Rsa4Cond, Ed5Cond}};
        auto thresh1 = std::make_unique<ThresholdSha256>(
            std::move(thresh1Subfulfillments), std::move(thresh1Subconditions));
        auto rsa9 = std::make_unique<RsaSha256>(
            makeSlice(rsa9PublicKey), makeSlice(rsa9Sig));
        auto prefix8 = std::make_unique<PrefixSha256>(
            makeSlice(prefix8Prefix), prefix8MaxMsgLength, std::move(rsa9));
        auto prefix7 = std::make_unique<PrefixSha256>(
            makeSlice(prefix7Prefix), prefix7MaxMsgLength, std::move(prefix8));
        auto prefix6 = std::make_unique<PrefixSha256>(
            makeSlice(prefix6Prefix), prefix6MaxMsgLength, std::move(prefix7));
        auto rsa11 = std::make_unique<RsaSha256>(
            makeSlice(rsa11PublicKey), makeSlice(rsa11Sig));
        auto rsa13 = std::make_unique<RsaSha256>(
            makeSlice(rsa13PublicKey), makeSlice(rsa13Sig));
        std::vector<std::unique_ptr<Fulfillment>> thresh12Subfulfillments;
        thresh12Subfulfillments.emplace_back(std::move(rsa13));
        std::vector<Condition> thresh12Subconditions{
            {Preim14Cond, Rsa15Cond, Ed16Cond}};
        auto thresh12 = std::make_unique<ThresholdSha256>(
            std::move(thresh12Subfulfillments),
            std::move(thresh12Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh10Subfulfillments;
        thresh10Subfulfillments.emplace_back(std::move(rsa11));
        thresh10Subfulfillments.emplace_back(std::move(thresh12));
        std::vector<Condition> thresh10Subconditions{
            {Preim17Cond, Rsa18Cond, Ed19Cond, Thresh20Cond}};
        auto thresh10 = std::make_unique<ThresholdSha256>(
            std::move(thresh10Subfulfillments),
            std::move(thresh10Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh0Subfulfillments;
        thresh0Subfulfillments.emplace_back(std::move(thresh1));
        thresh0Subfulfillments.emplace_back(std::move(prefix6));
        thresh0Subfulfillments.emplace_back(std::move(thresh10));
        std::vector<Condition> thresh0Subconditions{
            {Preim25Cond, Rsa26Cond, Ed27Cond}};
        ThresholdSha256 const thresh0(
            std::move(thresh0Subfulfillments), std::move(thresh0Subconditions));
        {
            auto const thresh0EncodedFulfillment =
                "\xa2\x82\x0a\x93\xa0\x82\x0a\x14\xa1\x82\x02\x35\x80\x02\x50"
                "\x36\x81\x01\x0e\xa2\x82\x02\x2a\xa1\x82\x02\x26\x80\x02\x50"
                "\x37\x81\x01\x0e\xa2\x82\x02\x1b\xa1\x82\x02\x17\x80\x02\x50"
                "\x38\x81\x01\x0e\xa2\x82\x02\x0c\xa3\x82\x02\x08\x80\x82\x01"
                "\x00\xb6\x7b\xe2\x98\x9f\xff\x6c\x37\xd0\xb6\x64\x19\xfb\xa0"
                "\x21\x18\xe2\xc0\xd1\x92\xbd\x04\xa6\xd2\xb4\x7e\xc6\x6a\x1a"
                "\x34\x20\x7b\xfe\x84\xeb\xe8\xc1\x6f\xfd\xdc\x0a\xfe\x60\x55"
                "\xb6\xfc\x86\x5a\x21\xbf\xf1\x39\xfa\xec\x42\xca\x57\xb3\x3e"
                "\x3f\xe6\x26\x5a\xb7\x4a\x5f\xbb\xb1\xf5\x91\x85\x92\x3e\x6a"
                "\x18\x48\x4d\x9e\xdd\x08\x25\xa3\x3b\x3d\x75\x9a\xbe\xee\x0d"
                "\x6e\xd2\x5d\xe2\xbd\xed\x45\x60\xef\xa0\x37\xfd\xbb\xcf\x30"
                "\x97\xf1\x5b\xc8\x9c\x29\x33\x67\x3e\x23\x33\x7f\x36\xd4\x75"
                "\x8b\xa1\xcf\x9e\xe6\xc5\x63\x63\xb0\x3f\xa0\xc2\xa2\x10\xc9"
                "\xb2\x6b\xaa\x67\xc9\xf5\xb8\xbf\x5b\x97\xe5\x29\xf2\xbb\xc7"
                "\x22\x0f\x1f\xc1\xf6\xca\x4a\x8a\x46\x89\xa0\xca\x4e\x49\x9d"
                "\xfc\x23\xd3\xb4\xdb\xc6\x84\x45\xbd\x9f\x10\x86\xe2\xf0\x47"
                "\x7b\x75\xbf\x25\x99\x02\x2c\xdb\x6b\xd6\x2b\x67\x0d\xcd\x46"
                "\x63\xbd\xce\x1c\xc5\x56\x63\x58\x5b\xc8\xb2\x58\x42\xf6\xaf"
                "\xce\x47\xb2\xa9\x2a\x71\x8b\x82\xf4\x72\xff\xef\xe7\xc1\x70"
                "\x12\xfa\xb8\xad\xb2\xfe\xa9\x14\xe7\xc2\xec\x12\xbf\x29\x5a"
                "\x65\x91\x74\x82\xd3\x77\x1f\x14\xbf\x5f\x41\x11\x6c\x7c\x22"
                "\x70\x65\x81\x82\x01\x00\x16\x84\xf9\x95\x77\xd4\x1c\x73\x07"
                "\x88\xb2\x61\x29\x27\x84\x76\xbc\x3e\x97\xe3\x73\x4a\xf9\xfe"
                "\xcc\xa7\xc1\xe0\xc9\xe9\x6c\x4c\xf3\xab\x2b\x06\x68\xe5\x17"
                "\x24\x01\x62\xa8\x93\x0c\x73\xfd\x30\x01\x4e\x4b\x6f\xdb\xa9"
                "\x9b\x4d\x9d\x45\x3a\x5f\x0a\x76\x15\xf9\xb5\x8f\xe5\x6c\x43"
                "\xdb\x86\xee\x4b\x67\x6a\x79\x93\xb0\xd4\x3d\x87\x80\x29\x89"
                "\xb7\xc5\x52\xfd\x44\x1e\x3b\x1a\x0b\x13\xbc\x90\x19\xc4\x44"
                "\x3f\x9c\xab\x86\x9a\xa9\xd9\xc8\x3b\x3b\xbd\x9a\x0f\xf0\xe9"
                "\x39\xdf\x74\x07\x6f\xf5\x9a\x34\x0d\x64\x94\xa8\x94\xfb\x25"
                "\x6a\xdc\x27\x1b\x97\xbb\x60\x36\xae\xd4\x34\x0b\xc2\xf1\x47"
                "\x7d\x90\xd8\xf8\x4a\x15\xac\xae\x89\xe7\xb5\xd1\x2c\xff\x48"
                "\x21\xb0\x8d\xc4\x9f\x83\xb3\x83\xaa\x87\x69\x6f\x45\x5b\x69"
                "\x77\xcb\xd9\x67\xee\x7d\x8b\x70\xe1\xd7\xbb\xdd\x5f\x23\xd4"
                "\x2b\x33\x2c\x6c\x6e\x0b\x51\x97\x77\xc0\x74\x4e\xce\xbb\x79"
                "\xf5\xa2\x87\x7c\x32\x1f\xd9\xd9\x32\x87\x69\xd2\xf6\xfa\x17"
                "\x5d\xbe\x62\x3a\x7e\x68\xca\x0d\x85\x65\xb6\xe2\x19\x40\x55"
                "\xd1\x5f\x6f\xef\xf1\xb2\xae\x73\xe9\x59\x7e\x19\xa7\x73\xaa"
                "\x1e\x2e\xca\x82\x59\xfb\x51\xa2\x82\x02\x8b\xa0\x82\x02\x0c"
                "\xa3\x82\x02\x08\x80\x82\x01\x00\xba\x2c\x3b\x50\xb6\xbf\xf9"
                "\x0f\x1d\xd7\x32\x4c\x01\x5f\xff\x2f\x2a\xf6\x33\xd0\xfb\xea"
                "\x1f\xa4\xf2\x2d\x22\x8a\x19\x95\xa9\x17\xb7\x4f\x17\xcf\x55"
                "\xcd\x1a\x3a\x5f\x07\x73\xcc\xaa\x21\x70\x64\xb3\xa0\xf4\xb7"
                "\x30\xa3\x82\x37\x93\xc6\x59\xde\x1b\xa1\x16\x90\x5a\x1a\xf6"
                "\x73\xab\x92\xc8\x2f\xf4\x6f\x5c\xf2\x22\x1d\x30\xf8\x03\xd8"
                "\x9b\x5f\x73\x72\x8e\x5f\xd5\x37\x4b\x43\xda\xfe\x84\x21\x67"
                "\xe8\xe3\xd7\x91\x3f\x24\x1d\xfb\x1f\x12\x6e\xcb\xfc\xb7\x5b"
                "\x0a\x35\x73\x3b\xce\x44\x34\x8e\xcd\x53\xa4\xcf\xa7\x63\x73"
                "\xcd\x31\x0f\xe0\x75\x8d\xe4\xa9\xdc\xfe\xf0\xc9\x3d\x26\xaf"
                "\xbf\x7b\x0f\x0e\x17\xb9\xd0\x4a\x32\x80\x64\x6b\x54\x73\x5a"
                "\x50\xc7\x31\x59\xf9\x73\x72\xa5\x79\xba\xdb\xa1\x14\x8d\x77"
                "\x67\x3e\xc0\x5b\xec\x6f\x0b\xf7\xc5\xee\x5a\xa6\x8d\x49\x63"
                "\x81\xbb\xd1\xf9\x9e\xbb\xed\xb2\xa9\x18\x60\xa7\xee\xeb\x30"
                "\xa1\x92\x93\xe8\xd8\x34\x9e\xac\xd6\x23\xfc\x7f\xcb\xe7\xfe"
                "\xa7\xe6\x42\xac\x77\x11\xc0\x67\x77\xd1\xaa\x5e\xed\x3b\xd5"
                "\xa5\x8d\x34\x7c\xd9\x57\x44\xa7\xc5\x44\x2e\x1e\xe7\x63\xd8"
                "\x53\x1b\x9a\xd9\x67\x02\x13\x32\x61\x81\x82\x01\x00\x76\x33"
                "\x4c\xa5\x51\xcd\xde\xea\xb5\x68\x6e\x6e\xed\xf2\x06\x4c\xf2"
                "\x9e\x60\x69\x88\xfa\xde\x6d\x36\xb8\xba\x82\xb7\xca\x0e\xcd"
                "\x15\x6b\x04\xc4\x69\xf1\x0e\xa0\xac\xe6\xd9\x8c\xfa\x9b\x50"
                "\x51\xf7\x81\x42\xb3\x10\x7c\x08\xb9\xa5\xf8\x37\x46\xe4\x8b"
                "\x25\x1a\x2a\xa2\xbc\xd9\x05\x3a\x76\xd5\xbc\x96\xf5\x05\x4c"
                "\xce\x20\xf1\x02\x93\xc4\xaf\xdb\x2d\x02\xba\xc2\x8c\xbd\x26"
                "\xe5\xbe\x12\xda\x74\x78\x0d\x01\xdd\x8a\x18\x95\xe7\xd3\xc4"
                "\xa5\xc0\x0b\xe3\x90\x45\x78\xef\xad\x35\xda\x3d\xaa\x28\x9d"
                "\x5e\xa9\x8d\x2a\x18\xc8\x0c\x81\x72\xe8\x48\x96\x4a\xd0\x96"
                "\x2d\xfc\x59\xb6\xc7\x3e\xf6\x60\xf9\xf5\xa5\x8f\x3e\x98\x14"
                "\x13\xe4\xcd\x7c\x83\xd9\xb4\xb5\xec\x31\xa3\xa0\x2d\x60\xef"
                "\x36\x18\xfa\x86\x2d\x06\x3d\x1b\x33\x3e\xe8\x75\x48\xbe\x95"
                "\xd7\xb5\xf8\xc5\xfa\x09\x52\x7b\x81\x49\xb9\xb2\x1a\x59\x52"
                "\xf6\x74\xff\x5b\xf4\xd9\xf5\xa2\x7b\x5b\x37\x08\xcb\xfe\x16"
                "\xa1\xd7\x4d\xd7\xd8\x89\xe3\xda\x18\x2c\xe9\x1d\x7d\x2b\x9b"
                "\x60\x9c\x41\x7b\x55\x49\xdd\x25\xe6\x13\x56\x41\x19\x02\x4d"
                "\xd4\x05\xaa\xb8\xbc\x08\x0c\x8d\x5c\xcc\x3a\xa2\xb9\x80\xa1"
                "\x79\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8"
                "\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc"
                "\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa3\x27\x80\x20\x3a"
                "\x82\x3b\x32\x38\xb1\x3c\x17\x87\x60\x62\xec\xcf\x91\xb0\xaf"
                "\xaa\xe5\x11\xe6\xfb\xe2\xb0\x3d\x70\x4d\x1d\xad\xd6\x7c\xee"
                "\xa6\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x90\xce\xed\x45\x98"
                "\x68\xff\x19\x2b\x27\xc1\x2a\xa2\x6e\x2e\x82\xf3\xbd\x71\x13"
                "\x61\xb0\x76\x40\x4d\x48\xea\x16\xfb\x27\x57\xdc\x81\x03\x02"
                "\x00\x00\xa2\x82\x05\x48\xa0\x82\x04\x9b\xa2\x82\x02\x8b\xa0"
                "\x82\x02\x0c\xa3\x82\x02\x08\x80\x82\x01\x00\xa5\x6c\x6d\x89"
                "\xc2\xbd\x2a\x99\x3f\xd0\x75\x47\xc8\xa6\x47\x1a\x64\xff\x2e"
                "\x22\x3a\x4d\xfb\x10\x3c\x24\xdb\x1d\x2b\x62\x0e\xf0\xf1\x37"
                "\x5e\x1a\x3d\x5c\x78\xe7\x4e\x6b\x1e\xf8\xf8\x3d\x42\x6b\xf0"
                "\xb8\x34\xcb\x15\x43\x86\xe6\xaf\x86\x90\x9c\xd2\x73\x65\x27"
                "\xed\x8e\xf6\xa0\xb8\xcc\xc6\x03\xf9\xab\x6c\xd0\x8c\x6e\xfc"
                "\xa4\x05\x78\x82\x2f\x80\xcc\x8e\xb8\x1a\x95\x5d\x1b\xf8\xc9"
                "\x4f\x62\x93\x55\x03\x1b\x77\xc6\x87\x1d\x00\xf6\x94\x3e\x0c"
                "\x1b\x93\x67\x80\x98\x7e\x5f\x96\xda\x65\xef\x2f\xa6\x7f\xdf"
                "\xa9\x03\xfa\x57\x7c\xe8\xeb\xb9\x81\xd1\x66\x00\x0e\x62\xbd"
                "\x65\xc5\x75\x3a\xf2\x2c\x05\x71\x67\x68\x18\xbe\xe5\xcb\xf1"
                "\xbc\x26\x92\xb3\x8a\x63\x1e\x4b\x41\x30\xbb\x6c\x9e\x30\x29"
                "\xc7\x3a\xe4\x2b\x8a\x6c\xd6\xac\x0b\x80\x83\x9c\x27\x28\xd5"
                "\x1a\x05\xa8\x2e\x0c\x12\x09\xac\x4d\x45\x39\x55\xf0\x04\xf3"
                "\xed\x62\x9b\x34\x82\xed\xae\xe5\x8f\x24\xcd\x14\x33\x07\x15"
                "\x4a\x26\x5e\x03\x13\x66\x8f\x39\xfb\xf7\xce\x9b\x8f\x58\x23"
                "\xc5\x9c\xa7\x42\x26\x68\x3a\x53\x5e\x0e\xcf\xef\x94\x1a\x6a"
                "\xf2\x0e\x66\x34\x02\xf1\x39\xc9\x9f\xa7\x3f\xe3\x81\x82\x01"
                "\x00\x3a\xc0\xc1\xfc\xf5\xe5\x38\xa3\xc1\x1c\xf6\xde\x93\xe0"
                "\x68\x46\x7f\x89\xe0\x86\xa5\x7a\x50\x05\xcd\xb2\x1f\x9e\x6d"
                "\x97\x1e\xe0\xd9\xf2\xbe\x04\x71\xad\xd1\xfe\x59\x2b\xa5\xb3"
                "\x9b\x30\x40\xd7\xa8\x39\xdc\x2f\x0d\xf2\xcc\xa5\x32\x7c\x81"
                "\x98\x62\xe5\x2e\xac\xb8\x1e\x1d\x2a\x52\xac\x6c\x8f\xeb\x98"
                "\xa3\x43\x16\x47\xcc\x4c\x40\x7d\x7f\xbe\x31\xae\xfd\xec\x31"
                "\xf1\x43\x6b\x31\xb8\xf0\xa9\x02\x1b\x1c\xf9\xca\xe5\x9c\xf0"
                "\xf2\x2b\x4a\x23\x8a\xcf\xe0\xab\x16\x53\x90\x0e\xa6\x47\xd2"
                "\x2e\xa0\x04\xdb\xae\x11\x04\x75\x6b\x91\x71\x06\xdd\xe0\x8b"
                "\x20\xe1\xdc\xbb\xcf\xc2\x50\xc4\x13\xf7\xaa\x09\x63\x35\xb3"
                "\x1c\x67\xcf\x30\xb5\x0e\xbe\x78\x93\x55\x25\xbf\x72\x9f\x32"
                "\x4f\xa2\x17\x30\x2e\x55\x90\x06\x08\x39\x34\x0d\xd0\x2a\xe3"
                "\xeb\xba\x29\x15\x92\x58\x75\xb5\x8c\x72\x99\xf5\xe8\x1c\x3e"
                "\x12\x57\x1a\x4e\xfd\xfc\xfc\x53\x04\x9f\x85\x34\xd0\xa8\x67"
                "\x24\x30\x45\xea\x32\x06\x6a\x52\x22\x03\x4b\x9b\xd0\x3b\x0f"
                "\x47\x29\xd2\xc8\x6e\x6d\x9d\x1b\x06\xda\x8d\x9f\x29\xcb\x03"
                "\xbe\xf5\x44\xb8\x18\xe3\x07\x3d\x8f\xa8\xad\x94\x88\xab\x4d"
                "\xee\xa4\xa1\x79\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75"
                "\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c"
                "\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa3\x27"
                "\x80\x20\x55\x6b\x6d\xe3\x00\xd4\xf3\x7e\x75\x3a\x68\xfc\x25"
                "\xdf\xf2\xf7\x18\x54\xa5\x55\x0c\xa5\xa9\x65\xbf\x66\x9e\x4e"
                "\x49\x56\x1e\xf1\x81\x03\x01\x00\x00\xa4\x27\x80\x20\xe4\x66"
                "\x69\x86\x87\x57\x0e\xac\xf1\xfd\x06\x81\x48\x90\x82\x42\x48"
                "\x50\x75\x8e\xd4\x2d\xf3\x02\x37\x89\x28\xc5\x68\xd7\xa0\x11"
                "\x81\x03\x02\x00\x00\xa3\x82\x02\x08\x80\x82\x01\x00\xa8\xc7"
                "\x5e\x5a\xe9\xc7\xcb\xbc\x9c\x92\xb7\xb8\x76\x67\x90\xc2\x53"
                "\xa9\x3a\x4b\x2c\xab\xdb\x80\x6e\xec\x50\xbe\x9e\x5e\x96\x64"
                "\x8f\xdf\x93\xb2\xb0\xc0\xb9\x7d\xc6\xc9\x75\x6b\x73\xb1\xd6"
                "\x0b\xe5\xbb\x2a\xf5\xdc\xc0\xd5\x09\x95\xd3\xf5\xcf\x82\xb9"
                "\x43\x93\xdf\x5a\xd4\x4f\xa0\x60\x20\x41\x01\xb0\x8f\x2a\x58"
                "\xd5\x05\xa1\x71\x14\x29\x91\xd6\x79\x5a\xb3\x3b\xbe\x29\x3c"
                "\x68\x87\x48\x94\xb7\xb3\x29\xd9\xff\xeb\x06\xfd\x1d\xcf\x3e"
                "\x7c\x14\x95\xfa\xa3\xc0\x25\x46\xa4\xd3\x2d\xb5\x5f\x6b\x86"
                "\x18\xb4\x2f\x7b\x07\x76\xf9\xf8\x6d\x57\x62\x41\x79\x30\x3c"
                "\x81\x6e\x8a\xda\x87\x6e\x1d\x64\x6d\x39\x40\xd5\x5a\xb2\x2d"
                "\xba\xb8\x7a\x3b\x60\xd6\x96\x55\xfe\x1e\x71\x09\x33\xad\x05"
                "\xb2\x73\xd2\x2b\xf1\x26\x06\xd9\x15\xfc\x48\x36\xa4\xa2\x25"
                "\x90\x96\x9c\x3a\x6a\x0a\xd8\x9b\x4f\xc6\x1a\xef\x18\xe9\x34"
                "\x0f\x85\x06\xbc\xc0\xeb\x4d\x3b\x6c\x7e\xa8\x54\x01\x03\x0c"
                "\x5c\x24\x58\x61\xcd\xf1\x31\x88\x5e\x00\x15\x1e\x9a\x81\x99"
                "\x0b\x1a\x33\xc5\xa6\x6c\xb4\xfb\x4e\x84\x94\x9c\x7e\x2b\x00"
                "\x4d\x5c\xcf\xc2\xa6\xa5\x36\xc6\xee\x72\x8e\x1e\x18\xaf\x81"
                "\x82\x01\x00\x35\xa6\x29\x12\xab\x15\xce\x7a\xf3\x97\xec\x74"
                "\x3e\x02\xd5\x4f\x1a\x7e\x81\x5a\xaa\xc2\xfd\xe3\x3f\x41\xae"
                "\x36\x2d\xe7\x5f\x53\xb2\xca\x7a\x17\x26\x5d\xb7\xef\xc1\x02"
                "\x3d\x53\xce\x0e\x0b\x5e\xa8\xe1\xb2\x49\x19\x54\x9e\x3c\x81"
                "\xfe\x53\xe8\x7f\xd2\xb3\xd3\x2d\x9e\xec\xc0\xc4\xc4\x14\xf3"
                "\x9e\xd5\x0d\xc1\x2a\xa3\xc3\x5b\xd4\xe6\x66\xf1\x44\xa6\x6b"
                "\x20\x23\xe4\xdb\xaa\xfc\x83\xa7\xed\x15\x0d\x69\x47\xa8\x0b"
                "\xdd\xda\x23\x46\xe5\x8f\x9b\x98\xdb\x23\xca\x59\x9b\xe9\x5c"
                "\x88\x8c\x15\x75\x3a\x78\xa8\xce\x75\x6f\x7d\x64\x77\x6f\x78"
                "\x4a\x13\x77\x65\xbd\x60\xa7\x01\xc9\xda\xcc\x53\xe0\x4b\x1c"
                "\x42\xf9\x08\x72\x8f\x41\x2b\xec\x5f\x2a\x1f\x99\x37\x64\x5c"
                "\xdc\x9a\x1e\x42\xad\x11\xb2\xb7\xcf\x26\xae\x6a\x25\x64\x9e"
                "\x3a\xf4\x42\xc5\x16\x97\xb6\xcc\x9c\xc7\x72\xd8\x64\x75\x1d"
                "\x8d\x6b\x11\x36\x14\x33\xb9\x41\xae\x21\xf9\xf6\xc3\x30\xdc"
                "\x05\x12\xf6\x63\x52\xbf\xca\x68\x43\x9e\x75\xd2\x3f\x15\x64"
                "\x89\x7c\xc2\xa8\x59\xce\xc3\xa2\x0a\x07\xa3\x8e\x8d\xff\xb4"
                "\xdf\xc1\x60\x2d\x9f\x24\x05\x7d\x69\x43\xf0\x6d\xd6\x07\x68"
                "\x52\xf1\xdb\xd0\xa1\x81\xa6\xa0\x25\x80\x20\x5d\xa0\x30\xef"
                "\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9"
                "\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01"
                "\x09\xa2\x2b\x80\x20\x26\x8c\x0c\x19\xbd\x11\x1f\x7a\xc4\x25"
                "\xcb\x7b\xa3\x1c\xa9\x3e\xc0\x93\x28\xab\x94\x04\x5f\xee\x7e"
                "\x53\xb3\xcd\xda\x51\x06\x40\x81\x03\x02\x10\x00\x82\x02\x03"
                "\x98\xa3\x27\x80\x20\x9d\xbe\x65\xf4\xae\x81\x90\x79\x09\x18"
                "\xa2\x66\x12\x9c\x10\x94\x66\x21\x94\x70\x60\x20\x4a\x3d\x5f"
                "\xb3\x62\xb6\x06\x46\x37\xfe\x81\x03\x01\x00\x00\xa4\x27\x80"
                "\x20\xe5\x88\xb7\x6e\xec\x2d\xaf\x47\xc7\xa2\xf4\x6e\xbf\x7f"
                "\x5e\x46\xd7\xfa\x33\x2c\x0a\x7e\x86\x1d\x8c\x38\xa8\x93\x52"
                "\xe8\x97\xe9\x81\x03\x02\x00\x00\xa1\x79\xa0\x25\x80\x20\x5d"
                "\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b"
                "\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb"
                "\x4e\x81\x01\x09\xa3\x27\x80\x20\xd6\x40\x0d\x21\x44\x8a\xd4"
                "\x5a\xe6\x10\x3f\xd4\x3a\x14\x5a\x5b\x87\x86\x20\x3c\x43\x20"
                "\x9d\x9d\x0c\x75\x57\x80\x7d\xda\x9d\x06\x81\x03\x01\x00\x00"
                "\xa4\x27\x80\x20\x6a\x26\x73\x6f\xc3\xbf\x25\x73\x8e\x3b\x27"
                "\x79\x47\xa5\x37\x7c\x78\xa0\x72\xd8\x77\x91\xfc\x45\x87\x7f"
                "\x11\x57\xfe\x94\x57\x45\x81\x03\x02\x00\x00"s;
            auto const thresh0EncodedCondition =
                "\xa2\x2b\x80\x20\x6b\x3f\x45\xde\xb1\xbb\xc4\xdd\xae\x15\x4d"
                "\x15\xa8\xcd\x44\x95\xe8\x44\xee\x87\x7f\x45\xe9\x23\x0f\xe0"
                "\x29\x6d\xed\x28\x22\x2b\x81\x03\x08\x60\x00\x82\x02\x03\xd8"s;
            auto const thresh0EncodedFingerprint =
                "\x30\x82\x01\x07\x80\x01\x03\xa1\x82\x01\x00\xa0\x25\x80\x20"
                "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
                "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
                "\xeb\x4e\x81\x01\x09\xa1\x2b\x80\x20\x71\xba\xd8\x49\xb9\x3a"
                "\x28\xdb\x73\x95\x73\x8f\x3b\x16\xf4\x59\xf8\x11\x03\x94\xb9"
                "\x70\x40\x95\x1e\x4d\x76\x43\x96\x5a\xf9\x62\x81\x03\x01\x0c"
                "\x30\x82\x02\x04\x10\xa2\x2b\x80\x20\x85\x86\xac\x0e\x50\x6e"
                "\xd6\xba\xa1\xe6\xb1\xaf\x03\x54\x64\x55\x8f\x25\x49\xa1\xe4"
                "\xb2\x8a\x6d\xf8\x06\x3b\x83\x26\xa2\xb7\x2d\x81\x03\x02\x10"
                "\x00\x82\x02\x03\x98\xa2\x2b\x80\x20\x8c\x16\x0a\x5e\xce\x86"
                "\x05\xcf\x08\xc5\x5e\x9b\x23\x37\x7b\xf4\x42\xf2\x78\xfc\xf0"
                "\xbb\xb9\xc2\xb0\x2d\xbb\xbf\x9b\x6d\x63\x04\x81\x03\x04\x38"
                "\x00\x82\x02\x03\x98\xa3\x27\x80\x20\xd6\x40\x0d\x21\x44\x8a"
                "\xd4\x5a\xe6\x10\x3f\xd4\x3a\x14\x5a\x5b\x87\x86\x20\x3c\x43"
                "\x20\x9d\x9d\x0c\x75\x57\x80\x7d\xda\x9d\x06\x81\x03\x01\x00"
                "\x00\xa4\x27\x80\x20\x6a\x26\x73\x6f\xc3\xbf\x25\x73\x8e\x3b"
                "\x27\x79\x47\xa5\x37\x7c\x78\xa0\x72\xd8\x77\x91\xfc\x45\x87"
                "\x7f\x11\x57\xfe\x94\x57\x45\x81\x03\x02\x00\x00"s;
            check(
                &thresh0,
                thresh0Msg,
                thresh0EncodedFulfillment,
                thresh0EncodedCondition,
                thresh0EncodedFingerprint);
        }
    }

    void
    testThresh43()
    {
        testcase("Thresh43");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * thresh0
        // ** Preim9Cond
        // ** Rsa10Cond
        // ** Ed11Cond
        // ** Prefix12Cond
        // ** Thresh16Cond
        // ** thresh1
        // *** Preim3Cond
        // *** Rsa4Cond
        // *** Ed5Cond
        // *** rsa2
        // ** preim6
        // ** rsa7
        // ** ed8

        auto const rsa2Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa2PublicKey{
            {0xba, 0x2c, 0x3b, 0x50, 0xb6, 0xbf, 0xf9, 0x0f, 0x1d, 0xd7, 0x32,
             0x4c, 0x01, 0x5f, 0xff, 0x2f, 0x2a, 0xf6, 0x33, 0xd0, 0xfb, 0xea,
             0x1f, 0xa4, 0xf2, 0x2d, 0x22, 0x8a, 0x19, 0x95, 0xa9, 0x17, 0xb7,
             0x4f, 0x17, 0xcf, 0x55, 0xcd, 0x1a, 0x3a, 0x5f, 0x07, 0x73, 0xcc,
             0xaa, 0x21, 0x70, 0x64, 0xb3, 0xa0, 0xf4, 0xb7, 0x30, 0xa3, 0x82,
             0x37, 0x93, 0xc6, 0x59, 0xde, 0x1b, 0xa1, 0x16, 0x90, 0x5a, 0x1a,
             0xf6, 0x73, 0xab, 0x92, 0xc8, 0x2f, 0xf4, 0x6f, 0x5c, 0xf2, 0x22,
             0x1d, 0x30, 0xf8, 0x03, 0xd8, 0x9b, 0x5f, 0x73, 0x72, 0x8e, 0x5f,
             0xd5, 0x37, 0x4b, 0x43, 0xda, 0xfe, 0x84, 0x21, 0x67, 0xe8, 0xe3,
             0xd7, 0x91, 0x3f, 0x24, 0x1d, 0xfb, 0x1f, 0x12, 0x6e, 0xcb, 0xfc,
             0xb7, 0x5b, 0x0a, 0x35, 0x73, 0x3b, 0xce, 0x44, 0x34, 0x8e, 0xcd,
             0x53, 0xa4, 0xcf, 0xa7, 0x63, 0x73, 0xcd, 0x31, 0x0f, 0xe0, 0x75,
             0x8d, 0xe4, 0xa9, 0xdc, 0xfe, 0xf0, 0xc9, 0x3d, 0x26, 0xaf, 0xbf,
             0x7b, 0x0f, 0x0e, 0x17, 0xb9, 0xd0, 0x4a, 0x32, 0x80, 0x64, 0x6b,
             0x54, 0x73, 0x5a, 0x50, 0xc7, 0x31, 0x59, 0xf9, 0x73, 0x72, 0xa5,
             0x79, 0xba, 0xdb, 0xa1, 0x14, 0x8d, 0x77, 0x67, 0x3e, 0xc0, 0x5b,
             0xec, 0x6f, 0x0b, 0xf7, 0xc5, 0xee, 0x5a, 0xa6, 0x8d, 0x49, 0x63,
             0x81, 0xbb, 0xd1, 0xf9, 0x9e, 0xbb, 0xed, 0xb2, 0xa9, 0x18, 0x60,
             0xa7, 0xee, 0xeb, 0x30, 0xa1, 0x92, 0x93, 0xe8, 0xd8, 0x34, 0x9e,
             0xac, 0xd6, 0x23, 0xfc, 0x7f, 0xcb, 0xe7, 0xfe, 0xa7, 0xe6, 0x42,
             0xac, 0x77, 0x11, 0xc0, 0x67, 0x77, 0xd1, 0xaa, 0x5e, 0xed, 0x3b,
             0xd5, 0xa5, 0x8d, 0x34, 0x7c, 0xd9, 0x57, 0x44, 0xa7, 0xc5, 0x44,
             0x2e, 0x1e, 0xe7, 0x63, 0xd8, 0x53, 0x1b, 0x9a, 0xd9, 0x67, 0x02,
             0x13, 0x32, 0x61}};
        std::array<std::uint8_t, 256> const rsa2Sig{
            {0x0b, 0x4c, 0x36, 0xb0, 0xcc, 0x66, 0xdc, 0x74, 0x7b, 0xb8, 0xb8,
             0x76, 0xf1, 0x87, 0x89, 0x76, 0xeb, 0xb4, 0x72, 0x6b, 0x73, 0x23,
             0x80, 0xd2, 0xe5, 0x02, 0x73, 0x7e, 0x44, 0xac, 0x6c, 0x46, 0x4b,
             0x28, 0xed, 0x8e, 0xa6, 0x93, 0xe0, 0x0b, 0x11, 0xd2, 0x36, 0x9f,
             0x88, 0x89, 0xf7, 0x98, 0x9b, 0x5a, 0xaa, 0xed, 0xcc, 0x0f, 0x3f,
             0x94, 0x70, 0x8b, 0x81, 0x93, 0xd0, 0x0b, 0x1f, 0x71, 0xce, 0xed,
             0xea, 0xf6, 0x9a, 0x9f, 0x4e, 0x77, 0x96, 0xd6, 0x33, 0xb8, 0x7e,
             0x7c, 0xde, 0x4e, 0xc6, 0x0b, 0x78, 0x79, 0xff, 0x19, 0xc4, 0x15,
             0x2b, 0x5c, 0x35, 0x38, 0xaa, 0x41, 0x40, 0xac, 0xa8, 0x10, 0x80,
             0x4a, 0x88, 0x9a, 0xd1, 0xb0, 0x9b, 0xf5, 0x99, 0xc4, 0x1e, 0xf1,
             0x3a, 0x24, 0xc9, 0x31, 0xa6, 0x6e, 0x2f, 0xb5, 0x12, 0xb6, 0xd8,
             0x30, 0xaf, 0x3c, 0x2a, 0x67, 0xd2, 0x7b, 0x73, 0x72, 0x40, 0xac,
             0x69, 0xdc, 0x18, 0x81, 0xef, 0xe4, 0x2c, 0x19, 0xb1, 0x6e, 0xb1,
             0xe9, 0xd8, 0xf9, 0x50, 0x1b, 0xad, 0xe0, 0x6d, 0xde, 0x54, 0x85,
             0xf0, 0xe1, 0xfa, 0xd4, 0xf1, 0xca, 0x11, 0x0f, 0x41, 0xae, 0x15,
             0x96, 0x8c, 0x5c, 0x5a, 0x7c, 0x13, 0xf0, 0xe8, 0x45, 0xd0, 0xce,
             0xdc, 0x03, 0x7d, 0x07, 0xdb, 0x77, 0x3f, 0x70, 0xad, 0xc1, 0xd8,
             0x74, 0x76, 0xc9, 0x6b, 0x55, 0x5e, 0xbe, 0x6f, 0x67, 0x5d, 0x22,
             0x27, 0xf9, 0xcf, 0x89, 0x52, 0x1b, 0xa2, 0x8f, 0xcc, 0x99, 0x97,
             0xd3, 0x0f, 0x8e, 0xdb, 0x05, 0xce, 0x89, 0x67, 0x42, 0x9f, 0x81,
             0x02, 0x95, 0x91, 0xf4, 0x7a, 0x3a, 0x5f, 0xbc, 0x7c, 0x12, 0xb1,
             0x95, 0xe7, 0xfb, 0x07, 0x9c, 0x69, 0xd3, 0xfe, 0x1f, 0x09, 0xc3,
             0xd9, 0xf8, 0xa7, 0x9c, 0x2f, 0xe8, 0x8c, 0xff, 0xa4, 0x4d, 0x05,
             0x65, 0x04, 0xde}};
        auto const thresh1Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim3CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim3Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim3CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa4CondConditionFingerprint =
            "\x3a\x82\x3b\x32\x38\xb1\x3c\x17\x87\x60\x62\xec\xcf\x91\xb0"
            "\xaf\xaa\xe5\x11\xe6\xfb\xe2\xb0\x3d\x70\x4d\x1d\xad\xd6\x7c"
            "\xee\xa6"s;
        Condition const Rsa4Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa4CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed5CondConditionFingerprint =
            "\x90\xce\xed\x45\x98\x68\xff\x19\x2b\x27\xc1\x2a\xa2\x6e\x2e"
            "\x82\xf3\xbd\x71\x13\x61\xb0\x76\x40\x4d\x48\xea\x16\xfb\x27"
            "\x57\xdc"s;
        Condition const Ed5Cond{Type::ed25519Sha256,
                                131072,
                                makeSlice(Ed5CondConditionFingerprint),
                                std::bitset<5>{0}};
        auto const preim6Preimage = "I am root"s;
        auto const preim6Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const rsa7Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa7PublicKey{
            {0xb5, 0x8b, 0xa2, 0xa1, 0xc0, 0x5b, 0xc3, 0xa3, 0x64, 0xe9, 0x88,
             0xe3, 0x25, 0x89, 0xa0, 0x6d, 0x73, 0x8a, 0x46, 0x09, 0x58, 0xb4,
             0x85, 0x66, 0x87, 0x56, 0x85, 0x39, 0xee, 0x6d, 0x77, 0xbb, 0x99,
             0x57, 0x90, 0x0e, 0x9c, 0x9c, 0xd5, 0x40, 0xc4, 0x8b, 0x37, 0xb1,
             0xfe, 0x78, 0xb7, 0xe1, 0xe8, 0xb7, 0x74, 0xee, 0x74, 0x9c, 0xe5,
             0xa3, 0xdd, 0xb7, 0x87, 0x77, 0xb7, 0x14, 0x08, 0x71, 0xc4, 0xec,
             0x85, 0xe2, 0xe3, 0xc1, 0x1e, 0x34, 0x14, 0x21, 0xe1, 0xac, 0xd3,
             0x20, 0x0f, 0xb8, 0x11, 0x24, 0x69, 0xa3, 0x7d, 0x98, 0x35, 0x2a,
             0xdf, 0x56, 0x7d, 0x30, 0xf7, 0x31, 0x64, 0x73, 0xcf, 0x0c, 0x9e,
             0xa6, 0x3b, 0x7d, 0x93, 0xb1, 0xc4, 0xb6, 0x78, 0x39, 0x52, 0x3b,
             0x4d, 0xb6, 0xb2, 0x55, 0x17, 0x95, 0x27, 0xbd, 0xd6, 0xc1, 0x28,
             0x7b, 0x82, 0xbb, 0xeb, 0xea, 0xec, 0x7e, 0x48, 0x35, 0xb3, 0x4b,
             0x78, 0x30, 0xc4, 0x66, 0x32, 0x39, 0x2d, 0xd6, 0x5f, 0x59, 0xeb,
             0x81, 0x64, 0x68, 0xdb, 0x94, 0xf4, 0x8e, 0x5f, 0x34, 0x4f, 0x3b,
             0x03, 0xe5, 0xa6, 0x1b, 0x30, 0x6c, 0xea, 0xe8, 0xc6, 0x36, 0xf8,
             0xee, 0x0b, 0x0f, 0xb5, 0xd2, 0xe7, 0xa4, 0x0a, 0xbc, 0xef, 0x80,
             0x7e, 0xb1, 0x9b, 0xda, 0xe6, 0x40, 0x4a, 0x3f, 0x6f, 0xd1, 0x5a,
             0x64, 0x84, 0xb2, 0x5c, 0xd2, 0xf0, 0x38, 0x7c, 0xcb, 0xd1, 0xcd,
             0xdd, 0x37, 0x3f, 0x76, 0xe7, 0x08, 0x25, 0xe5, 0xd3, 0xd9, 0xe3,
             0x21, 0x1b, 0x88, 0x41, 0x3d, 0x2d, 0x32, 0xff, 0xd3, 0xfe, 0x4d,
             0x40, 0x85, 0x1b, 0x0f, 0xd6, 0xab, 0x4e, 0xb7, 0x38, 0x68, 0xe9,
             0x67, 0xc7, 0xb5, 0xd1, 0x38, 0xdb, 0x85, 0x2e, 0x2f, 0x76, 0xea,
             0x4a, 0xce, 0xff, 0x08, 0x5e, 0x93, 0x87, 0x98, 0xf7, 0x95, 0xeb,
             0x49, 0xf6, 0x8d}};
        std::array<std::uint8_t, 256> const rsa7Sig{
            {0x64, 0x6e, 0xc4, 0xd7, 0x7a, 0xe8, 0x2f, 0xd4, 0x41, 0x83, 0x3a,
             0xe9, 0x19, 0x2d, 0x77, 0xf8, 0x30, 0x79, 0x21, 0x89, 0xd2, 0xb5,
             0xda, 0x60, 0xf3, 0x65, 0x3e, 0x35, 0xeb, 0xf9, 0x32, 0x54, 0x83,
             0xed, 0xb7, 0xa6, 0xf9, 0x78, 0x8f, 0xde, 0x5f, 0xc0, 0x96, 0x15,
             0xf3, 0xb8, 0x65, 0x00, 0xeb, 0xc6, 0x26, 0x8b, 0x86, 0xcc, 0xb4,
             0xe1, 0x07, 0x72, 0xa2, 0x36, 0x3a, 0xe0, 0xb9, 0x58, 0x2d, 0x4a,
             0xea, 0x94, 0x83, 0x44, 0x14, 0x49, 0x01, 0x8e, 0x2f, 0xe9, 0xef,
             0x88, 0x0c, 0xb0, 0x1f, 0xa3, 0xf0, 0xe7, 0xf6, 0xc8, 0x6c, 0xd9,
             0xa5, 0x83, 0xed, 0x19, 0x36, 0xbf, 0x6c, 0x0e, 0xe2, 0xb3, 0x83,
             0xb4, 0xf3, 0xef, 0x1e, 0xa8, 0x8f, 0xdf, 0x62, 0xfc, 0xdc, 0x07,
             0x1e, 0x01, 0x23, 0x97, 0xb8, 0xae, 0x77, 0xa1, 0x2a, 0xe9, 0x94,
             0x69, 0xea, 0xff, 0x75, 0x0b, 0x77, 0x47, 0x40, 0xe6, 0x23, 0x5a,
             0x6f, 0x27, 0x7c, 0xcd, 0x8b, 0x1e, 0x60, 0x83, 0x46, 0x3c, 0xdb,
             0xf9, 0x9c, 0xc3, 0xde, 0x05, 0xbf, 0xc2, 0x62, 0xbf, 0x0e, 0x04,
             0xea, 0x71, 0x9c, 0x53, 0x2e, 0x8d, 0x95, 0xdf, 0xb8, 0xbf, 0x35,
             0x22, 0x69, 0xc0, 0xad, 0x51, 0x35, 0xd2, 0xce, 0x70, 0x62, 0xca,
             0xc2, 0x5c, 0xbb, 0x9e, 0x58, 0x27, 0x99, 0x84, 0x60, 0x25, 0x6d,
             0x70, 0x57, 0xef, 0x21, 0xc7, 0x25, 0xe5, 0x58, 0xc4, 0x0c, 0x58,
             0xe8, 0x63, 0x90, 0x5b, 0x51, 0x93, 0xe6, 0xd1, 0x54, 0x97, 0xdd,
             0xff, 0xf0, 0xe8, 0xc3, 0x5c, 0x1c, 0x4e, 0xed, 0xa1, 0x56, 0xb6,
             0xa3, 0x3b, 0x98, 0x2f, 0x5c, 0x57, 0xa1, 0x02, 0x2a, 0xf4, 0xff,
             0xf1, 0x80, 0xe7, 0x0c, 0x34, 0x74, 0x8c, 0xde, 0x0e, 0x3e, 0x41,
             0x9e, 0x98, 0x54, 0x91, 0xa7, 0x37, 0x4b, 0x07, 0x63, 0x95, 0xdd,
             0x56, 0xbc, 0xda}};
        auto const ed8Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed8PublicKey{
            {0xb6, 0x55, 0xc8, 0xa4, 0x14, 0x20, 0x73, 0x44, 0x12, 0x06, 0xf6,
             0xf7, 0xd0, 0x03, 0x74, 0x53, 0xaa, 0x74, 0x6c, 0xf1, 0x84, 0x0e,
             0x86, 0x1d, 0xb1, 0x97, 0x1a, 0x04, 0x91, 0x83, 0x3b, 0x49}};
        std::array<std::uint8_t, 64> const ed8Sig{
            {0x4d, 0xf6, 0x5a, 0x0e, 0xa4, 0x6f, 0x3d, 0xa0, 0x76, 0xe4, 0x3a,
             0xea, 0x69, 0x1e, 0x3f, 0xe4, 0x45, 0x51, 0x97, 0xc8, 0x7e, 0x3c,
             0xd6, 0x34, 0xc8, 0x7f, 0xa3, 0xf9, 0xd7, 0xfe, 0x0a, 0xf4, 0x86,
             0x18, 0xc5, 0xfa, 0x1c, 0x73, 0x88, 0x37, 0x33, 0x3d, 0xd4, 0x8c,
             0x08, 0xf9, 0xa5, 0xf0, 0x83, 0x37, 0x06, 0x5b, 0xd3, 0xfc, 0x20,
             0x12, 0x42, 0x7a, 0x7a, 0xd7, 0x60, 0xc5, 0xd1, 0x0b}};
        std::array<std::uint8_t, 32> const ed8SigningKey{
            {0xc2, 0x00, 0xc6, 0x2e, 0x45, 0xde, 0xf2, 0x39, 0x81, 0x0a, 0xf8,
             0x6d, 0x53, 0x29, 0xe3, 0x1b, 0x8e, 0x57, 0xad, 0xfa, 0x29, 0x1b,
             0x07, 0x1a, 0xee, 0x34, 0xe6, 0x57, 0x5a, 0xeb, 0xf2, 0x1c}};
        (void)ed8SigningKey;
        auto const thresh0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim9CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim9Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim9CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa10CondConditionFingerprint =
            "\x3c\x73\x38\xcf\x23\xc6\x31\x53\x28\xc4\x27\xf8\x95\x87\x99"
            "\x83\x2d\x35\x3c\x03\x9b\xd1\xff\xff\x2e\x53\x20\xe9\x5e\x62"
            "\xb9\xb7"s;
        Condition const Rsa10Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa10CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed11CondConditionFingerprint =
            "\x41\x80\x08\xb2\x60\x74\x57\x6d\xac\xed\x74\x7f\x54\xdb\x96"
            "\x18\x91\x06\x0a\x95\xa1\x49\x17\xc7\x65\xe3\x94\xc8\x5e\x2c"
            "\x92\x20"s;
        Condition const Ed11Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed11CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Prefix12CondConditionFingerprint =
            "\x5b\xe6\x24\xaa\xec\xb4\xe2\x36\x30\x99\xec\x37\x3c\x81\x20"
            "\xdf\xb8\x03\x2f\x3d\x4e\x98\xc8\xde\xba\x75\x3d\xd5\x0a\x90"
            "\xeb\x58"s;
        Condition const Prefix12Cond{
            Type::prefixSha256,
            68671,
            makeSlice(Prefix12CondConditionFingerprint),
            std::bitset<5>{8}};
        auto const Thresh16CondConditionFingerprint =
            "\xd0\x45\x11\x62\xbb\x46\xc2\xd2\xb6\x39\xc9\xd0\x0d\x59\x42"
            "\x06\xa7\x7b\x38\x7d\xf3\x8f\x33\x0b\x94\x2d\x18\xee\xdc\x0e"
            "\xb2\xa6"s;
        Condition const Thresh16Cond{
            Type::thresholdSha256,
            276480,
            makeSlice(Thresh16CondConditionFingerprint),
            std::bitset<5>{25}};

        auto rsa2 = std::make_unique<RsaSha256>(
            makeSlice(rsa2PublicKey), makeSlice(rsa2Sig));
        std::vector<std::unique_ptr<Fulfillment>> thresh1Subfulfillments;
        thresh1Subfulfillments.emplace_back(std::move(rsa2));
        std::vector<Condition> thresh1Subconditions{
            {Preim3Cond, Rsa4Cond, Ed5Cond}};
        auto thresh1 = std::make_unique<ThresholdSha256>(
            std::move(thresh1Subfulfillments), std::move(thresh1Subconditions));
        auto preim6 =
            std::make_unique<PreimageSha256>(makeSlice(preim6Preimage));
        auto rsa7 = std::make_unique<RsaSha256>(
            makeSlice(rsa7PublicKey), makeSlice(rsa7Sig));
        auto ed8 = std::make_unique<Ed25519>(ed8PublicKey, ed8Sig);
        std::vector<std::unique_ptr<Fulfillment>> thresh0Subfulfillments;
        thresh0Subfulfillments.emplace_back(std::move(thresh1));
        thresh0Subfulfillments.emplace_back(std::move(preim6));
        thresh0Subfulfillments.emplace_back(std::move(rsa7));
        thresh0Subfulfillments.emplace_back(std::move(ed8));
        std::vector<Condition> thresh0Subconditions{
            {Preim9Cond, Rsa10Cond, Ed11Cond, Prefix12Cond, Thresh16Cond}};
        ThresholdSha256 const thresh0(
            std::move(thresh0Subfulfillments), std::move(thresh0Subconditions));
        {
            auto const thresh0EncodedFulfillment =
                "\xa2\x82\x05\xe8\xa0\x82\x05\x0e\xa0\x0b\x80\x09\x49\x20\x61"
                "\x6d\x20\x72\x6f\x6f\x74\xa2\x82\x02\x8b\xa0\x82\x02\x0c\xa3"
                "\x82\x02\x08\x80\x82\x01\x00\xba\x2c\x3b\x50\xb6\xbf\xf9\x0f"
                "\x1d\xd7\x32\x4c\x01\x5f\xff\x2f\x2a\xf6\x33\xd0\xfb\xea\x1f"
                "\xa4\xf2\x2d\x22\x8a\x19\x95\xa9\x17\xb7\x4f\x17\xcf\x55\xcd"
                "\x1a\x3a\x5f\x07\x73\xcc\xaa\x21\x70\x64\xb3\xa0\xf4\xb7\x30"
                "\xa3\x82\x37\x93\xc6\x59\xde\x1b\xa1\x16\x90\x5a\x1a\xf6\x73"
                "\xab\x92\xc8\x2f\xf4\x6f\x5c\xf2\x22\x1d\x30\xf8\x03\xd8\x9b"
                "\x5f\x73\x72\x8e\x5f\xd5\x37\x4b\x43\xda\xfe\x84\x21\x67\xe8"
                "\xe3\xd7\x91\x3f\x24\x1d\xfb\x1f\x12\x6e\xcb\xfc\xb7\x5b\x0a"
                "\x35\x73\x3b\xce\x44\x34\x8e\xcd\x53\xa4\xcf\xa7\x63\x73\xcd"
                "\x31\x0f\xe0\x75\x8d\xe4\xa9\xdc\xfe\xf0\xc9\x3d\x26\xaf\xbf"
                "\x7b\x0f\x0e\x17\xb9\xd0\x4a\x32\x80\x64\x6b\x54\x73\x5a\x50"
                "\xc7\x31\x59\xf9\x73\x72\xa5\x79\xba\xdb\xa1\x14\x8d\x77\x67"
                "\x3e\xc0\x5b\xec\x6f\x0b\xf7\xc5\xee\x5a\xa6\x8d\x49\x63\x81"
                "\xbb\xd1\xf9\x9e\xbb\xed\xb2\xa9\x18\x60\xa7\xee\xeb\x30\xa1"
                "\x92\x93\xe8\xd8\x34\x9e\xac\xd6\x23\xfc\x7f\xcb\xe7\xfe\xa7"
                "\xe6\x42\xac\x77\x11\xc0\x67\x77\xd1\xaa\x5e\xed\x3b\xd5\xa5"
                "\x8d\x34\x7c\xd9\x57\x44\xa7\xc5\x44\x2e\x1e\xe7\x63\xd8\x53"
                "\x1b\x9a\xd9\x67\x02\x13\x32\x61\x81\x82\x01\x00\x0b\x4c\x36"
                "\xb0\xcc\x66\xdc\x74\x7b\xb8\xb8\x76\xf1\x87\x89\x76\xeb\xb4"
                "\x72\x6b\x73\x23\x80\xd2\xe5\x02\x73\x7e\x44\xac\x6c\x46\x4b"
                "\x28\xed\x8e\xa6\x93\xe0\x0b\x11\xd2\x36\x9f\x88\x89\xf7\x98"
                "\x9b\x5a\xaa\xed\xcc\x0f\x3f\x94\x70\x8b\x81\x93\xd0\x0b\x1f"
                "\x71\xce\xed\xea\xf6\x9a\x9f\x4e\x77\x96\xd6\x33\xb8\x7e\x7c"
                "\xde\x4e\xc6\x0b\x78\x79\xff\x19\xc4\x15\x2b\x5c\x35\x38\xaa"
                "\x41\x40\xac\xa8\x10\x80\x4a\x88\x9a\xd1\xb0\x9b\xf5\x99\xc4"
                "\x1e\xf1\x3a\x24\xc9\x31\xa6\x6e\x2f\xb5\x12\xb6\xd8\x30\xaf"
                "\x3c\x2a\x67\xd2\x7b\x73\x72\x40\xac\x69\xdc\x18\x81\xef\xe4"
                "\x2c\x19\xb1\x6e\xb1\xe9\xd8\xf9\x50\x1b\xad\xe0\x6d\xde\x54"
                "\x85\xf0\xe1\xfa\xd4\xf1\xca\x11\x0f\x41\xae\x15\x96\x8c\x5c"
                "\x5a\x7c\x13\xf0\xe8\x45\xd0\xce\xdc\x03\x7d\x07\xdb\x77\x3f"
                "\x70\xad\xc1\xd8\x74\x76\xc9\x6b\x55\x5e\xbe\x6f\x67\x5d\x22"
                "\x27\xf9\xcf\x89\x52\x1b\xa2\x8f\xcc\x99\x97\xd3\x0f\x8e\xdb"
                "\x05\xce\x89\x67\x42\x9f\x81\x02\x95\x91\xf4\x7a\x3a\x5f\xbc"
                "\x7c\x12\xb1\x95\xe7\xfb\x07\x9c\x69\xd3\xfe\x1f\x09\xc3\xd9"
                "\xf8\xa7\x9c\x2f\xe8\x8c\xff\xa4\x4d\x05\x65\x04\xde\xa1\x79"
                "\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f"
                "\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd"
                "\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa3\x27\x80\x20\x3a\x82"
                "\x3b\x32\x38\xb1\x3c\x17\x87\x60\x62\xec\xcf\x91\xb0\xaf\xaa"
                "\xe5\x11\xe6\xfb\xe2\xb0\x3d\x70\x4d\x1d\xad\xd6\x7c\xee\xa6"
                "\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x90\xce\xed\x45\x98\x68"
                "\xff\x19\x2b\x27\xc1\x2a\xa2\x6e\x2e\x82\xf3\xbd\x71\x13\x61"
                "\xb0\x76\x40\x4d\x48\xea\x16\xfb\x27\x57\xdc\x81\x03\x02\x00"
                "\x00\xa3\x82\x02\x08\x80\x82\x01\x00\xb5\x8b\xa2\xa1\xc0\x5b"
                "\xc3\xa3\x64\xe9\x88\xe3\x25\x89\xa0\x6d\x73\x8a\x46\x09\x58"
                "\xb4\x85\x66\x87\x56\x85\x39\xee\x6d\x77\xbb\x99\x57\x90\x0e"
                "\x9c\x9c\xd5\x40\xc4\x8b\x37\xb1\xfe\x78\xb7\xe1\xe8\xb7\x74"
                "\xee\x74\x9c\xe5\xa3\xdd\xb7\x87\x77\xb7\x14\x08\x71\xc4\xec"
                "\x85\xe2\xe3\xc1\x1e\x34\x14\x21\xe1\xac\xd3\x20\x0f\xb8\x11"
                "\x24\x69\xa3\x7d\x98\x35\x2a\xdf\x56\x7d\x30\xf7\x31\x64\x73"
                "\xcf\x0c\x9e\xa6\x3b\x7d\x93\xb1\xc4\xb6\x78\x39\x52\x3b\x4d"
                "\xb6\xb2\x55\x17\x95\x27\xbd\xd6\xc1\x28\x7b\x82\xbb\xeb\xea"
                "\xec\x7e\x48\x35\xb3\x4b\x78\x30\xc4\x66\x32\x39\x2d\xd6\x5f"
                "\x59\xeb\x81\x64\x68\xdb\x94\xf4\x8e\x5f\x34\x4f\x3b\x03\xe5"
                "\xa6\x1b\x30\x6c\xea\xe8\xc6\x36\xf8\xee\x0b\x0f\xb5\xd2\xe7"
                "\xa4\x0a\xbc\xef\x80\x7e\xb1\x9b\xda\xe6\x40\x4a\x3f\x6f\xd1"
                "\x5a\x64\x84\xb2\x5c\xd2\xf0\x38\x7c\xcb\xd1\xcd\xdd\x37\x3f"
                "\x76\xe7\x08\x25\xe5\xd3\xd9\xe3\x21\x1b\x88\x41\x3d\x2d\x32"
                "\xff\xd3\xfe\x4d\x40\x85\x1b\x0f\xd6\xab\x4e\xb7\x38\x68\xe9"
                "\x67\xc7\xb5\xd1\x38\xdb\x85\x2e\x2f\x76\xea\x4a\xce\xff\x08"
                "\x5e\x93\x87\x98\xf7\x95\xeb\x49\xf6\x8d\x81\x82\x01\x00\x64"
                "\x6e\xc4\xd7\x7a\xe8\x2f\xd4\x41\x83\x3a\xe9\x19\x2d\x77\xf8"
                "\x30\x79\x21\x89\xd2\xb5\xda\x60\xf3\x65\x3e\x35\xeb\xf9\x32"
                "\x54\x83\xed\xb7\xa6\xf9\x78\x8f\xde\x5f\xc0\x96\x15\xf3\xb8"
                "\x65\x00\xeb\xc6\x26\x8b\x86\xcc\xb4\xe1\x07\x72\xa2\x36\x3a"
                "\xe0\xb9\x58\x2d\x4a\xea\x94\x83\x44\x14\x49\x01\x8e\x2f\xe9"
                "\xef\x88\x0c\xb0\x1f\xa3\xf0\xe7\xf6\xc8\x6c\xd9\xa5\x83\xed"
                "\x19\x36\xbf\x6c\x0e\xe2\xb3\x83\xb4\xf3\xef\x1e\xa8\x8f\xdf"
                "\x62\xfc\xdc\x07\x1e\x01\x23\x97\xb8\xae\x77\xa1\x2a\xe9\x94"
                "\x69\xea\xff\x75\x0b\x77\x47\x40\xe6\x23\x5a\x6f\x27\x7c\xcd"
                "\x8b\x1e\x60\x83\x46\x3c\xdb\xf9\x9c\xc3\xde\x05\xbf\xc2\x62"
                "\xbf\x0e\x04\xea\x71\x9c\x53\x2e\x8d\x95\xdf\xb8\xbf\x35\x22"
                "\x69\xc0\xad\x51\x35\xd2\xce\x70\x62\xca\xc2\x5c\xbb\x9e\x58"
                "\x27\x99\x84\x60\x25\x6d\x70\x57\xef\x21\xc7\x25\xe5\x58\xc4"
                "\x0c\x58\xe8\x63\x90\x5b\x51\x93\xe6\xd1\x54\x97\xdd\xff\xf0"
                "\xe8\xc3\x5c\x1c\x4e\xed\xa1\x56\xb6\xa3\x3b\x98\x2f\x5c\x57"
                "\xa1\x02\x2a\xf4\xff\xf1\x80\xe7\x0c\x34\x74\x8c\xde\x0e\x3e"
                "\x41\x9e\x98\x54\x91\xa7\x37\x4b\x07\x63\x95\xdd\x56\xbc\xda"
                "\xa4\x64\x80\x20\xb6\x55\xc8\xa4\x14\x20\x73\x44\x12\x06\xf6"
                "\xf7\xd0\x03\x74\x53\xaa\x74\x6c\xf1\x84\x0e\x86\x1d\xb1\x97"
                "\x1a\x04\x91\x83\x3b\x49\x81\x40\x4d\xf6\x5a\x0e\xa4\x6f\x3d"
                "\xa0\x76\xe4\x3a\xea\x69\x1e\x3f\xe4\x45\x51\x97\xc8\x7e\x3c"
                "\xd6\x34\xc8\x7f\xa3\xf9\xd7\xfe\x0a\xf4\x86\x18\xc5\xfa\x1c"
                "\x73\x88\x37\x33\x3d\xd4\x8c\x08\xf9\xa5\xf0\x83\x37\x06\x5b"
                "\xd3\xfc\x20\x12\x42\x7a\x7a\xd7\x60\xc5\xd1\x0b\xa1\x81\xd3"
                "\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f"
                "\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd"
                "\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa1\x2b\x80\x20\x5b\xe6"
                "\x24\xaa\xec\xb4\xe2\x36\x30\x99\xec\x37\x3c\x81\x20\xdf\xb8"
                "\x03\x2f\x3d\x4e\x98\xc8\xde\xba\x75\x3d\xd5\x0a\x90\xeb\x58"
                "\x81\x03\x01\x0c\x3f\x82\x02\x04\x10\xa2\x2b\x80\x20\xd0\x45"
                "\x11\x62\xbb\x46\xc2\xd2\xb6\x39\xc9\xd0\x0d\x59\x42\x06\xa7"
                "\x7b\x38\x7d\xf3\x8f\x33\x0b\x94\x2d\x18\xee\xdc\x0e\xb2\xa6"
                "\x81\x03\x04\x38\x00\x82\x02\x03\x98\xa3\x27\x80\x20\x3c\x73"
                "\x38\xcf\x23\xc6\x31\x53\x28\xc4\x27\xf8\x95\x87\x99\x83\x2d"
                "\x35\x3c\x03\x9b\xd1\xff\xff\x2e\x53\x20\xe9\x5e\x62\xb9\xb7"
                "\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x41\x80\x08\xb2\x60\x74"
                "\x57\x6d\xac\xed\x74\x7f\x54\xdb\x96\x18\x91\x06\x0a\x95\xa1"
                "\x49\x17\xc7\x65\xe3\x94\xc8\x5e\x2c\x92\x20\x81\x03\x02\x00"
                "\x00"s;
            auto const thresh0EncodedCondition =
                "\xa2\x2b\x80\x20\x95\x7a\x53\x6c\x12\x4e\xa5\xba\x5b\x59\x72"
                "\xbe\xa2\xf3\x8e\xfc\x00\x92\xaf\xf3\x00\x6e\xdc\xeb\x2f\xc0"
                "\xc0\xd4\xa8\x3a\x69\x67\x81\x03\x0a\x6c\x00\x82\x02\x03\xd8"s;
            auto const thresh0EncodedFingerprint =
                "\x30\x82\x01\x80\x80\x01\x04\xa1\x82\x01\x79\xa0\x25\x80\x20"
                "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
                "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
                "\xeb\x4e\x81\x01\x09\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1"
                "\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21"
                "\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa1"
                "\x2b\x80\x20\x5b\xe6\x24\xaa\xec\xb4\xe2\x36\x30\x99\xec\x37"
                "\x3c\x81\x20\xdf\xb8\x03\x2f\x3d\x4e\x98\xc8\xde\xba\x75\x3d"
                "\xd5\x0a\x90\xeb\x58\x81\x03\x01\x0c\x3f\x82\x02\x04\x10\xa2"
                "\x2b\x80\x20\x85\x86\xac\x0e\x50\x6e\xd6\xba\xa1\xe6\xb1\xaf"
                "\x03\x54\x64\x55\x8f\x25\x49\xa1\xe4\xb2\x8a\x6d\xf8\x06\x3b"
                "\x83\x26\xa2\xb7\x2d\x81\x03\x02\x10\x00\x82\x02\x03\x98\xa2"
                "\x2b\x80\x20\xd0\x45\x11\x62\xbb\x46\xc2\xd2\xb6\x39\xc9\xd0"
                "\x0d\x59\x42\x06\xa7\x7b\x38\x7d\xf3\x8f\x33\x0b\x94\x2d\x18"
                "\xee\xdc\x0e\xb2\xa6\x81\x03\x04\x38\x00\x82\x02\x03\x98\xa3"
                "\x27\x80\x20\x3c\x73\x38\xcf\x23\xc6\x31\x53\x28\xc4\x27\xf8"
                "\x95\x87\x99\x83\x2d\x35\x3c\x03\x9b\xd1\xff\xff\x2e\x53\x20"
                "\xe9\x5e\x62\xb9\xb7\x81\x03\x01\x00\x00\xa3\x27\x80\x20\x6c"
                "\x7b\xea\x83\xa1\xf4\x82\x3d\x36\xe7\x6e\xae\x1a\xbc\xa0\xba"
                "\x90\x3d\x96\xc1\xe6\xad\x3a\x47\xa5\xcb\x88\xab\x3c\x5f\xcc"
                "\xd5\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x41\x80\x08\xb2\x60"
                "\x74\x57\x6d\xac\xed\x74\x7f\x54\xdb\x96\x18\x91\x06\x0a\x95"
                "\xa1\x49\x17\xc7\x65\xe3\x94\xc8\x5e\x2c\x92\x20\x81\x03\x02"
                "\x00\x00\xa4\x27\x80\x20\xf1\x68\x96\xa6\x2e\xef\x7f\x47\x06"
                "\x51\x4c\xc6\x7e\x24\xf7\x29\x84\x9c\xd6\xb0\xd9\x4b\xd9\x0f"
                "\xc9\x34\x01\x9d\x92\xeb\xbc\x0a\x81\x03\x02\x00\x00"s;
            check(
                &thresh0,
                thresh0Msg,
                thresh0EncodedFulfillment,
                thresh0EncodedCondition,
                thresh0EncodedFingerprint);
        }
    }

    void
    testThresh44()
    {
        testcase("Thresh44");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * thresh0
        // ** Preim17Cond
        // ** Rsa18Cond
        // ** Ed19Cond
        // ** thresh1
        // *** Preim8Cond
        // *** Rsa9Cond
        // *** Ed10Cond
        // *** rsa2
        // *** thresh3
        // **** Preim5Cond
        // **** Rsa6Cond
        // **** Ed7Cond
        // **** rsa4
        // ** prefix11
        // *** prefix12
        // **** thresh13
        // ***** rsa14
        // ** thresh15
        // *** rsa16

        auto const rsa2Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa2PublicKey{
            {0xba, 0x2c, 0x3b, 0x50, 0xb6, 0xbf, 0xf9, 0x0f, 0x1d, 0xd7, 0x32,
             0x4c, 0x01, 0x5f, 0xff, 0x2f, 0x2a, 0xf6, 0x33, 0xd0, 0xfb, 0xea,
             0x1f, 0xa4, 0xf2, 0x2d, 0x22, 0x8a, 0x19, 0x95, 0xa9, 0x17, 0xb7,
             0x4f, 0x17, 0xcf, 0x55, 0xcd, 0x1a, 0x3a, 0x5f, 0x07, 0x73, 0xcc,
             0xaa, 0x21, 0x70, 0x64, 0xb3, 0xa0, 0xf4, 0xb7, 0x30, 0xa3, 0x82,
             0x37, 0x93, 0xc6, 0x59, 0xde, 0x1b, 0xa1, 0x16, 0x90, 0x5a, 0x1a,
             0xf6, 0x73, 0xab, 0x92, 0xc8, 0x2f, 0xf4, 0x6f, 0x5c, 0xf2, 0x22,
             0x1d, 0x30, 0xf8, 0x03, 0xd8, 0x9b, 0x5f, 0x73, 0x72, 0x8e, 0x5f,
             0xd5, 0x37, 0x4b, 0x43, 0xda, 0xfe, 0x84, 0x21, 0x67, 0xe8, 0xe3,
             0xd7, 0x91, 0x3f, 0x24, 0x1d, 0xfb, 0x1f, 0x12, 0x6e, 0xcb, 0xfc,
             0xb7, 0x5b, 0x0a, 0x35, 0x73, 0x3b, 0xce, 0x44, 0x34, 0x8e, 0xcd,
             0x53, 0xa4, 0xcf, 0xa7, 0x63, 0x73, 0xcd, 0x31, 0x0f, 0xe0, 0x75,
             0x8d, 0xe4, 0xa9, 0xdc, 0xfe, 0xf0, 0xc9, 0x3d, 0x26, 0xaf, 0xbf,
             0x7b, 0x0f, 0x0e, 0x17, 0xb9, 0xd0, 0x4a, 0x32, 0x80, 0x64, 0x6b,
             0x54, 0x73, 0x5a, 0x50, 0xc7, 0x31, 0x59, 0xf9, 0x73, 0x72, 0xa5,
             0x79, 0xba, 0xdb, 0xa1, 0x14, 0x8d, 0x77, 0x67, 0x3e, 0xc0, 0x5b,
             0xec, 0x6f, 0x0b, 0xf7, 0xc5, 0xee, 0x5a, 0xa6, 0x8d, 0x49, 0x63,
             0x81, 0xbb, 0xd1, 0xf9, 0x9e, 0xbb, 0xed, 0xb2, 0xa9, 0x18, 0x60,
             0xa7, 0xee, 0xeb, 0x30, 0xa1, 0x92, 0x93, 0xe8, 0xd8, 0x34, 0x9e,
             0xac, 0xd6, 0x23, 0xfc, 0x7f, 0xcb, 0xe7, 0xfe, 0xa7, 0xe6, 0x42,
             0xac, 0x77, 0x11, 0xc0, 0x67, 0x77, 0xd1, 0xaa, 0x5e, 0xed, 0x3b,
             0xd5, 0xa5, 0x8d, 0x34, 0x7c, 0xd9, 0x57, 0x44, 0xa7, 0xc5, 0x44,
             0x2e, 0x1e, 0xe7, 0x63, 0xd8, 0x53, 0x1b, 0x9a, 0xd9, 0x67, 0x02,
             0x13, 0x32, 0x61}};
        std::array<std::uint8_t, 256> const rsa2Sig{
            {0x31, 0x80, 0x96, 0x29, 0xda, 0x4d, 0xb8, 0x62, 0x7d, 0xa5, 0xbb,
             0x32, 0x1e, 0x59, 0x67, 0x83, 0xdc, 0x29, 0xca, 0x38, 0xe0, 0x8c,
             0x83, 0x9a, 0x16, 0x24, 0xdd, 0xf2, 0xd6, 0x89, 0x41, 0x58, 0x2b,
             0xf0, 0x45, 0x3d, 0xa9, 0xa4, 0x47, 0x76, 0x71, 0x8f, 0x86, 0xd3,
             0x6d, 0x4c, 0x67, 0x02, 0x82, 0x9f, 0x7f, 0x76, 0xfd, 0x43, 0xa2,
             0x51, 0x9e, 0x1f, 0xb1, 0x1f, 0x86, 0x56, 0xdf, 0xb6, 0x22, 0x17,
             0x19, 0x92, 0xd8, 0xdd, 0x10, 0x5f, 0xe7, 0x95, 0xe7, 0x94, 0x9e,
             0xfe, 0x6f, 0x4b, 0x55, 0x50, 0xa4, 0x99, 0xc7, 0x9e, 0x79, 0x59,
             0xd4, 0x76, 0x15, 0x44, 0x67, 0x77, 0xf1, 0x20, 0x78, 0x3f, 0xa1,
             0xd6, 0x81, 0x62, 0x24, 0x3a, 0x70, 0x56, 0x81, 0x28, 0x6c, 0xa8,
             0x2e, 0x02, 0x21, 0x5a, 0xfe, 0xf0, 0x4a, 0x37, 0x2e, 0x46, 0xbd,
             0x95, 0xab, 0xbd, 0x4e, 0x45, 0x1a, 0x95, 0x1d, 0xc2, 0xcd, 0x80,
             0x26, 0x5b, 0xdc, 0xd3, 0x03, 0x38, 0xf0, 0x30, 0xd9, 0x6d, 0xac,
             0xae, 0x1a, 0xa6, 0x03, 0x9c, 0x0e, 0x8c, 0x53, 0x7c, 0x86, 0x63,
             0x9f, 0x76, 0x35, 0x6f, 0xf3, 0x12, 0x83, 0x4b, 0x7a, 0x53, 0x11,
             0xa7, 0x14, 0xbc, 0xc3, 0xae, 0x7d, 0x14, 0x4e, 0x52, 0x1e, 0xff,
             0xf1, 0xf0, 0xd4, 0x75, 0x93, 0x1b, 0x95, 0x34, 0x19, 0x97, 0x44,
             0x62, 0x10, 0x92, 0xe1, 0xc2, 0xbc, 0x4f, 0x52, 0x0f, 0x42, 0x6a,
             0x8e, 0xe7, 0x69, 0x26, 0x47, 0x3d, 0x84, 0xa8, 0xf7, 0x39, 0x42,
             0x69, 0x03, 0x24, 0xd0, 0x05, 0xc2, 0x96, 0xf6, 0x11, 0x2c, 0x68,
             0x01, 0x0e, 0x68, 0xef, 0x2b, 0x63, 0x1a, 0x40, 0xb8, 0xcd, 0x2e,
             0x6c, 0x76, 0x89, 0x13, 0x58, 0x71, 0x9c, 0x60, 0x57, 0x34, 0x9c,
             0x50, 0x14, 0xc6, 0x7b, 0x8b, 0x90, 0x5d, 0xcc, 0x65, 0x6e, 0x0f,
             0x1f, 0x4d, 0xaf}};
        auto const rsa4Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa4PublicKey{
            {0xbe, 0x09, 0xc5, 0xa4, 0x27, 0x29, 0xdf, 0xd4, 0x67, 0x76, 0xbe,
             0xbf, 0x2c, 0xf3, 0xa2, 0x0b, 0x42, 0xe4, 0xbf, 0xeb, 0xdd, 0x67,
             0x20, 0xfb, 0x7a, 0x27, 0x93, 0xc0, 0x78, 0x47, 0x78, 0xd7, 0x15,
             0x32, 0xee, 0x38, 0x81, 0x0d, 0x36, 0xa2, 0xc4, 0x65, 0x44, 0xe6,
             0x62, 0x26, 0xb9, 0x58, 0x13, 0xa4, 0x15, 0x82, 0xab, 0xb1, 0x16,
             0x61, 0xfc, 0x01, 0x98, 0xc6, 0x1a, 0x69, 0xc6, 0xba, 0x39, 0x3f,
             0x01, 0x55, 0x3d, 0xd7, 0x8e, 0x14, 0x42, 0x6d, 0x78, 0x74, 0x9b,
             0x28, 0xcb, 0x31, 0x39, 0x98, 0x5a, 0x11, 0xdc, 0xc1, 0x18, 0x9d,
             0x8d, 0xb0, 0xcd, 0x1b, 0x4c, 0x10, 0xab, 0x14, 0x64, 0x19, 0xf1,
             0x33, 0x15, 0x45, 0xc8, 0x92, 0x82, 0x03, 0x82, 0x8a, 0xaa, 0xad,
             0x94, 0xfc, 0x24, 0x11, 0x96, 0x99, 0x7e, 0x94, 0x5a, 0x82, 0x57,
             0x68, 0x61, 0x9f, 0x7b, 0x45, 0xe0, 0x99, 0x9e, 0x4f, 0x32, 0x50,
             0x5f, 0x05, 0xc8, 0x11, 0xae, 0xc4, 0x0c, 0x63, 0x18, 0x0e, 0x02,
             0x59, 0x36, 0x25, 0x92, 0x06, 0x32, 0xc7, 0x71, 0x47, 0x99, 0xcc,
             0x0a, 0x6e, 0x0a, 0x58, 0x71, 0x3f, 0x5e, 0xb7, 0x78, 0xf7, 0x98,
             0x79, 0xdf, 0x74, 0xa4, 0xeb, 0xa9, 0x00, 0xfd, 0x81, 0xb3, 0xcf,
             0x04, 0x8c, 0x5d, 0x7d, 0xe7, 0xb2, 0x82, 0x90, 0x49, 0xbd, 0x69,
             0xf3, 0x08, 0xe9, 0x92, 0xc6, 0x9e, 0x41, 0xba, 0x74, 0xd8, 0x8d,
             0x81, 0x97, 0x6f, 0x86, 0xab, 0xc9, 0xf1, 0x02, 0x31, 0xb4, 0xce,
             0x47, 0xb0, 0x39, 0xc8, 0xba, 0x51, 0xa7, 0x39, 0xf3, 0x71, 0xa2,
             0x25, 0x27, 0x37, 0x6e, 0x09, 0x6f, 0x19, 0x59, 0xbc, 0x65, 0xd9,
             0xcd, 0x12, 0xd3, 0x2c, 0xa2, 0x78, 0xfa, 0x23, 0x15, 0x1a, 0x82,
             0x41, 0x91, 0x1b, 0xbe, 0x8a, 0xe7, 0xfe, 0x3c, 0x3c, 0x30, 0x32,
             0xaa, 0xe9, 0xf3}};
        std::array<std::uint8_t, 256> const rsa4Sig{
            {0x01, 0x74, 0xd4, 0x1c, 0x39, 0xb0, 0x98, 0x60, 0x22, 0xb7, 0xbf,
             0x2f, 0x41, 0x4b, 0x58, 0x03, 0x53, 0x8e, 0x8d, 0x45, 0xf8, 0xc6,
             0x78, 0x6f, 0x52, 0xdb, 0x37, 0x8f, 0x1c, 0x58, 0x1d, 0x81, 0x32,
             0x79, 0xab, 0x88, 0xfb, 0xd2, 0x80, 0x6c, 0x73, 0xf2, 0xd5, 0x4e,
             0x47, 0x1c, 0x96, 0x87, 0xcb, 0xe9, 0xc6, 0x63, 0xa3, 0x16, 0x7e,
             0xdc, 0xf1, 0x25, 0xbe, 0x83, 0x98, 0x8b, 0x79, 0x5b, 0x71, 0x4b,
             0xbb, 0x7d, 0x7f, 0x40, 0x4d, 0x3b, 0x66, 0x69, 0x58, 0xec, 0xff,
             0xd0, 0xeb, 0x69, 0x10, 0x95, 0x7a, 0xb2, 0x6b, 0xff, 0x8a, 0x42,
             0x80, 0xd6, 0x8e, 0xb6, 0x0e, 0xe8, 0x10, 0xab, 0xe1, 0x49, 0x6d,
             0xf4, 0x27, 0xac, 0x7d, 0x60, 0x0a, 0x74, 0x60, 0x88, 0xba, 0xfe,
             0xfd, 0x75, 0x43, 0xdf, 0x8c, 0x06, 0xee, 0xa6, 0x4a, 0x4d, 0xaf,
             0xd6, 0x22, 0x28, 0x41, 0x44, 0x1a, 0x45, 0xf5, 0xe3, 0x55, 0x3c,
             0xf3, 0x41, 0xd9, 0x19, 0xe8, 0x70, 0xc5, 0x9d, 0xb2, 0x3c, 0xf0,
             0x82, 0xa3, 0x6e, 0x2b, 0x5a, 0x43, 0xdc, 0x39, 0xdd, 0x8d, 0xd9,
             0x84, 0xd3, 0x8b, 0x79, 0x73, 0xdd, 0xd9, 0x06, 0x59, 0x25, 0x1d,
             0xaf, 0x7a, 0x7b, 0xc7, 0x32, 0x3a, 0x60, 0xc5, 0xe8, 0xf5, 0x83,
             0xc1, 0x00, 0xa6, 0x65, 0xd6, 0xe0, 0x3d, 0xe8, 0x10, 0xb2, 0x06,
             0x15, 0x48, 0xfc, 0xb6, 0xb8, 0x11, 0x2d, 0xb6, 0xa0, 0x6d, 0x31,
             0x50, 0x70, 0x30, 0xcf, 0x82, 0x5e, 0x84, 0x29, 0x82, 0x87, 0xac,
             0x84, 0x05, 0x82, 0xb0, 0x01, 0x0a, 0x53, 0x3b, 0xfc, 0xe1, 0x78,
             0x47, 0x8b, 0x90, 0x6c, 0x4e, 0x45, 0xeb, 0x5e, 0x35, 0x09, 0x21,
             0x3f, 0x16, 0xf0, 0xef, 0xc2, 0x9b, 0xd6, 0xce, 0x23, 0x7f, 0x52,
             0x98, 0x99, 0xf3, 0xde, 0xa5, 0x50, 0xdb, 0x20, 0x74, 0x7f, 0xb3,
             0x00, 0x7a, 0x11}};
        auto const thresh3Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim5CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim5Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim5CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa6CondConditionFingerprint =
            "\xee\x75\xbe\xb3\x52\x54\xbd\x24\x06\x3f\xd9\x32\x48\x19\xe1"
            "\x5c\x70\x85\x92\x11\x6c\x3a\xc1\x4c\x9b\x83\xeb\x05\xa7\x59"
            "\xe2\xa0"s;
        Condition const Rsa6Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa6CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed7CondConditionFingerprint =
            "\x1e\x5a\xaf\x3e\x46\xf6\xd4\xdf\x4d\x70\xf0\xa1\xd1\x35\x6d"
            "\xf0\x8b\x86\x91\xac\xb2\xf2\x24\xf0\x1a\xd4\x23\xc0\x21\x8d"
            "\x42\xc0"s;
        Condition const Ed7Cond{Type::ed25519Sha256,
                                131072,
                                makeSlice(Ed7CondConditionFingerprint),
                                std::bitset<5>{0}};
        auto const thresh1Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim8CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim8Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim8CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa9CondConditionFingerprint =
            "\xe5\x15\x0a\xbd\xf6\x06\xbe\xaa\x6c\x81\xf1\x88\x7e\x70\x64"
            "\x51\xeb\x6f\x70\xb1\xdd\xc5\xf1\x20\x53\xf7\xcb\x9f\x7f\xc7"
            "\xe4\x52"s;
        Condition const Rsa9Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa9CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed10CondConditionFingerprint =
            "\x00\x8b\xe6\x62\xd4\x30\x65\x1e\x40\xb3\x23\x05\x52\x3a\xf3"
            "\x16\xda\x09\xbe\x79\x5f\x41\xc9\x03\x93\x34\x5b\x7c\x24\x87"
            "\x62\xfa"s;
        Condition const Ed10Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed10CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const rsa14Msg = "P12P11abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa14PublicKey{
            {0xbd, 0x63, 0x74, 0xd9, 0xc0, 0x3e, 0x0c, 0x57, 0x55, 0x99, 0x00,
             0xf3, 0xa8, 0x03, 0xdc, 0x9a, 0x6c, 0x14, 0xfc, 0x83, 0x33, 0x63,
             0x87, 0x35, 0x9c, 0xfe, 0xc3, 0x00, 0xb4, 0x8b, 0x03, 0xc7, 0x5f,
             0x0a, 0xe2, 0x94, 0xaa, 0x3f, 0x76, 0x15, 0xb1, 0xb9, 0xf6, 0x5f,
             0x0a, 0x87, 0x0c, 0x5c, 0x35, 0xbc, 0x2f, 0x0f, 0x04, 0xdd, 0x9d,
             0x12, 0x8d, 0x94, 0xeb, 0x8b, 0x93, 0xb4, 0x4e, 0x96, 0x20, 0xb7,
             0x17, 0xa0, 0x8e, 0xff, 0x9e, 0x1f, 0x43, 0xbf, 0xd6, 0x6a, 0x1e,
             0xb6, 0x0d, 0x7f, 0x2c, 0x08, 0x67, 0xa5, 0xe7, 0xa3, 0xb6, 0xd2,
             0x63, 0x6a, 0xf2, 0xeb, 0xd1, 0x21, 0x83, 0x8f, 0xa0, 0x25, 0x4a,
             0xc6, 0xcb, 0x4e, 0x66, 0xc3, 0x5f, 0x37, 0xdf, 0x5c, 0x12, 0xb7,
             0xb8, 0xfa, 0x7a, 0x57, 0x91, 0x9d, 0x55, 0xa6, 0x96, 0x91, 0xee,
             0x94, 0xb0, 0xcc, 0x45, 0xd3, 0x76, 0x70, 0x6f, 0x12, 0xbd, 0x81,
             0x9d, 0x08, 0x1b, 0x6d, 0x55, 0x3c, 0x19, 0x56, 0x9c, 0xcf, 0xc4,
             0xb4, 0x63, 0x8a, 0x87, 0x35, 0x2b, 0x4c, 0xc6, 0xe1, 0x0d, 0x74,
             0x31, 0xaa, 0xc6, 0x25, 0x0d, 0x90, 0x55, 0x14, 0xf1, 0x73, 0x09,
             0x93, 0xba, 0xc6, 0xda, 0x52, 0x7f, 0xc2, 0xdd, 0x9d, 0xb2, 0x4f,
             0x92, 0x43, 0xa6, 0xc9, 0x2c, 0x22, 0xc4, 0x5a, 0x22, 0xc2, 0x56,
             0xac, 0xfa, 0x6a, 0x37, 0x6a, 0x0c, 0x22, 0x72, 0x5d, 0x30, 0x50,
             0x4a, 0x6b, 0x93, 0xab, 0xcf, 0x69, 0x5a, 0x09, 0xd2, 0x5a, 0x87,
             0x31, 0x80, 0xa7, 0x5b, 0xe4, 0x34, 0x42, 0x13, 0x44, 0x1d, 0xe6,
             0xf9, 0x27, 0x21, 0xa7, 0x03, 0x74, 0x64, 0x18, 0xfa, 0xd0, 0x68,
             0x28, 0x73, 0x37, 0x3c, 0xf6, 0x63, 0x10, 0x56, 0xcc, 0x25, 0x08,
             0xb9, 0xad, 0xc8, 0x25, 0x64, 0xd1, 0x9c, 0x7c, 0xe7, 0x6c, 0xa6,
             0x12, 0x2c, 0x7d}};
        std::array<std::uint8_t, 256> const rsa14Sig{
            {0x58, 0x41, 0xc5, 0xa4, 0x78, 0x51, 0x32, 0xfa, 0x2a, 0x44, 0x4f,
             0x2e, 0x53, 0x80, 0x45, 0x9b, 0x8d, 0x7d, 0xad, 0x9d, 0xab, 0x5c,
             0xb9, 0x83, 0x17, 0xd3, 0x31, 0xc9, 0xb0, 0xa7, 0xfe, 0x3b, 0x31,
             0xec, 0x0d, 0x7c, 0x27, 0x0e, 0x4d, 0x9c, 0xc6, 0x77, 0x81, 0xac,
             0xd6, 0x54, 0x53, 0xc6, 0xd6, 0x01, 0x81, 0x3a, 0xb5, 0x36, 0x20,
             0x26, 0x70, 0x63, 0x94, 0xf4, 0xe3, 0x05, 0xa3, 0xfd, 0xb4, 0x27,
             0x43, 0x6c, 0x64, 0x73, 0x7b, 0x1e, 0xf1, 0xf5, 0x4b, 0xa8, 0x1b,
             0x0e, 0x59, 0x8b, 0x0b, 0xeb, 0x7e, 0x4a, 0xdf, 0x23, 0x85, 0xfa,
             0x2c, 0x29, 0x3c, 0x37, 0x50, 0xaa, 0x14, 0xd6, 0x37, 0x7b, 0x83,
             0x96, 0x62, 0xe7, 0x6a, 0xe5, 0xc5, 0xbb, 0x8a, 0x10, 0x43, 0xf5,
             0x9a, 0xc4, 0xf1, 0x9a, 0x78, 0x73, 0xcd, 0x3a, 0xb9, 0x1c, 0x61,
             0xf3, 0xba, 0x2b, 0xe9, 0x66, 0x5b, 0x7e, 0x0e, 0xcc, 0x68, 0x15,
             0xa5, 0x68, 0xf0, 0x73, 0x13, 0x42, 0xdf, 0x73, 0x51, 0x12, 0x01,
             0xb8, 0xc0, 0xfe, 0x94, 0xcc, 0xba, 0x55, 0x17, 0x5c, 0x90, 0x88,
             0x8f, 0x70, 0x2b, 0x59, 0xad, 0x2b, 0xe6, 0x92, 0xeb, 0x9c, 0xa5,
             0xfa, 0xd6, 0x57, 0x21, 0x16, 0x7c, 0xfb, 0x10, 0x92, 0x24, 0x7b,
             0xca, 0xde, 0x9d, 0x47, 0x36, 0x15, 0x5e, 0x5f, 0xa0, 0x6d, 0xf8,
             0x53, 0x1d, 0x40, 0x7a, 0x11, 0x4c, 0x33, 0x69, 0xa4, 0xd0, 0xd1,
             0x6f, 0x99, 0xe1, 0x9a, 0x59, 0x70, 0xef, 0x9d, 0x25, 0x35, 0xb7,
             0x04, 0x71, 0xb7, 0xed, 0x45, 0x9e, 0x86, 0x9a, 0x56, 0x25, 0xaa,
             0xee, 0xca, 0xc4, 0x27, 0x46, 0x62, 0xc8, 0x41, 0x22, 0x1a, 0x01,
             0xe9, 0x88, 0xaa, 0xc2, 0x2a, 0x04, 0x8b, 0x7f, 0x13, 0x72, 0x7c,
             0xac, 0xce, 0xc4, 0x51, 0x25, 0x37, 0xa2, 0xfb, 0x5b, 0x9d, 0x89,
             0x1e, 0x1a, 0x5c}};
        auto const thresh13Msg = "P12P11abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix12Prefix = "P12"s;
        auto const prefix12Msg = "P11abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix12MaxMsgLength = 14;
        auto const prefix11Prefix = "P11"s;
        auto const prefix11Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix11MaxMsgLength = 14;
        auto const rsa16Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa16PublicKey{
            {0xe8, 0x03, 0x7c, 0xff, 0x40, 0x68, 0x5d, 0xc7, 0xb8, 0xd0, 0x9f,
             0x9a, 0x83, 0xf9, 0x02, 0xe6, 0xfe, 0xa5, 0xb9, 0x0e, 0x9f, 0xdc,
             0x44, 0x74, 0x59, 0x3e, 0xef, 0x61, 0xdc, 0xb6, 0x4b, 0x49, 0xfe,
             0x1a, 0x67, 0x73, 0x38, 0x7b, 0x1c, 0xb4, 0xfa, 0x24, 0x39, 0xe4,
             0xbb, 0x74, 0x1b, 0xe4, 0x66, 0xfd, 0x85, 0x6f, 0x8d, 0x92, 0x3e,
             0x04, 0x70, 0xb4, 0x21, 0x01, 0xcf, 0x07, 0xf2, 0xeb, 0x11, 0x2c,
             0xaa, 0x9d, 0x37, 0xbb, 0xf3, 0x8d, 0x9b, 0xbc, 0x17, 0x60, 0xe4,
             0xe3, 0xae, 0x79, 0x92, 0x97, 0x3a, 0xe8, 0xd8, 0x74, 0xc5, 0x9d,
             0xeb, 0x15, 0x22, 0x8b, 0xae, 0x51, 0x13, 0x78, 0x21, 0xca, 0xbd,
             0x6a, 0xa6, 0x24, 0x93, 0x8f, 0xe6, 0x23, 0x12, 0x52, 0xe1, 0x75,
             0xda, 0x55, 0x26, 0xcc, 0x95, 0xa0, 0x75, 0x31, 0x0a, 0x6e, 0x27,
             0x14, 0x63, 0x70, 0x04, 0xd7, 0xe4, 0x36, 0x21, 0x3a, 0x9e, 0xff,
             0xe3, 0x16, 0x21, 0xc1, 0xfc, 0x6d, 0xc5, 0xe2, 0x80, 0xb9, 0x26,
             0xc6, 0x4f, 0x3c, 0xc2, 0xd5, 0x25, 0xf1, 0xb9, 0x88, 0xac, 0xc7,
             0xfe, 0xde, 0xd6, 0x7e, 0x60, 0x41, 0x82, 0xde, 0x25, 0x28, 0x1f,
             0x09, 0xda, 0x10, 0x01, 0x27, 0xf4, 0x63, 0x10, 0xa2, 0x4e, 0x1d,
             0xc2, 0x19, 0x32, 0xb3, 0x87, 0xc2, 0xcf, 0xac, 0x3c, 0x2b, 0xcd,
             0x5e, 0x79, 0x1f, 0x19, 0xea, 0x70, 0x56, 0x31, 0x59, 0x0e, 0x13,
             0x95, 0x05, 0xb7, 0xf9, 0xff, 0xd9, 0x0b, 0x49, 0xce, 0xd0, 0x6f,
             0xae, 0x90, 0x44, 0xb3, 0x6b, 0x60, 0xc9, 0x72, 0xf7, 0x83, 0x24,
             0x5e, 0x15, 0x25, 0x1c, 0xb8, 0x76, 0x71, 0x84, 0x33, 0x14, 0xf1,
             0xf0, 0x07, 0x7f, 0x2f, 0x95, 0xee, 0x3c, 0x36, 0x67, 0x36, 0xb4,
             0xae, 0x1c, 0xb5, 0x02, 0xa2, 0xdc, 0x0e, 0xed, 0xf2, 0x63, 0x0d,
             0x52, 0x61, 0xe3}};
        std::array<std::uint8_t, 256> const rsa16Sig{
            {0x0b, 0xcf, 0x7e, 0x92, 0x13, 0xb9, 0x15, 0x54, 0x7f, 0xb7, 0x9b,
             0xff, 0x5d, 0x23, 0x4a, 0x37, 0x1c, 0x3f, 0xa6, 0xf4, 0x04, 0xff,
             0x8e, 0x1e, 0xfb, 0x61, 0xa2, 0xaf, 0x2a, 0x71, 0xb5, 0x35, 0x6f,
             0xdd, 0x4e, 0xab, 0x16, 0xbb, 0x91, 0x85, 0xb4, 0x34, 0x8d, 0x92,
             0xa8, 0x52, 0x99, 0x0d, 0xb8, 0xbb, 0xc7, 0xbf, 0x00, 0x1c, 0x9e,
             0xd2, 0x49, 0x54, 0x81, 0xeb, 0xda, 0x5a, 0xac, 0x78, 0x4b, 0xf8,
             0x9d, 0xca, 0x6f, 0x77, 0x1b, 0x0c, 0x5f, 0x96, 0xf7, 0xdf, 0x28,
             0x37, 0xef, 0xde, 0x03, 0x81, 0xe9, 0x0b, 0x92, 0xcd, 0x54, 0x53,
             0x5c, 0x4c, 0xc9, 0x55, 0xad, 0x4b, 0x73, 0xa3, 0xe0, 0xb0, 0xa2,
             0x4d, 0xa8, 0x9f, 0x49, 0xec, 0xcf, 0x26, 0xc6, 0x4b, 0x19, 0xfc,
             0xfa, 0x77, 0xa6, 0x03, 0x89, 0x2e, 0x96, 0xbf, 0xeb, 0x9c, 0x09,
             0x1b, 0xd9, 0xef, 0xc7, 0x82, 0x91, 0x7f, 0x2c, 0x73, 0x7b, 0x9b,
             0xa7, 0xf0, 0xdb, 0xa0, 0xb6, 0xc5, 0x8e, 0x91, 0xf9, 0x64, 0x09,
             0xf0, 0x0f, 0x54, 0x7c, 0x41, 0x88, 0x8d, 0x32, 0xe6, 0xa0, 0x7e,
             0x63, 0xa6, 0x84, 0x8e, 0x69, 0x11, 0xbe, 0x45, 0x8e, 0x52, 0xbb,
             0xb3, 0x9d, 0x4a, 0x1d, 0x46, 0x6f, 0xde, 0x8e, 0xfb, 0x45, 0xb0,
             0x9d, 0x32, 0xe3, 0xa0, 0x58, 0x93, 0x8e, 0xab, 0x29, 0xf0, 0xe5,
             0xaa, 0xe0, 0x55, 0x34, 0xbc, 0x62, 0x4d, 0x31, 0xff, 0xd6, 0x5e,
             0x17, 0x08, 0xdc, 0x77, 0xff, 0xbb, 0xc1, 0xca, 0x1e, 0xff, 0x7a,
             0x0a, 0xee, 0x56, 0x4f, 0x22, 0x87, 0xfe, 0xeb, 0x89, 0x3d, 0x5e,
             0x90, 0x1c, 0xb2, 0x08, 0x3c, 0x2d, 0x61, 0x85, 0xd7, 0x06, 0x17,
             0x16, 0x77, 0x16, 0x1f, 0x6e, 0x3d, 0x2d, 0x83, 0x49, 0x21, 0x70,
             0xed, 0x5d, 0x7d, 0x71, 0x20, 0xe4, 0x49, 0x85, 0x87, 0xed, 0xcf,
             0x5b, 0x3e, 0xac}};
        auto const thresh15Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const thresh0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim17CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim17Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim17CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa18CondConditionFingerprint =
            "\x9d\xbe\x65\xf4\xae\x81\x90\x79\x09\x18\xa2\x66\x12\x9c\x10"
            "\x94\x66\x21\x94\x70\x60\x20\x4a\x3d\x5f\xb3\x62\xb6\x06\x46"
            "\x37\xfe"s;
        Condition const Rsa18Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa18CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed19CondConditionFingerprint =
            "\xe5\x88\xb7\x6e\xec\x2d\xaf\x47\xc7\xa2\xf4\x6e\xbf\x7f\x5e"
            "\x46\xd7\xfa\x33\x2c\x0a\x7e\x86\x1d\x8c\x38\xa8\x93\x52\xe8"
            "\x97\xe9"s;
        Condition const Ed19Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed19CondConditionFingerprint),
                                 std::bitset<5>{0}};

        auto rsa2 = std::make_unique<RsaSha256>(
            makeSlice(rsa2PublicKey), makeSlice(rsa2Sig));
        auto rsa4 = std::make_unique<RsaSha256>(
            makeSlice(rsa4PublicKey), makeSlice(rsa4Sig));
        std::vector<std::unique_ptr<Fulfillment>> thresh3Subfulfillments;
        thresh3Subfulfillments.emplace_back(std::move(rsa4));
        std::vector<Condition> thresh3Subconditions{
            {Preim5Cond, Rsa6Cond, Ed7Cond}};
        auto thresh3 = std::make_unique<ThresholdSha256>(
            std::move(thresh3Subfulfillments), std::move(thresh3Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh1Subfulfillments;
        thresh1Subfulfillments.emplace_back(std::move(rsa2));
        thresh1Subfulfillments.emplace_back(std::move(thresh3));
        std::vector<Condition> thresh1Subconditions{
            {Preim8Cond, Rsa9Cond, Ed10Cond}};
        auto thresh1 = std::make_unique<ThresholdSha256>(
            std::move(thresh1Subfulfillments), std::move(thresh1Subconditions));
        auto rsa14 = std::make_unique<RsaSha256>(
            makeSlice(rsa14PublicKey), makeSlice(rsa14Sig));
        std::vector<std::unique_ptr<Fulfillment>> thresh13Subfulfillments;
        thresh13Subfulfillments.emplace_back(std::move(rsa14));
        std::vector<Condition> thresh13Subconditions{};
        auto thresh13 = std::make_unique<ThresholdSha256>(
            std::move(thresh13Subfulfillments),
            std::move(thresh13Subconditions));
        auto prefix12 = std::make_unique<PrefixSha256>(
            makeSlice(prefix12Prefix),
            prefix12MaxMsgLength,
            std::move(thresh13));
        auto prefix11 = std::make_unique<PrefixSha256>(
            makeSlice(prefix11Prefix),
            prefix11MaxMsgLength,
            std::move(prefix12));
        auto rsa16 = std::make_unique<RsaSha256>(
            makeSlice(rsa16PublicKey), makeSlice(rsa16Sig));
        std::vector<std::unique_ptr<Fulfillment>> thresh15Subfulfillments;
        thresh15Subfulfillments.emplace_back(std::move(rsa16));
        std::vector<Condition> thresh15Subconditions{};
        auto thresh15 = std::make_unique<ThresholdSha256>(
            std::move(thresh15Subfulfillments),
            std::move(thresh15Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh0Subfulfillments;
        thresh0Subfulfillments.emplace_back(std::move(thresh1));
        thresh0Subfulfillments.emplace_back(std::move(prefix11));
        thresh0Subfulfillments.emplace_back(std::move(thresh15));
        std::vector<Condition> thresh0Subconditions{
            {Preim17Cond, Rsa18Cond, Ed19Cond}};
        ThresholdSha256 const thresh0(
            std::move(thresh0Subfulfillments), std::move(thresh0Subconditions));
        {
            auto const thresh0EncodedFulfillment =
                "\xa2\x82\x09\xe9\xa0\x82\x09\x6a\xa1\x82\x02\x32\x80\x03\x50"
                "\x31\x31\x81\x01\x0e\xa2\x82\x02\x26\xa1\x82\x02\x22\x80\x03"
                "\x50\x31\x32\x81\x01\x0e\xa2\x82\x02\x16\xa2\x82\x02\x12\xa0"
                "\x82\x02\x0c\xa3\x82\x02\x08\x80\x82\x01\x00\xbd\x63\x74\xd9"
                "\xc0\x3e\x0c\x57\x55\x99\x00\xf3\xa8\x03\xdc\x9a\x6c\x14\xfc"
                "\x83\x33\x63\x87\x35\x9c\xfe\xc3\x00\xb4\x8b\x03\xc7\x5f\x0a"
                "\xe2\x94\xaa\x3f\x76\x15\xb1\xb9\xf6\x5f\x0a\x87\x0c\x5c\x35"
                "\xbc\x2f\x0f\x04\xdd\x9d\x12\x8d\x94\xeb\x8b\x93\xb4\x4e\x96"
                "\x20\xb7\x17\xa0\x8e\xff\x9e\x1f\x43\xbf\xd6\x6a\x1e\xb6\x0d"
                "\x7f\x2c\x08\x67\xa5\xe7\xa3\xb6\xd2\x63\x6a\xf2\xeb\xd1\x21"
                "\x83\x8f\xa0\x25\x4a\xc6\xcb\x4e\x66\xc3\x5f\x37\xdf\x5c\x12"
                "\xb7\xb8\xfa\x7a\x57\x91\x9d\x55\xa6\x96\x91\xee\x94\xb0\xcc"
                "\x45\xd3\x76\x70\x6f\x12\xbd\x81\x9d\x08\x1b\x6d\x55\x3c\x19"
                "\x56\x9c\xcf\xc4\xb4\x63\x8a\x87\x35\x2b\x4c\xc6\xe1\x0d\x74"
                "\x31\xaa\xc6\x25\x0d\x90\x55\x14\xf1\x73\x09\x93\xba\xc6\xda"
                "\x52\x7f\xc2\xdd\x9d\xb2\x4f\x92\x43\xa6\xc9\x2c\x22\xc4\x5a"
                "\x22\xc2\x56\xac\xfa\x6a\x37\x6a\x0c\x22\x72\x5d\x30\x50\x4a"
                "\x6b\x93\xab\xcf\x69\x5a\x09\xd2\x5a\x87\x31\x80\xa7\x5b\xe4"
                "\x34\x42\x13\x44\x1d\xe6\xf9\x27\x21\xa7\x03\x74\x64\x18\xfa"
                "\xd0\x68\x28\x73\x37\x3c\xf6\x63\x10\x56\xcc\x25\x08\xb9\xad"
                "\xc8\x25\x64\xd1\x9c\x7c\xe7\x6c\xa6\x12\x2c\x7d\x81\x82\x01"
                "\x00\x58\x41\xc5\xa4\x78\x51\x32\xfa\x2a\x44\x4f\x2e\x53\x80"
                "\x45\x9b\x8d\x7d\xad\x9d\xab\x5c\xb9\x83\x17\xd3\x31\xc9\xb0"
                "\xa7\xfe\x3b\x31\xec\x0d\x7c\x27\x0e\x4d\x9c\xc6\x77\x81\xac"
                "\xd6\x54\x53\xc6\xd6\x01\x81\x3a\xb5\x36\x20\x26\x70\x63\x94"
                "\xf4\xe3\x05\xa3\xfd\xb4\x27\x43\x6c\x64\x73\x7b\x1e\xf1\xf5"
                "\x4b\xa8\x1b\x0e\x59\x8b\x0b\xeb\x7e\x4a\xdf\x23\x85\xfa\x2c"
                "\x29\x3c\x37\x50\xaa\x14\xd6\x37\x7b\x83\x96\x62\xe7\x6a\xe5"
                "\xc5\xbb\x8a\x10\x43\xf5\x9a\xc4\xf1\x9a\x78\x73\xcd\x3a\xb9"
                "\x1c\x61\xf3\xba\x2b\xe9\x66\x5b\x7e\x0e\xcc\x68\x15\xa5\x68"
                "\xf0\x73\x13\x42\xdf\x73\x51\x12\x01\xb8\xc0\xfe\x94\xcc\xba"
                "\x55\x17\x5c\x90\x88\x8f\x70\x2b\x59\xad\x2b\xe6\x92\xeb\x9c"
                "\xa5\xfa\xd6\x57\x21\x16\x7c\xfb\x10\x92\x24\x7b\xca\xde\x9d"
                "\x47\x36\x15\x5e\x5f\xa0\x6d\xf8\x53\x1d\x40\x7a\x11\x4c\x33"
                "\x69\xa4\xd0\xd1\x6f\x99\xe1\x9a\x59\x70\xef\x9d\x25\x35\xb7"
                "\x04\x71\xb7\xed\x45\x9e\x86\x9a\x56\x25\xaa\xee\xca\xc4\x27"
                "\x46\x62\xc8\x41\x22\x1a\x01\xe9\x88\xaa\xc2\x2a\x04\x8b\x7f"
                "\x13\x72\x7c\xac\xce\xc4\x51\x25\x37\xa2\xfb\x5b\x9d\x89\x1e"
                "\x1a\x5c\xa1\x00\xa2\x82\x02\x12\xa0\x82\x02\x0c\xa3\x82\x02"
                "\x08\x80\x82\x01\x00\xe8\x03\x7c\xff\x40\x68\x5d\xc7\xb8\xd0"
                "\x9f\x9a\x83\xf9\x02\xe6\xfe\xa5\xb9\x0e\x9f\xdc\x44\x74\x59"
                "\x3e\xef\x61\xdc\xb6\x4b\x49\xfe\x1a\x67\x73\x38\x7b\x1c\xb4"
                "\xfa\x24\x39\xe4\xbb\x74\x1b\xe4\x66\xfd\x85\x6f\x8d\x92\x3e"
                "\x04\x70\xb4\x21\x01\xcf\x07\xf2\xeb\x11\x2c\xaa\x9d\x37\xbb"
                "\xf3\x8d\x9b\xbc\x17\x60\xe4\xe3\xae\x79\x92\x97\x3a\xe8\xd8"
                "\x74\xc5\x9d\xeb\x15\x22\x8b\xae\x51\x13\x78\x21\xca\xbd\x6a"
                "\xa6\x24\x93\x8f\xe6\x23\x12\x52\xe1\x75\xda\x55\x26\xcc\x95"
                "\xa0\x75\x31\x0a\x6e\x27\x14\x63\x70\x04\xd7\xe4\x36\x21\x3a"
                "\x9e\xff\xe3\x16\x21\xc1\xfc\x6d\xc5\xe2\x80\xb9\x26\xc6\x4f"
                "\x3c\xc2\xd5\x25\xf1\xb9\x88\xac\xc7\xfe\xde\xd6\x7e\x60\x41"
                "\x82\xde\x25\x28\x1f\x09\xda\x10\x01\x27\xf4\x63\x10\xa2\x4e"
                "\x1d\xc2\x19\x32\xb3\x87\xc2\xcf\xac\x3c\x2b\xcd\x5e\x79\x1f"
                "\x19\xea\x70\x56\x31\x59\x0e\x13\x95\x05\xb7\xf9\xff\xd9\x0b"
                "\x49\xce\xd0\x6f\xae\x90\x44\xb3\x6b\x60\xc9\x72\xf7\x83\x24"
                "\x5e\x15\x25\x1c\xb8\x76\x71\x84\x33\x14\xf1\xf0\x07\x7f\x2f"
                "\x95\xee\x3c\x36\x67\x36\xb4\xae\x1c\xb5\x02\xa2\xdc\x0e\xed"
                "\xf2\x63\x0d\x52\x61\xe3\x81\x82\x01\x00\x0b\xcf\x7e\x92\x13"
                "\xb9\x15\x54\x7f\xb7\x9b\xff\x5d\x23\x4a\x37\x1c\x3f\xa6\xf4"
                "\x04\xff\x8e\x1e\xfb\x61\xa2\xaf\x2a\x71\xb5\x35\x6f\xdd\x4e"
                "\xab\x16\xbb\x91\x85\xb4\x34\x8d\x92\xa8\x52\x99\x0d\xb8\xbb"
                "\xc7\xbf\x00\x1c\x9e\xd2\x49\x54\x81\xeb\xda\x5a\xac\x78\x4b"
                "\xf8\x9d\xca\x6f\x77\x1b\x0c\x5f\x96\xf7\xdf\x28\x37\xef\xde"
                "\x03\x81\xe9\x0b\x92\xcd\x54\x53\x5c\x4c\xc9\x55\xad\x4b\x73"
                "\xa3\xe0\xb0\xa2\x4d\xa8\x9f\x49\xec\xcf\x26\xc6\x4b\x19\xfc"
                "\xfa\x77\xa6\x03\x89\x2e\x96\xbf\xeb\x9c\x09\x1b\xd9\xef\xc7"
                "\x82\x91\x7f\x2c\x73\x7b\x9b\xa7\xf0\xdb\xa0\xb6\xc5\x8e\x91"
                "\xf9\x64\x09\xf0\x0f\x54\x7c\x41\x88\x8d\x32\xe6\xa0\x7e\x63"
                "\xa6\x84\x8e\x69\x11\xbe\x45\x8e\x52\xbb\xb3\x9d\x4a\x1d\x46"
                "\x6f\xde\x8e\xfb\x45\xb0\x9d\x32\xe3\xa0\x58\x93\x8e\xab\x29"
                "\xf0\xe5\xaa\xe0\x55\x34\xbc\x62\x4d\x31\xff\xd6\x5e\x17\x08"
                "\xdc\x77\xff\xbb\xc1\xca\x1e\xff\x7a\x0a\xee\x56\x4f\x22\x87"
                "\xfe\xeb\x89\x3d\x5e\x90\x1c\xb2\x08\x3c\x2d\x61\x85\xd7\x06"
                "\x17\x16\x77\x16\x1f\x6e\x3d\x2d\x83\x49\x21\x70\xed\x5d\x7d"
                "\x71\x20\xe4\x49\x85\x87\xed\xcf\x5b\x3e\xac\xa1\x00\xa2\x82"
                "\x05\x1a\xa0\x82\x04\x9b\xa2\x82\x02\x8b\xa0\x82\x02\x0c\xa3"
                "\x82\x02\x08\x80\x82\x01\x00\xbe\x09\xc5\xa4\x27\x29\xdf\xd4"
                "\x67\x76\xbe\xbf\x2c\xf3\xa2\x0b\x42\xe4\xbf\xeb\xdd\x67\x20"
                "\xfb\x7a\x27\x93\xc0\x78\x47\x78\xd7\x15\x32\xee\x38\x81\x0d"
                "\x36\xa2\xc4\x65\x44\xe6\x62\x26\xb9\x58\x13\xa4\x15\x82\xab"
                "\xb1\x16\x61\xfc\x01\x98\xc6\x1a\x69\xc6\xba\x39\x3f\x01\x55"
                "\x3d\xd7\x8e\x14\x42\x6d\x78\x74\x9b\x28\xcb\x31\x39\x98\x5a"
                "\x11\xdc\xc1\x18\x9d\x8d\xb0\xcd\x1b\x4c\x10\xab\x14\x64\x19"
                "\xf1\x33\x15\x45\xc8\x92\x82\x03\x82\x8a\xaa\xad\x94\xfc\x24"
                "\x11\x96\x99\x7e\x94\x5a\x82\x57\x68\x61\x9f\x7b\x45\xe0\x99"
                "\x9e\x4f\x32\x50\x5f\x05\xc8\x11\xae\xc4\x0c\x63\x18\x0e\x02"
                "\x59\x36\x25\x92\x06\x32\xc7\x71\x47\x99\xcc\x0a\x6e\x0a\x58"
                "\x71\x3f\x5e\xb7\x78\xf7\x98\x79\xdf\x74\xa4\xeb\xa9\x00\xfd"
                "\x81\xb3\xcf\x04\x8c\x5d\x7d\xe7\xb2\x82\x90\x49\xbd\x69\xf3"
                "\x08\xe9\x92\xc6\x9e\x41\xba\x74\xd8\x8d\x81\x97\x6f\x86\xab"
                "\xc9\xf1\x02\x31\xb4\xce\x47\xb0\x39\xc8\xba\x51\xa7\x39\xf3"
                "\x71\xa2\x25\x27\x37\x6e\x09\x6f\x19\x59\xbc\x65\xd9\xcd\x12"
                "\xd3\x2c\xa2\x78\xfa\x23\x15\x1a\x82\x41\x91\x1b\xbe\x8a\xe7"
                "\xfe\x3c\x3c\x30\x32\xaa\xe9\xf3\x81\x82\x01\x00\x01\x74\xd4"
                "\x1c\x39\xb0\x98\x60\x22\xb7\xbf\x2f\x41\x4b\x58\x03\x53\x8e"
                "\x8d\x45\xf8\xc6\x78\x6f\x52\xdb\x37\x8f\x1c\x58\x1d\x81\x32"
                "\x79\xab\x88\xfb\xd2\x80\x6c\x73\xf2\xd5\x4e\x47\x1c\x96\x87"
                "\xcb\xe9\xc6\x63\xa3\x16\x7e\xdc\xf1\x25\xbe\x83\x98\x8b\x79"
                "\x5b\x71\x4b\xbb\x7d\x7f\x40\x4d\x3b\x66\x69\x58\xec\xff\xd0"
                "\xeb\x69\x10\x95\x7a\xb2\x6b\xff\x8a\x42\x80\xd6\x8e\xb6\x0e"
                "\xe8\x10\xab\xe1\x49\x6d\xf4\x27\xac\x7d\x60\x0a\x74\x60\x88"
                "\xba\xfe\xfd\x75\x43\xdf\x8c\x06\xee\xa6\x4a\x4d\xaf\xd6\x22"
                "\x28\x41\x44\x1a\x45\xf5\xe3\x55\x3c\xf3\x41\xd9\x19\xe8\x70"
                "\xc5\x9d\xb2\x3c\xf0\x82\xa3\x6e\x2b\x5a\x43\xdc\x39\xdd\x8d"
                "\xd9\x84\xd3\x8b\x79\x73\xdd\xd9\x06\x59\x25\x1d\xaf\x7a\x7b"
                "\xc7\x32\x3a\x60\xc5\xe8\xf5\x83\xc1\x00\xa6\x65\xd6\xe0\x3d"
                "\xe8\x10\xb2\x06\x15\x48\xfc\xb6\xb8\x11\x2d\xb6\xa0\x6d\x31"
                "\x50\x70\x30\xcf\x82\x5e\x84\x29\x82\x87\xac\x84\x05\x82\xb0"
                "\x01\x0a\x53\x3b\xfc\xe1\x78\x47\x8b\x90\x6c\x4e\x45\xeb\x5e"
                "\x35\x09\x21\x3f\x16\xf0\xef\xc2\x9b\xd6\xce\x23\x7f\x52\x98"
                "\x99\xf3\xde\xa5\x50\xdb\x20\x74\x7f\xb3\x00\x7a\x11\xa1\x79"
                "\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f"
                "\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd"
                "\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa3\x27\x80\x20\xee\x75"
                "\xbe\xb3\x52\x54\xbd\x24\x06\x3f\xd9\x32\x48\x19\xe1\x5c\x70"
                "\x85\x92\x11\x6c\x3a\xc1\x4c\x9b\x83\xeb\x05\xa7\x59\xe2\xa0"
                "\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x1e\x5a\xaf\x3e\x46\xf6"
                "\xd4\xdf\x4d\x70\xf0\xa1\xd1\x35\x6d\xf0\x8b\x86\x91\xac\xb2"
                "\xf2\x24\xf0\x1a\xd4\x23\xc0\x21\x8d\x42\xc0\x81\x03\x02\x00"
                "\x00\xa3\x82\x02\x08\x80\x82\x01\x00\xba\x2c\x3b\x50\xb6\xbf"
                "\xf9\x0f\x1d\xd7\x32\x4c\x01\x5f\xff\x2f\x2a\xf6\x33\xd0\xfb"
                "\xea\x1f\xa4\xf2\x2d\x22\x8a\x19\x95\xa9\x17\xb7\x4f\x17\xcf"
                "\x55\xcd\x1a\x3a\x5f\x07\x73\xcc\xaa\x21\x70\x64\xb3\xa0\xf4"
                "\xb7\x30\xa3\x82\x37\x93\xc6\x59\xde\x1b\xa1\x16\x90\x5a\x1a"
                "\xf6\x73\xab\x92\xc8\x2f\xf4\x6f\x5c\xf2\x22\x1d\x30\xf8\x03"
                "\xd8\x9b\x5f\x73\x72\x8e\x5f\xd5\x37\x4b\x43\xda\xfe\x84\x21"
                "\x67\xe8\xe3\xd7\x91\x3f\x24\x1d\xfb\x1f\x12\x6e\xcb\xfc\xb7"
                "\x5b\x0a\x35\x73\x3b\xce\x44\x34\x8e\xcd\x53\xa4\xcf\xa7\x63"
                "\x73\xcd\x31\x0f\xe0\x75\x8d\xe4\xa9\xdc\xfe\xf0\xc9\x3d\x26"
                "\xaf\xbf\x7b\x0f\x0e\x17\xb9\xd0\x4a\x32\x80\x64\x6b\x54\x73"
                "\x5a\x50\xc7\x31\x59\xf9\x73\x72\xa5\x79\xba\xdb\xa1\x14\x8d"
                "\x77\x67\x3e\xc0\x5b\xec\x6f\x0b\xf7\xc5\xee\x5a\xa6\x8d\x49"
                "\x63\x81\xbb\xd1\xf9\x9e\xbb\xed\xb2\xa9\x18\x60\xa7\xee\xeb"
                "\x30\xa1\x92\x93\xe8\xd8\x34\x9e\xac\xd6\x23\xfc\x7f\xcb\xe7"
                "\xfe\xa7\xe6\x42\xac\x77\x11\xc0\x67\x77\xd1\xaa\x5e\xed\x3b"
                "\xd5\xa5\x8d\x34\x7c\xd9\x57\x44\xa7\xc5\x44\x2e\x1e\xe7\x63"
                "\xd8\x53\x1b\x9a\xd9\x67\x02\x13\x32\x61\x81\x82\x01\x00\x31"
                "\x80\x96\x29\xda\x4d\xb8\x62\x7d\xa5\xbb\x32\x1e\x59\x67\x83"
                "\xdc\x29\xca\x38\xe0\x8c\x83\x9a\x16\x24\xdd\xf2\xd6\x89\x41"
                "\x58\x2b\xf0\x45\x3d\xa9\xa4\x47\x76\x71\x8f\x86\xd3\x6d\x4c"
                "\x67\x02\x82\x9f\x7f\x76\xfd\x43\xa2\x51\x9e\x1f\xb1\x1f\x86"
                "\x56\xdf\xb6\x22\x17\x19\x92\xd8\xdd\x10\x5f\xe7\x95\xe7\x94"
                "\x9e\xfe\x6f\x4b\x55\x50\xa4\x99\xc7\x9e\x79\x59\xd4\x76\x15"
                "\x44\x67\x77\xf1\x20\x78\x3f\xa1\xd6\x81\x62\x24\x3a\x70\x56"
                "\x81\x28\x6c\xa8\x2e\x02\x21\x5a\xfe\xf0\x4a\x37\x2e\x46\xbd"
                "\x95\xab\xbd\x4e\x45\x1a\x95\x1d\xc2\xcd\x80\x26\x5b\xdc\xd3"
                "\x03\x38\xf0\x30\xd9\x6d\xac\xae\x1a\xa6\x03\x9c\x0e\x8c\x53"
                "\x7c\x86\x63\x9f\x76\x35\x6f\xf3\x12\x83\x4b\x7a\x53\x11\xa7"
                "\x14\xbc\xc3\xae\x7d\x14\x4e\x52\x1e\xff\xf1\xf0\xd4\x75\x93"
                "\x1b\x95\x34\x19\x97\x44\x62\x10\x92\xe1\xc2\xbc\x4f\x52\x0f"
                "\x42\x6a\x8e\xe7\x69\x26\x47\x3d\x84\xa8\xf7\x39\x42\x69\x03"
                "\x24\xd0\x05\xc2\x96\xf6\x11\x2c\x68\x01\x0e\x68\xef\x2b\x63"
                "\x1a\x40\xb8\xcd\x2e\x6c\x76\x89\x13\x58\x71\x9c\x60\x57\x34"
                "\x9c\x50\x14\xc6\x7b\x8b\x90\x5d\xcc\x65\x6e\x0f\x1f\x4d\xaf"
                "\xa1\x79\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51"
                "\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68"
                "\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa3\x27\x80\x20"
                "\xe5\x15\x0a\xbd\xf6\x06\xbe\xaa\x6c\x81\xf1\x88\x7e\x70\x64"
                "\x51\xeb\x6f\x70\xb1\xdd\xc5\xf1\x20\x53\xf7\xcb\x9f\x7f\xc7"
                "\xe4\x52\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x00\x8b\xe6\x62"
                "\xd4\x30\x65\x1e\x40\xb3\x23\x05\x52\x3a\xf3\x16\xda\x09\xbe"
                "\x79\x5f\x41\xc9\x03\x93\x34\x5b\x7c\x24\x87\x62\xfa\x81\x03"
                "\x02\x00\x00\xa1\x79\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1"
                "\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21"
                "\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa3"
                "\x27\x80\x20\x9d\xbe\x65\xf4\xae\x81\x90\x79\x09\x18\xa2\x66"
                "\x12\x9c\x10\x94\x66\x21\x94\x70\x60\x20\x4a\x3d\x5f\xb3\x62"
                "\xb6\x06\x46\x37\xfe\x81\x03\x01\x00\x00\xa4\x27\x80\x20\xe5"
                "\x88\xb7\x6e\xec\x2d\xaf\x47\xc7\xa2\xf4\x6e\xbf\x7f\x5e\x46"
                "\xd7\xfa\x33\x2c\x0a\x7e\x86\x1d\x8c\x38\xa8\x93\x52\xe8\x97"
                "\xe9\x81\x03\x02\x00\x00"s;
            auto const thresh0EncodedCondition =
                "\xa2\x2b\x80\x20\x5f\x37\x0b\xc8\x7b\xc5\x81\x02\xf6\x1a\x1c"
                "\xa9\xbd\x60\x5b\x0a\xa2\x2d\x77\x3a\x25\x03\x74\x06\x90\x60"
                "\x4d\xe0\xd8\x3c\x9b\x3a\x81\x03\x07\x48\x22\x82\x02\x03\xd8"s;
            auto const thresh0EncodedFingerprint =
                "\x30\x82\x01\x07\x80\x01\x03\xa1\x82\x01\x00\xa0\x25\x80\x20"
                "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
                "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
                "\xeb\x4e\x81\x01\x09\xa1\x2b\x80\x20\xa0\xdd\x7e\x06\x38\xa1"
                "\x5e\x48\x05\xad\xc4\x5c\xb5\xbb\xf7\x94\x7d\x76\x7a\xd7\xf7"
                "\x88\xf1\xcf\xdc\x06\xf4\x6a\x2f\x2c\xc7\xfb\x81\x03\x01\x0c"
                "\x22\x82\x02\x04\x30\xa2\x2b\x80\x20\xbe\x10\xee\x08\x7d\x74"
                "\x44\xfb\x4f\xdc\xe2\x5c\x17\x3d\x7f\xe5\xff\x0f\xf1\xd4\xe8"
                "\x16\x07\x06\x35\xcf\x34\xee\x9c\xbf\x91\xf6\x81\x03\x01\x04"
                "\x00\x82\x02\x04\x10\xa2\x2b\x80\x20\xd4\xde\x10\x1e\x61\xfe"
                "\x8c\xab\x21\xe0\x2b\x9f\xf2\x46\x62\xc2\x16\xcc\xd2\x77\xaf"
                "\x75\xb1\x85\x47\xaa\x76\xfd\xcb\xfb\xf4\x57\x81\x03\x04\x24"
                "\x00\x82\x02\x03\x98\xa3\x27\x80\x20\x9d\xbe\x65\xf4\xae\x81"
                "\x90\x79\x09\x18\xa2\x66\x12\x9c\x10\x94\x66\x21\x94\x70\x60"
                "\x20\x4a\x3d\x5f\xb3\x62\xb6\x06\x46\x37\xfe\x81\x03\x01\x00"
                "\x00\xa4\x27\x80\x20\xe5\x88\xb7\x6e\xec\x2d\xaf\x47\xc7\xa2"
                "\xf4\x6e\xbf\x7f\x5e\x46\xd7\xfa\x33\x2c\x0a\x7e\x86\x1d\x8c"
                "\x38\xa8\x93\x52\xe8\x97\xe9\x81\x03\x02\x00\x00"s;
            check(
                &thresh0,
                thresh0Msg,
                thresh0EncodedFulfillment,
                thresh0EncodedCondition,
                thresh0EncodedFingerprint);
        }
    }

    void
    testThresh45()
    {
        testcase("Thresh45");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * thresh0
        // ** Preim14Cond
        // ** Rsa15Cond
        // ** Ed16Cond
        // ** Prefix17Cond
        // ** Thresh21Cond
        // ** thresh1
        // *** Preim8Cond
        // *** Rsa9Cond
        // *** Ed10Cond
        // *** rsa2
        // *** thresh3
        // **** Preim5Cond
        // **** Rsa6Cond
        // **** Ed7Cond
        // **** rsa4
        // ** preim11
        // ** rsa12
        // ** ed13

        auto const rsa2Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa2PublicKey{
            {0xba, 0x2c, 0x3b, 0x50, 0xb6, 0xbf, 0xf9, 0x0f, 0x1d, 0xd7, 0x32,
             0x4c, 0x01, 0x5f, 0xff, 0x2f, 0x2a, 0xf6, 0x33, 0xd0, 0xfb, 0xea,
             0x1f, 0xa4, 0xf2, 0x2d, 0x22, 0x8a, 0x19, 0x95, 0xa9, 0x17, 0xb7,
             0x4f, 0x17, 0xcf, 0x55, 0xcd, 0x1a, 0x3a, 0x5f, 0x07, 0x73, 0xcc,
             0xaa, 0x21, 0x70, 0x64, 0xb3, 0xa0, 0xf4, 0xb7, 0x30, 0xa3, 0x82,
             0x37, 0x93, 0xc6, 0x59, 0xde, 0x1b, 0xa1, 0x16, 0x90, 0x5a, 0x1a,
             0xf6, 0x73, 0xab, 0x92, 0xc8, 0x2f, 0xf4, 0x6f, 0x5c, 0xf2, 0x22,
             0x1d, 0x30, 0xf8, 0x03, 0xd8, 0x9b, 0x5f, 0x73, 0x72, 0x8e, 0x5f,
             0xd5, 0x37, 0x4b, 0x43, 0xda, 0xfe, 0x84, 0x21, 0x67, 0xe8, 0xe3,
             0xd7, 0x91, 0x3f, 0x24, 0x1d, 0xfb, 0x1f, 0x12, 0x6e, 0xcb, 0xfc,
             0xb7, 0x5b, 0x0a, 0x35, 0x73, 0x3b, 0xce, 0x44, 0x34, 0x8e, 0xcd,
             0x53, 0xa4, 0xcf, 0xa7, 0x63, 0x73, 0xcd, 0x31, 0x0f, 0xe0, 0x75,
             0x8d, 0xe4, 0xa9, 0xdc, 0xfe, 0xf0, 0xc9, 0x3d, 0x26, 0xaf, 0xbf,
             0x7b, 0x0f, 0x0e, 0x17, 0xb9, 0xd0, 0x4a, 0x32, 0x80, 0x64, 0x6b,
             0x54, 0x73, 0x5a, 0x50, 0xc7, 0x31, 0x59, 0xf9, 0x73, 0x72, 0xa5,
             0x79, 0xba, 0xdb, 0xa1, 0x14, 0x8d, 0x77, 0x67, 0x3e, 0xc0, 0x5b,
             0xec, 0x6f, 0x0b, 0xf7, 0xc5, 0xee, 0x5a, 0xa6, 0x8d, 0x49, 0x63,
             0x81, 0xbb, 0xd1, 0xf9, 0x9e, 0xbb, 0xed, 0xb2, 0xa9, 0x18, 0x60,
             0xa7, 0xee, 0xeb, 0x30, 0xa1, 0x92, 0x93, 0xe8, 0xd8, 0x34, 0x9e,
             0xac, 0xd6, 0x23, 0xfc, 0x7f, 0xcb, 0xe7, 0xfe, 0xa7, 0xe6, 0x42,
             0xac, 0x77, 0x11, 0xc0, 0x67, 0x77, 0xd1, 0xaa, 0x5e, 0xed, 0x3b,
             0xd5, 0xa5, 0x8d, 0x34, 0x7c, 0xd9, 0x57, 0x44, 0xa7, 0xc5, 0x44,
             0x2e, 0x1e, 0xe7, 0x63, 0xd8, 0x53, 0x1b, 0x9a, 0xd9, 0x67, 0x02,
             0x13, 0x32, 0x61}};
        std::array<std::uint8_t, 256> const rsa2Sig{
            {0x77, 0xe6, 0x66, 0x48, 0x9b, 0xc5, 0xfb, 0x26, 0x9b, 0xef, 0x75,
             0x1b, 0xc1, 0x5e, 0x04, 0x44, 0x67, 0xe6, 0xea, 0x00, 0x2d, 0xc4,
             0x11, 0x63, 0xe8, 0x2e, 0xc2, 0xf4, 0x37, 0xdf, 0x85, 0xb8, 0x32,
             0xe0, 0x4a, 0x86, 0xe9, 0x5f, 0xf8, 0xbd, 0x25, 0x41, 0xc5, 0x54,
             0x64, 0x86, 0xcd, 0xe6, 0x72, 0x75, 0x9d, 0x8d, 0x05, 0xd1, 0x8a,
             0xe6, 0x0d, 0x2a, 0x96, 0x9f, 0x18, 0x22, 0x8a, 0x75, 0x92, 0x18,
             0x2c, 0x6f, 0xa1, 0xd8, 0x00, 0x0e, 0x46, 0x6c, 0x34, 0xa3, 0xba,
             0x78, 0xd6, 0x81, 0x83, 0xb4, 0x4a, 0xdc, 0x2f, 0xa0, 0x90, 0xcf,
             0x42, 0x46, 0x02, 0x9e, 0x27, 0x94, 0xbe, 0xe8, 0x7f, 0xd3, 0xab,
             0x91, 0xa3, 0x8d, 0x4b, 0xbd, 0x11, 0xf2, 0x4c, 0x6c, 0xb7, 0x46,
             0xda, 0xe4, 0xc1, 0xe6, 0x23, 0xaf, 0x36, 0x14, 0xb9, 0xa5, 0x98,
             0xb1, 0x81, 0x03, 0xcc, 0xb6, 0x4e, 0xb1, 0xb6, 0xed, 0x28, 0xf5,
             0xbf, 0xce, 0x9e, 0x5b, 0x81, 0x82, 0x07, 0x4b, 0x9e, 0xff, 0xd5,
             0xf5, 0xe0, 0x4f, 0x5b, 0xc5, 0x3e, 0xac, 0x2e, 0xc4, 0xbe, 0x28,
             0x13, 0xe0, 0x79, 0xfe, 0xaf, 0x14, 0x5d, 0xc4, 0x93, 0x54, 0xec,
             0xbc, 0x6c, 0xbd, 0xe1, 0xd1, 0xbe, 0x89, 0xeb, 0xc8, 0x18, 0x14,
             0x37, 0x37, 0x84, 0xa6, 0x43, 0x7c, 0x0b, 0xf0, 0xb1, 0x7b, 0x1c,
             0x90, 0xe3, 0x26, 0x69, 0xfe, 0xfd, 0x1a, 0x31, 0x1f, 0x5d, 0x39,
             0x0b, 0x77, 0x42, 0xf6, 0x7b, 0x14, 0x99, 0x73, 0xe8, 0xd7, 0xff,
             0x72, 0x44, 0x3b, 0xe6, 0xd5, 0xfd, 0xcd, 0x25, 0xa2, 0x72, 0xbc,
             0xde, 0x02, 0xa6, 0xee, 0x39, 0x2e, 0xd7, 0x68, 0x5a, 0x86, 0x32,
             0x1b, 0x9c, 0x39, 0x92, 0x43, 0x7f, 0x25, 0x7c, 0x9a, 0x32, 0x17,
             0xd1, 0x46, 0x43, 0x35, 0xe9, 0x09, 0x28, 0x37, 0x14, 0xbb, 0x2c,
             0x99, 0x8e, 0xd1}};
        auto const rsa4Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa4PublicKey{
            {0xbe, 0x09, 0xc5, 0xa4, 0x27, 0x29, 0xdf, 0xd4, 0x67, 0x76, 0xbe,
             0xbf, 0x2c, 0xf3, 0xa2, 0x0b, 0x42, 0xe4, 0xbf, 0xeb, 0xdd, 0x67,
             0x20, 0xfb, 0x7a, 0x27, 0x93, 0xc0, 0x78, 0x47, 0x78, 0xd7, 0x15,
             0x32, 0xee, 0x38, 0x81, 0x0d, 0x36, 0xa2, 0xc4, 0x65, 0x44, 0xe6,
             0x62, 0x26, 0xb9, 0x58, 0x13, 0xa4, 0x15, 0x82, 0xab, 0xb1, 0x16,
             0x61, 0xfc, 0x01, 0x98, 0xc6, 0x1a, 0x69, 0xc6, 0xba, 0x39, 0x3f,
             0x01, 0x55, 0x3d, 0xd7, 0x8e, 0x14, 0x42, 0x6d, 0x78, 0x74, 0x9b,
             0x28, 0xcb, 0x31, 0x39, 0x98, 0x5a, 0x11, 0xdc, 0xc1, 0x18, 0x9d,
             0x8d, 0xb0, 0xcd, 0x1b, 0x4c, 0x10, 0xab, 0x14, 0x64, 0x19, 0xf1,
             0x33, 0x15, 0x45, 0xc8, 0x92, 0x82, 0x03, 0x82, 0x8a, 0xaa, 0xad,
             0x94, 0xfc, 0x24, 0x11, 0x96, 0x99, 0x7e, 0x94, 0x5a, 0x82, 0x57,
             0x68, 0x61, 0x9f, 0x7b, 0x45, 0xe0, 0x99, 0x9e, 0x4f, 0x32, 0x50,
             0x5f, 0x05, 0xc8, 0x11, 0xae, 0xc4, 0x0c, 0x63, 0x18, 0x0e, 0x02,
             0x59, 0x36, 0x25, 0x92, 0x06, 0x32, 0xc7, 0x71, 0x47, 0x99, 0xcc,
             0x0a, 0x6e, 0x0a, 0x58, 0x71, 0x3f, 0x5e, 0xb7, 0x78, 0xf7, 0x98,
             0x79, 0xdf, 0x74, 0xa4, 0xeb, 0xa9, 0x00, 0xfd, 0x81, 0xb3, 0xcf,
             0x04, 0x8c, 0x5d, 0x7d, 0xe7, 0xb2, 0x82, 0x90, 0x49, 0xbd, 0x69,
             0xf3, 0x08, 0xe9, 0x92, 0xc6, 0x9e, 0x41, 0xba, 0x74, 0xd8, 0x8d,
             0x81, 0x97, 0x6f, 0x86, 0xab, 0xc9, 0xf1, 0x02, 0x31, 0xb4, 0xce,
             0x47, 0xb0, 0x39, 0xc8, 0xba, 0x51, 0xa7, 0x39, 0xf3, 0x71, 0xa2,
             0x25, 0x27, 0x37, 0x6e, 0x09, 0x6f, 0x19, 0x59, 0xbc, 0x65, 0xd9,
             0xcd, 0x12, 0xd3, 0x2c, 0xa2, 0x78, 0xfa, 0x23, 0x15, 0x1a, 0x82,
             0x41, 0x91, 0x1b, 0xbe, 0x8a, 0xe7, 0xfe, 0x3c, 0x3c, 0x30, 0x32,
             0xaa, 0xe9, 0xf3}};
        std::array<std::uint8_t, 256> const rsa4Sig{
            {0x3e, 0x6c, 0x03, 0x1b, 0xa8, 0xa0, 0x98, 0x99, 0xcc, 0xf9, 0x85,
             0xbc, 0x10, 0x6e, 0xb9, 0x7e, 0xaf, 0xc2, 0xab, 0xe6, 0x00, 0x9a,
             0xa9, 0xd4, 0xc9, 0x4c, 0xe3, 0xfa, 0xb3, 0xb2, 0x19, 0x4d, 0xde,
             0x01, 0xdb, 0x47, 0x60, 0xd7, 0x1e, 0x74, 0xb8, 0x2f, 0x59, 0x4f,
             0x3b, 0x6e, 0x9f, 0xfe, 0x1b, 0x82, 0xaf, 0x87, 0xbf, 0xf7, 0x83,
             0x97, 0xa4, 0x42, 0xa7, 0x1b, 0x04, 0x3c, 0x99, 0x17, 0x5f, 0xbd,
             0x27, 0x92, 0x54, 0x80, 0x13, 0x26, 0x30, 0x81, 0x62, 0xb5, 0x14,
             0x00, 0xf6, 0x5b, 0x6c, 0x9f, 0x7c, 0xc2, 0xb9, 0x33, 0xd7, 0x7a,
             0x24, 0x44, 0xaa, 0xc0, 0xfa, 0xcf, 0x45, 0x54, 0x06, 0x8e, 0x69,
             0xe4, 0x1e, 0xcf, 0xb1, 0xde, 0x7c, 0x97, 0x3f, 0x77, 0x12, 0x8a,
             0x65, 0xea, 0xa7, 0x0d, 0x4b, 0x3c, 0x87, 0x35, 0x50, 0x1c, 0x0e,
             0xa3, 0x9f, 0x05, 0xf3, 0x46, 0xa7, 0x93, 0xce, 0xc0, 0xd1, 0xb6,
             0xfb, 0xf4, 0x5f, 0xd9, 0xc8, 0xe2, 0xfe, 0x6d, 0xff, 0x14, 0x72,
             0x12, 0xfe, 0x58, 0x22, 0x8e, 0xcc, 0xc6, 0xdf, 0x4b, 0xb4, 0x56,
             0xf6, 0xab, 0xcb, 0x12, 0x2d, 0x62, 0x2a, 0x2b, 0x68, 0xe0, 0x47,
             0xb4, 0xf2, 0x7a, 0x91, 0x49, 0x39, 0xca, 0xf8, 0x85, 0x58, 0x79,
             0x58, 0x37, 0xaa, 0x14, 0x3d, 0x55, 0xa1, 0xaa, 0xa1, 0xaa, 0x39,
             0x57, 0x66, 0x07, 0x32, 0x28, 0xa0, 0xb9, 0x47, 0xa5, 0x0d, 0x11,
             0x43, 0x9d, 0x11, 0x65, 0x66, 0xb2, 0x94, 0xf0, 0xf4, 0xcd, 0xf5,
             0xa2, 0x6a, 0x2f, 0xb7, 0x4d, 0x86, 0xec, 0x26, 0xd3, 0xd4, 0x8c,
             0x04, 0xfc, 0x74, 0xe1, 0xfe, 0x11, 0x73, 0xb2, 0x62, 0x6a, 0x9b,
             0x31, 0x96, 0xf3, 0x21, 0x08, 0xba, 0x1a, 0xb1, 0x4f, 0x32, 0x58,
             0x07, 0x7a, 0xac, 0xd3, 0x08, 0x54, 0x2e, 0x0d, 0x3f, 0x53, 0x4d,
             0xb5, 0xb1, 0xd9}};
        auto const thresh3Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim5CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim5Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim5CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa6CondConditionFingerprint =
            "\xee\x75\xbe\xb3\x52\x54\xbd\x24\x06\x3f\xd9\x32\x48\x19\xe1"
            "\x5c\x70\x85\x92\x11\x6c\x3a\xc1\x4c\x9b\x83\xeb\x05\xa7\x59"
            "\xe2\xa0"s;
        Condition const Rsa6Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa6CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed7CondConditionFingerprint =
            "\x1e\x5a\xaf\x3e\x46\xf6\xd4\xdf\x4d\x70\xf0\xa1\xd1\x35\x6d"
            "\xf0\x8b\x86\x91\xac\xb2\xf2\x24\xf0\x1a\xd4\x23\xc0\x21\x8d"
            "\x42\xc0"s;
        Condition const Ed7Cond{Type::ed25519Sha256,
                                131072,
                                makeSlice(Ed7CondConditionFingerprint),
                                std::bitset<5>{0}};
        auto const thresh1Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim8CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim8Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim8CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa9CondConditionFingerprint =
            "\xe5\x15\x0a\xbd\xf6\x06\xbe\xaa\x6c\x81\xf1\x88\x7e\x70\x64"
            "\x51\xeb\x6f\x70\xb1\xdd\xc5\xf1\x20\x53\xf7\xcb\x9f\x7f\xc7"
            "\xe4\x52"s;
        Condition const Rsa9Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa9CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed10CondConditionFingerprint =
            "\x00\x8b\xe6\x62\xd4\x30\x65\x1e\x40\xb3\x23\x05\x52\x3a\xf3"
            "\x16\xda\x09\xbe\x79\x5f\x41\xc9\x03\x93\x34\x5b\x7c\x24\x87"
            "\x62\xfa"s;
        Condition const Ed10Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed10CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const preim11Preimage = "I am root"s;
        auto const preim11Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const rsa12Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa12PublicKey{
            {0xd9, 0x25, 0xc3, 0xba, 0x0a, 0x46, 0x6e, 0xa9, 0x1d, 0x05, 0xd7,
             0x54, 0xf1, 0xff, 0xf4, 0xaf, 0xe5, 0x13, 0xcf, 0xd6, 0x74, 0xb0,
             0xcf, 0xc2, 0x8c, 0x68, 0x5c, 0xa9, 0xf3, 0x44, 0x4b, 0xfd, 0x4a,
             0x4d, 0x29, 0x64, 0xbc, 0xa8, 0x98, 0xf5, 0x35, 0x0a, 0x65, 0xe5,
             0xcd, 0x5d, 0x08, 0x9f, 0x58, 0x22, 0xed, 0x21, 0x78, 0x04, 0x4d,
             0x2a, 0xce, 0x80, 0x33, 0x19, 0x5b, 0x7a, 0xbd, 0xa6, 0x89, 0xfa,
             0x80, 0xa4, 0xf5, 0x32, 0xa6, 0xb1, 0x34, 0x61, 0x55, 0x5a, 0xbd,
             0x05, 0xaf, 0x4b, 0x4b, 0xdf, 0xe0, 0xa9, 0x3e, 0x1d, 0x2f, 0x3e,
             0xaf, 0x0c, 0x65, 0x32, 0xc6, 0xf2, 0xe0, 0x5c, 0x09, 0xc0, 0xa2,
             0x41, 0xe6, 0xc9, 0x96, 0x5e, 0x88, 0x62, 0x4a, 0x28, 0x4b, 0x23,
             0x2f, 0xcf, 0xb3, 0xb7, 0x1e, 0x11, 0x7f, 0xc4, 0x63, 0x1a, 0xe4,
             0x24, 0x29, 0x46, 0xf4, 0x48, 0xde, 0x30, 0x45, 0x97, 0xf8, 0x6c,
             0x8d, 0x4e, 0x4a, 0xce, 0x5e, 0x41, 0xb2, 0xb7, 0x5a, 0xd5, 0x94,
             0x42, 0x5a, 0x14, 0xd1, 0x11, 0x99, 0xc5, 0xeb, 0x66, 0xbe, 0xb1,
             0xc6, 0xc3, 0xdb, 0x2f, 0x8f, 0xa0, 0x6c, 0xa9, 0x27, 0x0f, 0xc0,
             0x92, 0x77, 0x0b, 0x8d, 0x66, 0xb8, 0x93, 0x0b, 0xc0, 0x5c, 0xcb,
             0x51, 0x4e, 0xa3, 0x83, 0xd2, 0xbd, 0x04, 0xd8, 0xc0, 0x0c, 0xb2,
             0xf7, 0x38, 0x4e, 0x6a, 0xec, 0xfe, 0x76, 0xd9, 0x71, 0x0b, 0x90,
             0x21, 0x7c, 0xbf, 0x07, 0xc4, 0xd8, 0x4c, 0x6d, 0xb9, 0x35, 0x48,
             0x5d, 0x82, 0xea, 0x61, 0xc5, 0x14, 0xff, 0x25, 0x50, 0x47, 0xaf,
             0x06, 0x58, 0xa9, 0x95, 0x2c, 0xdd, 0xe5, 0xbd, 0x95, 0x4a, 0x7b,
             0x27, 0xa1, 0x46, 0xe3, 0xf0, 0x16, 0xe8, 0xf9, 0xba, 0x43, 0xb8,
             0x77, 0xdc, 0x87, 0x81, 0x3a, 0xc0, 0xf2, 0xed, 0x3b, 0x03, 0x5e,
             0xe6, 0x89, 0x71}};
        std::array<std::uint8_t, 256> const rsa12Sig{
            {0x64, 0x4a, 0x46, 0x9e, 0x1f, 0x43, 0x16, 0x65, 0x55, 0x9d, 0x4a,
             0x79, 0x9d, 0xb0, 0x4c, 0xd2, 0x07, 0x30, 0xe5, 0x34, 0x54, 0xb5,
             0x98, 0x77, 0x3c, 0xeb, 0x94, 0x93, 0xe7, 0x3c, 0x13, 0x07, 0x8e,
             0xdf, 0xbf, 0xf2, 0x0c, 0x9e, 0x32, 0x58, 0xa3, 0x52, 0x81, 0x3e,
             0x7a, 0xca, 0x42, 0x88, 0xf6, 0x83, 0xab, 0xfa, 0x0a, 0x06, 0x20,
             0xaf, 0xe4, 0xd8, 0xfb, 0x4b, 0xf4, 0xfe, 0xf9, 0xcf, 0xb8, 0x66,
             0x1d, 0xbd, 0x0d, 0xe3, 0x98, 0x08, 0xf2, 0xad, 0x85, 0xbc, 0x85,
             0xa4, 0xe5, 0xcc, 0x67, 0x4e, 0x66, 0x9c, 0x3e, 0x78, 0x5d, 0xa9,
             0x8d, 0x6a, 0xd5, 0x7f, 0xe5, 0xbf, 0x76, 0x9e, 0x82, 0xa0, 0xc3,
             0x5f, 0xdb, 0x14, 0x21, 0x6b, 0xf5, 0x1c, 0x3f, 0x3b, 0x5c, 0x6a,
             0xbb, 0x26, 0xb8, 0xcc, 0xf9, 0x7c, 0x36, 0x12, 0xbb, 0x26, 0x8b,
             0xd2, 0x22, 0x91, 0x48, 0x3f, 0x32, 0xfc, 0xd8, 0x37, 0xf6, 0x9d,
             0xdb, 0x8a, 0x74, 0xd0, 0x4c, 0x5f, 0x95, 0x75, 0x7f, 0xa1, 0x07,
             0xa2, 0x89, 0x22, 0x83, 0x37, 0x72, 0x75, 0xd1, 0x40, 0xf1, 0xf7,
             0x36, 0x57, 0xd7, 0x93, 0xf4, 0xcd, 0xbc, 0xbc, 0xa4, 0x70, 0xf3,
             0x70, 0x92, 0x92, 0xa4, 0xf4, 0xb6, 0x1b, 0x15, 0x9c, 0xd5, 0x35,
             0x61, 0xd9, 0x88, 0x1e, 0xb1, 0xe1, 0x8d, 0x82, 0xae, 0xb4, 0x95,
             0x4a, 0x2a, 0xa8, 0x94, 0x62, 0xda, 0xc0, 0xef, 0x9b, 0x7c, 0x93,
             0xcd, 0x22, 0x04, 0x94, 0x85, 0xf4, 0x3a, 0x37, 0x55, 0x9b, 0x90,
             0xfc, 0x73, 0x7f, 0xaa, 0x1f, 0x26, 0xc7, 0xc2, 0x1c, 0x2a, 0x48,
             0x2e, 0x6f, 0x0c, 0xa5, 0x7c, 0xea, 0x46, 0x58, 0xf5, 0x2a, 0x1e,
             0x8d, 0x72, 0xf9, 0x87, 0xf3, 0x06, 0xef, 0x63, 0xb6, 0x1d, 0x00,
             0x32, 0xb7, 0xa4, 0x0e, 0xf4, 0x67, 0x60, 0xfb, 0x16, 0x99, 0xb7,
             0x0d, 0x4e, 0x6a}};
        auto const ed13Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed13PublicKey{
            {0xe8, 0xb1, 0xe9, 0x04, 0xef, 0x8f, 0x78, 0x4c, 0x54, 0xf2, 0x45,
             0x60, 0x93, 0xb4, 0xc6, 0xa4, 0xc2, 0x9a, 0xa9, 0xb7, 0x5a, 0x0b,
             0x06, 0xf1, 0x78, 0xdc, 0xa9, 0x08, 0x12, 0xb2, 0x2f, 0xf4}};
        std::array<std::uint8_t, 64> const ed13Sig{
            {0x03, 0x17, 0xa0, 0x49, 0x7b, 0xee, 0x0d, 0x84, 0x64, 0xee, 0xa8,
             0xc1, 0xe6, 0x3e, 0xc6, 0xed, 0xd6, 0x25, 0x7e, 0x7d, 0xad, 0x96,
             0xf3, 0x82, 0x4a, 0xa6, 0xb1, 0x38, 0xf1, 0x2f, 0x54, 0x6a, 0x52,
             0x39, 0x26, 0x08, 0x2d, 0xe6, 0xfd, 0xb2, 0xfa, 0x23, 0xb3, 0x91,
             0x30, 0x07, 0x9a, 0x4b, 0x63, 0xbb, 0x6f, 0x55, 0xcb, 0x0a, 0xe9,
             0xb1, 0xfb, 0x40, 0x9e, 0x1f, 0x87, 0x70, 0x5a, 0x07}};
        std::array<std::uint8_t, 32> const ed13SigningKey{
            {0x0c, 0x45, 0x3e, 0x20, 0xe2, 0x12, 0x63, 0x6a, 0x7c, 0x36, 0x75,
             0xad, 0x2e, 0xd7, 0xc0, 0x39, 0x27, 0x7e, 0x38, 0x9a, 0xa2, 0xd3,
             0x3b, 0x24, 0x18, 0xf8, 0x68, 0x4e, 0x7f, 0xfa, 0x5d, 0xf3}};
        (void)ed13SigningKey;
        auto const thresh0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim14CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim14Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim14CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa15CondConditionFingerprint =
            "\x55\x6b\x6d\xe3\x00\xd4\xf3\x7e\x75\x3a\x68\xfc\x25\xdf\xf2"
            "\xf7\x18\x54\xa5\x55\x0c\xa5\xa9\x65\xbf\x66\x9e\x4e\x49\x56"
            "\x1e\xf1"s;
        Condition const Rsa15Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa15CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed16CondConditionFingerprint =
            "\xe4\x66\x69\x86\x87\x57\x0e\xac\xf1\xfd\x06\x81\x48\x90\x82"
            "\x42\x48\x50\x75\x8e\xd4\x2d\xf3\x02\x37\x89\x28\xc5\x68\xd7"
            "\xa0\x11"s;
        Condition const Ed16Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed16CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Prefix17CondConditionFingerprint =
            "\xa9\x0d\x2e\x53\x03\x1e\x33\xe8\x3e\xc6\x01\x44\x01\x19\x24"
            "\x8b\x09\xc1\xa5\x2e\x21\xd2\xdf\x6c\x40\x6a\x75\xc7\x26\xf5"
            "\xa1\xa5"s;
        Condition const Prefix17Cond{
            Type::prefixSha256,
            68650,
            makeSlice(Prefix17CondConditionFingerprint),
            std::bitset<5>{12}};
        auto const Thresh21CondConditionFingerprint =
            "\x2a\x7a\xb5\x86\x22\x51\xf5\xe7\x17\x8d\xc9\xc4\xae\xcb\x91"
            "\xc1\x10\x61\x0c\xce\x6f\x7a\xa8\x5f\x21\x1d\xd8\x55\x36\x51"
            "\x7c\x44"s;
        Condition const Thresh21Cond{
            Type::thresholdSha256,
            66560,
            makeSlice(Thresh21CondConditionFingerprint),
            std::bitset<5>{8}};

        auto rsa2 = std::make_unique<RsaSha256>(
            makeSlice(rsa2PublicKey), makeSlice(rsa2Sig));
        auto rsa4 = std::make_unique<RsaSha256>(
            makeSlice(rsa4PublicKey), makeSlice(rsa4Sig));
        std::vector<std::unique_ptr<Fulfillment>> thresh3Subfulfillments;
        thresh3Subfulfillments.emplace_back(std::move(rsa4));
        std::vector<Condition> thresh3Subconditions{
            {Preim5Cond, Rsa6Cond, Ed7Cond}};
        auto thresh3 = std::make_unique<ThresholdSha256>(
            std::move(thresh3Subfulfillments), std::move(thresh3Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh1Subfulfillments;
        thresh1Subfulfillments.emplace_back(std::move(rsa2));
        thresh1Subfulfillments.emplace_back(std::move(thresh3));
        std::vector<Condition> thresh1Subconditions{
            {Preim8Cond, Rsa9Cond, Ed10Cond}};
        auto thresh1 = std::make_unique<ThresholdSha256>(
            std::move(thresh1Subfulfillments), std::move(thresh1Subconditions));
        auto preim11 =
            std::make_unique<PreimageSha256>(makeSlice(preim11Preimage));
        auto rsa12 = std::make_unique<RsaSha256>(
            makeSlice(rsa12PublicKey), makeSlice(rsa12Sig));
        auto ed13 = std::make_unique<Ed25519>(ed13PublicKey, ed13Sig);
        std::vector<std::unique_ptr<Fulfillment>> thresh0Subfulfillments;
        thresh0Subfulfillments.emplace_back(std::move(thresh1));
        thresh0Subfulfillments.emplace_back(std::move(preim11));
        thresh0Subfulfillments.emplace_back(std::move(rsa12));
        thresh0Subfulfillments.emplace_back(std::move(ed13));
        std::vector<Condition> thresh0Subconditions{
            {Preim14Cond, Rsa15Cond, Ed16Cond, Prefix17Cond, Thresh21Cond}};
        ThresholdSha256 const thresh0(
            std::move(thresh0Subfulfillments), std::move(thresh0Subconditions));
        {
            auto const thresh0EncodedFulfillment =
                "\xa2\x82\x08\x77\xa0\x82\x07\x9d\xa0\x0b\x80\x09\x49\x20\x61"
                "\x6d\x20\x72\x6f\x6f\x74\xa2\x82\x05\x1a\xa0\x82\x04\x9b\xa2"
                "\x82\x02\x8b\xa0\x82\x02\x0c\xa3\x82\x02\x08\x80\x82\x01\x00"
                "\xbe\x09\xc5\xa4\x27\x29\xdf\xd4\x67\x76\xbe\xbf\x2c\xf3\xa2"
                "\x0b\x42\xe4\xbf\xeb\xdd\x67\x20\xfb\x7a\x27\x93\xc0\x78\x47"
                "\x78\xd7\x15\x32\xee\x38\x81\x0d\x36\xa2\xc4\x65\x44\xe6\x62"
                "\x26\xb9\x58\x13\xa4\x15\x82\xab\xb1\x16\x61\xfc\x01\x98\xc6"
                "\x1a\x69\xc6\xba\x39\x3f\x01\x55\x3d\xd7\x8e\x14\x42\x6d\x78"
                "\x74\x9b\x28\xcb\x31\x39\x98\x5a\x11\xdc\xc1\x18\x9d\x8d\xb0"
                "\xcd\x1b\x4c\x10\xab\x14\x64\x19\xf1\x33\x15\x45\xc8\x92\x82"
                "\x03\x82\x8a\xaa\xad\x94\xfc\x24\x11\x96\x99\x7e\x94\x5a\x82"
                "\x57\x68\x61\x9f\x7b\x45\xe0\x99\x9e\x4f\x32\x50\x5f\x05\xc8"
                "\x11\xae\xc4\x0c\x63\x18\x0e\x02\x59\x36\x25\x92\x06\x32\xc7"
                "\x71\x47\x99\xcc\x0a\x6e\x0a\x58\x71\x3f\x5e\xb7\x78\xf7\x98"
                "\x79\xdf\x74\xa4\xeb\xa9\x00\xfd\x81\xb3\xcf\x04\x8c\x5d\x7d"
                "\xe7\xb2\x82\x90\x49\xbd\x69\xf3\x08\xe9\x92\xc6\x9e\x41\xba"
                "\x74\xd8\x8d\x81\x97\x6f\x86\xab\xc9\xf1\x02\x31\xb4\xce\x47"
                "\xb0\x39\xc8\xba\x51\xa7\x39\xf3\x71\xa2\x25\x27\x37\x6e\x09"
                "\x6f\x19\x59\xbc\x65\xd9\xcd\x12\xd3\x2c\xa2\x78\xfa\x23\x15"
                "\x1a\x82\x41\x91\x1b\xbe\x8a\xe7\xfe\x3c\x3c\x30\x32\xaa\xe9"
                "\xf3\x81\x82\x01\x00\x3e\x6c\x03\x1b\xa8\xa0\x98\x99\xcc\xf9"
                "\x85\xbc\x10\x6e\xb9\x7e\xaf\xc2\xab\xe6\x00\x9a\xa9\xd4\xc9"
                "\x4c\xe3\xfa\xb3\xb2\x19\x4d\xde\x01\xdb\x47\x60\xd7\x1e\x74"
                "\xb8\x2f\x59\x4f\x3b\x6e\x9f\xfe\x1b\x82\xaf\x87\xbf\xf7\x83"
                "\x97\xa4\x42\xa7\x1b\x04\x3c\x99\x17\x5f\xbd\x27\x92\x54\x80"
                "\x13\x26\x30\x81\x62\xb5\x14\x00\xf6\x5b\x6c\x9f\x7c\xc2\xb9"
                "\x33\xd7\x7a\x24\x44\xaa\xc0\xfa\xcf\x45\x54\x06\x8e\x69\xe4"
                "\x1e\xcf\xb1\xde\x7c\x97\x3f\x77\x12\x8a\x65\xea\xa7\x0d\x4b"
                "\x3c\x87\x35\x50\x1c\x0e\xa3\x9f\x05\xf3\x46\xa7\x93\xce\xc0"
                "\xd1\xb6\xfb\xf4\x5f\xd9\xc8\xe2\xfe\x6d\xff\x14\x72\x12\xfe"
                "\x58\x22\x8e\xcc\xc6\xdf\x4b\xb4\x56\xf6\xab\xcb\x12\x2d\x62"
                "\x2a\x2b\x68\xe0\x47\xb4\xf2\x7a\x91\x49\x39\xca\xf8\x85\x58"
                "\x79\x58\x37\xaa\x14\x3d\x55\xa1\xaa\xa1\xaa\x39\x57\x66\x07"
                "\x32\x28\xa0\xb9\x47\xa5\x0d\x11\x43\x9d\x11\x65\x66\xb2\x94"
                "\xf0\xf4\xcd\xf5\xa2\x6a\x2f\xb7\x4d\x86\xec\x26\xd3\xd4\x8c"
                "\x04\xfc\x74\xe1\xfe\x11\x73\xb2\x62\x6a\x9b\x31\x96\xf3\x21"
                "\x08\xba\x1a\xb1\x4f\x32\x58\x07\x7a\xac\xd3\x08\x54\x2e\x0d"
                "\x3f\x53\x4d\xb5\xb1\xd9\xa1\x79\xa0\x25\x80\x20\x5d\xa0\x30"
                "\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c"
                "\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81"
                "\x01\x09\xa3\x27\x80\x20\xee\x75\xbe\xb3\x52\x54\xbd\x24\x06"
                "\x3f\xd9\x32\x48\x19\xe1\x5c\x70\x85\x92\x11\x6c\x3a\xc1\x4c"
                "\x9b\x83\xeb\x05\xa7\x59\xe2\xa0\x81\x03\x01\x00\x00\xa4\x27"
                "\x80\x20\x1e\x5a\xaf\x3e\x46\xf6\xd4\xdf\x4d\x70\xf0\xa1\xd1"
                "\x35\x6d\xf0\x8b\x86\x91\xac\xb2\xf2\x24\xf0\x1a\xd4\x23\xc0"
                "\x21\x8d\x42\xc0\x81\x03\x02\x00\x00\xa3\x82\x02\x08\x80\x82"
                "\x01\x00\xba\x2c\x3b\x50\xb6\xbf\xf9\x0f\x1d\xd7\x32\x4c\x01"
                "\x5f\xff\x2f\x2a\xf6\x33\xd0\xfb\xea\x1f\xa4\xf2\x2d\x22\x8a"
                "\x19\x95\xa9\x17\xb7\x4f\x17\xcf\x55\xcd\x1a\x3a\x5f\x07\x73"
                "\xcc\xaa\x21\x70\x64\xb3\xa0\xf4\xb7\x30\xa3\x82\x37\x93\xc6"
                "\x59\xde\x1b\xa1\x16\x90\x5a\x1a\xf6\x73\xab\x92\xc8\x2f\xf4"
                "\x6f\x5c\xf2\x22\x1d\x30\xf8\x03\xd8\x9b\x5f\x73\x72\x8e\x5f"
                "\xd5\x37\x4b\x43\xda\xfe\x84\x21\x67\xe8\xe3\xd7\x91\x3f\x24"
                "\x1d\xfb\x1f\x12\x6e\xcb\xfc\xb7\x5b\x0a\x35\x73\x3b\xce\x44"
                "\x34\x8e\xcd\x53\xa4\xcf\xa7\x63\x73\xcd\x31\x0f\xe0\x75\x8d"
                "\xe4\xa9\xdc\xfe\xf0\xc9\x3d\x26\xaf\xbf\x7b\x0f\x0e\x17\xb9"
                "\xd0\x4a\x32\x80\x64\x6b\x54\x73\x5a\x50\xc7\x31\x59\xf9\x73"
                "\x72\xa5\x79\xba\xdb\xa1\x14\x8d\x77\x67\x3e\xc0\x5b\xec\x6f"
                "\x0b\xf7\xc5\xee\x5a\xa6\x8d\x49\x63\x81\xbb\xd1\xf9\x9e\xbb"
                "\xed\xb2\xa9\x18\x60\xa7\xee\xeb\x30\xa1\x92\x93\xe8\xd8\x34"
                "\x9e\xac\xd6\x23\xfc\x7f\xcb\xe7\xfe\xa7\xe6\x42\xac\x77\x11"
                "\xc0\x67\x77\xd1\xaa\x5e\xed\x3b\xd5\xa5\x8d\x34\x7c\xd9\x57"
                "\x44\xa7\xc5\x44\x2e\x1e\xe7\x63\xd8\x53\x1b\x9a\xd9\x67\x02"
                "\x13\x32\x61\x81\x82\x01\x00\x77\xe6\x66\x48\x9b\xc5\xfb\x26"
                "\x9b\xef\x75\x1b\xc1\x5e\x04\x44\x67\xe6\xea\x00\x2d\xc4\x11"
                "\x63\xe8\x2e\xc2\xf4\x37\xdf\x85\xb8\x32\xe0\x4a\x86\xe9\x5f"
                "\xf8\xbd\x25\x41\xc5\x54\x64\x86\xcd\xe6\x72\x75\x9d\x8d\x05"
                "\xd1\x8a\xe6\x0d\x2a\x96\x9f\x18\x22\x8a\x75\x92\x18\x2c\x6f"
                "\xa1\xd8\x00\x0e\x46\x6c\x34\xa3\xba\x78\xd6\x81\x83\xb4\x4a"
                "\xdc\x2f\xa0\x90\xcf\x42\x46\x02\x9e\x27\x94\xbe\xe8\x7f\xd3"
                "\xab\x91\xa3\x8d\x4b\xbd\x11\xf2\x4c\x6c\xb7\x46\xda\xe4\xc1"
                "\xe6\x23\xaf\x36\x14\xb9\xa5\x98\xb1\x81\x03\xcc\xb6\x4e\xb1"
                "\xb6\xed\x28\xf5\xbf\xce\x9e\x5b\x81\x82\x07\x4b\x9e\xff\xd5"
                "\xf5\xe0\x4f\x5b\xc5\x3e\xac\x2e\xc4\xbe\x28\x13\xe0\x79\xfe"
                "\xaf\x14\x5d\xc4\x93\x54\xec\xbc\x6c\xbd\xe1\xd1\xbe\x89\xeb"
                "\xc8\x18\x14\x37\x37\x84\xa6\x43\x7c\x0b\xf0\xb1\x7b\x1c\x90"
                "\xe3\x26\x69\xfe\xfd\x1a\x31\x1f\x5d\x39\x0b\x77\x42\xf6\x7b"
                "\x14\x99\x73\xe8\xd7\xff\x72\x44\x3b\xe6\xd5\xfd\xcd\x25\xa2"
                "\x72\xbc\xde\x02\xa6\xee\x39\x2e\xd7\x68\x5a\x86\x32\x1b\x9c"
                "\x39\x92\x43\x7f\x25\x7c\x9a\x32\x17\xd1\x46\x43\x35\xe9\x09"
                "\x28\x37\x14\xbb\x2c\x99\x8e\xd1\xa1\x79\xa0\x25\x80\x20\x5d"
                "\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b"
                "\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb"
                "\x4e\x81\x01\x09\xa3\x27\x80\x20\xe5\x15\x0a\xbd\xf6\x06\xbe"
                "\xaa\x6c\x81\xf1\x88\x7e\x70\x64\x51\xeb\x6f\x70\xb1\xdd\xc5"
                "\xf1\x20\x53\xf7\xcb\x9f\x7f\xc7\xe4\x52\x81\x03\x01\x00\x00"
                "\xa4\x27\x80\x20\x00\x8b\xe6\x62\xd4\x30\x65\x1e\x40\xb3\x23"
                "\x05\x52\x3a\xf3\x16\xda\x09\xbe\x79\x5f\x41\xc9\x03\x93\x34"
                "\x5b\x7c\x24\x87\x62\xfa\x81\x03\x02\x00\x00\xa3\x82\x02\x08"
                "\x80\x82\x01\x00\xd9\x25\xc3\xba\x0a\x46\x6e\xa9\x1d\x05\xd7"
                "\x54\xf1\xff\xf4\xaf\xe5\x13\xcf\xd6\x74\xb0\xcf\xc2\x8c\x68"
                "\x5c\xa9\xf3\x44\x4b\xfd\x4a\x4d\x29\x64\xbc\xa8\x98\xf5\x35"
                "\x0a\x65\xe5\xcd\x5d\x08\x9f\x58\x22\xed\x21\x78\x04\x4d\x2a"
                "\xce\x80\x33\x19\x5b\x7a\xbd\xa6\x89\xfa\x80\xa4\xf5\x32\xa6"
                "\xb1\x34\x61\x55\x5a\xbd\x05\xaf\x4b\x4b\xdf\xe0\xa9\x3e\x1d"
                "\x2f\x3e\xaf\x0c\x65\x32\xc6\xf2\xe0\x5c\x09\xc0\xa2\x41\xe6"
                "\xc9\x96\x5e\x88\x62\x4a\x28\x4b\x23\x2f\xcf\xb3\xb7\x1e\x11"
                "\x7f\xc4\x63\x1a\xe4\x24\x29\x46\xf4\x48\xde\x30\x45\x97\xf8"
                "\x6c\x8d\x4e\x4a\xce\x5e\x41\xb2\xb7\x5a\xd5\x94\x42\x5a\x14"
                "\xd1\x11\x99\xc5\xeb\x66\xbe\xb1\xc6\xc3\xdb\x2f\x8f\xa0\x6c"
                "\xa9\x27\x0f\xc0\x92\x77\x0b\x8d\x66\xb8\x93\x0b\xc0\x5c\xcb"
                "\x51\x4e\xa3\x83\xd2\xbd\x04\xd8\xc0\x0c\xb2\xf7\x38\x4e\x6a"
                "\xec\xfe\x76\xd9\x71\x0b\x90\x21\x7c\xbf\x07\xc4\xd8\x4c\x6d"
                "\xb9\x35\x48\x5d\x82\xea\x61\xc5\x14\xff\x25\x50\x47\xaf\x06"
                "\x58\xa9\x95\x2c\xdd\xe5\xbd\x95\x4a\x7b\x27\xa1\x46\xe3\xf0"
                "\x16\xe8\xf9\xba\x43\xb8\x77\xdc\x87\x81\x3a\xc0\xf2\xed\x3b"
                "\x03\x5e\xe6\x89\x71\x81\x82\x01\x00\x64\x4a\x46\x9e\x1f\x43"
                "\x16\x65\x55\x9d\x4a\x79\x9d\xb0\x4c\xd2\x07\x30\xe5\x34\x54"
                "\xb5\x98\x77\x3c\xeb\x94\x93\xe7\x3c\x13\x07\x8e\xdf\xbf\xf2"
                "\x0c\x9e\x32\x58\xa3\x52\x81\x3e\x7a\xca\x42\x88\xf6\x83\xab"
                "\xfa\x0a\x06\x20\xaf\xe4\xd8\xfb\x4b\xf4\xfe\xf9\xcf\xb8\x66"
                "\x1d\xbd\x0d\xe3\x98\x08\xf2\xad\x85\xbc\x85\xa4\xe5\xcc\x67"
                "\x4e\x66\x9c\x3e\x78\x5d\xa9\x8d\x6a\xd5\x7f\xe5\xbf\x76\x9e"
                "\x82\xa0\xc3\x5f\xdb\x14\x21\x6b\xf5\x1c\x3f\x3b\x5c\x6a\xbb"
                "\x26\xb8\xcc\xf9\x7c\x36\x12\xbb\x26\x8b\xd2\x22\x91\x48\x3f"
                "\x32\xfc\xd8\x37\xf6\x9d\xdb\x8a\x74\xd0\x4c\x5f\x95\x75\x7f"
                "\xa1\x07\xa2\x89\x22\x83\x37\x72\x75\xd1\x40\xf1\xf7\x36\x57"
                "\xd7\x93\xf4\xcd\xbc\xbc\xa4\x70\xf3\x70\x92\x92\xa4\xf4\xb6"
                "\x1b\x15\x9c\xd5\x35\x61\xd9\x88\x1e\xb1\xe1\x8d\x82\xae\xb4"
                "\x95\x4a\x2a\xa8\x94\x62\xda\xc0\xef\x9b\x7c\x93\xcd\x22\x04"
                "\x94\x85\xf4\x3a\x37\x55\x9b\x90\xfc\x73\x7f\xaa\x1f\x26\xc7"
                "\xc2\x1c\x2a\x48\x2e\x6f\x0c\xa5\x7c\xea\x46\x58\xf5\x2a\x1e"
                "\x8d\x72\xf9\x87\xf3\x06\xef\x63\xb6\x1d\x00\x32\xb7\xa4\x0e"
                "\xf4\x67\x60\xfb\x16\x99\xb7\x0d\x4e\x6a\xa4\x64\x80\x20\xe8"
                "\xb1\xe9\x04\xef\x8f\x78\x4c\x54\xf2\x45\x60\x93\xb4\xc6\xa4"
                "\xc2\x9a\xa9\xb7\x5a\x0b\x06\xf1\x78\xdc\xa9\x08\x12\xb2\x2f"
                "\xf4\x81\x40\x03\x17\xa0\x49\x7b\xee\x0d\x84\x64\xee\xa8\xc1"
                "\xe6\x3e\xc6\xed\xd6\x25\x7e\x7d\xad\x96\xf3\x82\x4a\xa6\xb1"
                "\x38\xf1\x2f\x54\x6a\x52\x39\x26\x08\x2d\xe6\xfd\xb2\xfa\x23"
                "\xb3\x91\x30\x07\x9a\x4b\x63\xbb\x6f\x55\xcb\x0a\xe9\xb1\xfb"
                "\x40\x9e\x1f\x87\x70\x5a\x07\xa1\x81\xd3\xa0\x25\x80\x20\x5d"
                "\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b"
                "\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb"
                "\x4e\x81\x01\x09\xa1\x2b\x80\x20\xa9\x0d\x2e\x53\x03\x1e\x33"
                "\xe8\x3e\xc6\x01\x44\x01\x19\x24\x8b\x09\xc1\xa5\x2e\x21\xd2"
                "\xdf\x6c\x40\x6a\x75\xc7\x26\xf5\xa1\xa5\x81\x03\x01\x0c\x2a"
                "\x82\x02\x04\x30\xa2\x2b\x80\x20\x2a\x7a\xb5\x86\x22\x51\xf5"
                "\xe7\x17\x8d\xc9\xc4\xae\xcb\x91\xc1\x10\x61\x0c\xce\x6f\x7a"
                "\xa8\x5f\x21\x1d\xd8\x55\x36\x51\x7c\x44\x81\x03\x01\x04\x00"
                "\x82\x02\x04\x10\xa3\x27\x80\x20\x55\x6b\x6d\xe3\x00\xd4\xf3"
                "\x7e\x75\x3a\x68\xfc\x25\xdf\xf2\xf7\x18\x54\xa5\x55\x0c\xa5"
                "\xa9\x65\xbf\x66\x9e\x4e\x49\x56\x1e\xf1\x81\x03\x01\x00\x00"
                "\xa4\x27\x80\x20\xe4\x66\x69\x86\x87\x57\x0e\xac\xf1\xfd\x06"
                "\x81\x48\x90\x82\x42\x48\x50\x75\x8e\xd4\x2d\xf3\x02\x37\x89"
                "\x28\xc5\x68\xd7\xa0\x11\x81\x03\x02\x00\x00"s;
            auto const thresh0EncodedCondition =
                "\xa2\x2b\x80\x20\x5f\xdf\xad\xab\xf3\x7f\x38\x0d\x95\x4b\x02"
                "\xf3\xbf\x88\x48\x5a\xb5\xe7\x1f\xb3\xab\x25\x31\xcd\x8b\x74"
                "\x54\x59\x1a\x25\x48\x17\x81\x03\x09\x54\x2a\x82\x02\x03\xd8"s;
            auto const thresh0EncodedFingerprint =
                "\x30\x82\x01\x80\x80\x01\x04\xa1\x82\x01\x79\xa0\x25\x80\x20"
                "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
                "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
                "\xeb\x4e\x81\x01\x09\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1"
                "\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21"
                "\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa1"
                "\x2b\x80\x20\xa9\x0d\x2e\x53\x03\x1e\x33\xe8\x3e\xc6\x01\x44"
                "\x01\x19\x24\x8b\x09\xc1\xa5\x2e\x21\xd2\xdf\x6c\x40\x6a\x75"
                "\xc7\x26\xf5\xa1\xa5\x81\x03\x01\x0c\x2a\x82\x02\x04\x30\xa2"
                "\x2b\x80\x20\x2a\x7a\xb5\x86\x22\x51\xf5\xe7\x17\x8d\xc9\xc4"
                "\xae\xcb\x91\xc1\x10\x61\x0c\xce\x6f\x7a\xa8\x5f\x21\x1d\xd8"
                "\x55\x36\x51\x7c\x44\x81\x03\x01\x04\x00\x82\x02\x04\x10\xa2"
                "\x2b\x80\x20\xd4\xde\x10\x1e\x61\xfe\x8c\xab\x21\xe0\x2b\x9f"
                "\xf2\x46\x62\xc2\x16\xcc\xd2\x77\xaf\x75\xb1\x85\x47\xaa\x76"
                "\xfd\xcb\xfb\xf4\x57\x81\x03\x04\x24\x00\x82\x02\x03\x98\xa3"
                "\x27\x80\x20\x38\xb9\xf0\xeb\x68\x8b\x9f\x55\x37\x9a\xec\x07"
                "\xd4\xa2\x13\xac\x34\xa1\x67\x31\x34\xea\xc2\x2f\xef\x13\xe3"
                "\x5c\xcf\x8f\x90\x1e\x81\x03\x01\x00\x00\xa3\x27\x80\x20\x55"
                "\x6b\x6d\xe3\x00\xd4\xf3\x7e\x75\x3a\x68\xfc\x25\xdf\xf2\xf7"
                "\x18\x54\xa5\x55\x0c\xa5\xa9\x65\xbf\x66\x9e\x4e\x49\x56\x1e"
                "\xf1\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x7c\x54\x6a\x6d\x7f"
                "\x00\x52\x31\x03\xe7\xb4\x5b\x1c\x9f\x72\xeb\x3c\x18\x08\xa3"
                "\x24\xb2\x63\x5f\x77\x55\x4a\x42\xdb\x1e\xff\x1e\x81\x03\x02"
                "\x00\x00\xa4\x27\x80\x20\xe4\x66\x69\x86\x87\x57\x0e\xac\xf1"
                "\xfd\x06\x81\x48\x90\x82\x42\x48\x50\x75\x8e\xd4\x2d\xf3\x02"
                "\x37\x89\x28\xc5\x68\xd7\xa0\x11\x81\x03\x02\x00\x00"s;
            check(
                &thresh0,
                thresh0Msg,
                thresh0EncodedFulfillment,
                thresh0EncodedCondition,
                thresh0EncodedFingerprint);
        }
    }

    void
    testThresh46()
    {
        testcase("Thresh46");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * thresh0
        // ** Preim28Cond
        // ** Rsa29Cond
        // ** Ed30Cond
        // ** thresh1
        // *** Preim8Cond
        // *** Rsa9Cond
        // *** Ed10Cond
        // *** Thresh11Cond
        // *** rsa2
        // *** thresh3
        // **** Preim5Cond
        // **** Rsa6Cond
        // **** Ed7Cond
        // **** rsa4
        // ** prefix16
        // *** prefix17
        // **** thresh18
        // ***** Preim20Cond
        // ***** Rsa21Cond
        // ***** Ed22Cond
        // ***** rsa19
        // ** thresh23
        // *** Preim25Cond
        // *** Rsa26Cond
        // *** Ed27Cond
        // *** rsa24

        auto const rsa2Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa2PublicKey{
            {0xba, 0x2c, 0x3b, 0x50, 0xb6, 0xbf, 0xf9, 0x0f, 0x1d, 0xd7, 0x32,
             0x4c, 0x01, 0x5f, 0xff, 0x2f, 0x2a, 0xf6, 0x33, 0xd0, 0xfb, 0xea,
             0x1f, 0xa4, 0xf2, 0x2d, 0x22, 0x8a, 0x19, 0x95, 0xa9, 0x17, 0xb7,
             0x4f, 0x17, 0xcf, 0x55, 0xcd, 0x1a, 0x3a, 0x5f, 0x07, 0x73, 0xcc,
             0xaa, 0x21, 0x70, 0x64, 0xb3, 0xa0, 0xf4, 0xb7, 0x30, 0xa3, 0x82,
             0x37, 0x93, 0xc6, 0x59, 0xde, 0x1b, 0xa1, 0x16, 0x90, 0x5a, 0x1a,
             0xf6, 0x73, 0xab, 0x92, 0xc8, 0x2f, 0xf4, 0x6f, 0x5c, 0xf2, 0x22,
             0x1d, 0x30, 0xf8, 0x03, 0xd8, 0x9b, 0x5f, 0x73, 0x72, 0x8e, 0x5f,
             0xd5, 0x37, 0x4b, 0x43, 0xda, 0xfe, 0x84, 0x21, 0x67, 0xe8, 0xe3,
             0xd7, 0x91, 0x3f, 0x24, 0x1d, 0xfb, 0x1f, 0x12, 0x6e, 0xcb, 0xfc,
             0xb7, 0x5b, 0x0a, 0x35, 0x73, 0x3b, 0xce, 0x44, 0x34, 0x8e, 0xcd,
             0x53, 0xa4, 0xcf, 0xa7, 0x63, 0x73, 0xcd, 0x31, 0x0f, 0xe0, 0x75,
             0x8d, 0xe4, 0xa9, 0xdc, 0xfe, 0xf0, 0xc9, 0x3d, 0x26, 0xaf, 0xbf,
             0x7b, 0x0f, 0x0e, 0x17, 0xb9, 0xd0, 0x4a, 0x32, 0x80, 0x64, 0x6b,
             0x54, 0x73, 0x5a, 0x50, 0xc7, 0x31, 0x59, 0xf9, 0x73, 0x72, 0xa5,
             0x79, 0xba, 0xdb, 0xa1, 0x14, 0x8d, 0x77, 0x67, 0x3e, 0xc0, 0x5b,
             0xec, 0x6f, 0x0b, 0xf7, 0xc5, 0xee, 0x5a, 0xa6, 0x8d, 0x49, 0x63,
             0x81, 0xbb, 0xd1, 0xf9, 0x9e, 0xbb, 0xed, 0xb2, 0xa9, 0x18, 0x60,
             0xa7, 0xee, 0xeb, 0x30, 0xa1, 0x92, 0x93, 0xe8, 0xd8, 0x34, 0x9e,
             0xac, 0xd6, 0x23, 0xfc, 0x7f, 0xcb, 0xe7, 0xfe, 0xa7, 0xe6, 0x42,
             0xac, 0x77, 0x11, 0xc0, 0x67, 0x77, 0xd1, 0xaa, 0x5e, 0xed, 0x3b,
             0xd5, 0xa5, 0x8d, 0x34, 0x7c, 0xd9, 0x57, 0x44, 0xa7, 0xc5, 0x44,
             0x2e, 0x1e, 0xe7, 0x63, 0xd8, 0x53, 0x1b, 0x9a, 0xd9, 0x67, 0x02,
             0x13, 0x32, 0x61}};
        std::array<std::uint8_t, 256> const rsa2Sig{
            {0x99, 0xa8, 0x47, 0x7a, 0xd2, 0x4e, 0x43, 0x50, 0xc4, 0x0a, 0x5a,
             0x03, 0xde, 0xd2, 0x63, 0x74, 0xb4, 0x37, 0x1c, 0xcf, 0x9c, 0x79,
             0xf1, 0xc1, 0x5e, 0xd6, 0x61, 0x2a, 0x71, 0x8e, 0xaf, 0x61, 0x07,
             0x88, 0x4f, 0x25, 0xaa, 0x39, 0x02, 0x50, 0x25, 0x0c, 0xa0, 0xc0,
             0xfa, 0x98, 0xa1, 0x51, 0x0d, 0x98, 0xa4, 0xe2, 0xb0, 0xce, 0x85,
             0x3a, 0xb5, 0x9e, 0x2e, 0x98, 0x02, 0xbc, 0xb0, 0xed, 0x66, 0xc1,
             0x44, 0xcf, 0x63, 0x13, 0x51, 0x5a, 0x9a, 0xcb, 0x73, 0x9b, 0x41,
             0xea, 0x2a, 0xc3, 0x7a, 0x0f, 0x9b, 0xa8, 0x08, 0xd6, 0x18, 0x47,
             0x05, 0xbe, 0x0b, 0xaa, 0xe3, 0x85, 0x10, 0xa0, 0x1f, 0x91, 0x7c,
             0x81, 0x01, 0x5a, 0xe9, 0x08, 0xb7, 0x14, 0xb5, 0xd6, 0xf2, 0x96,
             0x84, 0x52, 0x41, 0x1c, 0xd0, 0x60, 0xa0, 0xda, 0x32, 0x9e, 0xa2,
             0x05, 0xb9, 0x0d, 0xef, 0xe3, 0x33, 0x08, 0x69, 0xd8, 0x08, 0x46,
             0xb0, 0x7e, 0x48, 0xb5, 0x90, 0x19, 0x97, 0x48, 0xd5, 0x31, 0x5e,
             0x23, 0x8b, 0x38, 0xa1, 0x99, 0xdd, 0x53, 0xc4, 0xa8, 0xb3, 0xd2,
             0xe2, 0x62, 0x1a, 0xcc, 0x02, 0x00, 0x3e, 0x95, 0x2b, 0x19, 0xfa,
             0x6d, 0xc9, 0x23, 0x6a, 0xc7, 0x78, 0x7b, 0xde, 0x12, 0xba, 0xb4,
             0x79, 0x01, 0x01, 0x1a, 0x3c, 0xee, 0x60, 0x03, 0x5d, 0x8a, 0x9f,
             0x57, 0x19, 0xe4, 0xe7, 0x94, 0xe2, 0x2e, 0xbf, 0x39, 0x48, 0x21,
             0x51, 0x9e, 0xb3, 0xb6, 0xc9, 0x94, 0xde, 0x0d, 0xeb, 0xa9, 0x48,
             0x8b, 0xee, 0xa4, 0x12, 0x83, 0xf8, 0x42, 0xdf, 0x21, 0xbd, 0xee,
             0x4d, 0x9e, 0xfb, 0xfb, 0x45, 0xdd, 0x24, 0x9e, 0x19, 0x55, 0xb9,
             0x6b, 0xae, 0x08, 0xd7, 0xf2, 0x9f, 0xc9, 0xb4, 0xb7, 0xb3, 0x7d,
             0x40, 0xaa, 0xda, 0x41, 0xd0, 0xbf, 0x2c, 0x26, 0xa2, 0xf9, 0xcc,
             0x65, 0x71, 0x0b}};
        auto const rsa4Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa4PublicKey{
            {0xbe, 0x09, 0xc5, 0xa4, 0x27, 0x29, 0xdf, 0xd4, 0x67, 0x76, 0xbe,
             0xbf, 0x2c, 0xf3, 0xa2, 0x0b, 0x42, 0xe4, 0xbf, 0xeb, 0xdd, 0x67,
             0x20, 0xfb, 0x7a, 0x27, 0x93, 0xc0, 0x78, 0x47, 0x78, 0xd7, 0x15,
             0x32, 0xee, 0x38, 0x81, 0x0d, 0x36, 0xa2, 0xc4, 0x65, 0x44, 0xe6,
             0x62, 0x26, 0xb9, 0x58, 0x13, 0xa4, 0x15, 0x82, 0xab, 0xb1, 0x16,
             0x61, 0xfc, 0x01, 0x98, 0xc6, 0x1a, 0x69, 0xc6, 0xba, 0x39, 0x3f,
             0x01, 0x55, 0x3d, 0xd7, 0x8e, 0x14, 0x42, 0x6d, 0x78, 0x74, 0x9b,
             0x28, 0xcb, 0x31, 0x39, 0x98, 0x5a, 0x11, 0xdc, 0xc1, 0x18, 0x9d,
             0x8d, 0xb0, 0xcd, 0x1b, 0x4c, 0x10, 0xab, 0x14, 0x64, 0x19, 0xf1,
             0x33, 0x15, 0x45, 0xc8, 0x92, 0x82, 0x03, 0x82, 0x8a, 0xaa, 0xad,
             0x94, 0xfc, 0x24, 0x11, 0x96, 0x99, 0x7e, 0x94, 0x5a, 0x82, 0x57,
             0x68, 0x61, 0x9f, 0x7b, 0x45, 0xe0, 0x99, 0x9e, 0x4f, 0x32, 0x50,
             0x5f, 0x05, 0xc8, 0x11, 0xae, 0xc4, 0x0c, 0x63, 0x18, 0x0e, 0x02,
             0x59, 0x36, 0x25, 0x92, 0x06, 0x32, 0xc7, 0x71, 0x47, 0x99, 0xcc,
             0x0a, 0x6e, 0x0a, 0x58, 0x71, 0x3f, 0x5e, 0xb7, 0x78, 0xf7, 0x98,
             0x79, 0xdf, 0x74, 0xa4, 0xeb, 0xa9, 0x00, 0xfd, 0x81, 0xb3, 0xcf,
             0x04, 0x8c, 0x5d, 0x7d, 0xe7, 0xb2, 0x82, 0x90, 0x49, 0xbd, 0x69,
             0xf3, 0x08, 0xe9, 0x92, 0xc6, 0x9e, 0x41, 0xba, 0x74, 0xd8, 0x8d,
             0x81, 0x97, 0x6f, 0x86, 0xab, 0xc9, 0xf1, 0x02, 0x31, 0xb4, 0xce,
             0x47, 0xb0, 0x39, 0xc8, 0xba, 0x51, 0xa7, 0x39, 0xf3, 0x71, 0xa2,
             0x25, 0x27, 0x37, 0x6e, 0x09, 0x6f, 0x19, 0x59, 0xbc, 0x65, 0xd9,
             0xcd, 0x12, 0xd3, 0x2c, 0xa2, 0x78, 0xfa, 0x23, 0x15, 0x1a, 0x82,
             0x41, 0x91, 0x1b, 0xbe, 0x8a, 0xe7, 0xfe, 0x3c, 0x3c, 0x30, 0x32,
             0xaa, 0xe9, 0xf3}};
        std::array<std::uint8_t, 256> const rsa4Sig{
            {0x93, 0x97, 0x97, 0x26, 0xee, 0x8e, 0xb1, 0xd2, 0x7d, 0x68, 0x1e,
             0x7e, 0xb7, 0x44, 0x35, 0x1b, 0x27, 0x10, 0x36, 0x6a, 0xae, 0x86,
             0xb8, 0x5e, 0xf1, 0x01, 0x9f, 0x04, 0xbf, 0x5c, 0xb0, 0xf5, 0x87,
             0xb0, 0x94, 0x47, 0xbe, 0x3b, 0xef, 0xff, 0x44, 0xc9, 0x94, 0x08,
             0x82, 0xc9, 0x0a, 0xfc, 0xd9, 0xcb, 0xb6, 0x07, 0x2d, 0x3d, 0x4c,
             0x3f, 0x9e, 0x44, 0xf9, 0x99, 0x4f, 0x0b, 0x45, 0xee, 0x68, 0x3e,
             0x65, 0x13, 0x55, 0xda, 0x49, 0xbe, 0x65, 0x34, 0xec, 0x69, 0x8a,
             0x52, 0x2c, 0xcc, 0x7d, 0x0a, 0xfa, 0xb3, 0x67, 0xc9, 0x49, 0x8f,
             0xd6, 0xf2, 0xf4, 0x3a, 0x16, 0x8e, 0x46, 0xe2, 0x04, 0x59, 0x87,
             0x57, 0xd8, 0x03, 0xaf, 0xd5, 0x52, 0xf3, 0x4d, 0xe3, 0xdd, 0xa8,
             0xbe, 0x0c, 0x08, 0x48, 0x24, 0xd9, 0x46, 0x44, 0x2a, 0x75, 0xc5,
             0xa5, 0x2f, 0xd2, 0xb2, 0x5b, 0xaa, 0x12, 0xc4, 0xbc, 0xc8, 0x4a,
             0x16, 0xb0, 0xaa, 0xa3, 0x83, 0x07, 0xda, 0x8d, 0xaa, 0x36, 0x31,
             0xf1, 0x99, 0xa0, 0x7e, 0x58, 0xe6, 0x5c, 0xb8, 0xe7, 0x0d, 0x58,
             0xbf, 0x57, 0x61, 0x65, 0xf5, 0x2e, 0x9d, 0xec, 0xf9, 0x6a, 0x64,
             0x86, 0xab, 0xae, 0x83, 0x51, 0x5f, 0x4d, 0x30, 0x4e, 0x4d, 0x29,
             0x38, 0x03, 0x58, 0xd4, 0x7d, 0xf1, 0xa3, 0xcd, 0x09, 0xfc, 0x08,
             0xa1, 0x8e, 0x85, 0x13, 0xfe, 0x3c, 0x27, 0xe1, 0x57, 0xdd, 0xb9,
             0xe9, 0x16, 0x93, 0x19, 0xab, 0x3a, 0xdc, 0xdf, 0x35, 0x24, 0x8f,
             0x41, 0x34, 0x32, 0xa9, 0xcf, 0x02, 0xdf, 0x03, 0x7b, 0x45, 0x7a,
             0x8a, 0x3b, 0xde, 0xfa, 0xc0, 0x30, 0xb6, 0x59, 0x1c, 0x26, 0x17,
             0xe1, 0x58, 0xce, 0xff, 0x00, 0x21, 0x48, 0xb9, 0x57, 0x27, 0x65,
             0x82, 0xf3, 0x2e, 0x7e, 0x2a, 0xbe, 0x7a, 0x51, 0x96, 0xd1, 0x74,
             0xbb, 0x62, 0x86}};
        auto const thresh3Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim5CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim5Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim5CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa6CondConditionFingerprint =
            "\xee\x75\xbe\xb3\x52\x54\xbd\x24\x06\x3f\xd9\x32\x48\x19\xe1"
            "\x5c\x70\x85\x92\x11\x6c\x3a\xc1\x4c\x9b\x83\xeb\x05\xa7\x59"
            "\xe2\xa0"s;
        Condition const Rsa6Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa6CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed7CondConditionFingerprint =
            "\x1e\x5a\xaf\x3e\x46\xf6\xd4\xdf\x4d\x70\xf0\xa1\xd1\x35\x6d"
            "\xf0\x8b\x86\x91\xac\xb2\xf2\x24\xf0\x1a\xd4\x23\xc0\x21\x8d"
            "\x42\xc0"s;
        Condition const Ed7Cond{Type::ed25519Sha256,
                                131072,
                                makeSlice(Ed7CondConditionFingerprint),
                                std::bitset<5>{0}};
        auto const thresh1Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim8CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim8Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim8CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa9CondConditionFingerprint =
            "\xe5\x15\x0a\xbd\xf6\x06\xbe\xaa\x6c\x81\xf1\x88\x7e\x70\x64"
            "\x51\xeb\x6f\x70\xb1\xdd\xc5\xf1\x20\x53\xf7\xcb\x9f\x7f\xc7"
            "\xe4\x52"s;
        Condition const Rsa9Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa9CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed10CondConditionFingerprint =
            "\x00\x8b\xe6\x62\xd4\x30\x65\x1e\x40\xb3\x23\x05\x52\x3a\xf3"
            "\x16\xda\x09\xbe\x79\x5f\x41\xc9\x03\x93\x34\x5b\x7c\x24\x87"
            "\x62\xfa"s;
        Condition const Ed10Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed10CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Thresh11CondConditionFingerprint =
            "\x67\xf9\x58\xcd\x83\xc7\xe8\x61\xc5\xd6\xc6\x74\x63\x5e\x10"
            "\x49\x97\x4a\xdc\x6f\x31\x30\x72\xd7\x25\xab\x2c\xb5\x0e\xe7"
            "\x39\xe2"s;
        Condition const Thresh11Cond{
            Type::thresholdSha256,
            135168,
            makeSlice(Thresh11CondConditionFingerprint),
            std::bitset<5>{25}};
        auto const rsa19Msg = "P17P16abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa19PublicKey{
            {0xc0, 0x81, 0x79, 0x3f, 0x26, 0x8f, 0xe8, 0x48, 0xf1, 0x9c, 0xd2,
             0x09, 0x7c, 0x96, 0x0d, 0x3c, 0xbb, 0x85, 0xdb, 0x1f, 0xab, 0xbe,
             0x97, 0x7d, 0xc0, 0x31, 0x07, 0xb0, 0x2e, 0xb9, 0x5c, 0x2c, 0xae,
             0x82, 0xf5, 0x3e, 0xb6, 0x91, 0xb8, 0x88, 0x2a, 0xa4, 0xa7, 0x81,
             0x97, 0xa5, 0x71, 0xad, 0x09, 0x4d, 0xfc, 0x25, 0x41, 0x3e, 0xe0,
             0xa3, 0xa6, 0x19, 0xba, 0x8f, 0x02, 0x41, 0x8d, 0x05, 0x51, 0xcd,
             0xf8, 0x22, 0xb3, 0x7a, 0x6e, 0x94, 0x7e, 0xaa, 0x58, 0xda, 0x02,
             0xae, 0x73, 0x00, 0x94, 0x1c, 0xb5, 0xb5, 0x26, 0x9f, 0xc5, 0x8b,
             0x04, 0xe0, 0xe0, 0x73, 0x96, 0x4b, 0xaf, 0x6d, 0x0a, 0xe4, 0x25,
             0x90, 0x2d, 0x13, 0x3c, 0xbe, 0x0e, 0x68, 0x7d, 0xfe, 0xa6, 0x12,
             0x6b, 0xb6, 0xec, 0xa0, 0xda, 0x2b, 0x22, 0x31, 0xe6, 0x05, 0x76,
             0xf5, 0x98, 0x8e, 0x76, 0x86, 0xbe, 0xc6, 0x07, 0x73, 0x52, 0x20,
             0x13, 0x8f, 0x93, 0x1f, 0xd9, 0x73, 0xfa, 0xb3, 0xed, 0x50, 0x1b,
             0xf7, 0x68, 0xf6, 0x60, 0xa3, 0x12, 0x73, 0x10, 0xda, 0x06, 0x70,
             0x69, 0xcb, 0xb5, 0x6c, 0x85, 0x29, 0xe8, 0x9e, 0x29, 0xb1, 0x4d,
             0x7e, 0x7e, 0xce, 0x15, 0xf5, 0x25, 0x55, 0xc5, 0x89, 0x7e, 0x34,
             0x48, 0x34, 0x43, 0x30, 0x2b, 0x6a, 0x8a, 0x6d, 0x1b, 0x55, 0x2a,
             0x2c, 0xf4, 0xcd, 0xc1, 0x72, 0x78, 0xda, 0x0d, 0x54, 0x32, 0x46,
             0x93, 0xd7, 0x96, 0xce, 0x33, 0x06, 0xe9, 0x7a, 0x7b, 0x6d, 0xe9,
             0x54, 0xe4, 0xbe, 0x56, 0x37, 0xa7, 0x7c, 0xc8, 0xba, 0x17, 0xb1,
             0xba, 0x76, 0xd7, 0x7f, 0xca, 0x7f, 0xfe, 0x60, 0x7d, 0x60, 0x27,
             0xd0, 0x80, 0x65, 0x74, 0xdc, 0xd6, 0xc8, 0x58, 0x4d, 0xcd, 0x8e,
             0xc9, 0x4e, 0xb2, 0x3e, 0x6e, 0x4f, 0xfa, 0x22, 0xfa, 0x9f, 0x3a,
             0x9f, 0x14, 0xeb}};
        std::array<std::uint8_t, 256> const rsa19Sig{
            {0x9c, 0x56, 0x82, 0x0a, 0xc1, 0x59, 0x9f, 0x24, 0x36, 0x3f, 0x20,
             0xb9, 0xe0, 0xe2, 0x94, 0x5a, 0xe9, 0x96, 0x8f, 0x11, 0x44, 0x9e,
             0x11, 0x0f, 0x77, 0x04, 0xe6, 0xd9, 0x0d, 0x4b, 0x4b, 0x7e, 0xc2,
             0x9e, 0xe3, 0x69, 0x76, 0x27, 0x3f, 0x32, 0xe5, 0x8e, 0xa5, 0xf3,
             0xf3, 0x45, 0xff, 0x23, 0xdd, 0x3d, 0xde, 0xd9, 0xc5, 0xdb, 0x6f,
             0xc1, 0x20, 0x8c, 0x1c, 0x7c, 0xe7, 0x12, 0x32, 0x53, 0x81, 0xb6,
             0x2e, 0xb6, 0x89, 0xa3, 0xd4, 0x50, 0xd9, 0x73, 0xc5, 0x05, 0xce,
             0xbd, 0xda, 0xc1, 0xbf, 0x04, 0x8b, 0x13, 0xa7, 0x81, 0x68, 0xd4,
             0x3d, 0xf9, 0xf0, 0x39, 0x2f, 0xf5, 0x36, 0xe6, 0x11, 0x7e, 0x68,
             0xbb, 0x40, 0xca, 0x41, 0x78, 0x09, 0x16, 0x83, 0xd1, 0x04, 0x8e,
             0x87, 0x7d, 0x9a, 0x97, 0x87, 0x46, 0xbf, 0x88, 0x43, 0xbe, 0x72,
             0x20, 0xf7, 0x39, 0xc2, 0xf8, 0x6c, 0xcf, 0x7d, 0x0c, 0x3a, 0xc2,
             0xed, 0xd5, 0x6d, 0x30, 0xd1, 0x3c, 0x05, 0x2d, 0x3a, 0x87, 0x26,
             0x7a, 0xc2, 0x06, 0x16, 0xea, 0x0e, 0x4b, 0xaa, 0x39, 0x7f, 0xcc,
             0x5b, 0x99, 0x5f, 0x9c, 0x2b, 0x2a, 0x3a, 0x3f, 0xa7, 0x6f, 0x1c,
             0x58, 0x50, 0xac, 0x69, 0x58, 0x77, 0xcb, 0x91, 0xec, 0xbe, 0x3d,
             0xb8, 0x5b, 0x77, 0x29, 0x31, 0xc9, 0x65, 0xd0, 0x0d, 0xf1, 0xe8,
             0x75, 0xa7, 0x7f, 0x14, 0xa8, 0x29, 0x42, 0xd9, 0x88, 0xe9, 0xd0,
             0x05, 0x0a, 0x67, 0xaa, 0x56, 0x11, 0xe2, 0x5a, 0xae, 0x53, 0x15,
             0xe1, 0xc1, 0xce, 0x3b, 0xe9, 0x3e, 0x27, 0x64, 0x82, 0x95, 0xde,
             0x4c, 0x57, 0x18, 0xb4, 0x2c, 0x8b, 0x96, 0x41, 0x39, 0x24, 0x14,
             0x83, 0xab, 0xb7, 0xe2, 0xe0, 0x78, 0x1d, 0xb9, 0x83, 0x6d, 0xef,
             0xe9, 0xcd, 0x21, 0x19, 0xe3, 0x12, 0x90, 0x99, 0x06, 0xe5, 0x98,
             0x74, 0x0b, 0xdb}};
        auto const thresh18Msg = "P17P16abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim20CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim20Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim20CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa21CondConditionFingerprint =
            "\x18\x13\xb3\x53\x3a\x10\x06\xee\xf9\x67\xa2\xcb\x27\x5e\xb8"
            "\x79\x5c\x09\xd1\x8f\xa0\xc7\xb3\x95\x59\x14\xf6\x24\x99\x6b"
            "\x1a\xdd"s;
        Condition const Rsa21Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa21CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed22CondConditionFingerprint =
            "\xce\xba\x65\x8f\x48\xe3\x35\x4b\x51\xb6\xfd\xe9\x57\xd7\xb9"
            "\xf0\x9b\x80\xb3\x6e\xdf\x73\x20\x22\x5c\x0a\xda\x13\xf8\xc0"
            "\xa7\x5d"s;
        Condition const Ed22Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed22CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const prefix17Prefix = "P17"s;
        auto const prefix17Msg = "P16abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix17MaxMsgLength = 14;
        auto const prefix16Prefix = "P16"s;
        auto const prefix16Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix16MaxMsgLength = 14;
        auto const rsa24Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa24PublicKey{
            {0xdc, 0xd4, 0x41, 0xf6, 0xaf, 0x90, 0x5d, 0xaf, 0xd4, 0xd9, 0x40,
             0x33, 0x15, 0x57, 0x1e, 0x3c, 0x6b, 0xbc, 0x7d, 0xa3, 0x49, 0x9d,
             0x9b, 0x3a, 0x46, 0xf6, 0x23, 0xfe, 0xfa, 0xe8, 0x31, 0x4d, 0x32,
             0xfe, 0x50, 0x1f, 0x1f, 0xe3, 0x34, 0xcb, 0xe2, 0xec, 0x84, 0x8b,
             0xc7, 0xd3, 0x7e, 0x34, 0xb9, 0x74, 0x05, 0xaf, 0xb9, 0x08, 0x09,
             0x46, 0x6a, 0x98, 0xb0, 0x95, 0xd0, 0x4d, 0xe2, 0xb7, 0x99, 0xd8,
             0x32, 0x3e, 0xdb, 0x37, 0x12, 0xfb, 0x6d, 0xcc, 0x7a, 0xca, 0x61,
             0xa3, 0xdf, 0x82, 0xfb, 0x22, 0x3b, 0x9d, 0x3a, 0x83, 0x23, 0xe2,
             0xca, 0x1f, 0xc1, 0x8b, 0x38, 0x74, 0xca, 0x03, 0x5a, 0x83, 0x0c,
             0x62, 0x33, 0x45, 0x66, 0x97, 0xa1, 0x74, 0x27, 0x40, 0x41, 0x4a,
             0xdc, 0x0c, 0xa8, 0x2d, 0x63, 0xe7, 0x0b, 0x27, 0x2f, 0x76, 0x83,
             0x10, 0x7e, 0x67, 0xf2, 0xf9, 0xce, 0x69, 0x71, 0x40, 0x20, 0x46,
             0xeb, 0x3f, 0xbf, 0x2d, 0xf6, 0x53, 0xb2, 0x9f, 0x68, 0xf1, 0x10,
             0xe3, 0x1c, 0x40, 0x1d, 0xcd, 0x9b, 0xba, 0x3a, 0xbf, 0x94, 0x42,
             0xdf, 0x69, 0xeb, 0x9c, 0xb2, 0xeb, 0xfb, 0xd7, 0xe0, 0x04, 0x21,
             0xf1, 0x09, 0x0b, 0x86, 0xfd, 0x50, 0xcc, 0x95, 0x53, 0x66, 0xd5,
             0x74, 0xd5, 0x4d, 0x99, 0x98, 0x7b, 0x9d, 0x3f, 0xb2, 0x42, 0x3c,
             0x4a, 0xa0, 0x16, 0xaa, 0x77, 0x85, 0xc6, 0xe4, 0x9f, 0x0f, 0x03,
             0xc9, 0x28, 0xfd, 0xf4, 0xdc, 0x2e, 0xfd, 0x12, 0x2e, 0x6d, 0xad,
             0x6c, 0x7d, 0x2e, 0x95, 0x10, 0xe0, 0x82, 0xdd, 0xc3, 0xed, 0xf8,
             0xf4, 0xb7, 0x00, 0xf9, 0x28, 0xf2, 0xb2, 0xe4, 0x85, 0x3a, 0xe0,
             0xda, 0x7c, 0x68, 0x45, 0x7e, 0x95, 0x96, 0x9b, 0xe0, 0xbc, 0xaf,
             0x4a, 0x87, 0x6f, 0x87, 0x7e, 0x10, 0xf7, 0xd3, 0xad, 0x29, 0xb9,
             0xa0, 0xaa, 0xd1}};
        std::array<std::uint8_t, 256> const rsa24Sig{
            {0xaa, 0x22, 0xde, 0xfb, 0xa3, 0x5f, 0xc5, 0x69, 0x24, 0xf6, 0xaf,
             0x4c, 0x17, 0x3e, 0x1d, 0xfd, 0xc3, 0x68, 0xda, 0x2e, 0xa0, 0xd7,
             0x52, 0xf0, 0x01, 0x43, 0x33, 0x4b, 0xa9, 0x21, 0x02, 0xd5, 0x5d,
             0xb0, 0x00, 0x82, 0xa0, 0x97, 0x28, 0xe6, 0x35, 0x55, 0x72, 0x1d,
             0x2c, 0xe3, 0xe5, 0x52, 0x35, 0xfe, 0xdb, 0x79, 0xec, 0x15, 0x87,
             0x35, 0xba, 0x59, 0x72, 0x78, 0x99, 0xee, 0xe9, 0x52, 0xfa, 0x00,
             0xe9, 0x12, 0x0f, 0xe4, 0x07, 0xdb, 0x61, 0x38, 0xcf, 0x17, 0xc5,
             0x26, 0xc6, 0xff, 0xf5, 0x1a, 0x0d, 0xe2, 0xf3, 0x9a, 0x4d, 0xe3,
             0xda, 0x6e, 0x4d, 0xea, 0x28, 0x21, 0xbc, 0xa5, 0x72, 0xc1, 0x04,
             0x5f, 0x62, 0x80, 0x4f, 0xc9, 0x56, 0x52, 0xf1, 0x6a, 0xe6, 0x4a,
             0xb9, 0xfe, 0x76, 0xa9, 0xde, 0x27, 0xc7, 0xa5, 0xd5, 0xb2, 0x49,
             0x1d, 0xad, 0xd6, 0xb4, 0xf1, 0xb1, 0x5c, 0x8f, 0x3f, 0xe7, 0x08,
             0xd3, 0xf7, 0x28, 0xec, 0xcc, 0x24, 0x84, 0x2f, 0xb5, 0x4c, 0x5a,
             0xf5, 0x41, 0xc1, 0x12, 0xde, 0x52, 0x07, 0xf9, 0x1f, 0xfe, 0x9f,
             0x4c, 0xa0, 0x00, 0xbb, 0x8f, 0x5d, 0xd2, 0x52, 0x9d, 0xef, 0x61,
             0x43, 0x93, 0xd4, 0xd7, 0x2c, 0x55, 0x8b, 0xd8, 0x5c, 0xc2, 0xd3,
             0xef, 0xa4, 0x7a, 0x39, 0x55, 0x22, 0x4e, 0xdd, 0xd8, 0x5f, 0xac,
             0x6b, 0x69, 0x47, 0x0b, 0xa2, 0x79, 0xd4, 0x96, 0x0c, 0x89, 0x46,
             0x0f, 0x91, 0xc6, 0xf1, 0xe2, 0xfb, 0xa6, 0x42, 0x7b, 0xdd, 0x4c,
             0x6e, 0x49, 0x04, 0xa7, 0x2f, 0x13, 0x58, 0x1e, 0xe9, 0x25, 0xa6,
             0x27, 0xc0, 0x3e, 0x69, 0x5a, 0x65, 0x18, 0x66, 0x2f, 0x76, 0xa0,
             0x98, 0xb7, 0x61, 0x9e, 0x24, 0xd3, 0xf6, 0xca, 0xe7, 0x3c, 0x49,
             0xe3, 0xca, 0x34, 0x41, 0x66, 0x26, 0xf5, 0x6e, 0x4d, 0x2f, 0x3d,
             0x04, 0x73, 0x24}};
        auto const thresh23Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim25CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim25Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim25CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa26CondConditionFingerprint =
            "\xd6\x40\x0d\x21\x44\x8a\xd4\x5a\xe6\x10\x3f\xd4\x3a\x14\x5a"
            "\x5b\x87\x86\x20\x3c\x43\x20\x9d\x9d\x0c\x75\x57\x80\x7d\xda"
            "\x9d\x06"s;
        Condition const Rsa26Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa26CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed27CondConditionFingerprint =
            "\x6a\x26\x73\x6f\xc3\xbf\x25\x73\x8e\x3b\x27\x79\x47\xa5\x37"
            "\x7c\x78\xa0\x72\xd8\x77\x91\xfc\x45\x87\x7f\x11\x57\xfe\x94"
            "\x57\x45"s;
        Condition const Ed27Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed27CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const thresh0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim28CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim28Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim28CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa29CondConditionFingerprint =
            "\x5c\xe1\xef\x71\xf6\x96\x65\x37\x01\x15\x1a\xdd\xfe\x28\x5d"
            "\xef\x33\x99\x1f\xe9\x6a\x51\x2d\x22\x62\x2c\x2e\x26\xb8\xda"
            "\x1e\xfa"s;
        Condition const Rsa29Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa29CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed30CondConditionFingerprint =
            "\xcc\x8a\x65\x38\xf7\x7c\xf9\x28\xc9\xdd\xf3\x0c\x26\x64\x02"
            "\xde\x89\xd0\x71\xde\x61\x3e\x31\x4d\x9b\x4e\x91\x6f\xcc\x36"
            "\x5c\xa3"s;
        Condition const Ed30Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed30CondConditionFingerprint),
                                 std::bitset<5>{0}};

        auto rsa2 = std::make_unique<RsaSha256>(
            makeSlice(rsa2PublicKey), makeSlice(rsa2Sig));
        auto rsa4 = std::make_unique<RsaSha256>(
            makeSlice(rsa4PublicKey), makeSlice(rsa4Sig));
        std::vector<std::unique_ptr<Fulfillment>> thresh3Subfulfillments;
        thresh3Subfulfillments.emplace_back(std::move(rsa4));
        std::vector<Condition> thresh3Subconditions{
            {Preim5Cond, Rsa6Cond, Ed7Cond}};
        auto thresh3 = std::make_unique<ThresholdSha256>(
            std::move(thresh3Subfulfillments), std::move(thresh3Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh1Subfulfillments;
        thresh1Subfulfillments.emplace_back(std::move(rsa2));
        thresh1Subfulfillments.emplace_back(std::move(thresh3));
        std::vector<Condition> thresh1Subconditions{
            {Preim8Cond, Rsa9Cond, Ed10Cond, Thresh11Cond}};
        auto thresh1 = std::make_unique<ThresholdSha256>(
            std::move(thresh1Subfulfillments), std::move(thresh1Subconditions));
        auto rsa19 = std::make_unique<RsaSha256>(
            makeSlice(rsa19PublicKey), makeSlice(rsa19Sig));
        std::vector<std::unique_ptr<Fulfillment>> thresh18Subfulfillments;
        thresh18Subfulfillments.emplace_back(std::move(rsa19));
        std::vector<Condition> thresh18Subconditions{
            {Preim20Cond, Rsa21Cond, Ed22Cond}};
        auto thresh18 = std::make_unique<ThresholdSha256>(
            std::move(thresh18Subfulfillments),
            std::move(thresh18Subconditions));
        auto prefix17 = std::make_unique<PrefixSha256>(
            makeSlice(prefix17Prefix),
            prefix17MaxMsgLength,
            std::move(thresh18));
        auto prefix16 = std::make_unique<PrefixSha256>(
            makeSlice(prefix16Prefix),
            prefix16MaxMsgLength,
            std::move(prefix17));
        auto rsa24 = std::make_unique<RsaSha256>(
            makeSlice(rsa24PublicKey), makeSlice(rsa24Sig));
        std::vector<std::unique_ptr<Fulfillment>> thresh23Subfulfillments;
        thresh23Subfulfillments.emplace_back(std::move(rsa24));
        std::vector<Condition> thresh23Subconditions{
            {Preim25Cond, Rsa26Cond, Ed27Cond}};
        auto thresh23 = std::make_unique<ThresholdSha256>(
            std::move(thresh23Subfulfillments),
            std::move(thresh23Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh0Subfulfillments;
        thresh0Subfulfillments.emplace_back(std::move(thresh1));
        thresh0Subfulfillments.emplace_back(std::move(prefix16));
        thresh0Subfulfillments.emplace_back(std::move(thresh23));
        std::vector<Condition> thresh0Subconditions{
            {Preim28Cond, Rsa29Cond, Ed30Cond}};
        ThresholdSha256 const thresh0(
            std::move(thresh0Subfulfillments), std::move(thresh0Subconditions));
        {
            auto const thresh0EncodedFulfillment =
                "\xa2\x82\x0b\x09\xa0\x82\x0a\x8a\xa1\x82\x02\xab\x80\x03\x50"
                "\x31\x36\x81\x01\x0e\xa2\x82\x02\x9f\xa1\x82\x02\x9b\x80\x03"
                "\x50\x31\x37\x81\x01\x0e\xa2\x82\x02\x8f\xa2\x82\x02\x8b\xa0"
                "\x82\x02\x0c\xa3\x82\x02\x08\x80\x82\x01\x00\xc0\x81\x79\x3f"
                "\x26\x8f\xe8\x48\xf1\x9c\xd2\x09\x7c\x96\x0d\x3c\xbb\x85\xdb"
                "\x1f\xab\xbe\x97\x7d\xc0\x31\x07\xb0\x2e\xb9\x5c\x2c\xae\x82"
                "\xf5\x3e\xb6\x91\xb8\x88\x2a\xa4\xa7\x81\x97\xa5\x71\xad\x09"
                "\x4d\xfc\x25\x41\x3e\xe0\xa3\xa6\x19\xba\x8f\x02\x41\x8d\x05"
                "\x51\xcd\xf8\x22\xb3\x7a\x6e\x94\x7e\xaa\x58\xda\x02\xae\x73"
                "\x00\x94\x1c\xb5\xb5\x26\x9f\xc5\x8b\x04\xe0\xe0\x73\x96\x4b"
                "\xaf\x6d\x0a\xe4\x25\x90\x2d\x13\x3c\xbe\x0e\x68\x7d\xfe\xa6"
                "\x12\x6b\xb6\xec\xa0\xda\x2b\x22\x31\xe6\x05\x76\xf5\x98\x8e"
                "\x76\x86\xbe\xc6\x07\x73\x52\x20\x13\x8f\x93\x1f\xd9\x73\xfa"
                "\xb3\xed\x50\x1b\xf7\x68\xf6\x60\xa3\x12\x73\x10\xda\x06\x70"
                "\x69\xcb\xb5\x6c\x85\x29\xe8\x9e\x29\xb1\x4d\x7e\x7e\xce\x15"
                "\xf5\x25\x55\xc5\x89\x7e\x34\x48\x34\x43\x30\x2b\x6a\x8a\x6d"
                "\x1b\x55\x2a\x2c\xf4\xcd\xc1\x72\x78\xda\x0d\x54\x32\x46\x93"
                "\xd7\x96\xce\x33\x06\xe9\x7a\x7b\x6d\xe9\x54\xe4\xbe\x56\x37"
                "\xa7\x7c\xc8\xba\x17\xb1\xba\x76\xd7\x7f\xca\x7f\xfe\x60\x7d"
                "\x60\x27\xd0\x80\x65\x74\xdc\xd6\xc8\x58\x4d\xcd\x8e\xc9\x4e"
                "\xb2\x3e\x6e\x4f\xfa\x22\xfa\x9f\x3a\x9f\x14\xeb\x81\x82\x01"
                "\x00\x9c\x56\x82\x0a\xc1\x59\x9f\x24\x36\x3f\x20\xb9\xe0\xe2"
                "\x94\x5a\xe9\x96\x8f\x11\x44\x9e\x11\x0f\x77\x04\xe6\xd9\x0d"
                "\x4b\x4b\x7e\xc2\x9e\xe3\x69\x76\x27\x3f\x32\xe5\x8e\xa5\xf3"
                "\xf3\x45\xff\x23\xdd\x3d\xde\xd9\xc5\xdb\x6f\xc1\x20\x8c\x1c"
                "\x7c\xe7\x12\x32\x53\x81\xb6\x2e\xb6\x89\xa3\xd4\x50\xd9\x73"
                "\xc5\x05\xce\xbd\xda\xc1\xbf\x04\x8b\x13\xa7\x81\x68\xd4\x3d"
                "\xf9\xf0\x39\x2f\xf5\x36\xe6\x11\x7e\x68\xbb\x40\xca\x41\x78"
                "\x09\x16\x83\xd1\x04\x8e\x87\x7d\x9a\x97\x87\x46\xbf\x88\x43"
                "\xbe\x72\x20\xf7\x39\xc2\xf8\x6c\xcf\x7d\x0c\x3a\xc2\xed\xd5"
                "\x6d\x30\xd1\x3c\x05\x2d\x3a\x87\x26\x7a\xc2\x06\x16\xea\x0e"
                "\x4b\xaa\x39\x7f\xcc\x5b\x99\x5f\x9c\x2b\x2a\x3a\x3f\xa7\x6f"
                "\x1c\x58\x50\xac\x69\x58\x77\xcb\x91\xec\xbe\x3d\xb8\x5b\x77"
                "\x29\x31\xc9\x65\xd0\x0d\xf1\xe8\x75\xa7\x7f\x14\xa8\x29\x42"
                "\xd9\x88\xe9\xd0\x05\x0a\x67\xaa\x56\x11\xe2\x5a\xae\x53\x15"
                "\xe1\xc1\xce\x3b\xe9\x3e\x27\x64\x82\x95\xde\x4c\x57\x18\xb4"
                "\x2c\x8b\x96\x41\x39\x24\x14\x83\xab\xb7\xe2\xe0\x78\x1d\xb9"
                "\x83\x6d\xef\xe9\xcd\x21\x19\xe3\x12\x90\x99\x06\xe5\x98\x74"
                "\x0b\xdb\xa1\x79\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75"
                "\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c"
                "\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa3\x27"
                "\x80\x20\x18\x13\xb3\x53\x3a\x10\x06\xee\xf9\x67\xa2\xcb\x27"
                "\x5e\xb8\x79\x5c\x09\xd1\x8f\xa0\xc7\xb3\x95\x59\x14\xf6\x24"
                "\x99\x6b\x1a\xdd\x81\x03\x01\x00\x00\xa4\x27\x80\x20\xce\xba"
                "\x65\x8f\x48\xe3\x35\x4b\x51\xb6\xfd\xe9\x57\xd7\xb9\xf0\x9b"
                "\x80\xb3\x6e\xdf\x73\x20\x22\x5c\x0a\xda\x13\xf8\xc0\xa7\x5d"
                "\x81\x03\x02\x00\x00\xa2\x82\x02\x8b\xa0\x82\x02\x0c\xa3\x82"
                "\x02\x08\x80\x82\x01\x00\xdc\xd4\x41\xf6\xaf\x90\x5d\xaf\xd4"
                "\xd9\x40\x33\x15\x57\x1e\x3c\x6b\xbc\x7d\xa3\x49\x9d\x9b\x3a"
                "\x46\xf6\x23\xfe\xfa\xe8\x31\x4d\x32\xfe\x50\x1f\x1f\xe3\x34"
                "\xcb\xe2\xec\x84\x8b\xc7\xd3\x7e\x34\xb9\x74\x05\xaf\xb9\x08"
                "\x09\x46\x6a\x98\xb0\x95\xd0\x4d\xe2\xb7\x99\xd8\x32\x3e\xdb"
                "\x37\x12\xfb\x6d\xcc\x7a\xca\x61\xa3\xdf\x82\xfb\x22\x3b\x9d"
                "\x3a\x83\x23\xe2\xca\x1f\xc1\x8b\x38\x74\xca\x03\x5a\x83\x0c"
                "\x62\x33\x45\x66\x97\xa1\x74\x27\x40\x41\x4a\xdc\x0c\xa8\x2d"
                "\x63\xe7\x0b\x27\x2f\x76\x83\x10\x7e\x67\xf2\xf9\xce\x69\x71"
                "\x40\x20\x46\xeb\x3f\xbf\x2d\xf6\x53\xb2\x9f\x68\xf1\x10\xe3"
                "\x1c\x40\x1d\xcd\x9b\xba\x3a\xbf\x94\x42\xdf\x69\xeb\x9c\xb2"
                "\xeb\xfb\xd7\xe0\x04\x21\xf1\x09\x0b\x86\xfd\x50\xcc\x95\x53"
                "\x66\xd5\x74\xd5\x4d\x99\x98\x7b\x9d\x3f\xb2\x42\x3c\x4a\xa0"
                "\x16\xaa\x77\x85\xc6\xe4\x9f\x0f\x03\xc9\x28\xfd\xf4\xdc\x2e"
                "\xfd\x12\x2e\x6d\xad\x6c\x7d\x2e\x95\x10\xe0\x82\xdd\xc3\xed"
                "\xf8\xf4\xb7\x00\xf9\x28\xf2\xb2\xe4\x85\x3a\xe0\xda\x7c\x68"
                "\x45\x7e\x95\x96\x9b\xe0\xbc\xaf\x4a\x87\x6f\x87\x7e\x10\xf7"
                "\xd3\xad\x29\xb9\xa0\xaa\xd1\x81\x82\x01\x00\xaa\x22\xde\xfb"
                "\xa3\x5f\xc5\x69\x24\xf6\xaf\x4c\x17\x3e\x1d\xfd\xc3\x68\xda"
                "\x2e\xa0\xd7\x52\xf0\x01\x43\x33\x4b\xa9\x21\x02\xd5\x5d\xb0"
                "\x00\x82\xa0\x97\x28\xe6\x35\x55\x72\x1d\x2c\xe3\xe5\x52\x35"
                "\xfe\xdb\x79\xec\x15\x87\x35\xba\x59\x72\x78\x99\xee\xe9\x52"
                "\xfa\x00\xe9\x12\x0f\xe4\x07\xdb\x61\x38\xcf\x17\xc5\x26\xc6"
                "\xff\xf5\x1a\x0d\xe2\xf3\x9a\x4d\xe3\xda\x6e\x4d\xea\x28\x21"
                "\xbc\xa5\x72\xc1\x04\x5f\x62\x80\x4f\xc9\x56\x52\xf1\x6a\xe6"
                "\x4a\xb9\xfe\x76\xa9\xde\x27\xc7\xa5\xd5\xb2\x49\x1d\xad\xd6"
                "\xb4\xf1\xb1\x5c\x8f\x3f\xe7\x08\xd3\xf7\x28\xec\xcc\x24\x84"
                "\x2f\xb5\x4c\x5a\xf5\x41\xc1\x12\xde\x52\x07\xf9\x1f\xfe\x9f"
                "\x4c\xa0\x00\xbb\x8f\x5d\xd2\x52\x9d\xef\x61\x43\x93\xd4\xd7"
                "\x2c\x55\x8b\xd8\x5c\xc2\xd3\xef\xa4\x7a\x39\x55\x22\x4e\xdd"
                "\xd8\x5f\xac\x6b\x69\x47\x0b\xa2\x79\xd4\x96\x0c\x89\x46\x0f"
                "\x91\xc6\xf1\xe2\xfb\xa6\x42\x7b\xdd\x4c\x6e\x49\x04\xa7\x2f"
                "\x13\x58\x1e\xe9\x25\xa6\x27\xc0\x3e\x69\x5a\x65\x18\x66\x2f"
                "\x76\xa0\x98\xb7\x61\x9e\x24\xd3\xf6\xca\xe7\x3c\x49\xe3\xca"
                "\x34\x41\x66\x26\xf5\x6e\x4d\x2f\x3d\x04\x73\x24\xa1\x79\xa0"
                "\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e"
                "\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53"
                "\xee\x93\x58\xeb\x4e\x81\x01\x09\xa3\x27\x80\x20\xd6\x40\x0d"
                "\x21\x44\x8a\xd4\x5a\xe6\x10\x3f\xd4\x3a\x14\x5a\x5b\x87\x86"
                "\x20\x3c\x43\x20\x9d\x9d\x0c\x75\x57\x80\x7d\xda\x9d\x06\x81"
                "\x03\x01\x00\x00\xa4\x27\x80\x20\x6a\x26\x73\x6f\xc3\xbf\x25"
                "\x73\x8e\x3b\x27\x79\x47\xa5\x37\x7c\x78\xa0\x72\xd8\x77\x91"
                "\xfc\x45\x87\x7f\x11\x57\xfe\x94\x57\x45\x81\x03\x02\x00\x00"
                "\xa2\x82\x05\x48\xa0\x82\x04\x9b\xa2\x82\x02\x8b\xa0\x82\x02"
                "\x0c\xa3\x82\x02\x08\x80\x82\x01\x00\xbe\x09\xc5\xa4\x27\x29"
                "\xdf\xd4\x67\x76\xbe\xbf\x2c\xf3\xa2\x0b\x42\xe4\xbf\xeb\xdd"
                "\x67\x20\xfb\x7a\x27\x93\xc0\x78\x47\x78\xd7\x15\x32\xee\x38"
                "\x81\x0d\x36\xa2\xc4\x65\x44\xe6\x62\x26\xb9\x58\x13\xa4\x15"
                "\x82\xab\xb1\x16\x61\xfc\x01\x98\xc6\x1a\x69\xc6\xba\x39\x3f"
                "\x01\x55\x3d\xd7\x8e\x14\x42\x6d\x78\x74\x9b\x28\xcb\x31\x39"
                "\x98\x5a\x11\xdc\xc1\x18\x9d\x8d\xb0\xcd\x1b\x4c\x10\xab\x14"
                "\x64\x19\xf1\x33\x15\x45\xc8\x92\x82\x03\x82\x8a\xaa\xad\x94"
                "\xfc\x24\x11\x96\x99\x7e\x94\x5a\x82\x57\x68\x61\x9f\x7b\x45"
                "\xe0\x99\x9e\x4f\x32\x50\x5f\x05\xc8\x11\xae\xc4\x0c\x63\x18"
                "\x0e\x02\x59\x36\x25\x92\x06\x32\xc7\x71\x47\x99\xcc\x0a\x6e"
                "\x0a\x58\x71\x3f\x5e\xb7\x78\xf7\x98\x79\xdf\x74\xa4\xeb\xa9"
                "\x00\xfd\x81\xb3\xcf\x04\x8c\x5d\x7d\xe7\xb2\x82\x90\x49\xbd"
                "\x69\xf3\x08\xe9\x92\xc6\x9e\x41\xba\x74\xd8\x8d\x81\x97\x6f"
                "\x86\xab\xc9\xf1\x02\x31\xb4\xce\x47\xb0\x39\xc8\xba\x51\xa7"
                "\x39\xf3\x71\xa2\x25\x27\x37\x6e\x09\x6f\x19\x59\xbc\x65\xd9"
                "\xcd\x12\xd3\x2c\xa2\x78\xfa\x23\x15\x1a\x82\x41\x91\x1b\xbe"
                "\x8a\xe7\xfe\x3c\x3c\x30\x32\xaa\xe9\xf3\x81\x82\x01\x00\x93"
                "\x97\x97\x26\xee\x8e\xb1\xd2\x7d\x68\x1e\x7e\xb7\x44\x35\x1b"
                "\x27\x10\x36\x6a\xae\x86\xb8\x5e\xf1\x01\x9f\x04\xbf\x5c\xb0"
                "\xf5\x87\xb0\x94\x47\xbe\x3b\xef\xff\x44\xc9\x94\x08\x82\xc9"
                "\x0a\xfc\xd9\xcb\xb6\x07\x2d\x3d\x4c\x3f\x9e\x44\xf9\x99\x4f"
                "\x0b\x45\xee\x68\x3e\x65\x13\x55\xda\x49\xbe\x65\x34\xec\x69"
                "\x8a\x52\x2c\xcc\x7d\x0a\xfa\xb3\x67\xc9\x49\x8f\xd6\xf2\xf4"
                "\x3a\x16\x8e\x46\xe2\x04\x59\x87\x57\xd8\x03\xaf\xd5\x52\xf3"
                "\x4d\xe3\xdd\xa8\xbe\x0c\x08\x48\x24\xd9\x46\x44\x2a\x75\xc5"
                "\xa5\x2f\xd2\xb2\x5b\xaa\x12\xc4\xbc\xc8\x4a\x16\xb0\xaa\xa3"
                "\x83\x07\xda\x8d\xaa\x36\x31\xf1\x99\xa0\x7e\x58\xe6\x5c\xb8"
                "\xe7\x0d\x58\xbf\x57\x61\x65\xf5\x2e\x9d\xec\xf9\x6a\x64\x86"
                "\xab\xae\x83\x51\x5f\x4d\x30\x4e\x4d\x29\x38\x03\x58\xd4\x7d"
                "\xf1\xa3\xcd\x09\xfc\x08\xa1\x8e\x85\x13\xfe\x3c\x27\xe1\x57"
                "\xdd\xb9\xe9\x16\x93\x19\xab\x3a\xdc\xdf\x35\x24\x8f\x41\x34"
                "\x32\xa9\xcf\x02\xdf\x03\x7b\x45\x7a\x8a\x3b\xde\xfa\xc0\x30"
                "\xb6\x59\x1c\x26\x17\xe1\x58\xce\xff\x00\x21\x48\xb9\x57\x27"
                "\x65\x82\xf3\x2e\x7e\x2a\xbe\x7a\x51\x96\xd1\x74\xbb\x62\x86"
                "\xa1\x79\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51"
                "\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68"
                "\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa3\x27\x80\x20"
                "\xee\x75\xbe\xb3\x52\x54\xbd\x24\x06\x3f\xd9\x32\x48\x19\xe1"
                "\x5c\x70\x85\x92\x11\x6c\x3a\xc1\x4c\x9b\x83\xeb\x05\xa7\x59"
                "\xe2\xa0\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x1e\x5a\xaf\x3e"
                "\x46\xf6\xd4\xdf\x4d\x70\xf0\xa1\xd1\x35\x6d\xf0\x8b\x86\x91"
                "\xac\xb2\xf2\x24\xf0\x1a\xd4\x23\xc0\x21\x8d\x42\xc0\x81\x03"
                "\x02\x00\x00\xa3\x82\x02\x08\x80\x82\x01\x00\xba\x2c\x3b\x50"
                "\xb6\xbf\xf9\x0f\x1d\xd7\x32\x4c\x01\x5f\xff\x2f\x2a\xf6\x33"
                "\xd0\xfb\xea\x1f\xa4\xf2\x2d\x22\x8a\x19\x95\xa9\x17\xb7\x4f"
                "\x17\xcf\x55\xcd\x1a\x3a\x5f\x07\x73\xcc\xaa\x21\x70\x64\xb3"
                "\xa0\xf4\xb7\x30\xa3\x82\x37\x93\xc6\x59\xde\x1b\xa1\x16\x90"
                "\x5a\x1a\xf6\x73\xab\x92\xc8\x2f\xf4\x6f\x5c\xf2\x22\x1d\x30"
                "\xf8\x03\xd8\x9b\x5f\x73\x72\x8e\x5f\xd5\x37\x4b\x43\xda\xfe"
                "\x84\x21\x67\xe8\xe3\xd7\x91\x3f\x24\x1d\xfb\x1f\x12\x6e\xcb"
                "\xfc\xb7\x5b\x0a\x35\x73\x3b\xce\x44\x34\x8e\xcd\x53\xa4\xcf"
                "\xa7\x63\x73\xcd\x31\x0f\xe0\x75\x8d\xe4\xa9\xdc\xfe\xf0\xc9"
                "\x3d\x26\xaf\xbf\x7b\x0f\x0e\x17\xb9\xd0\x4a\x32\x80\x64\x6b"
                "\x54\x73\x5a\x50\xc7\x31\x59\xf9\x73\x72\xa5\x79\xba\xdb\xa1"
                "\x14\x8d\x77\x67\x3e\xc0\x5b\xec\x6f\x0b\xf7\xc5\xee\x5a\xa6"
                "\x8d\x49\x63\x81\xbb\xd1\xf9\x9e\xbb\xed\xb2\xa9\x18\x60\xa7"
                "\xee\xeb\x30\xa1\x92\x93\xe8\xd8\x34\x9e\xac\xd6\x23\xfc\x7f"
                "\xcb\xe7\xfe\xa7\xe6\x42\xac\x77\x11\xc0\x67\x77\xd1\xaa\x5e"
                "\xed\x3b\xd5\xa5\x8d\x34\x7c\xd9\x57\x44\xa7\xc5\x44\x2e\x1e"
                "\xe7\x63\xd8\x53\x1b\x9a\xd9\x67\x02\x13\x32\x61\x81\x82\x01"
                "\x00\x99\xa8\x47\x7a\xd2\x4e\x43\x50\xc4\x0a\x5a\x03\xde\xd2"
                "\x63\x74\xb4\x37\x1c\xcf\x9c\x79\xf1\xc1\x5e\xd6\x61\x2a\x71"
                "\x8e\xaf\x61\x07\x88\x4f\x25\xaa\x39\x02\x50\x25\x0c\xa0\xc0"
                "\xfa\x98\xa1\x51\x0d\x98\xa4\xe2\xb0\xce\x85\x3a\xb5\x9e\x2e"
                "\x98\x02\xbc\xb0\xed\x66\xc1\x44\xcf\x63\x13\x51\x5a\x9a\xcb"
                "\x73\x9b\x41\xea\x2a\xc3\x7a\x0f\x9b\xa8\x08\xd6\x18\x47\x05"
                "\xbe\x0b\xaa\xe3\x85\x10\xa0\x1f\x91\x7c\x81\x01\x5a\xe9\x08"
                "\xb7\x14\xb5\xd6\xf2\x96\x84\x52\x41\x1c\xd0\x60\xa0\xda\x32"
                "\x9e\xa2\x05\xb9\x0d\xef\xe3\x33\x08\x69\xd8\x08\x46\xb0\x7e"
                "\x48\xb5\x90\x19\x97\x48\xd5\x31\x5e\x23\x8b\x38\xa1\x99\xdd"
                "\x53\xc4\xa8\xb3\xd2\xe2\x62\x1a\xcc\x02\x00\x3e\x95\x2b\x19"
                "\xfa\x6d\xc9\x23\x6a\xc7\x78\x7b\xde\x12\xba\xb4\x79\x01\x01"
                "\x1a\x3c\xee\x60\x03\x5d\x8a\x9f\x57\x19\xe4\xe7\x94\xe2\x2e"
                "\xbf\x39\x48\x21\x51\x9e\xb3\xb6\xc9\x94\xde\x0d\xeb\xa9\x48"
                "\x8b\xee\xa4\x12\x83\xf8\x42\xdf\x21\xbd\xee\x4d\x9e\xfb\xfb"
                "\x45\xdd\x24\x9e\x19\x55\xb9\x6b\xae\x08\xd7\xf2\x9f\xc9\xb4"
                "\xb7\xb3\x7d\x40\xaa\xda\x41\xd0\xbf\x2c\x26\xa2\xf9\xcc\x65"
                "\x71\x0b\xa1\x81\xa6\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1"
                "\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21"
                "\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa2"
                "\x2b\x80\x20\x67\xf9\x58\xcd\x83\xc7\xe8\x61\xc5\xd6\xc6\x74"
                "\x63\x5e\x10\x49\x97\x4a\xdc\x6f\x31\x30\x72\xd7\x25\xab\x2c"
                "\xb5\x0e\xe7\x39\xe2\x81\x03\x02\x10\x00\x82\x02\x03\x98\xa3"
                "\x27\x80\x20\xe5\x15\x0a\xbd\xf6\x06\xbe\xaa\x6c\x81\xf1\x88"
                "\x7e\x70\x64\x51\xeb\x6f\x70\xb1\xdd\xc5\xf1\x20\x53\xf7\xcb"
                "\x9f\x7f\xc7\xe4\x52\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x00"
                "\x8b\xe6\x62\xd4\x30\x65\x1e\x40\xb3\x23\x05\x52\x3a\xf3\x16"
                "\xda\x09\xbe\x79\x5f\x41\xc9\x03\x93\x34\x5b\x7c\x24\x87\x62"
                "\xfa\x81\x03\x02\x00\x00\xa1\x79\xa0\x25\x80\x20\x5d\xa0\x30"
                "\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c"
                "\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81"
                "\x01\x09\xa3\x27\x80\x20\x5c\xe1\xef\x71\xf6\x96\x65\x37\x01"
                "\x15\x1a\xdd\xfe\x28\x5d\xef\x33\x99\x1f\xe9\x6a\x51\x2d\x22"
                "\x62\x2c\x2e\x26\xb8\xda\x1e\xfa\x81\x03\x01\x00\x00\xa4\x27"
                "\x80\x20\xcc\x8a\x65\x38\xf7\x7c\xf9\x28\xc9\xdd\xf3\x0c\x26"
                "\x64\x02\xde\x89\xd0\x71\xde\x61\x3e\x31\x4d\x9b\x4e\x91\x6f"
                "\xcc\x36\x5c\xa3\x81\x03\x02\x00\x00"s;
            auto const thresh0EncodedCondition =
                "\xa2\x2b\x80\x20\x81\xfb\xf0\x7c\x1a\xb5\x13\x5d\x47\x00\xfd"
                "\xcc\xe3\xe3\xbe\x25\x50\x70\x9c\xb5\x75\xd3\x53\xe5\xfb\x5b"
                "\xf8\xa2\x5b\xa6\xa9\x84\x81\x03\x08\x78\x22\x82\x02\x03\xd8"s;
            auto const thresh0EncodedFingerprint =
                "\x30\x82\x01\x07\x80\x01\x03\xa1\x82\x01\x00\xa0\x25\x80\x20"
                "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
                "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
                "\xeb\x4e\x81\x01\x09\xa1\x2b\x80\x20\xc9\xe4\x5f\x74\x43\xf9"
                "\x49\x29\x99\x98\x8d\x5d\xa6\xf9\xbf\x23\x66\x71\xed\x37\x04"
                "\xf0\x02\x57\xbe\xca\x7f\x85\xa6\xab\x17\xfc\x81\x03\x02\x18"
                "\x22\x82\x02\x03\xb8\xa2\x2b\x80\x20\xee\x16\x33\x74\x2b\x8f"
                "\x63\xbd\xbc\x40\xc3\x1b\x57\x5d\xa0\x9d\x1e\x49\x10\x20\xf8"
                "\x92\x81\x57\x6a\xe2\xb9\xc4\x9e\xd7\x1a\x3f\x81\x03\x04\x38"
                "\x00\x82\x02\x03\x98\xa2\x2b\x80\x20\xff\xb7\x7a\x11\xe2\xb8"
                "\x11\x3c\xf6\xd5\x94\x24\xae\x34\x10\xaa\x15\x42\xcc\x33\x64"
                "\xc3\x1b\x33\xbc\xd1\x6c\x01\xd4\x41\xfd\xb3\x81\x03\x02\x10"
                "\x00\x82\x02\x03\x98\xa3\x27\x80\x20\x5c\xe1\xef\x71\xf6\x96"
                "\x65\x37\x01\x15\x1a\xdd\xfe\x28\x5d\xef\x33\x99\x1f\xe9\x6a"
                "\x51\x2d\x22\x62\x2c\x2e\x26\xb8\xda\x1e\xfa\x81\x03\x01\x00"
                "\x00\xa4\x27\x80\x20\xcc\x8a\x65\x38\xf7\x7c\xf9\x28\xc9\xdd"
                "\xf3\x0c\x26\x64\x02\xde\x89\xd0\x71\xde\x61\x3e\x31\x4d\x9b"
                "\x4e\x91\x6f\xcc\x36\x5c\xa3\x81\x03\x02\x00\x00"s;
            check(
                &thresh0,
                thresh0Msg,
                thresh0EncodedFulfillment,
                thresh0EncodedCondition,
                thresh0EncodedFingerprint);
        }
    }

    void
    testThresh47()
    {
        testcase("Thresh47");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * thresh0
        // ** Preim19Cond
        // ** Rsa20Cond
        // ** Ed21Cond
        // ** Prefix22Cond
        // ** Thresh29Cond
        // ** thresh1
        // *** Preim8Cond
        // *** Rsa9Cond
        // *** Ed10Cond
        // *** Thresh11Cond
        // *** rsa2
        // *** thresh3
        // **** Preim5Cond
        // **** Rsa6Cond
        // **** Ed7Cond
        // **** rsa4
        // ** preim16
        // ** rsa17
        // ** ed18

        auto const rsa2Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa2PublicKey{
            {0xba, 0x2c, 0x3b, 0x50, 0xb6, 0xbf, 0xf9, 0x0f, 0x1d, 0xd7, 0x32,
             0x4c, 0x01, 0x5f, 0xff, 0x2f, 0x2a, 0xf6, 0x33, 0xd0, 0xfb, 0xea,
             0x1f, 0xa4, 0xf2, 0x2d, 0x22, 0x8a, 0x19, 0x95, 0xa9, 0x17, 0xb7,
             0x4f, 0x17, 0xcf, 0x55, 0xcd, 0x1a, 0x3a, 0x5f, 0x07, 0x73, 0xcc,
             0xaa, 0x21, 0x70, 0x64, 0xb3, 0xa0, 0xf4, 0xb7, 0x30, 0xa3, 0x82,
             0x37, 0x93, 0xc6, 0x59, 0xde, 0x1b, 0xa1, 0x16, 0x90, 0x5a, 0x1a,
             0xf6, 0x73, 0xab, 0x92, 0xc8, 0x2f, 0xf4, 0x6f, 0x5c, 0xf2, 0x22,
             0x1d, 0x30, 0xf8, 0x03, 0xd8, 0x9b, 0x5f, 0x73, 0x72, 0x8e, 0x5f,
             0xd5, 0x37, 0x4b, 0x43, 0xda, 0xfe, 0x84, 0x21, 0x67, 0xe8, 0xe3,
             0xd7, 0x91, 0x3f, 0x24, 0x1d, 0xfb, 0x1f, 0x12, 0x6e, 0xcb, 0xfc,
             0xb7, 0x5b, 0x0a, 0x35, 0x73, 0x3b, 0xce, 0x44, 0x34, 0x8e, 0xcd,
             0x53, 0xa4, 0xcf, 0xa7, 0x63, 0x73, 0xcd, 0x31, 0x0f, 0xe0, 0x75,
             0x8d, 0xe4, 0xa9, 0xdc, 0xfe, 0xf0, 0xc9, 0x3d, 0x26, 0xaf, 0xbf,
             0x7b, 0x0f, 0x0e, 0x17, 0xb9, 0xd0, 0x4a, 0x32, 0x80, 0x64, 0x6b,
             0x54, 0x73, 0x5a, 0x50, 0xc7, 0x31, 0x59, 0xf9, 0x73, 0x72, 0xa5,
             0x79, 0xba, 0xdb, 0xa1, 0x14, 0x8d, 0x77, 0x67, 0x3e, 0xc0, 0x5b,
             0xec, 0x6f, 0x0b, 0xf7, 0xc5, 0xee, 0x5a, 0xa6, 0x8d, 0x49, 0x63,
             0x81, 0xbb, 0xd1, 0xf9, 0x9e, 0xbb, 0xed, 0xb2, 0xa9, 0x18, 0x60,
             0xa7, 0xee, 0xeb, 0x30, 0xa1, 0x92, 0x93, 0xe8, 0xd8, 0x34, 0x9e,
             0xac, 0xd6, 0x23, 0xfc, 0x7f, 0xcb, 0xe7, 0xfe, 0xa7, 0xe6, 0x42,
             0xac, 0x77, 0x11, 0xc0, 0x67, 0x77, 0xd1, 0xaa, 0x5e, 0xed, 0x3b,
             0xd5, 0xa5, 0x8d, 0x34, 0x7c, 0xd9, 0x57, 0x44, 0xa7, 0xc5, 0x44,
             0x2e, 0x1e, 0xe7, 0x63, 0xd8, 0x53, 0x1b, 0x9a, 0xd9, 0x67, 0x02,
             0x13, 0x32, 0x61}};
        std::array<std::uint8_t, 256> const rsa2Sig{
            {0x08, 0x79, 0x56, 0xe9, 0xa6, 0xf7, 0x8e, 0x3d, 0x4d, 0x04, 0x9e,
             0x4b, 0xa4, 0x00, 0xbe, 0xaa, 0xa5, 0x88, 0x3a, 0xf2, 0x9b, 0x20,
             0xac, 0xc1, 0x18, 0x70, 0x92, 0x67, 0x82, 0xc9, 0x45, 0x03, 0x76,
             0xfd, 0x56, 0xb8, 0x00, 0x03, 0x9c, 0xd3, 0x66, 0xe3, 0x82, 0xde,
             0x3f, 0x82, 0xe6, 0xf8, 0xa5, 0x53, 0xae, 0xf1, 0xad, 0xce, 0xa8,
             0xe9, 0x9f, 0x76, 0x74, 0xbe, 0xe7, 0x1e, 0x5b, 0x1d, 0x0d, 0xbe,
             0x2d, 0xf5, 0x50, 0xa6, 0x31, 0xe4, 0x70, 0x3e, 0x08, 0xfc, 0x19,
             0x97, 0xf0, 0x56, 0x3b, 0xa1, 0x78, 0x07, 0x30, 0x49, 0x4b, 0x2a,
             0x97, 0xdb, 0xa7, 0xfc, 0xf9, 0xc9, 0xf8, 0xe8, 0xc4, 0x62, 0x92,
             0x77, 0xe4, 0x33, 0xfc, 0xd0, 0x78, 0x7c, 0xb1, 0x2a, 0x63, 0xcf,
             0xf1, 0x04, 0xa2, 0xd9, 0xcc, 0x9e, 0x92, 0x59, 0x51, 0xa3, 0x96,
             0x1c, 0x45, 0xf9, 0x77, 0x66, 0xed, 0x92, 0xab, 0xb9, 0x69, 0x48,
             0x3b, 0x2f, 0x57, 0x81, 0x78, 0x4d, 0x73, 0x0a, 0x1a, 0xb5, 0x21,
             0xdd, 0x09, 0xac, 0x47, 0xf4, 0x19, 0xda, 0x92, 0xf6, 0x0f, 0x19,
             0xa0, 0x43, 0x76, 0x87, 0xac, 0x5e, 0x12, 0x02, 0x1a, 0x09, 0x07,
             0xc0, 0x5e, 0xfe, 0x32, 0xa9, 0x67, 0x29, 0x68, 0xc5, 0xf7, 0xef,
             0x7e, 0x86, 0x0f, 0x30, 0x01, 0xfb, 0x4b, 0xb3, 0xb0, 0x9a, 0x4c,
             0xab, 0x08, 0xdb, 0xc1, 0xc1, 0x8f, 0xdb, 0x2e, 0x26, 0xc4, 0xd4,
             0xd3, 0xa2, 0x09, 0x9e, 0x5c, 0x40, 0x0a, 0xe2, 0x7e, 0x31, 0x8a,
             0x55, 0xe7, 0x0f, 0xf9, 0x33, 0x4f, 0x23, 0xec, 0x9a, 0xd5, 0x74,
             0x90, 0x73, 0xe2, 0xbf, 0x00, 0xb5, 0x63, 0x7d, 0x70, 0x41, 0x40,
             0xac, 0x27, 0x35, 0x47, 0x98, 0x47, 0x80, 0xf5, 0x33, 0x44, 0x71,
             0x80, 0xcd, 0x1f, 0x98, 0xa0, 0x3b, 0x96, 0x8f, 0xce, 0x44, 0x8f,
             0x42, 0xcb, 0x86}};
        auto const rsa4Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa4PublicKey{
            {0xbe, 0x09, 0xc5, 0xa4, 0x27, 0x29, 0xdf, 0xd4, 0x67, 0x76, 0xbe,
             0xbf, 0x2c, 0xf3, 0xa2, 0x0b, 0x42, 0xe4, 0xbf, 0xeb, 0xdd, 0x67,
             0x20, 0xfb, 0x7a, 0x27, 0x93, 0xc0, 0x78, 0x47, 0x78, 0xd7, 0x15,
             0x32, 0xee, 0x38, 0x81, 0x0d, 0x36, 0xa2, 0xc4, 0x65, 0x44, 0xe6,
             0x62, 0x26, 0xb9, 0x58, 0x13, 0xa4, 0x15, 0x82, 0xab, 0xb1, 0x16,
             0x61, 0xfc, 0x01, 0x98, 0xc6, 0x1a, 0x69, 0xc6, 0xba, 0x39, 0x3f,
             0x01, 0x55, 0x3d, 0xd7, 0x8e, 0x14, 0x42, 0x6d, 0x78, 0x74, 0x9b,
             0x28, 0xcb, 0x31, 0x39, 0x98, 0x5a, 0x11, 0xdc, 0xc1, 0x18, 0x9d,
             0x8d, 0xb0, 0xcd, 0x1b, 0x4c, 0x10, 0xab, 0x14, 0x64, 0x19, 0xf1,
             0x33, 0x15, 0x45, 0xc8, 0x92, 0x82, 0x03, 0x82, 0x8a, 0xaa, 0xad,
             0x94, 0xfc, 0x24, 0x11, 0x96, 0x99, 0x7e, 0x94, 0x5a, 0x82, 0x57,
             0x68, 0x61, 0x9f, 0x7b, 0x45, 0xe0, 0x99, 0x9e, 0x4f, 0x32, 0x50,
             0x5f, 0x05, 0xc8, 0x11, 0xae, 0xc4, 0x0c, 0x63, 0x18, 0x0e, 0x02,
             0x59, 0x36, 0x25, 0x92, 0x06, 0x32, 0xc7, 0x71, 0x47, 0x99, 0xcc,
             0x0a, 0x6e, 0x0a, 0x58, 0x71, 0x3f, 0x5e, 0xb7, 0x78, 0xf7, 0x98,
             0x79, 0xdf, 0x74, 0xa4, 0xeb, 0xa9, 0x00, 0xfd, 0x81, 0xb3, 0xcf,
             0x04, 0x8c, 0x5d, 0x7d, 0xe7, 0xb2, 0x82, 0x90, 0x49, 0xbd, 0x69,
             0xf3, 0x08, 0xe9, 0x92, 0xc6, 0x9e, 0x41, 0xba, 0x74, 0xd8, 0x8d,
             0x81, 0x97, 0x6f, 0x86, 0xab, 0xc9, 0xf1, 0x02, 0x31, 0xb4, 0xce,
             0x47, 0xb0, 0x39, 0xc8, 0xba, 0x51, 0xa7, 0x39, 0xf3, 0x71, 0xa2,
             0x25, 0x27, 0x37, 0x6e, 0x09, 0x6f, 0x19, 0x59, 0xbc, 0x65, 0xd9,
             0xcd, 0x12, 0xd3, 0x2c, 0xa2, 0x78, 0xfa, 0x23, 0x15, 0x1a, 0x82,
             0x41, 0x91, 0x1b, 0xbe, 0x8a, 0xe7, 0xfe, 0x3c, 0x3c, 0x30, 0x32,
             0xaa, 0xe9, 0xf3}};
        std::array<std::uint8_t, 256> const rsa4Sig{
            {0xbc, 0x4b, 0x7b, 0x84, 0xe8, 0xe8, 0x6c, 0x2f, 0xa7, 0x71, 0x2e,
             0x8f, 0xc0, 0x7e, 0x6e, 0xb3, 0x00, 0xf2, 0xf7, 0x23, 0xd2, 0x1a,
             0x40, 0xf5, 0x2d, 0xa6, 0x02, 0x6f, 0x57, 0x64, 0xb2, 0xf9, 0xcc,
             0xbc, 0x25, 0xf9, 0x51, 0x17, 0x0e, 0xda, 0x7d, 0x92, 0xbf, 0xf2,
             0x06, 0xfe, 0x36, 0x56, 0x48, 0xe2, 0x5f, 0x16, 0x55, 0x17, 0xf0,
             0x1d, 0x40, 0xe9, 0x99, 0x2f, 0x9d, 0xd0, 0x68, 0xd5, 0x1a, 0x6b,
             0xad, 0xc0, 0x8f, 0xab, 0x08, 0x40, 0xd9, 0x6c, 0xd7, 0xba, 0xfb,
             0xc6, 0xe2, 0x36, 0xb8, 0x63, 0x01, 0x26, 0xe1, 0xcc, 0xf3, 0x6c,
             0x60, 0xa1, 0x55, 0xdb, 0xfa, 0x47, 0x2c, 0xa1, 0xc7, 0x31, 0xbe,
             0x7d, 0x18, 0x22, 0x40, 0x43, 0xdd, 0xce, 0x18, 0xe2, 0xfc, 0x1e,
             0xf1, 0x88, 0x9a, 0x96, 0x94, 0x8d, 0x6c, 0xfa, 0xc2, 0xbd, 0xaf,
             0xfc, 0x31, 0x5d, 0xf0, 0x5b, 0xb4, 0x5a, 0x20, 0x03, 0x35, 0xe0,
             0xe1, 0x70, 0xaa, 0x6c, 0xbb, 0xa9, 0x6f, 0x54, 0x71, 0x05, 0x0a,
             0x13, 0xcc, 0x03, 0x13, 0x88, 0x15, 0x82, 0xfb, 0x7e, 0x8b, 0xeb,
             0xf9, 0x87, 0x49, 0x55, 0x19, 0x8f, 0x8b, 0x16, 0x29, 0x26, 0xaf,
             0x64, 0xd1, 0x72, 0xfe, 0xe7, 0xa2, 0x80, 0x85, 0x62, 0xd7, 0x26,
             0xcb, 0x90, 0xbb, 0x3f, 0x66, 0xf8, 0x82, 0xf0, 0x96, 0xc8, 0x86,
             0x25, 0x80, 0xaa, 0x2d, 0x27, 0x15, 0x99, 0x48, 0x2d, 0xc2, 0x13,
             0x9e, 0x72, 0xa2, 0xc0, 0xf2, 0x06, 0x37, 0xc5, 0x54, 0x42, 0xbf,
             0xb9, 0xa2, 0x70, 0xec, 0x05, 0xce, 0x14, 0x3a, 0xac, 0x79, 0x95,
             0x21, 0x99, 0xc5, 0x0f, 0x4f, 0xd4, 0x2d, 0x1f, 0xdb, 0x6f, 0x2f,
             0xa8, 0xda, 0x68, 0x92, 0x3b, 0xe3, 0x27, 0x1f, 0x65, 0x77, 0xc2,
             0x53, 0xe6, 0x1c, 0xf9, 0x11, 0x28, 0x59, 0x47, 0x86, 0x78, 0xe5,
             0x08, 0xdc, 0xd7}};
        auto const thresh3Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim5CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim5Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim5CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa6CondConditionFingerprint =
            "\xee\x75\xbe\xb3\x52\x54\xbd\x24\x06\x3f\xd9\x32\x48\x19\xe1"
            "\x5c\x70\x85\x92\x11\x6c\x3a\xc1\x4c\x9b\x83\xeb\x05\xa7\x59"
            "\xe2\xa0"s;
        Condition const Rsa6Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa6CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed7CondConditionFingerprint =
            "\x1e\x5a\xaf\x3e\x46\xf6\xd4\xdf\x4d\x70\xf0\xa1\xd1\x35\x6d"
            "\xf0\x8b\x86\x91\xac\xb2\xf2\x24\xf0\x1a\xd4\x23\xc0\x21\x8d"
            "\x42\xc0"s;
        Condition const Ed7Cond{Type::ed25519Sha256,
                                131072,
                                makeSlice(Ed7CondConditionFingerprint),
                                std::bitset<5>{0}};
        auto const thresh1Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim8CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim8Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim8CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa9CondConditionFingerprint =
            "\xe5\x15\x0a\xbd\xf6\x06\xbe\xaa\x6c\x81\xf1\x88\x7e\x70\x64"
            "\x51\xeb\x6f\x70\xb1\xdd\xc5\xf1\x20\x53\xf7\xcb\x9f\x7f\xc7"
            "\xe4\x52"s;
        Condition const Rsa9Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa9CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed10CondConditionFingerprint =
            "\x00\x8b\xe6\x62\xd4\x30\x65\x1e\x40\xb3\x23\x05\x52\x3a\xf3"
            "\x16\xda\x09\xbe\x79\x5f\x41\xc9\x03\x93\x34\x5b\x7c\x24\x87"
            "\x62\xfa"s;
        Condition const Ed10Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed10CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Thresh11CondConditionFingerprint =
            "\x67\xf9\x58\xcd\x83\xc7\xe8\x61\xc5\xd6\xc6\x74\x63\x5e\x10"
            "\x49\x97\x4a\xdc\x6f\x31\x30\x72\xd7\x25\xab\x2c\xb5\x0e\xe7"
            "\x39\xe2"s;
        Condition const Thresh11Cond{
            Type::thresholdSha256,
            135168,
            makeSlice(Thresh11CondConditionFingerprint),
            std::bitset<5>{25}};
        auto const preim16Preimage = "I am root"s;
        auto const preim16Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const rsa17Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa17PublicKey{
            {0xb0, 0x41, 0xe9, 0x6e, 0xfe, 0x3b, 0xde, 0x46, 0x52, 0x56, 0x34,
             0x2a, 0x92, 0x83, 0x4d, 0x3a, 0x7b, 0x94, 0xe7, 0xc2, 0x06, 0x5b,
             0x8c, 0xf4, 0x9d, 0x71, 0x9d, 0x00, 0x73, 0xd9, 0x15, 0x81, 0x12,
             0x1a, 0x0c, 0x9e, 0xd8, 0xa6, 0xa6, 0xd8, 0x62, 0xbe, 0xfe, 0xa3,
             0x7c, 0xc5, 0xd0, 0x71, 0xdd, 0x83, 0xed, 0xcf, 0x71, 0xd8, 0xe5,
             0x72, 0x27, 0xcb, 0xce, 0xd7, 0x06, 0xda, 0xe8, 0x4b, 0xb8, 0x8d,
             0x45, 0xc0, 0x9c, 0xe3, 0x13, 0x27, 0xbf, 0x60, 0x50, 0x85, 0xbf,
             0xd1, 0xfc, 0x8c, 0x41, 0x75, 0x2d, 0x51, 0x83, 0x24, 0x06, 0xcb,
             0xe6, 0x98, 0x8e, 0x0d, 0x35, 0xfa, 0x58, 0x34, 0x43, 0x90, 0x55,
             0x6a, 0x40, 0xc9, 0x78, 0x31, 0xfb, 0x28, 0x8b, 0x10, 0x78, 0x46,
             0x59, 0x49, 0xf5, 0x89, 0x1c, 0x66, 0xc0, 0x6e, 0x6b, 0x73, 0x05,
             0x75, 0x83, 0x2b, 0x86, 0x78, 0x02, 0xc1, 0xb0, 0xf1, 0x2a, 0x6e,
             0x7e, 0xf6, 0x65, 0x8f, 0xe3, 0xc2, 0x02, 0x6d, 0xae, 0x03, 0xc5,
             0xef, 0x41, 0x03, 0x3a, 0x6b, 0xeb, 0xb0, 0xab, 0x6a, 0x27, 0x2e,
             0xcb, 0x13, 0xf5, 0xd3, 0xae, 0x11, 0x18, 0x33, 0x6a, 0xc3, 0x08,
             0x7a, 0xf8, 0xb9, 0xd7, 0xf3, 0x37, 0xee, 0x05, 0x32, 0xd9, 0xb5,
             0xa4, 0xb9, 0xeb, 0x67, 0xa8, 0x84, 0xeb, 0xb2, 0xc3, 0x2f, 0x8a,
             0x8f, 0xa7, 0x24, 0xac, 0x9a, 0x24, 0x91, 0x11, 0x70, 0xab, 0xc5,
             0x05, 0x25, 0xa9, 0xd3, 0x93, 0x17, 0x6d, 0x70, 0xb1, 0x67, 0x60,
             0x6b, 0x50, 0x69, 0xdd, 0x22, 0x8b, 0x6a, 0xa9, 0x11, 0x7e, 0x5e,
             0x09, 0xa8, 0xaa, 0xdc, 0x4a, 0xc8, 0x09, 0x4c, 0x1a, 0xe7, 0x4c,
             0x1e, 0x42, 0xb2, 0x27, 0x9d, 0xa9, 0x1b, 0xa3, 0x59, 0x14, 0xcb,
             0x0b, 0xca, 0xff, 0x6e, 0x8d, 0x8e, 0x38, 0xf6, 0x19, 0xb1, 0x81,
             0x5f, 0xf4, 0x7d}};
        std::array<std::uint8_t, 256> const rsa17Sig{
            {0x41, 0x22, 0x42, 0x36, 0xb7, 0xb2, 0xf4, 0x6d, 0x33, 0x3d, 0x4f,
             0x6d, 0x0d, 0x45, 0xcb, 0x0d, 0x05, 0x7c, 0x3a, 0xf2, 0xfd, 0xea,
             0xf0, 0x75, 0xe7, 0x84, 0x68, 0x92, 0xc7, 0x24, 0xe2, 0xdc, 0x19,
             0x97, 0xa3, 0xf8, 0x4d, 0x2e, 0x84, 0xb0, 0x11, 0x42, 0x1c, 0x21,
             0xd9, 0x21, 0x14, 0x8b, 0x62, 0x38, 0x01, 0x1a, 0x1c, 0xf0, 0xab,
             0x93, 0x25, 0x1d, 0x2c, 0x87, 0x1c, 0xb8, 0xaa, 0x2b, 0x5f, 0x9c,
             0xe2, 0x4a, 0x58, 0xb1, 0x52, 0x3e, 0xb6, 0xda, 0x55, 0xbf, 0x00,
             0x62, 0x84, 0xa3, 0x39, 0x68, 0xfe, 0x58, 0x64, 0xef, 0x38, 0xca,
             0xc4, 0x9f, 0x8b, 0x9d, 0x23, 0x31, 0x41, 0x58, 0x75, 0x46, 0xf2,
             0x24, 0x2a, 0x3a, 0xd8, 0x9b, 0x73, 0xd5, 0x5c, 0xd3, 0x5d, 0x02,
             0x40, 0x94, 0x73, 0xd5, 0xb2, 0x0f, 0xf4, 0xfe, 0xed, 0x04, 0x99,
             0xe9, 0xf5, 0xb0, 0xf7, 0x49, 0x02, 0x09, 0x16, 0xaf, 0xe0, 0x87,
             0xa7, 0x40, 0x0a, 0xff, 0x51, 0x64, 0x22, 0xb6, 0xcb, 0x34, 0x2b,
             0x31, 0xaf, 0xc2, 0x22, 0x77, 0x8a, 0x8d, 0xc1, 0x63, 0x5a, 0xb7,
             0x7c, 0x8b, 0x79, 0x55, 0xab, 0x1d, 0x15, 0xb1, 0x4a, 0x56, 0x2f,
             0xbf, 0x24, 0x20, 0x1f, 0xa0, 0x99, 0x65, 0x1d, 0x06, 0x8f, 0xd0,
             0x85, 0x8d, 0x5c, 0xf2, 0x4a, 0x57, 0xee, 0xe7, 0x64, 0x22, 0xf8,
             0xee, 0x9d, 0x58, 0xce, 0x01, 0x65, 0x2c, 0xe3, 0xd9, 0xde, 0x5b,
             0x9e, 0xc8, 0xac, 0xde, 0xe0, 0xfd, 0xb1, 0xb4, 0xc5, 0x58, 0xc2,
             0x8b, 0xc9, 0x56, 0xe4, 0x71, 0xda, 0xe9, 0x68, 0x14, 0xc4, 0x66,
             0xcb, 0xf9, 0xc5, 0xb5, 0xc2, 0x20, 0x7a, 0x21, 0xe8, 0xe1, 0x3f,
             0x04, 0xee, 0xc1, 0xc1, 0xe5, 0x8f, 0x25, 0x35, 0xd6, 0x83, 0x62,
             0x1a, 0xe4, 0x67, 0x28, 0x82, 0xcf, 0x80, 0xf8, 0x43, 0x6c, 0x34,
             0xd2, 0x78, 0x99}};
        auto const ed18Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed18PublicKey{
            {0x3b, 0x07, 0x0f, 0xe5, 0x29, 0x34, 0xd9, 0x17, 0xf5, 0x06, 0x00,
             0xb8, 0x87, 0x2f, 0xcf, 0x89, 0x52, 0x70, 0xcc, 0x04, 0x92, 0xe1,
             0x67, 0xcb, 0xba, 0xbb, 0x10, 0xa6, 0x2d, 0x06, 0xa4, 0x6b}};
        std::array<std::uint8_t, 64> const ed18Sig{
            {0x09, 0xc4, 0x1d, 0xc3, 0x8e, 0x6c, 0xd6, 0x04, 0xb7, 0x9e, 0x8c,
             0x8b, 0x30, 0x65, 0x88, 0x43, 0xc7, 0xc6, 0xe5, 0xa0, 0xb0, 0x4c,
             0x60, 0xee, 0xb7, 0x1d, 0x69, 0x2a, 0xb7, 0x5d, 0x5f, 0x16, 0x53,
             0xd1, 0xe6, 0x6a, 0x74, 0x5d, 0x63, 0xc0, 0x41, 0x30, 0x6a, 0x58,
             0xce, 0x52, 0xf2, 0xdb, 0x41, 0x03, 0x78, 0xfd, 0x7f, 0x0e, 0xa5,
             0xc1, 0xe4, 0xd2, 0x50, 0x8d, 0x97, 0x1d, 0xf9, 0x06}};
        std::array<std::uint8_t, 32> const ed18SigningKey{
            {0x59, 0x73, 0xbb, 0x41, 0xb0, 0xe0, 0xce, 0xc2, 0xa9, 0x85, 0xaa,
             0x05, 0xa4, 0x7e, 0x3b, 0x51, 0x09, 0x8d, 0x3e, 0x47, 0xb7, 0x75,
             0xda, 0x81, 0x39, 0xa0, 0xe1, 0xd5, 0x9f, 0xb0, 0x9c, 0x5a}};
        (void)ed18SigningKey;
        auto const thresh0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim19CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim19Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim19CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa20CondConditionFingerprint =
            "\x8d\xb0\x2c\xb1\x28\xc3\xf4\x97\x50\x84\x64\x57\xca\xf4\x9d"
            "\x63\x08\x73\xfc\xde\x2f\x90\xf0\xf2\xec\x79\xa9\xc6\xa3\xf1"
            "\x33\xfd"s;
        Condition const Rsa20Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa20CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed21CondConditionFingerprint =
            "\x95\x3c\x86\x65\x91\x76\x69\x6b\x72\x61\xaa\x76\x15\x2a\xd7"
            "\x25\x4f\x32\xb7\x73\x7a\xb2\x49\x0c\x0b\xdf\xb5\x4e\x4a\x8b"
            "\xf7\x65"s;
        Condition const Ed21Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed21CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Prefix22CondConditionFingerprint =
            "\x3e\x2e\x3c\xb7\x63\x3e\xd1\x54\x5a\xcb\x8e\xe0\xf2\xee\xf9"
            "\x03\xbc\xd7\xcc\xca\x10\x3b\x8c\x56\x16\x1e\x68\xf2\xdd\xe8"
            "\x7a\x8c"s;
        Condition const Prefix22Cond{
            Type::prefixSha256,
            137258,
            makeSlice(Prefix22CondConditionFingerprint),
            std::bitset<5>{29}};
        auto const Thresh29CondConditionFingerprint =
            "\xa5\x04\xce\xd0\xad\x29\xbb\x72\xf7\x4b\xe7\x6e\x89\xf7\x12"
            "\xa7\xd3\xe9\xe7\x7d\x05\x6a\x6c\x78\xd4\xec\x6e\x42\x4d\x9d"
            "\x28\xfd"s;
        Condition const Thresh29Cond{
            Type::thresholdSha256,
            135168,
            makeSlice(Thresh29CondConditionFingerprint),
            std::bitset<5>{25}};

        auto rsa2 = std::make_unique<RsaSha256>(
            makeSlice(rsa2PublicKey), makeSlice(rsa2Sig));
        auto rsa4 = std::make_unique<RsaSha256>(
            makeSlice(rsa4PublicKey), makeSlice(rsa4Sig));
        std::vector<std::unique_ptr<Fulfillment>> thresh3Subfulfillments;
        thresh3Subfulfillments.emplace_back(std::move(rsa4));
        std::vector<Condition> thresh3Subconditions{
            {Preim5Cond, Rsa6Cond, Ed7Cond}};
        auto thresh3 = std::make_unique<ThresholdSha256>(
            std::move(thresh3Subfulfillments), std::move(thresh3Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh1Subfulfillments;
        thresh1Subfulfillments.emplace_back(std::move(rsa2));
        thresh1Subfulfillments.emplace_back(std::move(thresh3));
        std::vector<Condition> thresh1Subconditions{
            {Preim8Cond, Rsa9Cond, Ed10Cond, Thresh11Cond}};
        auto thresh1 = std::make_unique<ThresholdSha256>(
            std::move(thresh1Subfulfillments), std::move(thresh1Subconditions));
        auto preim16 =
            std::make_unique<PreimageSha256>(makeSlice(preim16Preimage));
        auto rsa17 = std::make_unique<RsaSha256>(
            makeSlice(rsa17PublicKey), makeSlice(rsa17Sig));
        auto ed18 = std::make_unique<Ed25519>(ed18PublicKey, ed18Sig);
        std::vector<std::unique_ptr<Fulfillment>> thresh0Subfulfillments;
        thresh0Subfulfillments.emplace_back(std::move(thresh1));
        thresh0Subfulfillments.emplace_back(std::move(preim16));
        thresh0Subfulfillments.emplace_back(std::move(rsa17));
        thresh0Subfulfillments.emplace_back(std::move(ed18));
        std::vector<Condition> thresh0Subconditions{
            {Preim19Cond, Rsa20Cond, Ed21Cond, Prefix22Cond, Thresh29Cond}};
        ThresholdSha256 const thresh0(
            std::move(thresh0Subfulfillments), std::move(thresh0Subconditions));
        {
            auto const thresh0EncodedFulfillment =
                "\xa2\x82\x08\xa5\xa0\x82\x07\xcb\xa0\x0b\x80\x09\x49\x20\x61"
                "\x6d\x20\x72\x6f\x6f\x74\xa2\x82\x05\x48\xa0\x82\x04\x9b\xa2"
                "\x82\x02\x8b\xa0\x82\x02\x0c\xa3\x82\x02\x08\x80\x82\x01\x00"
                "\xbe\x09\xc5\xa4\x27\x29\xdf\xd4\x67\x76\xbe\xbf\x2c\xf3\xa2"
                "\x0b\x42\xe4\xbf\xeb\xdd\x67\x20\xfb\x7a\x27\x93\xc0\x78\x47"
                "\x78\xd7\x15\x32\xee\x38\x81\x0d\x36\xa2\xc4\x65\x44\xe6\x62"
                "\x26\xb9\x58\x13\xa4\x15\x82\xab\xb1\x16\x61\xfc\x01\x98\xc6"
                "\x1a\x69\xc6\xba\x39\x3f\x01\x55\x3d\xd7\x8e\x14\x42\x6d\x78"
                "\x74\x9b\x28\xcb\x31\x39\x98\x5a\x11\xdc\xc1\x18\x9d\x8d\xb0"
                "\xcd\x1b\x4c\x10\xab\x14\x64\x19\xf1\x33\x15\x45\xc8\x92\x82"
                "\x03\x82\x8a\xaa\xad\x94\xfc\x24\x11\x96\x99\x7e\x94\x5a\x82"
                "\x57\x68\x61\x9f\x7b\x45\xe0\x99\x9e\x4f\x32\x50\x5f\x05\xc8"
                "\x11\xae\xc4\x0c\x63\x18\x0e\x02\x59\x36\x25\x92\x06\x32\xc7"
                "\x71\x47\x99\xcc\x0a\x6e\x0a\x58\x71\x3f\x5e\xb7\x78\xf7\x98"
                "\x79\xdf\x74\xa4\xeb\xa9\x00\xfd\x81\xb3\xcf\x04\x8c\x5d\x7d"
                "\xe7\xb2\x82\x90\x49\xbd\x69\xf3\x08\xe9\x92\xc6\x9e\x41\xba"
                "\x74\xd8\x8d\x81\x97\x6f\x86\xab\xc9\xf1\x02\x31\xb4\xce\x47"
                "\xb0\x39\xc8\xba\x51\xa7\x39\xf3\x71\xa2\x25\x27\x37\x6e\x09"
                "\x6f\x19\x59\xbc\x65\xd9\xcd\x12\xd3\x2c\xa2\x78\xfa\x23\x15"
                "\x1a\x82\x41\x91\x1b\xbe\x8a\xe7\xfe\x3c\x3c\x30\x32\xaa\xe9"
                "\xf3\x81\x82\x01\x00\xbc\x4b\x7b\x84\xe8\xe8\x6c\x2f\xa7\x71"
                "\x2e\x8f\xc0\x7e\x6e\xb3\x00\xf2\xf7\x23\xd2\x1a\x40\xf5\x2d"
                "\xa6\x02\x6f\x57\x64\xb2\xf9\xcc\xbc\x25\xf9\x51\x17\x0e\xda"
                "\x7d\x92\xbf\xf2\x06\xfe\x36\x56\x48\xe2\x5f\x16\x55\x17\xf0"
                "\x1d\x40\xe9\x99\x2f\x9d\xd0\x68\xd5\x1a\x6b\xad\xc0\x8f\xab"
                "\x08\x40\xd9\x6c\xd7\xba\xfb\xc6\xe2\x36\xb8\x63\x01\x26\xe1"
                "\xcc\xf3\x6c\x60\xa1\x55\xdb\xfa\x47\x2c\xa1\xc7\x31\xbe\x7d"
                "\x18\x22\x40\x43\xdd\xce\x18\xe2\xfc\x1e\xf1\x88\x9a\x96\x94"
                "\x8d\x6c\xfa\xc2\xbd\xaf\xfc\x31\x5d\xf0\x5b\xb4\x5a\x20\x03"
                "\x35\xe0\xe1\x70\xaa\x6c\xbb\xa9\x6f\x54\x71\x05\x0a\x13\xcc"
                "\x03\x13\x88\x15\x82\xfb\x7e\x8b\xeb\xf9\x87\x49\x55\x19\x8f"
                "\x8b\x16\x29\x26\xaf\x64\xd1\x72\xfe\xe7\xa2\x80\x85\x62\xd7"
                "\x26\xcb\x90\xbb\x3f\x66\xf8\x82\xf0\x96\xc8\x86\x25\x80\xaa"
                "\x2d\x27\x15\x99\x48\x2d\xc2\x13\x9e\x72\xa2\xc0\xf2\x06\x37"
                "\xc5\x54\x42\xbf\xb9\xa2\x70\xec\x05\xce\x14\x3a\xac\x79\x95"
                "\x21\x99\xc5\x0f\x4f\xd4\x2d\x1f\xdb\x6f\x2f\xa8\xda\x68\x92"
                "\x3b\xe3\x27\x1f\x65\x77\xc2\x53\xe6\x1c\xf9\x11\x28\x59\x47"
                "\x86\x78\xe5\x08\xdc\xd7\xa1\x79\xa0\x25\x80\x20\x5d\xa0\x30"
                "\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c"
                "\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81"
                "\x01\x09\xa3\x27\x80\x20\xee\x75\xbe\xb3\x52\x54\xbd\x24\x06"
                "\x3f\xd9\x32\x48\x19\xe1\x5c\x70\x85\x92\x11\x6c\x3a\xc1\x4c"
                "\x9b\x83\xeb\x05\xa7\x59\xe2\xa0\x81\x03\x01\x00\x00\xa4\x27"
                "\x80\x20\x1e\x5a\xaf\x3e\x46\xf6\xd4\xdf\x4d\x70\xf0\xa1\xd1"
                "\x35\x6d\xf0\x8b\x86\x91\xac\xb2\xf2\x24\xf0\x1a\xd4\x23\xc0"
                "\x21\x8d\x42\xc0\x81\x03\x02\x00\x00\xa3\x82\x02\x08\x80\x82"
                "\x01\x00\xba\x2c\x3b\x50\xb6\xbf\xf9\x0f\x1d\xd7\x32\x4c\x01"
                "\x5f\xff\x2f\x2a\xf6\x33\xd0\xfb\xea\x1f\xa4\xf2\x2d\x22\x8a"
                "\x19\x95\xa9\x17\xb7\x4f\x17\xcf\x55\xcd\x1a\x3a\x5f\x07\x73"
                "\xcc\xaa\x21\x70\x64\xb3\xa0\xf4\xb7\x30\xa3\x82\x37\x93\xc6"
                "\x59\xde\x1b\xa1\x16\x90\x5a\x1a\xf6\x73\xab\x92\xc8\x2f\xf4"
                "\x6f\x5c\xf2\x22\x1d\x30\xf8\x03\xd8\x9b\x5f\x73\x72\x8e\x5f"
                "\xd5\x37\x4b\x43\xda\xfe\x84\x21\x67\xe8\xe3\xd7\x91\x3f\x24"
                "\x1d\xfb\x1f\x12\x6e\xcb\xfc\xb7\x5b\x0a\x35\x73\x3b\xce\x44"
                "\x34\x8e\xcd\x53\xa4\xcf\xa7\x63\x73\xcd\x31\x0f\xe0\x75\x8d"
                "\xe4\xa9\xdc\xfe\xf0\xc9\x3d\x26\xaf\xbf\x7b\x0f\x0e\x17\xb9"
                "\xd0\x4a\x32\x80\x64\x6b\x54\x73\x5a\x50\xc7\x31\x59\xf9\x73"
                "\x72\xa5\x79\xba\xdb\xa1\x14\x8d\x77\x67\x3e\xc0\x5b\xec\x6f"
                "\x0b\xf7\xc5\xee\x5a\xa6\x8d\x49\x63\x81\xbb\xd1\xf9\x9e\xbb"
                "\xed\xb2\xa9\x18\x60\xa7\xee\xeb\x30\xa1\x92\x93\xe8\xd8\x34"
                "\x9e\xac\xd6\x23\xfc\x7f\xcb\xe7\xfe\xa7\xe6\x42\xac\x77\x11"
                "\xc0\x67\x77\xd1\xaa\x5e\xed\x3b\xd5\xa5\x8d\x34\x7c\xd9\x57"
                "\x44\xa7\xc5\x44\x2e\x1e\xe7\x63\xd8\x53\x1b\x9a\xd9\x67\x02"
                "\x13\x32\x61\x81\x82\x01\x00\x08\x79\x56\xe9\xa6\xf7\x8e\x3d"
                "\x4d\x04\x9e\x4b\xa4\x00\xbe\xaa\xa5\x88\x3a\xf2\x9b\x20\xac"
                "\xc1\x18\x70\x92\x67\x82\xc9\x45\x03\x76\xfd\x56\xb8\x00\x03"
                "\x9c\xd3\x66\xe3\x82\xde\x3f\x82\xe6\xf8\xa5\x53\xae\xf1\xad"
                "\xce\xa8\xe9\x9f\x76\x74\xbe\xe7\x1e\x5b\x1d\x0d\xbe\x2d\xf5"
                "\x50\xa6\x31\xe4\x70\x3e\x08\xfc\x19\x97\xf0\x56\x3b\xa1\x78"
                "\x07\x30\x49\x4b\x2a\x97\xdb\xa7\xfc\xf9\xc9\xf8\xe8\xc4\x62"
                "\x92\x77\xe4\x33\xfc\xd0\x78\x7c\xb1\x2a\x63\xcf\xf1\x04\xa2"
                "\xd9\xcc\x9e\x92\x59\x51\xa3\x96\x1c\x45\xf9\x77\x66\xed\x92"
                "\xab\xb9\x69\x48\x3b\x2f\x57\x81\x78\x4d\x73\x0a\x1a\xb5\x21"
                "\xdd\x09\xac\x47\xf4\x19\xda\x92\xf6\x0f\x19\xa0\x43\x76\x87"
                "\xac\x5e\x12\x02\x1a\x09\x07\xc0\x5e\xfe\x32\xa9\x67\x29\x68"
                "\xc5\xf7\xef\x7e\x86\x0f\x30\x01\xfb\x4b\xb3\xb0\x9a\x4c\xab"
                "\x08\xdb\xc1\xc1\x8f\xdb\x2e\x26\xc4\xd4\xd3\xa2\x09\x9e\x5c"
                "\x40\x0a\xe2\x7e\x31\x8a\x55\xe7\x0f\xf9\x33\x4f\x23\xec\x9a"
                "\xd5\x74\x90\x73\xe2\xbf\x00\xb5\x63\x7d\x70\x41\x40\xac\x27"
                "\x35\x47\x98\x47\x80\xf5\x33\x44\x71\x80\xcd\x1f\x98\xa0\x3b"
                "\x96\x8f\xce\x44\x8f\x42\xcb\x86\xa1\x81\xa6\xa0\x25\x80\x20"
                "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
                "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
                "\xeb\x4e\x81\x01\x09\xa2\x2b\x80\x20\x67\xf9\x58\xcd\x83\xc7"
                "\xe8\x61\xc5\xd6\xc6\x74\x63\x5e\x10\x49\x97\x4a\xdc\x6f\x31"
                "\x30\x72\xd7\x25\xab\x2c\xb5\x0e\xe7\x39\xe2\x81\x03\x02\x10"
                "\x00\x82\x02\x03\x98\xa3\x27\x80\x20\xe5\x15\x0a\xbd\xf6\x06"
                "\xbe\xaa\x6c\x81\xf1\x88\x7e\x70\x64\x51\xeb\x6f\x70\xb1\xdd"
                "\xc5\xf1\x20\x53\xf7\xcb\x9f\x7f\xc7\xe4\x52\x81\x03\x01\x00"
                "\x00\xa4\x27\x80\x20\x00\x8b\xe6\x62\xd4\x30\x65\x1e\x40\xb3"
                "\x23\x05\x52\x3a\xf3\x16\xda\x09\xbe\x79\x5f\x41\xc9\x03\x93"
                "\x34\x5b\x7c\x24\x87\x62\xfa\x81\x03\x02\x00\x00\xa3\x82\x02"
                "\x08\x80\x82\x01\x00\xb0\x41\xe9\x6e\xfe\x3b\xde\x46\x52\x56"
                "\x34\x2a\x92\x83\x4d\x3a\x7b\x94\xe7\xc2\x06\x5b\x8c\xf4\x9d"
                "\x71\x9d\x00\x73\xd9\x15\x81\x12\x1a\x0c\x9e\xd8\xa6\xa6\xd8"
                "\x62\xbe\xfe\xa3\x7c\xc5\xd0\x71\xdd\x83\xed\xcf\x71\xd8\xe5"
                "\x72\x27\xcb\xce\xd7\x06\xda\xe8\x4b\xb8\x8d\x45\xc0\x9c\xe3"
                "\x13\x27\xbf\x60\x50\x85\xbf\xd1\xfc\x8c\x41\x75\x2d\x51\x83"
                "\x24\x06\xcb\xe6\x98\x8e\x0d\x35\xfa\x58\x34\x43\x90\x55\x6a"
                "\x40\xc9\x78\x31\xfb\x28\x8b\x10\x78\x46\x59\x49\xf5\x89\x1c"
                "\x66\xc0\x6e\x6b\x73\x05\x75\x83\x2b\x86\x78\x02\xc1\xb0\xf1"
                "\x2a\x6e\x7e\xf6\x65\x8f\xe3\xc2\x02\x6d\xae\x03\xc5\xef\x41"
                "\x03\x3a\x6b\xeb\xb0\xab\x6a\x27\x2e\xcb\x13\xf5\xd3\xae\x11"
                "\x18\x33\x6a\xc3\x08\x7a\xf8\xb9\xd7\xf3\x37\xee\x05\x32\xd9"
                "\xb5\xa4\xb9\xeb\x67\xa8\x84\xeb\xb2\xc3\x2f\x8a\x8f\xa7\x24"
                "\xac\x9a\x24\x91\x11\x70\xab\xc5\x05\x25\xa9\xd3\x93\x17\x6d"
                "\x70\xb1\x67\x60\x6b\x50\x69\xdd\x22\x8b\x6a\xa9\x11\x7e\x5e"
                "\x09\xa8\xaa\xdc\x4a\xc8\x09\x4c\x1a\xe7\x4c\x1e\x42\xb2\x27"
                "\x9d\xa9\x1b\xa3\x59\x14\xcb\x0b\xca\xff\x6e\x8d\x8e\x38\xf6"
                "\x19\xb1\x81\x5f\xf4\x7d\x81\x82\x01\x00\x41\x22\x42\x36\xb7"
                "\xb2\xf4\x6d\x33\x3d\x4f\x6d\x0d\x45\xcb\x0d\x05\x7c\x3a\xf2"
                "\xfd\xea\xf0\x75\xe7\x84\x68\x92\xc7\x24\xe2\xdc\x19\x97\xa3"
                "\xf8\x4d\x2e\x84\xb0\x11\x42\x1c\x21\xd9\x21\x14\x8b\x62\x38"
                "\x01\x1a\x1c\xf0\xab\x93\x25\x1d\x2c\x87\x1c\xb8\xaa\x2b\x5f"
                "\x9c\xe2\x4a\x58\xb1\x52\x3e\xb6\xda\x55\xbf\x00\x62\x84\xa3"
                "\x39\x68\xfe\x58\x64\xef\x38\xca\xc4\x9f\x8b\x9d\x23\x31\x41"
                "\x58\x75\x46\xf2\x24\x2a\x3a\xd8\x9b\x73\xd5\x5c\xd3\x5d\x02"
                "\x40\x94\x73\xd5\xb2\x0f\xf4\xfe\xed\x04\x99\xe9\xf5\xb0\xf7"
                "\x49\x02\x09\x16\xaf\xe0\x87\xa7\x40\x0a\xff\x51\x64\x22\xb6"
                "\xcb\x34\x2b\x31\xaf\xc2\x22\x77\x8a\x8d\xc1\x63\x5a\xb7\x7c"
                "\x8b\x79\x55\xab\x1d\x15\xb1\x4a\x56\x2f\xbf\x24\x20\x1f\xa0"
                "\x99\x65\x1d\x06\x8f\xd0\x85\x8d\x5c\xf2\x4a\x57\xee\xe7\x64"
                "\x22\xf8\xee\x9d\x58\xce\x01\x65\x2c\xe3\xd9\xde\x5b\x9e\xc8"
                "\xac\xde\xe0\xfd\xb1\xb4\xc5\x58\xc2\x8b\xc9\x56\xe4\x71\xda"
                "\xe9\x68\x14\xc4\x66\xcb\xf9\xc5\xb5\xc2\x20\x7a\x21\xe8\xe1"
                "\x3f\x04\xee\xc1\xc1\xe5\x8f\x25\x35\xd6\x83\x62\x1a\xe4\x67"
                "\x28\x82\xcf\x80\xf8\x43\x6c\x34\xd2\x78\x99\xa4\x64\x80\x20"
                "\x3b\x07\x0f\xe5\x29\x34\xd9\x17\xf5\x06\x00\xb8\x87\x2f\xcf"
                "\x89\x52\x70\xcc\x04\x92\xe1\x67\xcb\xba\xbb\x10\xa6\x2d\x06"
                "\xa4\x6b\x81\x40\x09\xc4\x1d\xc3\x8e\x6c\xd6\x04\xb7\x9e\x8c"
                "\x8b\x30\x65\x88\x43\xc7\xc6\xe5\xa0\xb0\x4c\x60\xee\xb7\x1d"
                "\x69\x2a\xb7\x5d\x5f\x16\x53\xd1\xe6\x6a\x74\x5d\x63\xc0\x41"
                "\x30\x6a\x58\xce\x52\xf2\xdb\x41\x03\x78\xfd\x7f\x0e\xa5\xc1"
                "\xe4\xd2\x50\x8d\x97\x1d\xf9\x06\xa1\x81\xd3\xa0\x25\x80\x20"
                "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
                "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
                "\xeb\x4e\x81\x01\x09\xa1\x2b\x80\x20\x3e\x2e\x3c\xb7\x63\x3e"
                "\xd1\x54\x5a\xcb\x8e\xe0\xf2\xee\xf9\x03\xbc\xd7\xcc\xca\x10"
                "\x3b\x8c\x56\x16\x1e\x68\xf2\xdd\xe8\x7a\x8c\x81\x03\x02\x18"
                "\x2a\x82\x02\x03\xb8\xa2\x2b\x80\x20\xa5\x04\xce\xd0\xad\x29"
                "\xbb\x72\xf7\x4b\xe7\x6e\x89\xf7\x12\xa7\xd3\xe9\xe7\x7d\x05"
                "\x6a\x6c\x78\xd4\xec\x6e\x42\x4d\x9d\x28\xfd\x81\x03\x02\x10"
                "\x00\x82\x02\x03\x98\xa3\x27\x80\x20\x8d\xb0\x2c\xb1\x28\xc3"
                "\xf4\x97\x50\x84\x64\x57\xca\xf4\x9d\x63\x08\x73\xfc\xde\x2f"
                "\x90\xf0\xf2\xec\x79\xa9\xc6\xa3\xf1\x33\xfd\x81\x03\x01\x00"
                "\x00\xa4\x27\x80\x20\x95\x3c\x86\x65\x91\x76\x69\x6b\x72\x61"
                "\xaa\x76\x15\x2a\xd7\x25\x4f\x32\xb7\x73\x7a\xb2\x49\x0c\x0b"
                "\xdf\xb5\x4e\x4a\x8b\xf7\x65\x81\x03\x02\x00\x00"s;
            auto const thresh0EncodedCondition =
                "\xa2\x2b\x80\x20\x6c\x8d\x3f\x3a\x69\xb4\x95\x44\xc9\x57\x92"
                "\xec\x55\x82\xb8\x45\xf8\x62\xf4\x1a\x0a\xea\x62\x97\x7e\x0a"
                "\xbf\x1e\x7c\x12\x77\x0f\x81\x03\x0a\x84\x2a\x82\x02\x03\xd8"s;
            auto const thresh0EncodedFingerprint =
                "\x30\x82\x01\x80\x80\x01\x04\xa1\x82\x01\x79\xa0\x25\x80\x20"
                "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
                "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
                "\xeb\x4e\x81\x01\x09\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1"
                "\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21"
                "\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa1"
                "\x2b\x80\x20\x3e\x2e\x3c\xb7\x63\x3e\xd1\x54\x5a\xcb\x8e\xe0"
                "\xf2\xee\xf9\x03\xbc\xd7\xcc\xca\x10\x3b\x8c\x56\x16\x1e\x68"
                "\xf2\xdd\xe8\x7a\x8c\x81\x03\x02\x18\x2a\x82\x02\x03\xb8\xa2"
                "\x2b\x80\x20\xa5\x04\xce\xd0\xad\x29\xbb\x72\xf7\x4b\xe7\x6e"
                "\x89\xf7\x12\xa7\xd3\xe9\xe7\x7d\x05\x6a\x6c\x78\xd4\xec\x6e"
                "\x42\x4d\x9d\x28\xfd\x81\x03\x02\x10\x00\x82\x02\x03\x98\xa2"
                "\x2b\x80\x20\xee\x16\x33\x74\x2b\x8f\x63\xbd\xbc\x40\xc3\x1b"
                "\x57\x5d\xa0\x9d\x1e\x49\x10\x20\xf8\x92\x81\x57\x6a\xe2\xb9"
                "\xc4\x9e\xd7\x1a\x3f\x81\x03\x04\x38\x00\x82\x02\x03\x98\xa3"
                "\x27\x80\x20\x78\xe3\x04\xf4\xa6\x16\x68\x4c\x1b\xcf\x3a\x32"
                "\xff\xbc\x75\x1a\xe6\x08\x9b\xff\xba\x79\xf4\x39\x7a\xfc\xe1"
                "\x6f\xff\x3e\xb3\x75\x81\x03\x01\x00\x00\xa3\x27\x80\x20\x8d"
                "\xb0\x2c\xb1\x28\xc3\xf4\x97\x50\x84\x64\x57\xca\xf4\x9d\x63"
                "\x08\x73\xfc\xde\x2f\x90\xf0\xf2\xec\x79\xa9\xc6\xa3\xf1\x33"
                "\xfd\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x0d\xea\xc5\x16\x5c"
                "\x62\xb8\xd1\xa4\xe7\x5a\x07\x58\x00\x79\x51\x88\x21\xe9\x4d"
                "\xba\x73\x7b\xad\x60\x9c\x5c\x26\x00\x2e\xd1\x51\x81\x03\x02"
                "\x00\x00\xa4\x27\x80\x20\x95\x3c\x86\x65\x91\x76\x69\x6b\x72"
                "\x61\xaa\x76\x15\x2a\xd7\x25\x4f\x32\xb7\x73\x7a\xb2\x49\x0c"
                "\x0b\xdf\xb5\x4e\x4a\x8b\xf7\x65\x81\x03\x02\x00\x00"s;
            check(
                &thresh0,
                thresh0Msg,
                thresh0EncodedFulfillment,
                thresh0EncodedCondition,
                thresh0EncodedFingerprint);
        }
    }

    void
    testEd0()
    {
        testcase("Ed0");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * ed0

        auto const ed0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed0PublicKey{
            {0xa2, 0x0e, 0x9f, 0x32, 0x9a, 0x21, 0x6d, 0xac, 0x88, 0xbf, 0x51,
             0xc7, 0x60, 0xe1, 0x4c, 0xa6, 0xb6, 0x4b, 0x2d, 0x24, 0x87, 0xf6,
             0x29, 0xae, 0xd4, 0xf1, 0xe1, 0x2d, 0x15, 0x84, 0x0b, 0xb9}};
        std::array<std::uint8_t, 64> const ed0Sig{
            {0x6d, 0xea, 0x44, 0xb0, 0x26, 0x5e, 0x51, 0x57, 0x57, 0x6a, 0x49,
             0xd8, 0x03, 0x81, 0x14, 0xb8, 0x77, 0x78, 0x9f, 0xb8, 0x4f, 0xab,
             0xce, 0x19, 0x07, 0x4c, 0xf0, 0xa6, 0x3a, 0x17, 0x06, 0x10, 0x6d,
             0x80, 0xda, 0xc6, 0x8f, 0x06, 0xad, 0x53, 0xb0, 0x9c, 0x36, 0x43,
             0xd9, 0x56, 0xfd, 0x5f, 0xbd, 0x4a, 0xf0, 0xff, 0xcb, 0x20, 0x96,
             0x7f, 0x5d, 0xca, 0xcf, 0x23, 0x52, 0x62, 0x91, 0x08}};
        std::array<std::uint8_t, 32> const ed0SigningKey{
            {0x1a, 0xee, 0xd3, 0x72, 0x55, 0x41, 0x83, 0xf2, 0xa7, 0xe2, 0x5e,
             0x24, 0x0e, 0x22, 0x28, 0x9e, 0x81, 0x61, 0x5f, 0x9d, 0xd2, 0x11,
             0xdd, 0xcd, 0xc3, 0x94, 0x2d, 0x02, 0x26, 0xcf, 0x9e, 0x1c}};
        (void)ed0SigningKey;

        Ed25519 const ed0(ed0PublicKey, ed0Sig);
        {
            auto const ed0EncodedFulfillment =
                "\xa4\x64\x80\x20\xa2\x0e\x9f\x32\x9a\x21\x6d\xac\x88\xbf\x51"
                "\xc7\x60\xe1\x4c\xa6\xb6\x4b\x2d\x24\x87\xf6\x29\xae\xd4\xf1"
                "\xe1\x2d\x15\x84\x0b\xb9\x81\x40\x6d\xea\x44\xb0\x26\x5e\x51"
                "\x57\x57\x6a\x49\xd8\x03\x81\x14\xb8\x77\x78\x9f\xb8\x4f\xab"
                "\xce\x19\x07\x4c\xf0\xa6\x3a\x17\x06\x10\x6d\x80\xda\xc6\x8f"
                "\x06\xad\x53\xb0\x9c\x36\x43\xd9\x56\xfd\x5f\xbd\x4a\xf0\xff"
                "\xcb\x20\x96\x7f\x5d\xca\xcf\x23\x52\x62\x91\x08"s;
            auto const ed0EncodedCondition =
                "\xa4\x27\x80\x20\xa3\xbe\x3a\xd0\x8e\x60\x1c\xd7\x95\xb0\xd9"
                "\x00\x49\x56\xdb\xdb\xb5\xd2\x6e\x41\x03\x6a\x6e\x01\x3f\x58"
                "\x43\x14\x5a\xd2\x58\xc5\x81\x03\x02\x00\x00"s;
            auto const ed0EncodedFingerprint =
                "\x30\x22\x80\x20\xa2\x0e\x9f\x32\x9a\x21\x6d\xac\x88\xbf\x51"
                "\xc7\x60\xe1\x4c\xa6\xb6\x4b\x2d\x24\x87\xf6\x29\xae\xd4\xf1"
                "\xe1\x2d\x15\x84\x0b\xb9"s;
            check(
                &ed0,
                ed0Msg,
                ed0EncodedFulfillment,
                ed0EncodedCondition,
                ed0EncodedFingerprint);
        }
    }

    void
    testPrefix14()
    {
        testcase("Prefix14");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * prefix0
        // ** ed1

        auto const ed1Msg = "P0abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed1PublicKey{
            {0x63, 0x99, 0x70, 0x0c, 0xa9, 0x50, 0x9c, 0xd4, 0xf5, 0x06, 0xdd,
             0x19, 0xc8, 0xa1, 0xd2, 0x9e, 0x03, 0x10, 0xb9, 0x89, 0x2e, 0x02,
             0x34, 0x62, 0x2d, 0x23, 0xca, 0xa1, 0x1d, 0xde, 0x23, 0x6a}};
        std::array<std::uint8_t, 64> const ed1Sig{
            {0x6c, 0x25, 0xd0, 0x01, 0x10, 0x29, 0x70, 0x01, 0x05, 0xc0, 0xfb,
             0x51, 0xd8, 0x59, 0x5b, 0x7b, 0x83, 0x32, 0xd6, 0x18, 0x63, 0x35,
             0x07, 0xcf, 0xdf, 0x63, 0x90, 0x39, 0xd1, 0x24, 0x42, 0x8a, 0xc0,
             0xd1, 0xac, 0xd3, 0x55, 0xf6, 0x5c, 0x96, 0xda, 0x7b, 0x2e, 0xaa,
             0xfc, 0x72, 0x1b, 0x1e, 0x2e, 0xb2, 0x97, 0xad, 0x8d, 0x04, 0x32,
             0xd9, 0x9c, 0xb7, 0xf4, 0x32, 0x38, 0x4e, 0xd7, 0x0c}};
        std::array<std::uint8_t, 32> const ed1SigningKey{
            {0xe9, 0x20, 0xaa, 0x41, 0x73, 0x35, 0x2f, 0xae, 0xa2, 0x4b, 0x4b,
             0x19, 0x64, 0xda, 0xc0, 0xd5, 0x7b, 0xfd, 0x99, 0x06, 0x90, 0x80,
             0x48, 0xe4, 0x6a, 0xc4, 0x86, 0x30, 0x7d, 0x53, 0x37, 0xb9}};
        (void)ed1SigningKey;
        auto const prefix0Prefix = "P0"s;
        auto const prefix0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix0MaxMsgLength = 14;

        auto ed1 = std::make_unique<Ed25519>(ed1PublicKey, ed1Sig);
        PrefixSha256 const prefix0(
            makeSlice(prefix0Prefix), prefix0MaxMsgLength, std::move(ed1));
        {
            auto const prefix0EncodedFulfillment =
                "\xa1\x6f\x80\x02\x50\x30\x81\x01\x0e\xa2\x66\xa4\x64\x80\x20"
                "\x63\x99\x70\x0c\xa9\x50\x9c\xd4\xf5\x06\xdd\x19\xc8\xa1\xd2"
                "\x9e\x03\x10\xb9\x89\x2e\x02\x34\x62\x2d\x23\xca\xa1\x1d\xde"
                "\x23\x6a\x81\x40\x6c\x25\xd0\x01\x10\x29\x70\x01\x05\xc0\xfb"
                "\x51\xd8\x59\x5b\x7b\x83\x32\xd6\x18\x63\x35\x07\xcf\xdf\x63"
                "\x90\x39\xd1\x24\x42\x8a\xc0\xd1\xac\xd3\x55\xf6\x5c\x96\xda"
                "\x7b\x2e\xaa\xfc\x72\x1b\x1e\x2e\xb2\x97\xad\x8d\x04\x32\xd9"
                "\x9c\xb7\xf4\x32\x38\x4e\xd7\x0c"s;
            auto const prefix0EncodedCondition =
                "\xa1\x2b\x80\x20\x82\x35\x0b\x82\x9e\x34\xb7\x9e\xef\xce\x06"
                "\xba\x22\x10\x3a\x1f\xf3\x2f\x2b\xdf\x8e\xac\x18\x06\xc6\x5b"
                "\x49\xfb\xdc\x38\x93\xd6\x81\x03\x02\x04\x10\x82\x02\x03\x08"s;
            auto const prefix0EncodedFingerprint =
                "\x30\x32\x80\x02\x50\x30\x81\x01\x0e\xa2\x29\xa4\x27\x80\x20"
                "\x42\x58\xea\xf4\xb3\xac\xde\x0b\xd9\x1e\x0c\x53\xe5\xae\x63"
                "\x84\xee\xc0\xf5\xcf\x88\xa7\x43\x7b\x05\x47\x87\xee\x73\x3e"
                "\xa3\x83\x81\x03\x02\x00\x00"s;
            check(
                &prefix0,
                prefix0Msg,
                prefix0EncodedFulfillment,
                prefix0EncodedCondition,
                prefix0EncodedFingerprint);
        }
    }

    void
    testThresh48()
    {
        testcase("Thresh48");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * thresh0
        // ** ed1

        auto const ed1Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed1PublicKey{
            {0x63, 0x99, 0x70, 0x0c, 0xa9, 0x50, 0x9c, 0xd4, 0xf5, 0x06, 0xdd,
             0x19, 0xc8, 0xa1, 0xd2, 0x9e, 0x03, 0x10, 0xb9, 0x89, 0x2e, 0x02,
             0x34, 0x62, 0x2d, 0x23, 0xca, 0xa1, 0x1d, 0xde, 0x23, 0x6a}};
        std::array<std::uint8_t, 64> const ed1Sig{
            {0x7d, 0xcb, 0x6f, 0x72, 0xbd, 0x59, 0xa6, 0xba, 0x2b, 0x69, 0x04,
             0x95, 0x4f, 0xba, 0x8a, 0x43, 0x21, 0x45, 0x8f, 0xb1, 0x40, 0x99,
             0xd8, 0xa4, 0x9e, 0x7c, 0x9a, 0xc5, 0x96, 0x07, 0xeb, 0x8d, 0xbd,
             0x80, 0x20, 0xb0, 0x70, 0xf1, 0x33, 0x55, 0x61, 0x61, 0x38, 0x21,
             0xdc, 0xea, 0x3d, 0x30, 0xaa, 0xe6, 0xf4, 0x6a, 0xba, 0xa4, 0x4c,
             0xbf, 0x2f, 0xad, 0xb5, 0x51, 0x44, 0xc8, 0x67, 0x0a}};
        std::array<std::uint8_t, 32> const ed1SigningKey{
            {0xe9, 0x20, 0xaa, 0x41, 0x73, 0x35, 0x2f, 0xae, 0xa2, 0x4b, 0x4b,
             0x19, 0x64, 0xda, 0xc0, 0xd5, 0x7b, 0xfd, 0x99, 0x06, 0x90, 0x80,
             0x48, 0xe4, 0x6a, 0xc4, 0x86, 0x30, 0x7d, 0x53, 0x37, 0xb9}};
        (void)ed1SigningKey;
        auto const thresh0Msg = "abcdefghijklmnopqrstuvwxyz"s;

        auto ed1 = std::make_unique<Ed25519>(ed1PublicKey, ed1Sig);
        std::vector<std::unique_ptr<Fulfillment>> thresh0Subfulfillments;
        thresh0Subfulfillments.emplace_back(std::move(ed1));
        std::vector<Condition> thresh0Subconditions{};
        ThresholdSha256 const thresh0(
            std::move(thresh0Subfulfillments), std::move(thresh0Subconditions));
        {
            auto const thresh0EncodedFulfillment =
                "\xa2\x6a\xa0\x66\xa4\x64\x80\x20\x63\x99\x70\x0c\xa9\x50\x9c"
                "\xd4\xf5\x06\xdd\x19\xc8\xa1\xd2\x9e\x03\x10\xb9\x89\x2e\x02"
                "\x34\x62\x2d\x23\xca\xa1\x1d\xde\x23\x6a\x81\x40\x7d\xcb\x6f"
                "\x72\xbd\x59\xa6\xba\x2b\x69\x04\x95\x4f\xba\x8a\x43\x21\x45"
                "\x8f\xb1\x40\x99\xd8\xa4\x9e\x7c\x9a\xc5\x96\x07\xeb\x8d\xbd"
                "\x80\x20\xb0\x70\xf1\x33\x55\x61\x61\x38\x21\xdc\xea\x3d\x30"
                "\xaa\xe6\xf4\x6a\xba\xa4\x4c\xbf\x2f\xad\xb5\x51\x44\xc8\x67"
                "\x0a\xa1\x00"s;
            auto const thresh0EncodedCondition =
                "\xa2\x2b\x80\x20\xc3\x4b\xb5\xa1\xb5\xd1\x88\x4d\x2d\xeb\xb7"
                "\x4e\x69\xe2\xd0\xdf\xa5\xd2\x89\x96\xf9\xa7\x4a\x51\x5f\x4b"
                "\xed\xf9\xbb\xb7\x10\x3b\x81\x03\x02\x04\x00\x82\x02\x03\x08"s;
            auto const thresh0EncodedFingerprint =
                "\x30\x2e\x80\x01\x01\xa1\x29\xa4\x27\x80\x20\x42\x58\xea\xf4"
                "\xb3\xac\xde\x0b\xd9\x1e\x0c\x53\xe5\xae\x63\x84\xee\xc0\xf5"
                "\xcf\x88\xa7\x43\x7b\x05\x47\x87\xee\x73\x3e\xa3\x83\x81\x03"
                "\x02\x00\x00"s;
            check(
                &thresh0,
                thresh0Msg,
                thresh0EncodedFulfillment,
                thresh0EncodedCondition,
                thresh0EncodedFingerprint);
        }
    }

    void
    testThresh49()
    {
        testcase("Thresh49");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * thresh0
        // ** Preim2Cond
        // ** Rsa3Cond
        // ** Ed4Cond
        // ** ed1

        auto const ed1Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed1PublicKey{
            {0x63, 0x99, 0x70, 0x0c, 0xa9, 0x50, 0x9c, 0xd4, 0xf5, 0x06, 0xdd,
             0x19, 0xc8, 0xa1, 0xd2, 0x9e, 0x03, 0x10, 0xb9, 0x89, 0x2e, 0x02,
             0x34, 0x62, 0x2d, 0x23, 0xca, 0xa1, 0x1d, 0xde, 0x23, 0x6a}};
        std::array<std::uint8_t, 64> const ed1Sig{
            {0x7d, 0xcb, 0x6f, 0x72, 0xbd, 0x59, 0xa6, 0xba, 0x2b, 0x69, 0x04,
             0x95, 0x4f, 0xba, 0x8a, 0x43, 0x21, 0x45, 0x8f, 0xb1, 0x40, 0x99,
             0xd8, 0xa4, 0x9e, 0x7c, 0x9a, 0xc5, 0x96, 0x07, 0xeb, 0x8d, 0xbd,
             0x80, 0x20, 0xb0, 0x70, 0xf1, 0x33, 0x55, 0x61, 0x61, 0x38, 0x21,
             0xdc, 0xea, 0x3d, 0x30, 0xaa, 0xe6, 0xf4, 0x6a, 0xba, 0xa4, 0x4c,
             0xbf, 0x2f, 0xad, 0xb5, 0x51, 0x44, 0xc8, 0x67, 0x0a}};
        std::array<std::uint8_t, 32> const ed1SigningKey{
            {0xe9, 0x20, 0xaa, 0x41, 0x73, 0x35, 0x2f, 0xae, 0xa2, 0x4b, 0x4b,
             0x19, 0x64, 0xda, 0xc0, 0xd5, 0x7b, 0xfd, 0x99, 0x06, 0x90, 0x80,
             0x48, 0xe4, 0x6a, 0xc4, 0x86, 0x30, 0x7d, 0x53, 0x37, 0xb9}};
        (void)ed1SigningKey;
        auto const thresh0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim2CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim2Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim2CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa3CondConditionFingerprint =
            "\xc2\x20\xd2\xd9\x00\x97\x9f\xb2\x4d\x72\x2b\x28\x34\x99\xf6"
            "\xb5\x51\xee\x40\x07\x1b\x8d\x96\x78\x14\xe2\x64\x1e\xea\x05"
            "\x71\xfb"s;
        Condition const Rsa3Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa3CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed4CondConditionFingerprint =
            "\xfa\xa5\xd8\x25\xe0\xb2\x1e\x1b\x7f\x79\xa8\xfe\x46\x2d\xb1"
            "\xc0\x14\x91\xcb\x33\x9e\x03\xe7\x48\x13\x41\xa9\xe3\x58\x0e"
            "\x5d\xdd"s;
        Condition const Ed4Cond{Type::ed25519Sha256,
                                131072,
                                makeSlice(Ed4CondConditionFingerprint),
                                std::bitset<5>{0}};

        auto ed1 = std::make_unique<Ed25519>(ed1PublicKey, ed1Sig);
        std::vector<std::unique_ptr<Fulfillment>> thresh0Subfulfillments;
        thresh0Subfulfillments.emplace_back(std::move(ed1));
        std::vector<Condition> thresh0Subconditions{
            {Preim2Cond, Rsa3Cond, Ed4Cond}};
        ThresholdSha256 const thresh0(
            std::move(thresh0Subfulfillments), std::move(thresh0Subconditions));
        {
            auto const thresh0EncodedFulfillment =
                "\xa2\x81\xe3\xa0\x66\xa4\x64\x80\x20\x63\x99\x70\x0c\xa9\x50"
                "\x9c\xd4\xf5\x06\xdd\x19\xc8\xa1\xd2\x9e\x03\x10\xb9\x89\x2e"
                "\x02\x34\x62\x2d\x23\xca\xa1\x1d\xde\x23\x6a\x81\x40\x7d\xcb"
                "\x6f\x72\xbd\x59\xa6\xba\x2b\x69\x04\x95\x4f\xba\x8a\x43\x21"
                "\x45\x8f\xb1\x40\x99\xd8\xa4\x9e\x7c\x9a\xc5\x96\x07\xeb\x8d"
                "\xbd\x80\x20\xb0\x70\xf1\x33\x55\x61\x61\x38\x21\xdc\xea\x3d"
                "\x30\xaa\xe6\xf4\x6a\xba\xa4\x4c\xbf\x2f\xad\xb5\x51\x44\xc8"
                "\x67\x0a\xa1\x79\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75"
                "\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c"
                "\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa3\x27"
                "\x80\x20\xc2\x20\xd2\xd9\x00\x97\x9f\xb2\x4d\x72\x2b\x28\x34"
                "\x99\xf6\xb5\x51\xee\x40\x07\x1b\x8d\x96\x78\x14\xe2\x64\x1e"
                "\xea\x05\x71\xfb\x81\x03\x01\x00\x00\xa4\x27\x80\x20\xfa\xa5"
                "\xd8\x25\xe0\xb2\x1e\x1b\x7f\x79\xa8\xfe\x46\x2d\xb1\xc0\x14"
                "\x91\xcb\x33\x9e\x03\xe7\x48\x13\x41\xa9\xe3\x58\x0e\x5d\xdd"
                "\x81\x03\x02\x00\x00"s;
            auto const thresh0EncodedCondition =
                "\xa2\x2b\x80\x20\x66\xb0\x23\x7b\x90\xfe\x8c\xea\x80\x5a\xee"
                "\x75\xdb\x4f\x91\x1f\xf8\xdc\xf0\x58\x52\x33\xc6\xa6\x41\x2b"
                "\xdc\x5e\x7b\xe1\x3f\x74\x81\x03\x02\x10\x00\x82\x02\x03\x98"s;
            auto const thresh0EncodedFingerprint =
                "\x30\x81\xa8\x80\x01\x01\xa1\x81\xa2\xa0\x25\x80\x20\x5d\xa0"
                "\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1"
                "\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e"
                "\x81\x01\x09\xa3\x27\x80\x20\xc2\x20\xd2\xd9\x00\x97\x9f\xb2"
                "\x4d\x72\x2b\x28\x34\x99\xf6\xb5\x51\xee\x40\x07\x1b\x8d\x96"
                "\x78\x14\xe2\x64\x1e\xea\x05\x71\xfb\x81\x03\x01\x00\x00\xa4"
                "\x27\x80\x20\x42\x58\xea\xf4\xb3\xac\xde\x0b\xd9\x1e\x0c\x53"
                "\xe5\xae\x63\x84\xee\xc0\xf5\xcf\x88\xa7\x43\x7b\x05\x47\x87"
                "\xee\x73\x3e\xa3\x83\x81\x03\x02\x00\x00\xa4\x27\x80\x20\xfa"
                "\xa5\xd8\x25\xe0\xb2\x1e\x1b\x7f\x79\xa8\xfe\x46\x2d\xb1\xc0"
                "\x14\x91\xcb\x33\x9e\x03\xe7\x48\x13\x41\xa9\xe3\x58\x0e\x5d"
                "\xdd\x81\x03\x02\x00\x00"s;
            check(
                &thresh0,
                thresh0Msg,
                thresh0EncodedFulfillment,
                thresh0EncodedCondition,
                thresh0EncodedFingerprint);
        }
    }

    void
    testThresh50()
    {
        testcase("Thresh50");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * thresh0
        // ** Preim7Cond
        // ** Rsa8Cond
        // ** Ed9Cond
        // ** ed1
        // ** thresh2
        // *** Preim4Cond
        // *** Rsa5Cond
        // *** Ed6Cond
        // *** ed3

        auto const ed1Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed1PublicKey{
            {0x63, 0x99, 0x70, 0x0c, 0xa9, 0x50, 0x9c, 0xd4, 0xf5, 0x06, 0xdd,
             0x19, 0xc8, 0xa1, 0xd2, 0x9e, 0x03, 0x10, 0xb9, 0x89, 0x2e, 0x02,
             0x34, 0x62, 0x2d, 0x23, 0xca, 0xa1, 0x1d, 0xde, 0x23, 0x6a}};
        std::array<std::uint8_t, 64> const ed1Sig{
            {0x7d, 0xcb, 0x6f, 0x72, 0xbd, 0x59, 0xa6, 0xba, 0x2b, 0x69, 0x04,
             0x95, 0x4f, 0xba, 0x8a, 0x43, 0x21, 0x45, 0x8f, 0xb1, 0x40, 0x99,
             0xd8, 0xa4, 0x9e, 0x7c, 0x9a, 0xc5, 0x96, 0x07, 0xeb, 0x8d, 0xbd,
             0x80, 0x20, 0xb0, 0x70, 0xf1, 0x33, 0x55, 0x61, 0x61, 0x38, 0x21,
             0xdc, 0xea, 0x3d, 0x30, 0xaa, 0xe6, 0xf4, 0x6a, 0xba, 0xa4, 0x4c,
             0xbf, 0x2f, 0xad, 0xb5, 0x51, 0x44, 0xc8, 0x67, 0x0a}};
        std::array<std::uint8_t, 32> const ed1SigningKey{
            {0xe9, 0x20, 0xaa, 0x41, 0x73, 0x35, 0x2f, 0xae, 0xa2, 0x4b, 0x4b,
             0x19, 0x64, 0xda, 0xc0, 0xd5, 0x7b, 0xfd, 0x99, 0x06, 0x90, 0x80,
             0x48, 0xe4, 0x6a, 0xc4, 0x86, 0x30, 0x7d, 0x53, 0x37, 0xb9}};
        (void)ed1SigningKey;
        auto const ed3Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed3PublicKey{
            {0x42, 0x0a, 0x60, 0x63, 0x9e, 0xca, 0xaa, 0x48, 0xac, 0xcb, 0x2c,
             0xd9, 0x46, 0x79, 0x69, 0x34, 0x35, 0xf3, 0x8e, 0x29, 0xd5, 0x4b,
             0x24, 0x57, 0x9d, 0xd7, 0x3b, 0x04, 0x5d, 0x9c, 0x2f, 0x32}};
        std::array<std::uint8_t, 64> const ed3Sig{
            {0x8d, 0x31, 0x70, 0x29, 0x69, 0xdd, 0x57, 0x60, 0x2c, 0x4b, 0x2e,
             0x7a, 0x0c, 0x68, 0xfc, 0x7e, 0x62, 0x64, 0x27, 0x75, 0xce, 0x69,
             0xf5, 0xc7, 0x42, 0x9b, 0x2b, 0x47, 0xc7, 0xa8, 0xcc, 0x4f, 0xed,
             0xae, 0x26, 0x54, 0x6c, 0x72, 0xb5, 0x7a, 0x24, 0xcf, 0x14, 0xc9,
             0x82, 0x0b, 0x38, 0x22, 0x8b, 0xcc, 0xa2, 0x20, 0xd7, 0x3f, 0x02,
             0x74, 0xa0, 0x2f, 0xde, 0xb9, 0x5c, 0x7f, 0x60, 0x0b}};
        std::array<std::uint8_t, 32> const ed3SigningKey{
            {0x1b, 0x90, 0xf2, 0x2c, 0xd5, 0x5d, 0xcd, 0xe5, 0x2d, 0x71, 0x84,
             0x66, 0x10, 0xf0, 0xf1, 0x91, 0xfe, 0xb5, 0xbe, 0x94, 0x85, 0xc1,
             0xc8, 0xf3, 0x61, 0x91, 0xc3, 0xa4, 0x41, 0x58, 0xcd, 0xfc}};
        (void)ed3SigningKey;
        auto const thresh2Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim4CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim4Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim4CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa5CondConditionFingerprint =
            "\x99\xfb\x0b\x38\x94\x4d\x20\x85\xc8\xda\x3a\x64\x31\x44\x6f"
            "\x6c\x3b\x46\x25\x50\xd7\x7f\xdf\xee\x75\x72\x71\xf9\x61\x40"
            "\x63\xfa"s;
        Condition const Rsa5Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa5CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed6CondConditionFingerprint =
            "\x00\xd3\xc9\x24\x3f\x2d\x2e\x64\x93\xa8\x49\x29\x82\x75\xea"
            "\xbf\xe3\x53\x7f\x8e\x45\x16\xdb\x5e\xc6\xdf\x39\xd2\xcb\xea"
            "\x62\xfb"s;
        Condition const Ed6Cond{Type::ed25519Sha256,
                                131072,
                                makeSlice(Ed6CondConditionFingerprint),
                                std::bitset<5>{0}};
        auto const thresh0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim7CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim7Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim7CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa8CondConditionFingerprint =
            "\xd1\xb5\x1d\x35\x99\x9d\xb4\xc1\xaa\x81\x4d\xd7\x0e\xa9\x2a"
            "\x20\x7f\xe5\x5c\x75\xe8\x57\x8b\xbf\xe8\xd7\x1c\x7e\xb2\xbc"
            "\x91\x16"s;
        Condition const Rsa8Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa8CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed9CondConditionFingerprint =
            "\x92\xfa\xfc\xc6\x2f\xe2\x8d\x8d\x25\x7c\xd4\x46\xab\xea\x82"
            "\xd0\x3f\x36\xbe\x1d\x11\x2b\xa0\xfe\xfe\xd4\x00\xd5\x7d\x9b"
            "\xf6\xc9"s;
        Condition const Ed9Cond{Type::ed25519Sha256,
                                131072,
                                makeSlice(Ed9CondConditionFingerprint),
                                std::bitset<5>{0}};

        auto ed1 = std::make_unique<Ed25519>(ed1PublicKey, ed1Sig);
        auto ed3 = std::make_unique<Ed25519>(ed3PublicKey, ed3Sig);
        std::vector<std::unique_ptr<Fulfillment>> thresh2Subfulfillments;
        thresh2Subfulfillments.emplace_back(std::move(ed3));
        std::vector<Condition> thresh2Subconditions{
            {Preim4Cond, Rsa5Cond, Ed6Cond}};
        auto thresh2 = std::make_unique<ThresholdSha256>(
            std::move(thresh2Subfulfillments), std::move(thresh2Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh0Subfulfillments;
        thresh0Subfulfillments.emplace_back(std::move(ed1));
        thresh0Subfulfillments.emplace_back(std::move(thresh2));
        std::vector<Condition> thresh0Subconditions{
            {Preim7Cond, Rsa8Cond, Ed9Cond}};
        ThresholdSha256 const thresh0(
            std::move(thresh0Subfulfillments), std::move(thresh0Subconditions));
        {
            auto const thresh0EncodedFulfillment =
                "\xa2\x82\x01\xcb\xa0\x82\x01\x4c\xa2\x81\xe3\xa0\x66\xa4\x64"
                "\x80\x20\x42\x0a\x60\x63\x9e\xca\xaa\x48\xac\xcb\x2c\xd9\x46"
                "\x79\x69\x34\x35\xf3\x8e\x29\xd5\x4b\x24\x57\x9d\xd7\x3b\x04"
                "\x5d\x9c\x2f\x32\x81\x40\x8d\x31\x70\x29\x69\xdd\x57\x60\x2c"
                "\x4b\x2e\x7a\x0c\x68\xfc\x7e\x62\x64\x27\x75\xce\x69\xf5\xc7"
                "\x42\x9b\x2b\x47\xc7\xa8\xcc\x4f\xed\xae\x26\x54\x6c\x72\xb5"
                "\x7a\x24\xcf\x14\xc9\x82\x0b\x38\x22\x8b\xcc\xa2\x20\xd7\x3f"
                "\x02\x74\xa0\x2f\xde\xb9\x5c\x7f\x60\x0b\xa1\x79\xa0\x25\x80"
                "\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d"
                "\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93"
                "\x58\xeb\x4e\x81\x01\x09\xa3\x27\x80\x20\x99\xfb\x0b\x38\x94"
                "\x4d\x20\x85\xc8\xda\x3a\x64\x31\x44\x6f\x6c\x3b\x46\x25\x50"
                "\xd7\x7f\xdf\xee\x75\x72\x71\xf9\x61\x40\x63\xfa\x81\x03\x01"
                "\x00\x00\xa4\x27\x80\x20\x00\xd3\xc9\x24\x3f\x2d\x2e\x64\x93"
                "\xa8\x49\x29\x82\x75\xea\xbf\xe3\x53\x7f\x8e\x45\x16\xdb\x5e"
                "\xc6\xdf\x39\xd2\xcb\xea\x62\xfb\x81\x03\x02\x00\x00\xa4\x64"
                "\x80\x20\x63\x99\x70\x0c\xa9\x50\x9c\xd4\xf5\x06\xdd\x19\xc8"
                "\xa1\xd2\x9e\x03\x10\xb9\x89\x2e\x02\x34\x62\x2d\x23\xca\xa1"
                "\x1d\xde\x23\x6a\x81\x40\x7d\xcb\x6f\x72\xbd\x59\xa6\xba\x2b"
                "\x69\x04\x95\x4f\xba\x8a\x43\x21\x45\x8f\xb1\x40\x99\xd8\xa4"
                "\x9e\x7c\x9a\xc5\x96\x07\xeb\x8d\xbd\x80\x20\xb0\x70\xf1\x33"
                "\x55\x61\x61\x38\x21\xdc\xea\x3d\x30\xaa\xe6\xf4\x6a\xba\xa4"
                "\x4c\xbf\x2f\xad\xb5\x51\x44\xc8\x67\x0a\xa1\x79\xa0\x25\x80"
                "\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d"
                "\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93"
                "\x58\xeb\x4e\x81\x01\x09\xa3\x27\x80\x20\xd1\xb5\x1d\x35\x99"
                "\x9d\xb4\xc1\xaa\x81\x4d\xd7\x0e\xa9\x2a\x20\x7f\xe5\x5c\x75"
                "\xe8\x57\x8b\xbf\xe8\xd7\x1c\x7e\xb2\xbc\x91\x16\x81\x03\x01"
                "\x00\x00\xa4\x27\x80\x20\x92\xfa\xfc\xc6\x2f\xe2\x8d\x8d\x25"
                "\x7c\xd4\x46\xab\xea\x82\xd0\x3f\x36\xbe\x1d\x11\x2b\xa0\xfe"
                "\xfe\xd4\x00\xd5\x7d\x9b\xf6\xc9\x81\x03\x02\x00\x00"s;
            auto const thresh0EncodedCondition =
                "\xa2\x2b\x80\x20\x34\x1a\x0f\x66\x10\x28\xcb\x95\x22\xf8\xfc"
                "\xdc\x1b\x3c\x07\xe2\xde\xeb\x86\x8e\x23\x78\xf4\x80\x9a\xc6"
                "\x99\x10\x5c\x91\xc1\xeb\x81\x03\x04\x24\x00\x82\x02\x03\x98"s;
            auto const thresh0EncodedFingerprint =
                "\x30\x81\xd5\x80\x01\x02\xa1\x81\xcf\xa0\x25\x80\x20\x5d\xa0"
                "\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1"
                "\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e"
                "\x81\x01\x09\xa2\x2b\x80\x20\x29\x46\xc8\xd9\xa0\xe0\xb6\xb7"
                "\x2e\xc5\xae\x75\xc3\xdc\x75\x39\x96\xd1\x56\xcb\x54\x3c\xdc"
                "\x34\x6e\xc0\xe0\xfc\x74\x4c\x10\x5d\x81\x03\x02\x10\x00\x82"
                "\x02\x03\x98\xa3\x27\x80\x20\xd1\xb5\x1d\x35\x99\x9d\xb4\xc1"
                "\xaa\x81\x4d\xd7\x0e\xa9\x2a\x20\x7f\xe5\x5c\x75\xe8\x57\x8b"
                "\xbf\xe8\xd7\x1c\x7e\xb2\xbc\x91\x16\x81\x03\x01\x00\x00\xa4"
                "\x27\x80\x20\x42\x58\xea\xf4\xb3\xac\xde\x0b\xd9\x1e\x0c\x53"
                "\xe5\xae\x63\x84\xee\xc0\xf5\xcf\x88\xa7\x43\x7b\x05\x47\x87"
                "\xee\x73\x3e\xa3\x83\x81\x03\x02\x00\x00\xa4\x27\x80\x20\x92"
                "\xfa\xfc\xc6\x2f\xe2\x8d\x8d\x25\x7c\xd4\x46\xab\xea\x82\xd0"
                "\x3f\x36\xbe\x1d\x11\x2b\xa0\xfe\xfe\xd4\x00\xd5\x7d\x9b\xf6"
                "\xc9\x81\x03\x02\x00\x00"s;
            check(
                &thresh0,
                thresh0Msg,
                thresh0EncodedFulfillment,
                thresh0EncodedCondition,
                thresh0EncodedFingerprint);
        }
    }

    void
    testThresh51()
    {
        testcase("Thresh51");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * thresh0
        // ** Preim7Cond
        // ** Rsa8Cond
        // ** Ed9Cond
        // ** Thresh10Cond
        // ** ed1
        // ** thresh2
        // *** Preim4Cond
        // *** Rsa5Cond
        // *** Ed6Cond
        // *** ed3

        auto const ed1Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed1PublicKey{
            {0x63, 0x99, 0x70, 0x0c, 0xa9, 0x50, 0x9c, 0xd4, 0xf5, 0x06, 0xdd,
             0x19, 0xc8, 0xa1, 0xd2, 0x9e, 0x03, 0x10, 0xb9, 0x89, 0x2e, 0x02,
             0x34, 0x62, 0x2d, 0x23, 0xca, 0xa1, 0x1d, 0xde, 0x23, 0x6a}};
        std::array<std::uint8_t, 64> const ed1Sig{
            {0x7d, 0xcb, 0x6f, 0x72, 0xbd, 0x59, 0xa6, 0xba, 0x2b, 0x69, 0x04,
             0x95, 0x4f, 0xba, 0x8a, 0x43, 0x21, 0x45, 0x8f, 0xb1, 0x40, 0x99,
             0xd8, 0xa4, 0x9e, 0x7c, 0x9a, 0xc5, 0x96, 0x07, 0xeb, 0x8d, 0xbd,
             0x80, 0x20, 0xb0, 0x70, 0xf1, 0x33, 0x55, 0x61, 0x61, 0x38, 0x21,
             0xdc, 0xea, 0x3d, 0x30, 0xaa, 0xe6, 0xf4, 0x6a, 0xba, 0xa4, 0x4c,
             0xbf, 0x2f, 0xad, 0xb5, 0x51, 0x44, 0xc8, 0x67, 0x0a}};
        std::array<std::uint8_t, 32> const ed1SigningKey{
            {0xe9, 0x20, 0xaa, 0x41, 0x73, 0x35, 0x2f, 0xae, 0xa2, 0x4b, 0x4b,
             0x19, 0x64, 0xda, 0xc0, 0xd5, 0x7b, 0xfd, 0x99, 0x06, 0x90, 0x80,
             0x48, 0xe4, 0x6a, 0xc4, 0x86, 0x30, 0x7d, 0x53, 0x37, 0xb9}};
        (void)ed1SigningKey;
        auto const ed3Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed3PublicKey{
            {0x42, 0x0a, 0x60, 0x63, 0x9e, 0xca, 0xaa, 0x48, 0xac, 0xcb, 0x2c,
             0xd9, 0x46, 0x79, 0x69, 0x34, 0x35, 0xf3, 0x8e, 0x29, 0xd5, 0x4b,
             0x24, 0x57, 0x9d, 0xd7, 0x3b, 0x04, 0x5d, 0x9c, 0x2f, 0x32}};
        std::array<std::uint8_t, 64> const ed3Sig{
            {0x8d, 0x31, 0x70, 0x29, 0x69, 0xdd, 0x57, 0x60, 0x2c, 0x4b, 0x2e,
             0x7a, 0x0c, 0x68, 0xfc, 0x7e, 0x62, 0x64, 0x27, 0x75, 0xce, 0x69,
             0xf5, 0xc7, 0x42, 0x9b, 0x2b, 0x47, 0xc7, 0xa8, 0xcc, 0x4f, 0xed,
             0xae, 0x26, 0x54, 0x6c, 0x72, 0xb5, 0x7a, 0x24, 0xcf, 0x14, 0xc9,
             0x82, 0x0b, 0x38, 0x22, 0x8b, 0xcc, 0xa2, 0x20, 0xd7, 0x3f, 0x02,
             0x74, 0xa0, 0x2f, 0xde, 0xb9, 0x5c, 0x7f, 0x60, 0x0b}};
        std::array<std::uint8_t, 32> const ed3SigningKey{
            {0x1b, 0x90, 0xf2, 0x2c, 0xd5, 0x5d, 0xcd, 0xe5, 0x2d, 0x71, 0x84,
             0x66, 0x10, 0xf0, 0xf1, 0x91, 0xfe, 0xb5, 0xbe, 0x94, 0x85, 0xc1,
             0xc8, 0xf3, 0x61, 0x91, 0xc3, 0xa4, 0x41, 0x58, 0xcd, 0xfc}};
        (void)ed3SigningKey;
        auto const thresh2Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim4CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim4Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim4CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa5CondConditionFingerprint =
            "\x99\xfb\x0b\x38\x94\x4d\x20\x85\xc8\xda\x3a\x64\x31\x44\x6f"
            "\x6c\x3b\x46\x25\x50\xd7\x7f\xdf\xee\x75\x72\x71\xf9\x61\x40"
            "\x63\xfa"s;
        Condition const Rsa5Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa5CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed6CondConditionFingerprint =
            "\x00\xd3\xc9\x24\x3f\x2d\x2e\x64\x93\xa8\x49\x29\x82\x75\xea"
            "\xbf\xe3\x53\x7f\x8e\x45\x16\xdb\x5e\xc6\xdf\x39\xd2\xcb\xea"
            "\x62\xfb"s;
        Condition const Ed6Cond{Type::ed25519Sha256,
                                131072,
                                makeSlice(Ed6CondConditionFingerprint),
                                std::bitset<5>{0}};
        auto const thresh0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim7CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim7Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim7CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa8CondConditionFingerprint =
            "\xd1\xb5\x1d\x35\x99\x9d\xb4\xc1\xaa\x81\x4d\xd7\x0e\xa9\x2a"
            "\x20\x7f\xe5\x5c\x75\xe8\x57\x8b\xbf\xe8\xd7\x1c\x7e\xb2\xbc"
            "\x91\x16"s;
        Condition const Rsa8Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa8CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed9CondConditionFingerprint =
            "\x92\xfa\xfc\xc6\x2f\xe2\x8d\x8d\x25\x7c\xd4\x46\xab\xea\x82"
            "\xd0\x3f\x36\xbe\x1d\x11\x2b\xa0\xfe\xfe\xd4\x00\xd5\x7d\x9b"
            "\xf6\xc9"s;
        Condition const Ed9Cond{Type::ed25519Sha256,
                                131072,
                                makeSlice(Ed9CondConditionFingerprint),
                                std::bitset<5>{0}};
        auto const Thresh10CondConditionFingerprint =
            "\xe7\x0c\xd7\xd3\xd4\x83\x3d\x08\x55\x80\xaa\x54\xa5\xa3\xaa"
            "\x27\xe2\x9d\x7e\xbb\x17\x14\xc4\xdc\x90\x7c\x22\x8b\x78\x29"
            "\x7a\x03"s;
        Condition const Thresh10Cond{
            Type::thresholdSha256,
            135168,
            makeSlice(Thresh10CondConditionFingerprint),
            std::bitset<5>{25}};

        auto ed1 = std::make_unique<Ed25519>(ed1PublicKey, ed1Sig);
        auto ed3 = std::make_unique<Ed25519>(ed3PublicKey, ed3Sig);
        std::vector<std::unique_ptr<Fulfillment>> thresh2Subfulfillments;
        thresh2Subfulfillments.emplace_back(std::move(ed3));
        std::vector<Condition> thresh2Subconditions{
            {Preim4Cond, Rsa5Cond, Ed6Cond}};
        auto thresh2 = std::make_unique<ThresholdSha256>(
            std::move(thresh2Subfulfillments), std::move(thresh2Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh0Subfulfillments;
        thresh0Subfulfillments.emplace_back(std::move(ed1));
        thresh0Subfulfillments.emplace_back(std::move(thresh2));
        std::vector<Condition> thresh0Subconditions{
            {Preim7Cond, Rsa8Cond, Ed9Cond, Thresh10Cond}};
        ThresholdSha256 const thresh0(
            std::move(thresh0Subfulfillments), std::move(thresh0Subconditions));
        {
            auto const thresh0EncodedFulfillment =
                "\xa2\x82\x01\xf9\xa0\x82\x01\x4c\xa2\x81\xe3\xa0\x66\xa4\x64"
                "\x80\x20\x42\x0a\x60\x63\x9e\xca\xaa\x48\xac\xcb\x2c\xd9\x46"
                "\x79\x69\x34\x35\xf3\x8e\x29\xd5\x4b\x24\x57\x9d\xd7\x3b\x04"
                "\x5d\x9c\x2f\x32\x81\x40\x8d\x31\x70\x29\x69\xdd\x57\x60\x2c"
                "\x4b\x2e\x7a\x0c\x68\xfc\x7e\x62\x64\x27\x75\xce\x69\xf5\xc7"
                "\x42\x9b\x2b\x47\xc7\xa8\xcc\x4f\xed\xae\x26\x54\x6c\x72\xb5"
                "\x7a\x24\xcf\x14\xc9\x82\x0b\x38\x22\x8b\xcc\xa2\x20\xd7\x3f"
                "\x02\x74\xa0\x2f\xde\xb9\x5c\x7f\x60\x0b\xa1\x79\xa0\x25\x80"
                "\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d"
                "\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93"
                "\x58\xeb\x4e\x81\x01\x09\xa3\x27\x80\x20\x99\xfb\x0b\x38\x94"
                "\x4d\x20\x85\xc8\xda\x3a\x64\x31\x44\x6f\x6c\x3b\x46\x25\x50"
                "\xd7\x7f\xdf\xee\x75\x72\x71\xf9\x61\x40\x63\xfa\x81\x03\x01"
                "\x00\x00\xa4\x27\x80\x20\x00\xd3\xc9\x24\x3f\x2d\x2e\x64\x93"
                "\xa8\x49\x29\x82\x75\xea\xbf\xe3\x53\x7f\x8e\x45\x16\xdb\x5e"
                "\xc6\xdf\x39\xd2\xcb\xea\x62\xfb\x81\x03\x02\x00\x00\xa4\x64"
                "\x80\x20\x63\x99\x70\x0c\xa9\x50\x9c\xd4\xf5\x06\xdd\x19\xc8"
                "\xa1\xd2\x9e\x03\x10\xb9\x89\x2e\x02\x34\x62\x2d\x23\xca\xa1"
                "\x1d\xde\x23\x6a\x81\x40\x7d\xcb\x6f\x72\xbd\x59\xa6\xba\x2b"
                "\x69\x04\x95\x4f\xba\x8a\x43\x21\x45\x8f\xb1\x40\x99\xd8\xa4"
                "\x9e\x7c\x9a\xc5\x96\x07\xeb\x8d\xbd\x80\x20\xb0\x70\xf1\x33"
                "\x55\x61\x61\x38\x21\xdc\xea\x3d\x30\xaa\xe6\xf4\x6a\xba\xa4"
                "\x4c\xbf\x2f\xad\xb5\x51\x44\xc8\x67\x0a\xa1\x81\xa6\xa0\x25"
                "\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54"
                "\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee"
                "\x93\x58\xeb\x4e\x81\x01\x09\xa2\x2b\x80\x20\xe7\x0c\xd7\xd3"
                "\xd4\x83\x3d\x08\x55\x80\xaa\x54\xa5\xa3\xaa\x27\xe2\x9d\x7e"
                "\xbb\x17\x14\xc4\xdc\x90\x7c\x22\x8b\x78\x29\x7a\x03\x81\x03"
                "\x02\x10\x00\x82\x02\x03\x98\xa3\x27\x80\x20\xd1\xb5\x1d\x35"
                "\x99\x9d\xb4\xc1\xaa\x81\x4d\xd7\x0e\xa9\x2a\x20\x7f\xe5\x5c"
                "\x75\xe8\x57\x8b\xbf\xe8\xd7\x1c\x7e\xb2\xbc\x91\x16\x81\x03"
                "\x01\x00\x00\xa4\x27\x80\x20\x92\xfa\xfc\xc6\x2f\xe2\x8d\x8d"
                "\x25\x7c\xd4\x46\xab\xea\x82\xd0\x3f\x36\xbe\x1d\x11\x2b\xa0"
                "\xfe\xfe\xd4\x00\xd5\x7d\x9b\xf6\xc9\x81\x03\x02\x00\x00"s;
            auto const thresh0EncodedCondition =
                "\xa2\x2b\x80\x20\x63\x8d\xa9\x20\xb9\x16\x42\x83\xf0\xbb\x9d"
                "\x8f\xc6\xc5\x68\x3d\xaa\xd4\x33\x4e\x0c\x53\xb9\x21\x54\x92"
                "\xd8\x9f\x9d\x92\x4f\x57\x81\x03\x04\x38\x00\x82\x02\x03\x98"s;
            auto const thresh0EncodedFingerprint =
                "\x30\x82\x01\x02\x80\x01\x02\xa1\x81\xfc\xa0\x25\x80\x20\x5d"
                "\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b"
                "\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb"
                "\x4e\x81\x01\x09\xa2\x2b\x80\x20\x29\x46\xc8\xd9\xa0\xe0\xb6"
                "\xb7\x2e\xc5\xae\x75\xc3\xdc\x75\x39\x96\xd1\x56\xcb\x54\x3c"
                "\xdc\x34\x6e\xc0\xe0\xfc\x74\x4c\x10\x5d\x81\x03\x02\x10\x00"
                "\x82\x02\x03\x98\xa2\x2b\x80\x20\xe7\x0c\xd7\xd3\xd4\x83\x3d"
                "\x08\x55\x80\xaa\x54\xa5\xa3\xaa\x27\xe2\x9d\x7e\xbb\x17\x14"
                "\xc4\xdc\x90\x7c\x22\x8b\x78\x29\x7a\x03\x81\x03\x02\x10\x00"
                "\x82\x02\x03\x98\xa3\x27\x80\x20\xd1\xb5\x1d\x35\x99\x9d\xb4"
                "\xc1\xaa\x81\x4d\xd7\x0e\xa9\x2a\x20\x7f\xe5\x5c\x75\xe8\x57"
                "\x8b\xbf\xe8\xd7\x1c\x7e\xb2\xbc\x91\x16\x81\x03\x01\x00\x00"
                "\xa4\x27\x80\x20\x42\x58\xea\xf4\xb3\xac\xde\x0b\xd9\x1e\x0c"
                "\x53\xe5\xae\x63\x84\xee\xc0\xf5\xcf\x88\xa7\x43\x7b\x05\x47"
                "\x87\xee\x73\x3e\xa3\x83\x81\x03\x02\x00\x00\xa4\x27\x80\x20"
                "\x92\xfa\xfc\xc6\x2f\xe2\x8d\x8d\x25\x7c\xd4\x46\xab\xea\x82"
                "\xd0\x3f\x36\xbe\x1d\x11\x2b\xa0\xfe\xfe\xd4\x00\xd5\x7d\x9b"
                "\xf6\xc9\x81\x03\x02\x00\x00"s;
            check(
                &thresh0,
                thresh0Msg,
                thresh0EncodedFulfillment,
                thresh0EncodedCondition,
                thresh0EncodedFingerprint);
        }
    }

    void
    testPrefix15()
    {
        testcase("Prefix15");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * prefix0
        // ** prefix1
        // *** ed2

        auto const ed2Msg = "P1P0abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed2PublicKey{
            {0xb1, 0x2f, 0x54, 0xbe, 0xb6, 0xf8, 0x76, 0x71, 0x72, 0xed, 0x44,
             0x03, 0x71, 0x74, 0x2d, 0x7f, 0x98, 0x10, 0x4b, 0x57, 0xf2, 0x45,
             0xfb, 0x3e, 0xea, 0xfd, 0xdd, 0x39, 0x42, 0xbf, 0x24, 0x4d}};
        std::array<std::uint8_t, 64> const ed2Sig{
            {0xbd, 0xa7, 0x4d, 0x84, 0x5f, 0xfd, 0x7c, 0x9b, 0xd0, 0xef, 0x41,
             0x2c, 0x54, 0x50, 0xd8, 0x26, 0xf0, 0x06, 0x61, 0x22, 0x5c, 0x90,
             0xc2, 0x72, 0x5e, 0x7a, 0x3b, 0x6f, 0xba, 0xa7, 0x22, 0x04, 0xa6,
             0x6c, 0x67, 0xbb, 0x58, 0x28, 0xf7, 0xd8, 0x0c, 0x8e, 0xd3, 0x62,
             0x66, 0x66, 0x2c, 0xe9, 0x71, 0xd0, 0x38, 0xab, 0x33, 0xfa, 0x10,
             0x10, 0x53, 0x4f, 0xf2, 0xf1, 0x97, 0x0d, 0xbd, 0x06}};
        std::array<std::uint8_t, 32> const ed2SigningKey{
            {0xa7, 0xeb, 0x15, 0xc5, 0x2a, 0x41, 0x59, 0xf9, 0xf7, 0xb4, 0x78,
             0x5f, 0xdb, 0x79, 0xe5, 0x5b, 0x16, 0x44, 0xf7, 0xc7, 0xcf, 0xe2,
             0x46, 0xc5, 0xb3, 0x54, 0x64, 0xb5, 0x2f, 0x6c, 0x8e, 0x8e}};
        (void)ed2SigningKey;
        auto const prefix1Prefix = "P1"s;
        auto const prefix1Msg = "P0abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix1MaxMsgLength = 14;
        auto const prefix0Prefix = "P0"s;
        auto const prefix0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix0MaxMsgLength = 14;

        auto ed2 = std::make_unique<Ed25519>(ed2PublicKey, ed2Sig);
        auto prefix1 = std::make_unique<PrefixSha256>(
            makeSlice(prefix1Prefix), prefix1MaxMsgLength, std::move(ed2));
        PrefixSha256 const prefix0(
            makeSlice(prefix0Prefix), prefix0MaxMsgLength, std::move(prefix1));
        {
            auto const prefix0EncodedFulfillment =
                "\xa1\x7a\x80\x02\x50\x30\x81\x01\x0e\xa2\x71\xa1\x6f\x80\x02"
                "\x50\x31\x81\x01\x0e\xa2\x66\xa4\x64\x80\x20\xb1\x2f\x54\xbe"
                "\xb6\xf8\x76\x71\x72\xed\x44\x03\x71\x74\x2d\x7f\x98\x10\x4b"
                "\x57\xf2\x45\xfb\x3e\xea\xfd\xdd\x39\x42\xbf\x24\x4d\x81\x40"
                "\xbd\xa7\x4d\x84\x5f\xfd\x7c\x9b\xd0\xef\x41\x2c\x54\x50\xd8"
                "\x26\xf0\x06\x61\x22\x5c\x90\xc2\x72\x5e\x7a\x3b\x6f\xba\xa7"
                "\x22\x04\xa6\x6c\x67\xbb\x58\x28\xf7\xd8\x0c\x8e\xd3\x62\x66"
                "\x66\x2c\xe9\x71\xd0\x38\xab\x33\xfa\x10\x10\x53\x4f\xf2\xf1"
                "\x97\x0d\xbd\x06"s;
            auto const prefix0EncodedCondition =
                "\xa1\x2b\x80\x20\x86\x8a\xe2\xb3\xfb\x2c\x75\x50\x77\xb1\x96"
                "\x01\x3b\x89\x92\x75\x69\x99\x38\x30\xa6\x15\x16\xa8\x10\x21"
                "\x85\x76\x1e\xca\x31\x72\x81\x03\x02\x08\x20\x82\x02\x03\x08"s;
            auto const prefix0EncodedFingerprint =
                "\x30\x36\x80\x02\x50\x30\x81\x01\x0e\xa2\x2d\xa1\x2b\x80\x20"
                "\x2d\x35\x2a\x9a\xff\x16\x5a\x95\x64\x87\xf3\xa8\x86\x17\xe4"
                "\x53\xd4\xfc\x87\x72\x80\x9a\x74\x05\xa0\x2c\x5c\xbf\x8b\xdb"
                "\xaf\xae\x81\x03\x02\x04\x10\x82\x02\x03\x08"s;
            check(
                &prefix0,
                prefix0Msg,
                prefix0EncodedFulfillment,
                prefix0EncodedCondition,
                prefix0EncodedFingerprint);
        }
    }

    void
    testPrefix16()
    {
        testcase("Prefix16");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * prefix0
        // ** prefix1
        // *** prefix2
        // **** ed3

        auto const ed3Msg = "P2P1P0abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed3PublicKey{
            {0x42, 0x0a, 0x60, 0x63, 0x9e, 0xca, 0xaa, 0x48, 0xac, 0xcb, 0x2c,
             0xd9, 0x46, 0x79, 0x69, 0x34, 0x35, 0xf3, 0x8e, 0x29, 0xd5, 0x4b,
             0x24, 0x57, 0x9d, 0xd7, 0x3b, 0x04, 0x5d, 0x9c, 0x2f, 0x32}};
        std::array<std::uint8_t, 64> const ed3Sig{
            {0x33, 0x01, 0x0b, 0xe8, 0x91, 0xa9, 0xa0, 0x9b, 0x54, 0x9a, 0xfc,
             0xde, 0xcd, 0xac, 0x70, 0x42, 0xeb, 0x1e, 0x41, 0x7f, 0xb8, 0xe0,
             0x62, 0x39, 0x8d, 0x55, 0xa8, 0xe8, 0xc5, 0xba, 0x2b, 0xfd, 0xf6,
             0xfb, 0xc9, 0x96, 0x83, 0x17, 0x54, 0x06, 0xa9, 0xb3, 0xa9, 0x64,
             0xe8, 0xd3, 0xa7, 0x92, 0xde, 0xb2, 0x4d, 0x85, 0x49, 0x2c, 0x2a,
             0xeb, 0x48, 0x1f, 0x7a, 0x33, 0x60, 0x83, 0x56, 0x0f}};
        std::array<std::uint8_t, 32> const ed3SigningKey{
            {0x1b, 0x90, 0xf2, 0x2c, 0xd5, 0x5d, 0xcd, 0xe5, 0x2d, 0x71, 0x84,
             0x66, 0x10, 0xf0, 0xf1, 0x91, 0xfe, 0xb5, 0xbe, 0x94, 0x85, 0xc1,
             0xc8, 0xf3, 0x61, 0x91, 0xc3, 0xa4, 0x41, 0x58, 0xcd, 0xfc}};
        (void)ed3SigningKey;
        auto const prefix2Prefix = "P2"s;
        auto const prefix2Msg = "P1P0abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix2MaxMsgLength = 14;
        auto const prefix1Prefix = "P1"s;
        auto const prefix1Msg = "P0abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix1MaxMsgLength = 14;
        auto const prefix0Prefix = "P0"s;
        auto const prefix0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix0MaxMsgLength = 14;

        auto ed3 = std::make_unique<Ed25519>(ed3PublicKey, ed3Sig);
        auto prefix2 = std::make_unique<PrefixSha256>(
            makeSlice(prefix2Prefix), prefix2MaxMsgLength, std::move(ed3));
        auto prefix1 = std::make_unique<PrefixSha256>(
            makeSlice(prefix1Prefix), prefix1MaxMsgLength, std::move(prefix2));
        PrefixSha256 const prefix0(
            makeSlice(prefix0Prefix), prefix0MaxMsgLength, std::move(prefix1));
        {
            auto const prefix0EncodedFulfillment =
                "\xa1\x81\x85\x80\x02\x50\x30\x81\x01\x0e\xa2\x7c\xa1\x7a\x80"
                "\x02\x50\x31\x81\x01\x0e\xa2\x71\xa1\x6f\x80\x02\x50\x32\x81"
                "\x01\x0e\xa2\x66\xa4\x64\x80\x20\x42\x0a\x60\x63\x9e\xca\xaa"
                "\x48\xac\xcb\x2c\xd9\x46\x79\x69\x34\x35\xf3\x8e\x29\xd5\x4b"
                "\x24\x57\x9d\xd7\x3b\x04\x5d\x9c\x2f\x32\x81\x40\x33\x01\x0b"
                "\xe8\x91\xa9\xa0\x9b\x54\x9a\xfc\xde\xcd\xac\x70\x42\xeb\x1e"
                "\x41\x7f\xb8\xe0\x62\x39\x8d\x55\xa8\xe8\xc5\xba\x2b\xfd\xf6"
                "\xfb\xc9\x96\x83\x17\x54\x06\xa9\xb3\xa9\x64\xe8\xd3\xa7\x92"
                "\xde\xb2\x4d\x85\x49\x2c\x2a\xeb\x48\x1f\x7a\x33\x60\x83\x56"
                "\x0f"s;
            auto const prefix0EncodedCondition =
                "\xa1\x2b\x80\x20\x2f\x00\x20\xee\x05\x8f\x40\xe2\x56\x45\x32"
                "\xd9\xa9\xa3\x27\x18\x1b\x2e\x33\x89\x9f\xaa\x2a\x18\x65\x93"
                "\xe6\x36\x9a\x5e\xb7\xa7\x81\x03\x02\x0c\x30\x82\x02\x03\x08"s;
            auto const prefix0EncodedFingerprint =
                "\x30\x36\x80\x02\x50\x30\x81\x01\x0e\xa2\x2d\xa1\x2b\x80\x20"
                "\xe9\xa9\x26\x1a\xaf\xf8\x2a\x49\x3a\x0e\x97\xca\x70\x81\x21"
                "\xd9\xad\xce\x28\xc7\x47\x76\x0d\x67\x89\x41\x06\x50\x63\xb8"
                "\x0c\x50\x81\x03\x02\x08\x20\x82\x02\x03\x08"s;
            check(
                &prefix0,
                prefix0Msg,
                prefix0EncodedFulfillment,
                prefix0EncodedCondition,
                prefix0EncodedFingerprint);
        }
    }

    void
    testPrefix17()
    {
        testcase("Prefix17");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * prefix0
        // ** prefix1
        // *** thresh2
        // **** ed3

        auto const ed3Msg = "P1P0abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed3PublicKey{
            {0x42, 0x0a, 0x60, 0x63, 0x9e, 0xca, 0xaa, 0x48, 0xac, 0xcb, 0x2c,
             0xd9, 0x46, 0x79, 0x69, 0x34, 0x35, 0xf3, 0x8e, 0x29, 0xd5, 0x4b,
             0x24, 0x57, 0x9d, 0xd7, 0x3b, 0x04, 0x5d, 0x9c, 0x2f, 0x32}};
        std::array<std::uint8_t, 64> const ed3Sig{
            {0x8e, 0xa4, 0xd9, 0x6a, 0x9b, 0x3e, 0x19, 0xe8, 0x89, 0xa4, 0x4e,
             0xf2, 0xa8, 0x1c, 0xc2, 0xbd, 0xd3, 0xe0, 0x6f, 0xe0, 0xd1, 0x6b,
             0x85, 0x47, 0x9a, 0x58, 0x2e, 0x9f, 0x38, 0x09, 0x1f, 0x6d, 0x02,
             0x9a, 0xf6, 0x9c, 0x60, 0x3f, 0x16, 0x6c, 0xa5, 0x0e, 0xfb, 0xa3,
             0x08, 0xd6, 0xb6, 0x97, 0x5f, 0x2e, 0x94, 0xfb, 0x49, 0x56, 0xbe,
             0x2c, 0x58, 0x48, 0x15, 0x49, 0x73, 0xa2, 0xae, 0x09}};
        std::array<std::uint8_t, 32> const ed3SigningKey{
            {0x1b, 0x90, 0xf2, 0x2c, 0xd5, 0x5d, 0xcd, 0xe5, 0x2d, 0x71, 0x84,
             0x66, 0x10, 0xf0, 0xf1, 0x91, 0xfe, 0xb5, 0xbe, 0x94, 0x85, 0xc1,
             0xc8, 0xf3, 0x61, 0x91, 0xc3, 0xa4, 0x41, 0x58, 0xcd, 0xfc}};
        (void)ed3SigningKey;
        auto const thresh2Msg = "P1P0abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix1Prefix = "P1"s;
        auto const prefix1Msg = "P0abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix1MaxMsgLength = 14;
        auto const prefix0Prefix = "P0"s;
        auto const prefix0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix0MaxMsgLength = 14;

        auto ed3 = std::make_unique<Ed25519>(ed3PublicKey, ed3Sig);
        std::vector<std::unique_ptr<Fulfillment>> thresh2Subfulfillments;
        thresh2Subfulfillments.emplace_back(std::move(ed3));
        std::vector<Condition> thresh2Subconditions{};
        auto thresh2 = std::make_unique<ThresholdSha256>(
            std::move(thresh2Subfulfillments), std::move(thresh2Subconditions));
        auto prefix1 = std::make_unique<PrefixSha256>(
            makeSlice(prefix1Prefix), prefix1MaxMsgLength, std::move(thresh2));
        PrefixSha256 const prefix0(
            makeSlice(prefix0Prefix), prefix0MaxMsgLength, std::move(prefix1));
        {
            auto const prefix0EncodedFulfillment =
                "\xa1\x81\x80\x80\x02\x50\x30\x81\x01\x0e\xa2\x77\xa1\x75\x80"
                "\x02\x50\x31\x81\x01\x0e\xa2\x6c\xa2\x6a\xa0\x66\xa4\x64\x80"
                "\x20\x42\x0a\x60\x63\x9e\xca\xaa\x48\xac\xcb\x2c\xd9\x46\x79"
                "\x69\x34\x35\xf3\x8e\x29\xd5\x4b\x24\x57\x9d\xd7\x3b\x04\x5d"
                "\x9c\x2f\x32\x81\x40\x8e\xa4\xd9\x6a\x9b\x3e\x19\xe8\x89\xa4"
                "\x4e\xf2\xa8\x1c\xc2\xbd\xd3\xe0\x6f\xe0\xd1\x6b\x85\x47\x9a"
                "\x58\x2e\x9f\x38\x09\x1f\x6d\x02\x9a\xf6\x9c\x60\x3f\x16\x6c"
                "\xa5\x0e\xfb\xa3\x08\xd6\xb6\x97\x5f\x2e\x94\xfb\x49\x56\xbe"
                "\x2c\x58\x48\x15\x49\x73\xa2\xae\x09\xa1\x00"s;
            auto const prefix0EncodedCondition =
                "\xa1\x2b\x80\x20\x57\xdf\xea\x2a\xb7\x65\xa0\x0b\x6d\x77\xa4"
                "\x5f\x1d\x73\xfa\xdc\x88\xa3\x5e\x35\x20\x91\xf2\x86\x8a\xb9"
                "\x9f\x55\x23\x6e\x7c\xab\x81\x03\x02\x0c\x20\x82\x02\x03\x28"s;
            auto const prefix0EncodedFingerprint =
                "\x30\x36\x80\x02\x50\x30\x81\x01\x0e\xa2\x2d\xa1\x2b\x80\x20"
                "\x9e\x95\x7a\xc0\xd8\x94\x1f\x1a\xed\xe3\xe9\xe4\xb5\x2f\x36"
                "\x40\xe4\x6b\xd5\xe8\xc0\x46\x2f\x3b\x5f\xce\x4d\x40\xe1\xac"
                "\xea\x25\x81\x03\x02\x08\x10\x82\x02\x03\x28"s;
            check(
                &prefix0,
                prefix0Msg,
                prefix0EncodedFulfillment,
                prefix0EncodedCondition,
                prefix0EncodedFingerprint);
        }
    }

    void
    testPrefix18()
    {
        testcase("Prefix18");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * prefix0
        // ** prefix1
        // *** thresh2
        // **** Preim4Cond
        // **** Rsa5Cond
        // **** Ed6Cond
        // **** ed3

        auto const ed3Msg = "P1P0abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed3PublicKey{
            {0x42, 0x0a, 0x60, 0x63, 0x9e, 0xca, 0xaa, 0x48, 0xac, 0xcb, 0x2c,
             0xd9, 0x46, 0x79, 0x69, 0x34, 0x35, 0xf3, 0x8e, 0x29, 0xd5, 0x4b,
             0x24, 0x57, 0x9d, 0xd7, 0x3b, 0x04, 0x5d, 0x9c, 0x2f, 0x32}};
        std::array<std::uint8_t, 64> const ed3Sig{
            {0x8e, 0xa4, 0xd9, 0x6a, 0x9b, 0x3e, 0x19, 0xe8, 0x89, 0xa4, 0x4e,
             0xf2, 0xa8, 0x1c, 0xc2, 0xbd, 0xd3, 0xe0, 0x6f, 0xe0, 0xd1, 0x6b,
             0x85, 0x47, 0x9a, 0x58, 0x2e, 0x9f, 0x38, 0x09, 0x1f, 0x6d, 0x02,
             0x9a, 0xf6, 0x9c, 0x60, 0x3f, 0x16, 0x6c, 0xa5, 0x0e, 0xfb, 0xa3,
             0x08, 0xd6, 0xb6, 0x97, 0x5f, 0x2e, 0x94, 0xfb, 0x49, 0x56, 0xbe,
             0x2c, 0x58, 0x48, 0x15, 0x49, 0x73, 0xa2, 0xae, 0x09}};
        std::array<std::uint8_t, 32> const ed3SigningKey{
            {0x1b, 0x90, 0xf2, 0x2c, 0xd5, 0x5d, 0xcd, 0xe5, 0x2d, 0x71, 0x84,
             0x66, 0x10, 0xf0, 0xf1, 0x91, 0xfe, 0xb5, 0xbe, 0x94, 0x85, 0xc1,
             0xc8, 0xf3, 0x61, 0x91, 0xc3, 0xa4, 0x41, 0x58, 0xcd, 0xfc}};
        (void)ed3SigningKey;
        auto const thresh2Msg = "P1P0abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim4CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim4Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim4CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa5CondConditionFingerprint =
            "\x99\xfb\x0b\x38\x94\x4d\x20\x85\xc8\xda\x3a\x64\x31\x44\x6f"
            "\x6c\x3b\x46\x25\x50\xd7\x7f\xdf\xee\x75\x72\x71\xf9\x61\x40"
            "\x63\xfa"s;
        Condition const Rsa5Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa5CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed6CondConditionFingerprint =
            "\x00\xd3\xc9\x24\x3f\x2d\x2e\x64\x93\xa8\x49\x29\x82\x75\xea"
            "\xbf\xe3\x53\x7f\x8e\x45\x16\xdb\x5e\xc6\xdf\x39\xd2\xcb\xea"
            "\x62\xfb"s;
        Condition const Ed6Cond{Type::ed25519Sha256,
                                131072,
                                makeSlice(Ed6CondConditionFingerprint),
                                std::bitset<5>{0}};
        auto const prefix1Prefix = "P1"s;
        auto const prefix1Msg = "P0abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix1MaxMsgLength = 14;
        auto const prefix0Prefix = "P0"s;
        auto const prefix0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix0MaxMsgLength = 14;

        auto ed3 = std::make_unique<Ed25519>(ed3PublicKey, ed3Sig);
        std::vector<std::unique_ptr<Fulfillment>> thresh2Subfulfillments;
        thresh2Subfulfillments.emplace_back(std::move(ed3));
        std::vector<Condition> thresh2Subconditions{
            {Preim4Cond, Rsa5Cond, Ed6Cond}};
        auto thresh2 = std::make_unique<ThresholdSha256>(
            std::move(thresh2Subfulfillments), std::move(thresh2Subconditions));
        auto prefix1 = std::make_unique<PrefixSha256>(
            makeSlice(prefix1Prefix), prefix1MaxMsgLength, std::move(thresh2));
        PrefixSha256 const prefix0(
            makeSlice(prefix0Prefix), prefix0MaxMsgLength, std::move(prefix1));
        {
            auto const prefix0EncodedFulfillment =
                "\xa1\x81\xfd\x80\x02\x50\x30\x81\x01\x0e\xa2\x81\xf3\xa1\x81"
                "\xf0\x80\x02\x50\x31\x81\x01\x0e\xa2\x81\xe6\xa2\x81\xe3\xa0"
                "\x66\xa4\x64\x80\x20\x42\x0a\x60\x63\x9e\xca\xaa\x48\xac\xcb"
                "\x2c\xd9\x46\x79\x69\x34\x35\xf3\x8e\x29\xd5\x4b\x24\x57\x9d"
                "\xd7\x3b\x04\x5d\x9c\x2f\x32\x81\x40\x8e\xa4\xd9\x6a\x9b\x3e"
                "\x19\xe8\x89\xa4\x4e\xf2\xa8\x1c\xc2\xbd\xd3\xe0\x6f\xe0\xd1"
                "\x6b\x85\x47\x9a\x58\x2e\x9f\x38\x09\x1f\x6d\x02\x9a\xf6\x9c"
                "\x60\x3f\x16\x6c\xa5\x0e\xfb\xa3\x08\xd6\xb6\x97\x5f\x2e\x94"
                "\xfb\x49\x56\xbe\x2c\x58\x48\x15\x49\x73\xa2\xae\x09\xa1\x79"
                "\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f"
                "\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd"
                "\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa3\x27\x80\x20\x99\xfb"
                "\x0b\x38\x94\x4d\x20\x85\xc8\xda\x3a\x64\x31\x44\x6f\x6c\x3b"
                "\x46\x25\x50\xd7\x7f\xdf\xee\x75\x72\x71\xf9\x61\x40\x63\xfa"
                "\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x00\xd3\xc9\x24\x3f\x2d"
                "\x2e\x64\x93\xa8\x49\x29\x82\x75\xea\xbf\xe3\x53\x7f\x8e\x45"
                "\x16\xdb\x5e\xc6\xdf\x39\xd2\xcb\xea\x62\xfb\x81\x03\x02\x00"
                "\x00"s;
            auto const prefix0EncodedCondition =
                "\xa1\x2b\x80\x20\x25\xe5\xa0\xbc\x54\x5d\xb9\x2e\x6c\x49\x75"
                "\xc2\x9c\x8f\x93\x13\x52\x7d\x1a\x2a\x62\xf1\x08\x49\x27\x4e"
                "\xa9\xb1\xae\xbb\x61\xd7\x81\x03\x02\x18\x20\x82\x02\x03\xb8"s;
            auto const prefix0EncodedFingerprint =
                "\x30\x36\x80\x02\x50\x30\x81\x01\x0e\xa2\x2d\xa1\x2b\x80\x20"
                "\x52\xfa\x6f\x2f\x9e\x05\x09\xc3\x76\x37\x3d\xfe\x5c\xaf\xca"
                "\xea\xa1\x3a\xd9\x64\xe2\xb6\x61\x65\x41\x4e\xac\x0a\x3e\x95"
                "\x49\x08\x81\x03\x02\x14\x10\x82\x02\x03\xb8"s;
            check(
                &prefix0,
                prefix0Msg,
                prefix0EncodedFulfillment,
                prefix0EncodedCondition,
                prefix0EncodedFingerprint);
        }
    }

    void
    testPrefix19()
    {
        testcase("Prefix19");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * prefix0
        // ** prefix1
        // *** thresh2
        // **** Preim9Cond
        // **** Rsa10Cond
        // **** Ed11Cond
        // **** ed3
        // **** thresh4
        // ***** Preim6Cond
        // ***** Rsa7Cond
        // ***** Ed8Cond
        // ***** ed5

        auto const ed3Msg = "P1P0abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed3PublicKey{
            {0x42, 0x0a, 0x60, 0x63, 0x9e, 0xca, 0xaa, 0x48, 0xac, 0xcb, 0x2c,
             0xd9, 0x46, 0x79, 0x69, 0x34, 0x35, 0xf3, 0x8e, 0x29, 0xd5, 0x4b,
             0x24, 0x57, 0x9d, 0xd7, 0x3b, 0x04, 0x5d, 0x9c, 0x2f, 0x32}};
        std::array<std::uint8_t, 64> const ed3Sig{
            {0x8e, 0xa4, 0xd9, 0x6a, 0x9b, 0x3e, 0x19, 0xe8, 0x89, 0xa4, 0x4e,
             0xf2, 0xa8, 0x1c, 0xc2, 0xbd, 0xd3, 0xe0, 0x6f, 0xe0, 0xd1, 0x6b,
             0x85, 0x47, 0x9a, 0x58, 0x2e, 0x9f, 0x38, 0x09, 0x1f, 0x6d, 0x02,
             0x9a, 0xf6, 0x9c, 0x60, 0x3f, 0x16, 0x6c, 0xa5, 0x0e, 0xfb, 0xa3,
             0x08, 0xd6, 0xb6, 0x97, 0x5f, 0x2e, 0x94, 0xfb, 0x49, 0x56, 0xbe,
             0x2c, 0x58, 0x48, 0x15, 0x49, 0x73, 0xa2, 0xae, 0x09}};
        std::array<std::uint8_t, 32> const ed3SigningKey{
            {0x1b, 0x90, 0xf2, 0x2c, 0xd5, 0x5d, 0xcd, 0xe5, 0x2d, 0x71, 0x84,
             0x66, 0x10, 0xf0, 0xf1, 0x91, 0xfe, 0xb5, 0xbe, 0x94, 0x85, 0xc1,
             0xc8, 0xf3, 0x61, 0x91, 0xc3, 0xa4, 0x41, 0x58, 0xcd, 0xfc}};
        (void)ed3SigningKey;
        auto const ed5Msg = "P1P0abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed5PublicKey{
            {0xae, 0xbc, 0xe5, 0x4b, 0x88, 0x09, 0x8d, 0x4f, 0xc4, 0xe1, 0x22,
             0xa0, 0x7c, 0x41, 0x05, 0xd7, 0x9f, 0xbe, 0xc8, 0x3d, 0x1d, 0x7e,
             0xd6, 0x55, 0xf4, 0x01, 0x67, 0x68, 0x93, 0x55, 0x85, 0xdf}};
        std::array<std::uint8_t, 64> const ed5Sig{
            {0x1a, 0xdc, 0xf3, 0xaa, 0xc3, 0x2e, 0xe4, 0xed, 0x1d, 0x40, 0xe0,
             0xac, 0xfa, 0x29, 0xec, 0xe4, 0xc4, 0x9e, 0x92, 0xbd, 0x49, 0x0d,
             0x18, 0xc7, 0xeb, 0x01, 0xa6, 0x6a, 0x92, 0xa3, 0xc4, 0xc2, 0x92,
             0xd6, 0x62, 0x26, 0x6a, 0x3f, 0x8b, 0x0b, 0xa7, 0x11, 0xe0, 0x37,
             0x3e, 0x71, 0x77, 0x97, 0x7e, 0x66, 0x69, 0x4f, 0x58, 0x2e, 0xc0,
             0x05, 0xd5, 0x2e, 0x3f, 0x2b, 0xec, 0xc7, 0x48, 0x02}};
        std::array<std::uint8_t, 32> const ed5SigningKey{
            {0x42, 0x67, 0x67, 0xc0, 0xba, 0xdf, 0xb4, 0xd3, 0xf5, 0xc5, 0x1f,
             0x71, 0x97, 0x8a, 0xb4, 0x8e, 0x9a, 0xea, 0x3e, 0xec, 0xaf, 0xdc,
             0xc7, 0x2b, 0x01, 0x1b, 0x06, 0x8f, 0x05, 0x56, 0x63, 0xbc}};
        (void)ed5SigningKey;
        auto const thresh4Msg = "P1P0abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim6CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim6Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim6CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa7CondConditionFingerprint =
            "\x6c\x7b\xea\x83\xa1\xf4\x82\x3d\x36\xe7\x6e\xae\x1a\xbc\xa0"
            "\xba\x90\x3d\x96\xc1\xe6\xad\x3a\x47\xa5\xcb\x88\xab\x3c\x5f"
            "\xcc\xd5"s;
        Condition const Rsa7Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa7CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed8CondConditionFingerprint =
            "\xf1\x68\x96\xa6\x2e\xef\x7f\x47\x06\x51\x4c\xc6\x7e\x24\xf7"
            "\x29\x84\x9c\xd6\xb0\xd9\x4b\xd9\x0f\xc9\x34\x01\x9d\x92\xeb"
            "\xbc\x0a"s;
        Condition const Ed8Cond{Type::ed25519Sha256,
                                131072,
                                makeSlice(Ed8CondConditionFingerprint),
                                std::bitset<5>{0}};
        auto const thresh2Msg = "P1P0abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim9CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim9Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim9CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa10CondConditionFingerprint =
            "\x3c\x73\x38\xcf\x23\xc6\x31\x53\x28\xc4\x27\xf8\x95\x87\x99"
            "\x83\x2d\x35\x3c\x03\x9b\xd1\xff\xff\x2e\x53\x20\xe9\x5e\x62"
            "\xb9\xb7"s;
        Condition const Rsa10Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa10CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed11CondConditionFingerprint =
            "\x41\x80\x08\xb2\x60\x74\x57\x6d\xac\xed\x74\x7f\x54\xdb\x96"
            "\x18\x91\x06\x0a\x95\xa1\x49\x17\xc7\x65\xe3\x94\xc8\x5e\x2c"
            "\x92\x20"s;
        Condition const Ed11Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed11CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const prefix1Prefix = "P1"s;
        auto const prefix1Msg = "P0abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix1MaxMsgLength = 14;
        auto const prefix0Prefix = "P0"s;
        auto const prefix0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix0MaxMsgLength = 14;

        auto ed3 = std::make_unique<Ed25519>(ed3PublicKey, ed3Sig);
        auto ed5 = std::make_unique<Ed25519>(ed5PublicKey, ed5Sig);
        std::vector<std::unique_ptr<Fulfillment>> thresh4Subfulfillments;
        thresh4Subfulfillments.emplace_back(std::move(ed5));
        std::vector<Condition> thresh4Subconditions{
            {Preim6Cond, Rsa7Cond, Ed8Cond}};
        auto thresh4 = std::make_unique<ThresholdSha256>(
            std::move(thresh4Subfulfillments), std::move(thresh4Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh2Subfulfillments;
        thresh2Subfulfillments.emplace_back(std::move(ed3));
        thresh2Subfulfillments.emplace_back(std::move(thresh4));
        std::vector<Condition> thresh2Subconditions{
            {Preim9Cond, Rsa10Cond, Ed11Cond}};
        auto thresh2 = std::make_unique<ThresholdSha256>(
            std::move(thresh2Subfulfillments), std::move(thresh2Subconditions));
        auto prefix1 = std::make_unique<PrefixSha256>(
            makeSlice(prefix1Prefix), prefix1MaxMsgLength, std::move(thresh2));
        PrefixSha256 const prefix0(
            makeSlice(prefix0Prefix), prefix0MaxMsgLength, std::move(prefix1));
        {
            auto const prefix0EncodedFulfillment =
                "\xa1\x82\x01\xe9\x80\x02\x50\x30\x81\x01\x0e\xa2\x82\x01\xde"
                "\xa1\x82\x01\xda\x80\x02\x50\x31\x81\x01\x0e\xa2\x82\x01\xcf"
                "\xa2\x82\x01\xcb\xa0\x82\x01\x4c\xa2\x81\xe3\xa0\x66\xa4\x64"
                "\x80\x20\xae\xbc\xe5\x4b\x88\x09\x8d\x4f\xc4\xe1\x22\xa0\x7c"
                "\x41\x05\xd7\x9f\xbe\xc8\x3d\x1d\x7e\xd6\x55\xf4\x01\x67\x68"
                "\x93\x55\x85\xdf\x81\x40\x1a\xdc\xf3\xaa\xc3\x2e\xe4\xed\x1d"
                "\x40\xe0\xac\xfa\x29\xec\xe4\xc4\x9e\x92\xbd\x49\x0d\x18\xc7"
                "\xeb\x01\xa6\x6a\x92\xa3\xc4\xc2\x92\xd6\x62\x26\x6a\x3f\x8b"
                "\x0b\xa7\x11\xe0\x37\x3e\x71\x77\x97\x7e\x66\x69\x4f\x58\x2e"
                "\xc0\x05\xd5\x2e\x3f\x2b\xec\xc7\x48\x02\xa1\x79\xa0\x25\x80"
                "\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d"
                "\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93"
                "\x58\xeb\x4e\x81\x01\x09\xa3\x27\x80\x20\x6c\x7b\xea\x83\xa1"
                "\xf4\x82\x3d\x36\xe7\x6e\xae\x1a\xbc\xa0\xba\x90\x3d\x96\xc1"
                "\xe6\xad\x3a\x47\xa5\xcb\x88\xab\x3c\x5f\xcc\xd5\x81\x03\x01"
                "\x00\x00\xa4\x27\x80\x20\xf1\x68\x96\xa6\x2e\xef\x7f\x47\x06"
                "\x51\x4c\xc6\x7e\x24\xf7\x29\x84\x9c\xd6\xb0\xd9\x4b\xd9\x0f"
                "\xc9\x34\x01\x9d\x92\xeb\xbc\x0a\x81\x03\x02\x00\x00\xa4\x64"
                "\x80\x20\x42\x0a\x60\x63\x9e\xca\xaa\x48\xac\xcb\x2c\xd9\x46"
                "\x79\x69\x34\x35\xf3\x8e\x29\xd5\x4b\x24\x57\x9d\xd7\x3b\x04"
                "\x5d\x9c\x2f\x32\x81\x40\x8e\xa4\xd9\x6a\x9b\x3e\x19\xe8\x89"
                "\xa4\x4e\xf2\xa8\x1c\xc2\xbd\xd3\xe0\x6f\xe0\xd1\x6b\x85\x47"
                "\x9a\x58\x2e\x9f\x38\x09\x1f\x6d\x02\x9a\xf6\x9c\x60\x3f\x16"
                "\x6c\xa5\x0e\xfb\xa3\x08\xd6\xb6\x97\x5f\x2e\x94\xfb\x49\x56"
                "\xbe\x2c\x58\x48\x15\x49\x73\xa2\xae\x09\xa1\x79\xa0\x25\x80"
                "\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d"
                "\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93"
                "\x58\xeb\x4e\x81\x01\x09\xa3\x27\x80\x20\x3c\x73\x38\xcf\x23"
                "\xc6\x31\x53\x28\xc4\x27\xf8\x95\x87\x99\x83\x2d\x35\x3c\x03"
                "\x9b\xd1\xff\xff\x2e\x53\x20\xe9\x5e\x62\xb9\xb7\x81\x03\x01"
                "\x00\x00\xa4\x27\x80\x20\x41\x80\x08\xb2\x60\x74\x57\x6d\xac"
                "\xed\x74\x7f\x54\xdb\x96\x18\x91\x06\x0a\x95\xa1\x49\x17\xc7"
                "\x65\xe3\x94\xc8\x5e\x2c\x92\x20\x81\x03\x02\x00\x00"s;
            auto const prefix0EncodedCondition =
                "\xa1\x2b\x80\x20\xeb\x6d\xd3\xa5\x8e\x9e\x20\xae\xbc\xe1\x7d"
                "\x0a\x5f\x8f\x9a\x6a\x7f\x0b\x24\x3a\x3c\x8d\x55\xaa\x37\xe6"
                "\x53\x45\xe7\x69\x63\xc6\x81\x03\x04\x2c\x20\x82\x02\x03\xb8"s;
            auto const prefix0EncodedFingerprint =
                "\x30\x36\x80\x02\x50\x30\x81\x01\x0e\xa2\x2d\xa1\x2b\x80\x20"
                "\x8d\xb4\xf6\xeb\x0c\x98\x28\x00\x07\x9a\xd5\xbc\x2a\x75\x53"
                "\x37\x8c\xc0\x9e\xe7\xec\xae\x7e\x51\x3a\x5f\x52\x86\xaa\xac"
                "\x7d\x74\x81\x03\x04\x28\x10\x82\x02\x03\xb8"s;
            check(
                &prefix0,
                prefix0Msg,
                prefix0EncodedFulfillment,
                prefix0EncodedCondition,
                prefix0EncodedFingerprint);
        }
    }

    void
    testPrefix20()
    {
        testcase("Prefix20");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * prefix0
        // ** prefix1
        // *** thresh2
        // **** Preim9Cond
        // **** Rsa10Cond
        // **** Ed11Cond
        // **** Thresh12Cond
        // **** ed3
        // **** thresh4
        // ***** Preim6Cond
        // ***** Rsa7Cond
        // ***** Ed8Cond
        // ***** ed5

        auto const ed3Msg = "P1P0abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed3PublicKey{
            {0x42, 0x0a, 0x60, 0x63, 0x9e, 0xca, 0xaa, 0x48, 0xac, 0xcb, 0x2c,
             0xd9, 0x46, 0x79, 0x69, 0x34, 0x35, 0xf3, 0x8e, 0x29, 0xd5, 0x4b,
             0x24, 0x57, 0x9d, 0xd7, 0x3b, 0x04, 0x5d, 0x9c, 0x2f, 0x32}};
        std::array<std::uint8_t, 64> const ed3Sig{
            {0x8e, 0xa4, 0xd9, 0x6a, 0x9b, 0x3e, 0x19, 0xe8, 0x89, 0xa4, 0x4e,
             0xf2, 0xa8, 0x1c, 0xc2, 0xbd, 0xd3, 0xe0, 0x6f, 0xe0, 0xd1, 0x6b,
             0x85, 0x47, 0x9a, 0x58, 0x2e, 0x9f, 0x38, 0x09, 0x1f, 0x6d, 0x02,
             0x9a, 0xf6, 0x9c, 0x60, 0x3f, 0x16, 0x6c, 0xa5, 0x0e, 0xfb, 0xa3,
             0x08, 0xd6, 0xb6, 0x97, 0x5f, 0x2e, 0x94, 0xfb, 0x49, 0x56, 0xbe,
             0x2c, 0x58, 0x48, 0x15, 0x49, 0x73, 0xa2, 0xae, 0x09}};
        std::array<std::uint8_t, 32> const ed3SigningKey{
            {0x1b, 0x90, 0xf2, 0x2c, 0xd5, 0x5d, 0xcd, 0xe5, 0x2d, 0x71, 0x84,
             0x66, 0x10, 0xf0, 0xf1, 0x91, 0xfe, 0xb5, 0xbe, 0x94, 0x85, 0xc1,
             0xc8, 0xf3, 0x61, 0x91, 0xc3, 0xa4, 0x41, 0x58, 0xcd, 0xfc}};
        (void)ed3SigningKey;
        auto const ed5Msg = "P1P0abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed5PublicKey{
            {0xae, 0xbc, 0xe5, 0x4b, 0x88, 0x09, 0x8d, 0x4f, 0xc4, 0xe1, 0x22,
             0xa0, 0x7c, 0x41, 0x05, 0xd7, 0x9f, 0xbe, 0xc8, 0x3d, 0x1d, 0x7e,
             0xd6, 0x55, 0xf4, 0x01, 0x67, 0x68, 0x93, 0x55, 0x85, 0xdf}};
        std::array<std::uint8_t, 64> const ed5Sig{
            {0x1a, 0xdc, 0xf3, 0xaa, 0xc3, 0x2e, 0xe4, 0xed, 0x1d, 0x40, 0xe0,
             0xac, 0xfa, 0x29, 0xec, 0xe4, 0xc4, 0x9e, 0x92, 0xbd, 0x49, 0x0d,
             0x18, 0xc7, 0xeb, 0x01, 0xa6, 0x6a, 0x92, 0xa3, 0xc4, 0xc2, 0x92,
             0xd6, 0x62, 0x26, 0x6a, 0x3f, 0x8b, 0x0b, 0xa7, 0x11, 0xe0, 0x37,
             0x3e, 0x71, 0x77, 0x97, 0x7e, 0x66, 0x69, 0x4f, 0x58, 0x2e, 0xc0,
             0x05, 0xd5, 0x2e, 0x3f, 0x2b, 0xec, 0xc7, 0x48, 0x02}};
        std::array<std::uint8_t, 32> const ed5SigningKey{
            {0x42, 0x67, 0x67, 0xc0, 0xba, 0xdf, 0xb4, 0xd3, 0xf5, 0xc5, 0x1f,
             0x71, 0x97, 0x8a, 0xb4, 0x8e, 0x9a, 0xea, 0x3e, 0xec, 0xaf, 0xdc,
             0xc7, 0x2b, 0x01, 0x1b, 0x06, 0x8f, 0x05, 0x56, 0x63, 0xbc}};
        (void)ed5SigningKey;
        auto const thresh4Msg = "P1P0abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim6CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim6Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim6CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa7CondConditionFingerprint =
            "\x6c\x7b\xea\x83\xa1\xf4\x82\x3d\x36\xe7\x6e\xae\x1a\xbc\xa0"
            "\xba\x90\x3d\x96\xc1\xe6\xad\x3a\x47\xa5\xcb\x88\xab\x3c\x5f"
            "\xcc\xd5"s;
        Condition const Rsa7Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa7CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed8CondConditionFingerprint =
            "\xf1\x68\x96\xa6\x2e\xef\x7f\x47\x06\x51\x4c\xc6\x7e\x24\xf7"
            "\x29\x84\x9c\xd6\xb0\xd9\x4b\xd9\x0f\xc9\x34\x01\x9d\x92\xeb"
            "\xbc\x0a"s;
        Condition const Ed8Cond{Type::ed25519Sha256,
                                131072,
                                makeSlice(Ed8CondConditionFingerprint),
                                std::bitset<5>{0}};
        auto const thresh2Msg = "P1P0abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim9CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim9Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim9CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa10CondConditionFingerprint =
            "\x3c\x73\x38\xcf\x23\xc6\x31\x53\x28\xc4\x27\xf8\x95\x87\x99"
            "\x83\x2d\x35\x3c\x03\x9b\xd1\xff\xff\x2e\x53\x20\xe9\x5e\x62"
            "\xb9\xb7"s;
        Condition const Rsa10Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa10CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed11CondConditionFingerprint =
            "\x41\x80\x08\xb2\x60\x74\x57\x6d\xac\xed\x74\x7f\x54\xdb\x96"
            "\x18\x91\x06\x0a\x95\xa1\x49\x17\xc7\x65\xe3\x94\xc8\x5e\x2c"
            "\x92\x20"s;
        Condition const Ed11Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed11CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Thresh12CondConditionFingerprint =
            "\x16\x7f\xbc\x09\xc8\x59\x71\x7b\x2e\xb0\x65\x72\xdf\x23\xe9"
            "\x85\x65\x99\x10\x58\x49\x09\x94\xda\x03\x4d\x77\xf8\xcc\x91"
            "\xac\x32"s;
        Condition const Thresh12Cond{
            Type::thresholdSha256,
            135168,
            makeSlice(Thresh12CondConditionFingerprint),
            std::bitset<5>{25}};
        auto const prefix1Prefix = "P1"s;
        auto const prefix1Msg = "P0abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix1MaxMsgLength = 14;
        auto const prefix0Prefix = "P0"s;
        auto const prefix0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix0MaxMsgLength = 14;

        auto ed3 = std::make_unique<Ed25519>(ed3PublicKey, ed3Sig);
        auto ed5 = std::make_unique<Ed25519>(ed5PublicKey, ed5Sig);
        std::vector<std::unique_ptr<Fulfillment>> thresh4Subfulfillments;
        thresh4Subfulfillments.emplace_back(std::move(ed5));
        std::vector<Condition> thresh4Subconditions{
            {Preim6Cond, Rsa7Cond, Ed8Cond}};
        auto thresh4 = std::make_unique<ThresholdSha256>(
            std::move(thresh4Subfulfillments), std::move(thresh4Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh2Subfulfillments;
        thresh2Subfulfillments.emplace_back(std::move(ed3));
        thresh2Subfulfillments.emplace_back(std::move(thresh4));
        std::vector<Condition> thresh2Subconditions{
            {Preim9Cond, Rsa10Cond, Ed11Cond, Thresh12Cond}};
        auto thresh2 = std::make_unique<ThresholdSha256>(
            std::move(thresh2Subfulfillments), std::move(thresh2Subconditions));
        auto prefix1 = std::make_unique<PrefixSha256>(
            makeSlice(prefix1Prefix), prefix1MaxMsgLength, std::move(thresh2));
        PrefixSha256 const prefix0(
            makeSlice(prefix0Prefix), prefix0MaxMsgLength, std::move(prefix1));
        {
            auto const prefix0EncodedFulfillment =
                "\xa1\x82\x02\x17\x80\x02\x50\x30\x81\x01\x0e\xa2\x82\x02\x0c"
                "\xa1\x82\x02\x08\x80\x02\x50\x31\x81\x01\x0e\xa2\x82\x01\xfd"
                "\xa2\x82\x01\xf9\xa0\x82\x01\x4c\xa2\x81\xe3\xa0\x66\xa4\x64"
                "\x80\x20\xae\xbc\xe5\x4b\x88\x09\x8d\x4f\xc4\xe1\x22\xa0\x7c"
                "\x41\x05\xd7\x9f\xbe\xc8\x3d\x1d\x7e\xd6\x55\xf4\x01\x67\x68"
                "\x93\x55\x85\xdf\x81\x40\x1a\xdc\xf3\xaa\xc3\x2e\xe4\xed\x1d"
                "\x40\xe0\xac\xfa\x29\xec\xe4\xc4\x9e\x92\xbd\x49\x0d\x18\xc7"
                "\xeb\x01\xa6\x6a\x92\xa3\xc4\xc2\x92\xd6\x62\x26\x6a\x3f\x8b"
                "\x0b\xa7\x11\xe0\x37\x3e\x71\x77\x97\x7e\x66\x69\x4f\x58\x2e"
                "\xc0\x05\xd5\x2e\x3f\x2b\xec\xc7\x48\x02\xa1\x79\xa0\x25\x80"
                "\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d"
                "\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93"
                "\x58\xeb\x4e\x81\x01\x09\xa3\x27\x80\x20\x6c\x7b\xea\x83\xa1"
                "\xf4\x82\x3d\x36\xe7\x6e\xae\x1a\xbc\xa0\xba\x90\x3d\x96\xc1"
                "\xe6\xad\x3a\x47\xa5\xcb\x88\xab\x3c\x5f\xcc\xd5\x81\x03\x01"
                "\x00\x00\xa4\x27\x80\x20\xf1\x68\x96\xa6\x2e\xef\x7f\x47\x06"
                "\x51\x4c\xc6\x7e\x24\xf7\x29\x84\x9c\xd6\xb0\xd9\x4b\xd9\x0f"
                "\xc9\x34\x01\x9d\x92\xeb\xbc\x0a\x81\x03\x02\x00\x00\xa4\x64"
                "\x80\x20\x42\x0a\x60\x63\x9e\xca\xaa\x48\xac\xcb\x2c\xd9\x46"
                "\x79\x69\x34\x35\xf3\x8e\x29\xd5\x4b\x24\x57\x9d\xd7\x3b\x04"
                "\x5d\x9c\x2f\x32\x81\x40\x8e\xa4\xd9\x6a\x9b\x3e\x19\xe8\x89"
                "\xa4\x4e\xf2\xa8\x1c\xc2\xbd\xd3\xe0\x6f\xe0\xd1\x6b\x85\x47"
                "\x9a\x58\x2e\x9f\x38\x09\x1f\x6d\x02\x9a\xf6\x9c\x60\x3f\x16"
                "\x6c\xa5\x0e\xfb\xa3\x08\xd6\xb6\x97\x5f\x2e\x94\xfb\x49\x56"
                "\xbe\x2c\x58\x48\x15\x49\x73\xa2\xae\x09\xa1\x81\xa6\xa0\x25"
                "\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54"
                "\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee"
                "\x93\x58\xeb\x4e\x81\x01\x09\xa2\x2b\x80\x20\x16\x7f\xbc\x09"
                "\xc8\x59\x71\x7b\x2e\xb0\x65\x72\xdf\x23\xe9\x85\x65\x99\x10"
                "\x58\x49\x09\x94\xda\x03\x4d\x77\xf8\xcc\x91\xac\x32\x81\x03"
                "\x02\x10\x00\x82\x02\x03\x98\xa3\x27\x80\x20\x3c\x73\x38\xcf"
                "\x23\xc6\x31\x53\x28\xc4\x27\xf8\x95\x87\x99\x83\x2d\x35\x3c"
                "\x03\x9b\xd1\xff\xff\x2e\x53\x20\xe9\x5e\x62\xb9\xb7\x81\x03"
                "\x01\x00\x00\xa4\x27\x80\x20\x41\x80\x08\xb2\x60\x74\x57\x6d"
                "\xac\xed\x74\x7f\x54\xdb\x96\x18\x91\x06\x0a\x95\xa1\x49\x17"
                "\xc7\x65\xe3\x94\xc8\x5e\x2c\x92\x20\x81\x03\x02\x00\x00"s;
            auto const prefix0EncodedCondition =
                "\xa1\x2b\x80\x20\xdd\xec\x1f\x76\xe2\xfb\x4f\xb5\x59\xda\x16"
                "\xe6\xe6\x5b\x86\x19\x6c\x6c\xc7\x56\x21\x6e\x8c\x4a\x22\xe7"
                "\xfd\x18\xdf\xcc\x1a\xc6\x81\x03\x04\x40\x20\x82\x02\x03\xb8"s;
            auto const prefix0EncodedFingerprint =
                "\x30\x36\x80\x02\x50\x30\x81\x01\x0e\xa2\x2d\xa1\x2b\x80\x20"
                "\x0a\xc0\xee\xd6\x11\x75\x8c\x80\x1f\xe0\xe2\xd1\x80\x9f\x62"
                "\xe8\xce\xb4\x69\xbc\x34\x7f\x0e\xc0\x20\x9e\xe2\x13\xfb\x2a"
                "\xa3\xf8\x81\x03\x04\x3c\x10\x82\x02\x03\xb8"s;
            check(
                &prefix0,
                prefix0Msg,
                prefix0EncodedFulfillment,
                prefix0EncodedCondition,
                prefix0EncodedFingerprint);
        }
    }

    void
    testThresh52()
    {
        testcase("Thresh52");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * thresh0
        // ** Preim9Cond
        // ** Rsa10Cond
        // ** Ed11Cond
        // ** prefix1
        // *** prefix2
        // **** ed3
        // ** prefix4
        // *** prefix5
        // **** ed6
        // ** thresh7
        // *** ed8

        auto const ed3Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed3PublicKey{
            {0x42, 0x0a, 0x60, 0x63, 0x9e, 0xca, 0xaa, 0x48, 0xac, 0xcb, 0x2c,
             0xd9, 0x46, 0x79, 0x69, 0x34, 0x35, 0xf3, 0x8e, 0x29, 0xd5, 0x4b,
             0x24, 0x57, 0x9d, 0xd7, 0x3b, 0x04, 0x5d, 0x9c, 0x2f, 0x32}};
        std::array<std::uint8_t, 64> const ed3Sig{
            {0xe2, 0x0f, 0x5d, 0x3a, 0x74, 0xdc, 0x41, 0x91, 0x19, 0xbc, 0xf6,
             0x7d, 0x90, 0x21, 0xae, 0xd0, 0x5b, 0x01, 0xf9, 0x74, 0xf8, 0xb9,
             0x44, 0xc5, 0x91, 0x23, 0x92, 0xf8, 0x96, 0x26, 0x77, 0x94, 0xfc,
             0xf5, 0x59, 0xed, 0x0c, 0x19, 0xac, 0x92, 0x03, 0x54, 0xf2, 0x8f,
             0x8e, 0xc5, 0x29, 0x1d, 0x18, 0x92, 0x50, 0xaf, 0x81, 0xb6, 0x17,
             0x5c, 0xa4, 0xa5, 0xdd, 0x73, 0xf5, 0x6f, 0xa0, 0x09}};
        std::array<std::uint8_t, 32> const ed3SigningKey{
            {0x1b, 0x90, 0xf2, 0x2c, 0xd5, 0x5d, 0xcd, 0xe5, 0x2d, 0x71, 0x84,
             0x66, 0x10, 0xf0, 0xf1, 0x91, 0xfe, 0xb5, 0xbe, 0x94, 0x85, 0xc1,
             0xc8, 0xf3, 0x61, 0x91, 0xc3, 0xa4, 0x41, 0x58, 0xcd, 0xfc}};
        (void)ed3SigningKey;
        auto const prefix2Prefix = "P2"s;
        auto const prefix2Msg = "P1abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix2MaxMsgLength = 14;
        auto const prefix1Prefix = "P1"s;
        auto const prefix1Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix1MaxMsgLength = 14;
        auto const ed6Msg = "P5P4abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed6PublicKey{
            {0xa0, 0x45, 0x26, 0xcf, 0xee, 0x7e, 0xda, 0x68, 0xd9, 0x70, 0x23,
             0xac, 0x68, 0x48, 0x9e, 0x20, 0xa4, 0x5e, 0xf8, 0x51, 0xcb, 0xfe,
             0x72, 0xc1, 0x11, 0x5d, 0x25, 0x9c, 0xbc, 0xfd, 0xbb, 0x8b}};
        std::array<std::uint8_t, 64> const ed6Sig{
            {0x21, 0x27, 0xbc, 0x35, 0xc0, 0xf7, 0x5f, 0xd2, 0xa2, 0xff, 0x3b,
             0x12, 0xc5, 0xd6, 0x19, 0xc8, 0x07, 0x45, 0xd3, 0xa4, 0xa7, 0xdc,
             0x4c, 0x0a, 0x5a, 0xbf, 0x31, 0x24, 0xac, 0x3b, 0xb8, 0xd0, 0x42,
             0x79, 0x90, 0x1b, 0xa3, 0xf7, 0x6f, 0x21, 0x6b, 0x5c, 0x69, 0xeb,
             0x3c, 0x3f, 0xc8, 0xff, 0xba, 0xd5, 0x7a, 0xdc, 0xf5, 0xa4, 0x77,
             0xb8, 0xcd, 0x99, 0x4f, 0x8e, 0x05, 0xdc, 0xaf, 0x0f}};
        std::array<std::uint8_t, 32> const ed6SigningKey{
            {0x8f, 0xac, 0x15, 0x02, 0xce, 0xb4, 0x10, 0x27, 0x56, 0x91, 0x2b,
             0xd0, 0x57, 0xe7, 0x6c, 0xe0, 0xc5, 0x46, 0x65, 0x38, 0xf0, 0xc8,
             0x09, 0xe0, 0xb4, 0x57, 0xfb, 0x11, 0xfc, 0x00, 0xe9, 0xdf}};
        (void)ed6SigningKey;
        auto const prefix5Prefix = "P5"s;
        auto const prefix5Msg = "P4abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix5MaxMsgLength = 14;
        auto const prefix4Prefix = "P4"s;
        auto const prefix4Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix4MaxMsgLength = 14;
        auto const ed8Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed8PublicKey{
            {0xb6, 0x55, 0xc8, 0xa4, 0x14, 0x20, 0x73, 0x44, 0x12, 0x06, 0xf6,
             0xf7, 0xd0, 0x03, 0x74, 0x53, 0xaa, 0x74, 0x6c, 0xf1, 0x84, 0x0e,
             0x86, 0x1d, 0xb1, 0x97, 0x1a, 0x04, 0x91, 0x83, 0x3b, 0x49}};
        std::array<std::uint8_t, 64> const ed8Sig{
            {0x4d, 0xf6, 0x5a, 0x0e, 0xa4, 0x6f, 0x3d, 0xa0, 0x76, 0xe4, 0x3a,
             0xea, 0x69, 0x1e, 0x3f, 0xe4, 0x45, 0x51, 0x97, 0xc8, 0x7e, 0x3c,
             0xd6, 0x34, 0xc8, 0x7f, 0xa3, 0xf9, 0xd7, 0xfe, 0x0a, 0xf4, 0x86,
             0x18, 0xc5, 0xfa, 0x1c, 0x73, 0x88, 0x37, 0x33, 0x3d, 0xd4, 0x8c,
             0x08, 0xf9, 0xa5, 0xf0, 0x83, 0x37, 0x06, 0x5b, 0xd3, 0xfc, 0x20,
             0x12, 0x42, 0x7a, 0x7a, 0xd7, 0x60, 0xc5, 0xd1, 0x0b}};
        std::array<std::uint8_t, 32> const ed8SigningKey{
            {0xc2, 0x00, 0xc6, 0x2e, 0x45, 0xde, 0xf2, 0x39, 0x81, 0x0a, 0xf8,
             0x6d, 0x53, 0x29, 0xe3, 0x1b, 0x8e, 0x57, 0xad, 0xfa, 0x29, 0x1b,
             0x07, 0x1a, 0xee, 0x34, 0xe6, 0x57, 0x5a, 0xeb, 0xf2, 0x1c}};
        (void)ed8SigningKey;
        auto const thresh7Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const thresh0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim9CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim9Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim9CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa10CondConditionFingerprint =
            "\x3c\x73\x38\xcf\x23\xc6\x31\x53\x28\xc4\x27\xf8\x95\x87\x99"
            "\x83\x2d\x35\x3c\x03\x9b\xd1\xff\xff\x2e\x53\x20\xe9\x5e\x62"
            "\xb9\xb7"s;
        Condition const Rsa10Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa10CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed11CondConditionFingerprint =
            "\x41\x80\x08\xb2\x60\x74\x57\x6d\xac\xed\x74\x7f\x54\xdb\x96"
            "\x18\x91\x06\x0a\x95\xa1\x49\x17\xc7\x65\xe3\x94\xc8\x5e\x2c"
            "\x92\x20"s;
        Condition const Ed11Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed11CondConditionFingerprint),
                                 std::bitset<5>{0}};

        auto ed3 = std::make_unique<Ed25519>(ed3PublicKey, ed3Sig);
        auto prefix2 = std::make_unique<PrefixSha256>(
            makeSlice(prefix2Prefix), prefix2MaxMsgLength, std::move(ed3));
        auto prefix1 = std::make_unique<PrefixSha256>(
            makeSlice(prefix1Prefix), prefix1MaxMsgLength, std::move(prefix2));
        auto ed6 = std::make_unique<Ed25519>(ed6PublicKey, ed6Sig);
        auto prefix5 = std::make_unique<PrefixSha256>(
            makeSlice(prefix5Prefix), prefix5MaxMsgLength, std::move(ed6));
        auto prefix4 = std::make_unique<PrefixSha256>(
            makeSlice(prefix4Prefix), prefix4MaxMsgLength, std::move(prefix5));
        auto ed8 = std::make_unique<Ed25519>(ed8PublicKey, ed8Sig);
        std::vector<std::unique_ptr<Fulfillment>> thresh7Subfulfillments;
        thresh7Subfulfillments.emplace_back(std::move(ed8));
        std::vector<Condition> thresh7Subconditions{};
        auto thresh7 = std::make_unique<ThresholdSha256>(
            std::move(thresh7Subfulfillments), std::move(thresh7Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh0Subfulfillments;
        thresh0Subfulfillments.emplace_back(std::move(prefix1));
        thresh0Subfulfillments.emplace_back(std::move(prefix4));
        thresh0Subfulfillments.emplace_back(std::move(thresh7));
        std::vector<Condition> thresh0Subconditions{
            {Preim9Cond, Rsa10Cond, Ed11Cond}};
        ThresholdSha256 const thresh0(
            std::move(thresh0Subfulfillments), std::move(thresh0Subconditions));
        {
            auto const thresh0EncodedFulfillment =
                "\xa2\x82\x01\xe3\xa0\x82\x01\x64\xa1\x7a\x80\x02\x50\x31\x81"
                "\x01\x0e\xa2\x71\xa1\x6f\x80\x02\x50\x32\x81\x01\x0e\xa2\x66"
                "\xa4\x64\x80\x20\x42\x0a\x60\x63\x9e\xca\xaa\x48\xac\xcb\x2c"
                "\xd9\x46\x79\x69\x34\x35\xf3\x8e\x29\xd5\x4b\x24\x57\x9d\xd7"
                "\x3b\x04\x5d\x9c\x2f\x32\x81\x40\xe2\x0f\x5d\x3a\x74\xdc\x41"
                "\x91\x19\xbc\xf6\x7d\x90\x21\xae\xd0\x5b\x01\xf9\x74\xf8\xb9"
                "\x44\xc5\x91\x23\x92\xf8\x96\x26\x77\x94\xfc\xf5\x59\xed\x0c"
                "\x19\xac\x92\x03\x54\xf2\x8f\x8e\xc5\x29\x1d\x18\x92\x50\xaf"
                "\x81\xb6\x17\x5c\xa4\xa5\xdd\x73\xf5\x6f\xa0\x09\xa1\x7a\x80"
                "\x02\x50\x34\x81\x01\x0e\xa2\x71\xa1\x6f\x80\x02\x50\x35\x81"
                "\x01\x0e\xa2\x66\xa4\x64\x80\x20\xa0\x45\x26\xcf\xee\x7e\xda"
                "\x68\xd9\x70\x23\xac\x68\x48\x9e\x20\xa4\x5e\xf8\x51\xcb\xfe"
                "\x72\xc1\x11\x5d\x25\x9c\xbc\xfd\xbb\x8b\x81\x40\x21\x27\xbc"
                "\x35\xc0\xf7\x5f\xd2\xa2\xff\x3b\x12\xc5\xd6\x19\xc8\x07\x45"
                "\xd3\xa4\xa7\xdc\x4c\x0a\x5a\xbf\x31\x24\xac\x3b\xb8\xd0\x42"
                "\x79\x90\x1b\xa3\xf7\x6f\x21\x6b\x5c\x69\xeb\x3c\x3f\xc8\xff"
                "\xba\xd5\x7a\xdc\xf5\xa4\x77\xb8\xcd\x99\x4f\x8e\x05\xdc\xaf"
                "\x0f\xa2\x6a\xa0\x66\xa4\x64\x80\x20\xb6\x55\xc8\xa4\x14\x20"
                "\x73\x44\x12\x06\xf6\xf7\xd0\x03\x74\x53\xaa\x74\x6c\xf1\x84"
                "\x0e\x86\x1d\xb1\x97\x1a\x04\x91\x83\x3b\x49\x81\x40\x4d\xf6"
                "\x5a\x0e\xa4\x6f\x3d\xa0\x76\xe4\x3a\xea\x69\x1e\x3f\xe4\x45"
                "\x51\x97\xc8\x7e\x3c\xd6\x34\xc8\x7f\xa3\xf9\xd7\xfe\x0a\xf4"
                "\x86\x18\xc5\xfa\x1c\x73\x88\x37\x33\x3d\xd4\x8c\x08\xf9\xa5"
                "\xf0\x83\x37\x06\x5b\xd3\xfc\x20\x12\x42\x7a\x7a\xd7\x60\xc5"
                "\xd1\x0b\xa1\x00\xa1\x79\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd"
                "\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33"
                "\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09"
                "\xa3\x27\x80\x20\x3c\x73\x38\xcf\x23\xc6\x31\x53\x28\xc4\x27"
                "\xf8\x95\x87\x99\x83\x2d\x35\x3c\x03\x9b\xd1\xff\xff\x2e\x53"
                "\x20\xe9\x5e\x62\xb9\xb7\x81\x03\x01\x00\x00\xa4\x27\x80\x20"
                "\x41\x80\x08\xb2\x60\x74\x57\x6d\xac\xed\x74\x7f\x54\xdb\x96"
                "\x18\x91\x06\x0a\x95\xa1\x49\x17\xc7\x65\xe3\x94\xc8\x5e\x2c"
                "\x92\x20\x81\x03\x02\x00\x00"s;
            auto const thresh0EncodedCondition =
                "\xa2\x2b\x80\x20\x06\xdd\xb2\x12\x62\x3a\x50\x11\x66\x5f\xde"
                "\x84\x9a\xad\x4f\xc3\xe2\xf5\x0b\xb8\xc7\xf6\x56\x5a\xd4\x3d"
                "\x90\xe3\xc8\xb0\x71\x9b\x81\x03\x06\x2c\x40\x82\x02\x03\xd8"s;
            auto const thresh0EncodedFingerprint =
                "\x30\x82\x01\x07\x80\x01\x03\xa1\x82\x01\x00\xa0\x25\x80\x20"
                "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
                "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
                "\xeb\x4e\x81\x01\x09\xa1\x2b\x80\x20\xc5\xac\x79\xa8\xf5\xf6"
                "\xce\x0e\xc4\x75\x87\xcd\xb9\x63\xbf\xe0\x0f\xcc\xfe\x2c\x54"
                "\x03\xb4\x21\x08\x13\xbb\x52\x12\x71\x04\xff\x81\x03\x02\x08"
                "\x20\x82\x02\x03\x08\xa1\x2b\x80\x20\xe9\xa9\x26\x1a\xaf\xf8"
                "\x2a\x49\x3a\x0e\x97\xca\x70\x81\x21\xd9\xad\xce\x28\xc7\x47"
                "\x76\x0d\x67\x89\x41\x06\x50\x63\xb8\x0c\x50\x81\x03\x02\x08"
                "\x20\x82\x02\x03\x08\xa2\x2b\x80\x20\xf4\xa5\x5f\xee\xd1\x99"
                "\x9a\x7f\xbe\x4c\x87\x81\x19\x23\xf1\xb4\xf0\x93\x97\xde\x37"
                "\x5e\x4f\xad\x2e\x22\xb2\x05\x1f\x12\x00\xd3\x81\x03\x02\x04"
                "\x00\x82\x02\x03\x08\xa3\x27\x80\x20\x3c\x73\x38\xcf\x23\xc6"
                "\x31\x53\x28\xc4\x27\xf8\x95\x87\x99\x83\x2d\x35\x3c\x03\x9b"
                "\xd1\xff\xff\x2e\x53\x20\xe9\x5e\x62\xb9\xb7\x81\x03\x01\x00"
                "\x00\xa4\x27\x80\x20\x41\x80\x08\xb2\x60\x74\x57\x6d\xac\xed"
                "\x74\x7f\x54\xdb\x96\x18\x91\x06\x0a\x95\xa1\x49\x17\xc7\x65"
                "\xe3\x94\xc8\x5e\x2c\x92\x20\x81\x03\x02\x00\x00"s;
            check(
                &thresh0,
                thresh0Msg,
                thresh0EncodedFulfillment,
                thresh0EncodedCondition,
                thresh0EncodedFingerprint);
        }
    }

    void
    testThresh53()
    {
        testcase("Thresh53");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * thresh0
        // ** Preim7Cond
        // ** Rsa8Cond
        // ** Ed9Cond
        // ** Prefix10Cond
        // ** Thresh13Cond
        // ** prefix1
        // *** prefix2
        // **** ed3
        // ** preim4
        // ** rsa5
        // ** ed6

        auto const ed3Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed3PublicKey{
            {0x42, 0x0a, 0x60, 0x63, 0x9e, 0xca, 0xaa, 0x48, 0xac, 0xcb, 0x2c,
             0xd9, 0x46, 0x79, 0x69, 0x34, 0x35, 0xf3, 0x8e, 0x29, 0xd5, 0x4b,
             0x24, 0x57, 0x9d, 0xd7, 0x3b, 0x04, 0x5d, 0x9c, 0x2f, 0x32}};
        std::array<std::uint8_t, 64> const ed3Sig{
            {0xe2, 0x0f, 0x5d, 0x3a, 0x74, 0xdc, 0x41, 0x91, 0x19, 0xbc, 0xf6,
             0x7d, 0x90, 0x21, 0xae, 0xd0, 0x5b, 0x01, 0xf9, 0x74, 0xf8, 0xb9,
             0x44, 0xc5, 0x91, 0x23, 0x92, 0xf8, 0x96, 0x26, 0x77, 0x94, 0xfc,
             0xf5, 0x59, 0xed, 0x0c, 0x19, 0xac, 0x92, 0x03, 0x54, 0xf2, 0x8f,
             0x8e, 0xc5, 0x29, 0x1d, 0x18, 0x92, 0x50, 0xaf, 0x81, 0xb6, 0x17,
             0x5c, 0xa4, 0xa5, 0xdd, 0x73, 0xf5, 0x6f, 0xa0, 0x09}};
        std::array<std::uint8_t, 32> const ed3SigningKey{
            {0x1b, 0x90, 0xf2, 0x2c, 0xd5, 0x5d, 0xcd, 0xe5, 0x2d, 0x71, 0x84,
             0x66, 0x10, 0xf0, 0xf1, 0x91, 0xfe, 0xb5, 0xbe, 0x94, 0x85, 0xc1,
             0xc8, 0xf3, 0x61, 0x91, 0xc3, 0xa4, 0x41, 0x58, 0xcd, 0xfc}};
        (void)ed3SigningKey;
        auto const prefix2Prefix = "P2"s;
        auto const prefix2Msg = "P1abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix2MaxMsgLength = 14;
        auto const prefix1Prefix = "P1"s;
        auto const prefix1Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix1MaxMsgLength = 14;
        auto const preim4Preimage = "I am root"s;
        auto const preim4Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const rsa5Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa5PublicKey{
            {0xc0, 0x00, 0xef, 0x8f, 0x4b, 0x81, 0x10, 0x1e, 0x52, 0xe0, 0x07,
             0x9f, 0x68, 0xe7, 0x2f, 0x92, 0xd4, 0x77, 0x3c, 0x1f, 0xa3, 0xff,
             0x72, 0x64, 0x5b, 0x37, 0xf1, 0xf3, 0xa3, 0xc5, 0xfb, 0xcd, 0xfb,
             0xda, 0xcc, 0x8b, 0x52, 0xe1, 0xde, 0xbc, 0x28, 0x8d, 0xe5, 0xad,
             0xab, 0x86, 0x61, 0x45, 0x97, 0x65, 0x37, 0x68, 0x26, 0x21, 0x92,
             0x17, 0xa3, 0xb0, 0x74, 0x5c, 0x8a, 0x45, 0x8d, 0x87, 0x5b, 0x9b,
             0xd1, 0x7b, 0x07, 0xc4, 0x8c, 0x67, 0xa0, 0xe9, 0x82, 0x0c, 0xe0,
             0x6b, 0xea, 0x91, 0x5c, 0xba, 0xe3, 0xd9, 0x9d, 0x39, 0xfd, 0x77,
             0xac, 0xcb, 0x33, 0x9b, 0x28, 0x51, 0x8d, 0xbf, 0x3e, 0xe4, 0x94,
             0x1c, 0x9a, 0x60, 0x71, 0x4b, 0x34, 0x07, 0x30, 0xda, 0x42, 0x46,
             0x0e, 0xb8, 0xb7, 0x2c, 0xf5, 0x2f, 0x4b, 0x9e, 0xe7, 0x64, 0x81,
             0xa1, 0xa2, 0x05, 0x66, 0x92, 0xe6, 0x75, 0x9f, 0x37, 0xae, 0x40,
             0xa9, 0x16, 0x08, 0x19, 0xe8, 0xdc, 0x47, 0xd6, 0x03, 0x29, 0xab,
             0xcc, 0x58, 0xa2, 0x37, 0x2a, 0x32, 0xb8, 0x15, 0xc7, 0x51, 0x91,
             0x73, 0xb9, 0x1d, 0xc6, 0xd0, 0x4f, 0x85, 0x86, 0xd5, 0xb3, 0x21,
             0x1a, 0x2a, 0x6c, 0xeb, 0x7f, 0xfe, 0x84, 0x17, 0x10, 0x2d, 0x0e,
             0xb4, 0xe1, 0xc2, 0x48, 0x4c, 0x3f, 0x61, 0xc7, 0x59, 0x75, 0xa7,
             0xc1, 0x75, 0xce, 0x67, 0x17, 0x42, 0x2a, 0x2f, 0x96, 0xef, 0x8a,
             0x2d, 0x74, 0xd2, 0x13, 0x68, 0xe1, 0xe9, 0xea, 0xfb, 0x73, 0x68,
             0xed, 0x8d, 0xd3, 0xac, 0x49, 0x09, 0xf9, 0xec, 0x62, 0xdf, 0x53,
             0xab, 0xfe, 0x90, 0x64, 0x4b, 0x92, 0x60, 0x0d, 0xdd, 0x00, 0xfe,
             0x02, 0xe6, 0xf3, 0x9b, 0x2b, 0xac, 0x4f, 0x70, 0xe8, 0x5b, 0x69,
             0x9c, 0x40, 0xd3, 0xeb, 0x37, 0xad, 0x6f, 0x37, 0xab, 0xf3, 0x79,
             0x8e, 0xcb, 0x1d}};
        std::array<std::uint8_t, 256> const rsa5Sig{
            {0x82, 0x31, 0xc6, 0x88, 0xab, 0x16, 0x66, 0x3e, 0xdd, 0x7f, 0x1b,
             0x83, 0xa0, 0x3a, 0xf5, 0x75, 0x33, 0xdf, 0x27, 0x91, 0xb9, 0xee,
             0x64, 0xce, 0xd6, 0xba, 0x2c, 0x88, 0xc2, 0xa8, 0x28, 0xb1, 0xb4,
             0x11, 0xf3, 0x83, 0x51, 0xad, 0xd9, 0x51, 0x1e, 0x9c, 0xe6, 0xba,
             0xc2, 0xff, 0x58, 0x57, 0x2b, 0x10, 0x25, 0xed, 0xcb, 0x96, 0xff,
             0x66, 0x02, 0x4b, 0xb1, 0xeb, 0x2c, 0x29, 0x63, 0xd9, 0x20, 0x54,
             0x8d, 0x6e, 0x00, 0x4f, 0xb1, 0x76, 0x0f, 0xae, 0x24, 0xe7, 0xaf,
             0xcc, 0x9d, 0x7b, 0x20, 0xbb, 0x2e, 0x3c, 0xd5, 0xe3, 0x55, 0x97,
             0xaf, 0x30, 0x27, 0x53, 0x8c, 0xf4, 0x7e, 0x67, 0x62, 0x12, 0x4f,
             0x2c, 0xe7, 0x2c, 0x2d, 0x15, 0x79, 0xcd, 0xe6, 0x49, 0xc1, 0xdb,
             0xe6, 0x73, 0xa8, 0x94, 0xdd, 0xc8, 0x01, 0x85, 0x0f, 0x27, 0xf5,
             0x53, 0xa0, 0x7b, 0x00, 0x9e, 0x37, 0x6a, 0x8d, 0x3e, 0x08, 0x23,
             0x1b, 0x3c, 0x54, 0xe9, 0xef, 0xea, 0x4a, 0xf1, 0x67, 0x8b, 0xe0,
             0x76, 0x9d, 0x3f, 0xa1, 0x3c, 0x25, 0xaa, 0xf8, 0x4e, 0x2b, 0x45,
             0xaa, 0x40, 0x4c, 0x75, 0x1d, 0x66, 0x6c, 0x48, 0x07, 0x1e, 0xfd,
             0x65, 0x42, 0xc6, 0xac, 0xc7, 0xe6, 0x41, 0x40, 0x84, 0x34, 0x7f,
             0x2e, 0xa3, 0xb4, 0xd5, 0x10, 0x4e, 0x3c, 0x96, 0x31, 0x08, 0x88,
             0x24, 0x73, 0xa6, 0x51, 0x2d, 0x8b, 0xd7, 0x66, 0x31, 0x5b, 0xa6,
             0x12, 0x42, 0x32, 0x28, 0x0e, 0xb1, 0x82, 0xac, 0x9d, 0x99, 0x9f,
             0x56, 0xa0, 0x59, 0x97, 0x64, 0x30, 0x03, 0x49, 0x42, 0x04, 0x41,
             0xbc, 0x46, 0x93, 0x03, 0xa8, 0x77, 0xcd, 0x40, 0xe1, 0x27, 0xde,
             0xf0, 0x84, 0xff, 0x8f, 0x02, 0x67, 0x9e, 0xc8, 0x4d, 0x1e, 0x23,
             0x12, 0x0a, 0x93, 0x72, 0x38, 0x2b, 0x50, 0xbd, 0x97, 0x33, 0x52,
             0x21, 0xde, 0x15}};
        auto const ed6Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed6PublicKey{
            {0xa0, 0x45, 0x26, 0xcf, 0xee, 0x7e, 0xda, 0x68, 0xd9, 0x70, 0x23,
             0xac, 0x68, 0x48, 0x9e, 0x20, 0xa4, 0x5e, 0xf8, 0x51, 0xcb, 0xfe,
             0x72, 0xc1, 0x11, 0x5d, 0x25, 0x9c, 0xbc, 0xfd, 0xbb, 0x8b}};
        std::array<std::uint8_t, 64> const ed6Sig{
            {0x2a, 0x1d, 0xc0, 0x92, 0x24, 0x9a, 0x87, 0x5a, 0xc6, 0xaf, 0xa4,
             0x7f, 0xe1, 0x63, 0xc7, 0xca, 0xfd, 0x08, 0x47, 0xae, 0x2f, 0x98,
             0x07, 0xdc, 0x56, 0x9a, 0xfc, 0x2f, 0x0e, 0xa9, 0x37, 0x16, 0xe0,
             0x81, 0xff, 0x94, 0xb2, 0xab, 0x40, 0x2f, 0x9c, 0xa6, 0xc0, 0xe4,
             0xdf, 0xdf, 0xcd, 0x01, 0xf2, 0xdb, 0x9c, 0xff, 0x62, 0xe7, 0x2f,
             0x9d, 0x51, 0x6e, 0x80, 0xd1, 0x0c, 0x86, 0xd2, 0x01}};
        std::array<std::uint8_t, 32> const ed6SigningKey{
            {0x8f, 0xac, 0x15, 0x02, 0xce, 0xb4, 0x10, 0x27, 0x56, 0x91, 0x2b,
             0xd0, 0x57, 0xe7, 0x6c, 0xe0, 0xc5, 0x46, 0x65, 0x38, 0xf0, 0xc8,
             0x09, 0xe0, 0xb4, 0x57, 0xfb, 0x11, 0xfc, 0x00, 0xe9, 0xdf}};
        (void)ed6SigningKey;
        auto const thresh0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim7CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim7Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim7CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa8CondConditionFingerprint =
            "\xd1\xb5\x1d\x35\x99\x9d\xb4\xc1\xaa\x81\x4d\xd7\x0e\xa9\x2a"
            "\x20\x7f\xe5\x5c\x75\xe8\x57\x8b\xbf\xe8\xd7\x1c\x7e\xb2\xbc"
            "\x91\x16"s;
        Condition const Rsa8Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa8CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed9CondConditionFingerprint =
            "\x92\xfa\xfc\xc6\x2f\xe2\x8d\x8d\x25\x7c\xd4\x46\xab\xea\x82"
            "\xd0\x3f\x36\xbe\x1d\x11\x2b\xa0\xfe\xfe\xd4\x00\xd5\x7d\x9b"
            "\xf6\xc9"s;
        Condition const Ed9Cond{Type::ed25519Sha256,
                                131072,
                                makeSlice(Ed9CondConditionFingerprint),
                                std::bitset<5>{0}};
        auto const Prefix10CondConditionFingerprint =
            "\x8e\x52\x0a\x01\x55\x95\x5a\xa4\x2e\xd9\x35\x5b\x40\x2b\x80"
            "\x4a\x55\x68\xf5\xeb\xe3\x4f\xdf\x8a\xf0\x0e\x45\x8f\xee\x77"
            "\x4c\x88"s;
        Condition const Prefix10Cond{
            Type::prefixSha256,
            133162,
            makeSlice(Prefix10CondConditionFingerprint),
            std::bitset<5>{16}};
        auto const Thresh13CondConditionFingerprint =
            "\xa6\xb2\xca\x44\xa9\x8d\xaa\xa2\x07\x4f\x0d\x9d\x3b\x26\x42"
            "\xb1\x81\x2c\xde\x50\x49\x17\x6c\x0f\xb5\xcc\xb9\x00\x6d\xa8"
            "\xce\x48"s;
        Condition const Thresh13Cond{
            Type::thresholdSha256,
            132096,
            makeSlice(Thresh13CondConditionFingerprint),
            std::bitset<5>{16}};

        auto ed3 = std::make_unique<Ed25519>(ed3PublicKey, ed3Sig);
        auto prefix2 = std::make_unique<PrefixSha256>(
            makeSlice(prefix2Prefix), prefix2MaxMsgLength, std::move(ed3));
        auto prefix1 = std::make_unique<PrefixSha256>(
            makeSlice(prefix1Prefix), prefix1MaxMsgLength, std::move(prefix2));
        auto preim4 =
            std::make_unique<PreimageSha256>(makeSlice(preim4Preimage));
        auto rsa5 = std::make_unique<RsaSha256>(
            makeSlice(rsa5PublicKey), makeSlice(rsa5Sig));
        auto ed6 = std::make_unique<Ed25519>(ed6PublicKey, ed6Sig);
        std::vector<std::unique_ptr<Fulfillment>> thresh0Subfulfillments;
        thresh0Subfulfillments.emplace_back(std::move(prefix1));
        thresh0Subfulfillments.emplace_back(std::move(preim4));
        thresh0Subfulfillments.emplace_back(std::move(rsa5));
        thresh0Subfulfillments.emplace_back(std::move(ed6));
        std::vector<Condition> thresh0Subconditions{
            {Preim7Cond, Rsa8Cond, Ed9Cond, Prefix10Cond, Thresh13Cond}};
        ThresholdSha256 const thresh0(
            std::move(thresh0Subfulfillments), std::move(thresh0Subconditions));
        {
            auto const thresh0EncodedFulfillment =
                "\xa2\x82\x03\xd5\xa0\x82\x02\xfb\xa0\x0b\x80\x09\x49\x20\x61"
                "\x6d\x20\x72\x6f\x6f\x74\xa1\x7a\x80\x02\x50\x31\x81\x01\x0e"
                "\xa2\x71\xa1\x6f\x80\x02\x50\x32\x81\x01\x0e\xa2\x66\xa4\x64"
                "\x80\x20\x42\x0a\x60\x63\x9e\xca\xaa\x48\xac\xcb\x2c\xd9\x46"
                "\x79\x69\x34\x35\xf3\x8e\x29\xd5\x4b\x24\x57\x9d\xd7\x3b\x04"
                "\x5d\x9c\x2f\x32\x81\x40\xe2\x0f\x5d\x3a\x74\xdc\x41\x91\x19"
                "\xbc\xf6\x7d\x90\x21\xae\xd0\x5b\x01\xf9\x74\xf8\xb9\x44\xc5"
                "\x91\x23\x92\xf8\x96\x26\x77\x94\xfc\xf5\x59\xed\x0c\x19\xac"
                "\x92\x03\x54\xf2\x8f\x8e\xc5\x29\x1d\x18\x92\x50\xaf\x81\xb6"
                "\x17\x5c\xa4\xa5\xdd\x73\xf5\x6f\xa0\x09\xa3\x82\x02\x08\x80"
                "\x82\x01\x00\xc0\x00\xef\x8f\x4b\x81\x10\x1e\x52\xe0\x07\x9f"
                "\x68\xe7\x2f\x92\xd4\x77\x3c\x1f\xa3\xff\x72\x64\x5b\x37\xf1"
                "\xf3\xa3\xc5\xfb\xcd\xfb\xda\xcc\x8b\x52\xe1\xde\xbc\x28\x8d"
                "\xe5\xad\xab\x86\x61\x45\x97\x65\x37\x68\x26\x21\x92\x17\xa3"
                "\xb0\x74\x5c\x8a\x45\x8d\x87\x5b\x9b\xd1\x7b\x07\xc4\x8c\x67"
                "\xa0\xe9\x82\x0c\xe0\x6b\xea\x91\x5c\xba\xe3\xd9\x9d\x39\xfd"
                "\x77\xac\xcb\x33\x9b\x28\x51\x8d\xbf\x3e\xe4\x94\x1c\x9a\x60"
                "\x71\x4b\x34\x07\x30\xda\x42\x46\x0e\xb8\xb7\x2c\xf5\x2f\x4b"
                "\x9e\xe7\x64\x81\xa1\xa2\x05\x66\x92\xe6\x75\x9f\x37\xae\x40"
                "\xa9\x16\x08\x19\xe8\xdc\x47\xd6\x03\x29\xab\xcc\x58\xa2\x37"
                "\x2a\x32\xb8\x15\xc7\x51\x91\x73\xb9\x1d\xc6\xd0\x4f\x85\x86"
                "\xd5\xb3\x21\x1a\x2a\x6c\xeb\x7f\xfe\x84\x17\x10\x2d\x0e\xb4"
                "\xe1\xc2\x48\x4c\x3f\x61\xc7\x59\x75\xa7\xc1\x75\xce\x67\x17"
                "\x42\x2a\x2f\x96\xef\x8a\x2d\x74\xd2\x13\x68\xe1\xe9\xea\xfb"
                "\x73\x68\xed\x8d\xd3\xac\x49\x09\xf9\xec\x62\xdf\x53\xab\xfe"
                "\x90\x64\x4b\x92\x60\x0d\xdd\x00\xfe\x02\xe6\xf3\x9b\x2b\xac"
                "\x4f\x70\xe8\x5b\x69\x9c\x40\xd3\xeb\x37\xad\x6f\x37\xab\xf3"
                "\x79\x8e\xcb\x1d\x81\x82\x01\x00\x82\x31\xc6\x88\xab\x16\x66"
                "\x3e\xdd\x7f\x1b\x83\xa0\x3a\xf5\x75\x33\xdf\x27\x91\xb9\xee"
                "\x64\xce\xd6\xba\x2c\x88\xc2\xa8\x28\xb1\xb4\x11\xf3\x83\x51"
                "\xad\xd9\x51\x1e\x9c\xe6\xba\xc2\xff\x58\x57\x2b\x10\x25\xed"
                "\xcb\x96\xff\x66\x02\x4b\xb1\xeb\x2c\x29\x63\xd9\x20\x54\x8d"
                "\x6e\x00\x4f\xb1\x76\x0f\xae\x24\xe7\xaf\xcc\x9d\x7b\x20\xbb"
                "\x2e\x3c\xd5\xe3\x55\x97\xaf\x30\x27\x53\x8c\xf4\x7e\x67\x62"
                "\x12\x4f\x2c\xe7\x2c\x2d\x15\x79\xcd\xe6\x49\xc1\xdb\xe6\x73"
                "\xa8\x94\xdd\xc8\x01\x85\x0f\x27\xf5\x53\xa0\x7b\x00\x9e\x37"
                "\x6a\x8d\x3e\x08\x23\x1b\x3c\x54\xe9\xef\xea\x4a\xf1\x67\x8b"
                "\xe0\x76\x9d\x3f\xa1\x3c\x25\xaa\xf8\x4e\x2b\x45\xaa\x40\x4c"
                "\x75\x1d\x66\x6c\x48\x07\x1e\xfd\x65\x42\xc6\xac\xc7\xe6\x41"
                "\x40\x84\x34\x7f\x2e\xa3\xb4\xd5\x10\x4e\x3c\x96\x31\x08\x88"
                "\x24\x73\xa6\x51\x2d\x8b\xd7\x66\x31\x5b\xa6\x12\x42\x32\x28"
                "\x0e\xb1\x82\xac\x9d\x99\x9f\x56\xa0\x59\x97\x64\x30\x03\x49"
                "\x42\x04\x41\xbc\x46\x93\x03\xa8\x77\xcd\x40\xe1\x27\xde\xf0"
                "\x84\xff\x8f\x02\x67\x9e\xc8\x4d\x1e\x23\x12\x0a\x93\x72\x38"
                "\x2b\x50\xbd\x97\x33\x52\x21\xde\x15\xa4\x64\x80\x20\xa0\x45"
                "\x26\xcf\xee\x7e\xda\x68\xd9\x70\x23\xac\x68\x48\x9e\x20\xa4"
                "\x5e\xf8\x51\xcb\xfe\x72\xc1\x11\x5d\x25\x9c\xbc\xfd\xbb\x8b"
                "\x81\x40\x2a\x1d\xc0\x92\x24\x9a\x87\x5a\xc6\xaf\xa4\x7f\xe1"
                "\x63\xc7\xca\xfd\x08\x47\xae\x2f\x98\x07\xdc\x56\x9a\xfc\x2f"
                "\x0e\xa9\x37\x16\xe0\x81\xff\x94\xb2\xab\x40\x2f\x9c\xa6\xc0"
                "\xe4\xdf\xdf\xcd\x01\xf2\xdb\x9c\xff\x62\xe7\x2f\x9d\x51\x6e"
                "\x80\xd1\x0c\x86\xd2\x01\xa1\x81\xd3\xa0\x25\x80\x20\x5d\xa0"
                "\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1"
                "\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e"
                "\x81\x01\x09\xa1\x2b\x80\x20\x8e\x52\x0a\x01\x55\x95\x5a\xa4"
                "\x2e\xd9\x35\x5b\x40\x2b\x80\x4a\x55\x68\xf5\xeb\xe3\x4f\xdf"
                "\x8a\xf0\x0e\x45\x8f\xee\x77\x4c\x88\x81\x03\x02\x08\x2a\x82"
                "\x02\x03\x08\xa2\x2b\x80\x20\xa6\xb2\xca\x44\xa9\x8d\xaa\xa2"
                "\x07\x4f\x0d\x9d\x3b\x26\x42\xb1\x81\x2c\xde\x50\x49\x17\x6c"
                "\x0f\xb5\xcc\xb9\x00\x6d\xa8\xce\x48\x81\x03\x02\x04\x00\x82"
                "\x02\x03\x08\xa3\x27\x80\x20\xd1\xb5\x1d\x35\x99\x9d\xb4\xc1"
                "\xaa\x81\x4d\xd7\x0e\xa9\x2a\x20\x7f\xe5\x5c\x75\xe8\x57\x8b"
                "\xbf\xe8\xd7\x1c\x7e\xb2\xbc\x91\x16\x81\x03\x01\x00\x00\xa4"
                "\x27\x80\x20\x92\xfa\xfc\xc6\x2f\xe2\x8d\x8d\x25\x7c\xd4\x46"
                "\xab\xea\x82\xd0\x3f\x36\xbe\x1d\x11\x2b\xa0\xfe\xfe\xd4\x00"
                "\xd5\x7d\x9b\xf6\xc9\x81\x03\x02\x00\x00"s;
            auto const thresh0EncodedCondition =
                "\xa2\x2b\x80\x20\x7b\xac\xb8\x53\xa5\x15\xe3\x79\x00\x92\x81"
                "\xb7\xf9\x41\x16\xcf\x48\x44\x6c\x92\xd3\xdf\xfa\xab\x24\x27"
                "\x72\x33\xb6\x5a\x7b\xa8\x81\x03\x08\x38\x4a\x82\x02\x03\xd8"s;
            auto const thresh0EncodedFingerprint =
                "\x30\x82\x01\x80\x80\x01\x04\xa1\x82\x01\x79\xa0\x25\x80\x20"
                "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
                "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
                "\xeb\x4e\x81\x01\x09\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1"
                "\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21"
                "\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa1"
                "\x2b\x80\x20\x8e\x52\x0a\x01\x55\x95\x5a\xa4\x2e\xd9\x35\x5b"
                "\x40\x2b\x80\x4a\x55\x68\xf5\xeb\xe3\x4f\xdf\x8a\xf0\x0e\x45"
                "\x8f\xee\x77\x4c\x88\x81\x03\x02\x08\x2a\x82\x02\x03\x08\xa1"
                "\x2b\x80\x20\xe9\xa9\x26\x1a\xaf\xf8\x2a\x49\x3a\x0e\x97\xca"
                "\x70\x81\x21\xd9\xad\xce\x28\xc7\x47\x76\x0d\x67\x89\x41\x06"
                "\x50\x63\xb8\x0c\x50\x81\x03\x02\x08\x20\x82\x02\x03\x08\xa2"
                "\x2b\x80\x20\xa6\xb2\xca\x44\xa9\x8d\xaa\xa2\x07\x4f\x0d\x9d"
                "\x3b\x26\x42\xb1\x81\x2c\xde\x50\x49\x17\x6c\x0f\xb5\xcc\xb9"
                "\x00\x6d\xa8\xce\x48\x81\x03\x02\x04\x00\x82\x02\x03\x08\xa3"
                "\x27\x80\x20\x99\xfb\x0b\x38\x94\x4d\x20\x85\xc8\xda\x3a\x64"
                "\x31\x44\x6f\x6c\x3b\x46\x25\x50\xd7\x7f\xdf\xee\x75\x72\x71"
                "\xf9\x61\x40\x63\xfa\x81\x03\x01\x00\x00\xa3\x27\x80\x20\xd1"
                "\xb5\x1d\x35\x99\x9d\xb4\xc1\xaa\x81\x4d\xd7\x0e\xa9\x2a\x20"
                "\x7f\xe5\x5c\x75\xe8\x57\x8b\xbf\xe8\xd7\x1c\x7e\xb2\xbc\x91"
                "\x16\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x00\xd3\xc9\x24\x3f"
                "\x2d\x2e\x64\x93\xa8\x49\x29\x82\x75\xea\xbf\xe3\x53\x7f\x8e"
                "\x45\x16\xdb\x5e\xc6\xdf\x39\xd2\xcb\xea\x62\xfb\x81\x03\x02"
                "\x00\x00\xa4\x27\x80\x20\x92\xfa\xfc\xc6\x2f\xe2\x8d\x8d\x25"
                "\x7c\xd4\x46\xab\xea\x82\xd0\x3f\x36\xbe\x1d\x11\x2b\xa0\xfe"
                "\xfe\xd4\x00\xd5\x7d\x9b\xf6\xc9\x81\x03\x02\x00\x00"s;
            check(
                &thresh0,
                thresh0Msg,
                thresh0EncodedFulfillment,
                thresh0EncodedCondition,
                thresh0EncodedFingerprint);
        }
    }

    void
    testThresh54()
    {
        testcase("Thresh54");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * thresh0
        // ** Preim14Cond
        // ** Rsa15Cond
        // ** Ed16Cond
        // ** prefix1
        // *** prefix2
        // **** prefix3
        // ***** ed4
        // ** prefix5
        // *** prefix6
        // **** prefix7
        // ***** ed8
        // ** thresh9
        // *** Preim11Cond
        // *** Rsa12Cond
        // *** Ed13Cond
        // *** ed10

        auto const ed4Msg = "P3P2P1abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed4PublicKey{
            {0x26, 0x80, 0x85, 0x71, 0x79, 0x37, 0x27, 0xbd, 0x85, 0xaf, 0x22,
             0x49, 0x59, 0x42, 0x99, 0x5c, 0x9c, 0x5b, 0x9f, 0x99, 0x54, 0xb6,
             0xd4, 0xd1, 0x81, 0x94, 0x4c, 0x22, 0x53, 0x03, 0xc0, 0xec}};
        std::array<std::uint8_t, 64> const ed4Sig{
            {0xd9, 0xe8, 0x4c, 0x1d, 0x34, 0x07, 0x8a, 0x36, 0x1e, 0x02, 0x10,
             0xfe, 0xf5, 0x1c, 0x7b, 0xb4, 0x79, 0x07, 0xbd, 0xf1, 0x91, 0x03,
             0xe5, 0xd5, 0x35, 0xe6, 0xa3, 0x44, 0x22, 0x86, 0xe4, 0xbb, 0x11,
             0xbc, 0x29, 0x77, 0xba, 0x15, 0xe1, 0x72, 0x33, 0x59, 0xa7, 0x3d,
             0x12, 0x45, 0xd2, 0xa0, 0xde, 0xff, 0x54, 0x32, 0xa2, 0x1a, 0x8a,
             0x59, 0x08, 0xf6, 0x90, 0x9b, 0x63, 0x2c, 0xb8, 0x02}};
        std::array<std::uint8_t, 32> const ed4SigningKey{
            {0x2a, 0x7a, 0x9a, 0x1f, 0xf1, 0x08, 0x8f, 0x8e, 0xef, 0x3a, 0x39,
             0xce, 0x13, 0xea, 0x08, 0x08, 0x8a, 0xf6, 0x06, 0x78, 0xd5, 0x3e,
             0x0b, 0x9c, 0x84, 0xfb, 0x39, 0x93, 0xd6, 0xfe, 0xa0, 0x3d}};
        (void)ed4SigningKey;
        auto const prefix3Prefix = "P3"s;
        auto const prefix3Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix3MaxMsgLength = 14;
        auto const prefix2Prefix = "P2"s;
        auto const prefix2Msg = "P1abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix2MaxMsgLength = 14;
        auto const prefix1Prefix = "P1"s;
        auto const prefix1Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix1MaxMsgLength = 14;
        auto const ed8Msg = "P7P6P5abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed8PublicKey{
            {0xb6, 0x55, 0xc8, 0xa4, 0x14, 0x20, 0x73, 0x44, 0x12, 0x06, 0xf6,
             0xf7, 0xd0, 0x03, 0x74, 0x53, 0xaa, 0x74, 0x6c, 0xf1, 0x84, 0x0e,
             0x86, 0x1d, 0xb1, 0x97, 0x1a, 0x04, 0x91, 0x83, 0x3b, 0x49}};
        std::array<std::uint8_t, 64> const ed8Sig{
            {0x62, 0x59, 0xf5, 0xf7, 0x5c, 0xb2, 0x66, 0x50, 0xe8, 0x12, 0x9e,
             0x66, 0xff, 0x44, 0xfa, 0xf7, 0x23, 0x7f, 0x6d, 0xef, 0x6e, 0x58,
             0x53, 0x30, 0x1f, 0xd8, 0x21, 0x97, 0xef, 0x05, 0x1e, 0x1d, 0x12,
             0x32, 0x04, 0x7b, 0xdc, 0x47, 0x9b, 0x73, 0xdb, 0xb7, 0x5a, 0x17,
             0xfe, 0x69, 0x5e, 0x90, 0x24, 0x21, 0x20, 0x19, 0xb0, 0x0f, 0xfa,
             0x79, 0x4e, 0xf5, 0x9f, 0xc2, 0x37, 0xf0, 0x3a, 0x01}};
        std::array<std::uint8_t, 32> const ed8SigningKey{
            {0xc2, 0x00, 0xc6, 0x2e, 0x45, 0xde, 0xf2, 0x39, 0x81, 0x0a, 0xf8,
             0x6d, 0x53, 0x29, 0xe3, 0x1b, 0x8e, 0x57, 0xad, 0xfa, 0x29, 0x1b,
             0x07, 0x1a, 0xee, 0x34, 0xe6, 0x57, 0x5a, 0xeb, 0xf2, 0x1c}};
        (void)ed8SigningKey;
        auto const prefix7Prefix = "P7"s;
        auto const prefix7Msg = "P6P5abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix7MaxMsgLength = 14;
        auto const prefix6Prefix = "P6"s;
        auto const prefix6Msg = "P5abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix6MaxMsgLength = 14;
        auto const prefix5Prefix = "P5"s;
        auto const prefix5Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix5MaxMsgLength = 14;
        auto const ed10Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed10PublicKey{
            {0x7a, 0xdc, 0x65, 0x52, 0x0f, 0xca, 0x06, 0x72, 0x5c, 0xe4, 0x65,
             0x57, 0x82, 0x6d, 0x3f, 0x57, 0x1f, 0xc6, 0xc6, 0xe4, 0x5d, 0xaf,
             0x08, 0xda, 0xe2, 0x07, 0x02, 0xcb, 0x42, 0x3d, 0x2a, 0xd0}};
        std::array<std::uint8_t, 64> const ed10Sig{
            {0xf2, 0x7c, 0x5f, 0x61, 0xec, 0xbc, 0xc2, 0x8c, 0xad, 0xd0, 0xd3,
             0xcb, 0x89, 0xab, 0xac, 0xe4, 0x01, 0x6f, 0x90, 0x60, 0x6f, 0x89,
             0xc0, 0xd9, 0xca, 0x2b, 0x4b, 0xfd, 0x78, 0x80, 0xae, 0xf9, 0xd0,
             0x3f, 0x45, 0x7a, 0xb2, 0x26, 0x0c, 0xee, 0xc5, 0x06, 0x0e, 0x94,
             0x6b, 0xf8, 0xfe, 0x96, 0x4f, 0x0d, 0xa0, 0x2c, 0x66, 0x78, 0xa5,
             0x60, 0xfe, 0x47, 0x1e, 0xa9, 0x88, 0x76, 0x55, 0x03}};
        std::array<std::uint8_t, 32> const ed10SigningKey{
            {0x84, 0x04, 0xdd, 0x34, 0x6a, 0x4d, 0x40, 0xef, 0x70, 0xf7, 0xef,
             0x7f, 0x25, 0xf4, 0xd0, 0xa0, 0xa8, 0xad, 0xc1, 0x51, 0x1c, 0x16,
             0x57, 0x9d, 0x5e, 0xd9, 0xa6, 0x45, 0xda, 0xff, 0x5e, 0x1e}};
        (void)ed10SigningKey;
        auto const thresh9Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim11CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim11Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim11CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa12CondConditionFingerprint =
            "\x38\xb9\xf0\xeb\x68\x8b\x9f\x55\x37\x9a\xec\x07\xd4\xa2\x13"
            "\xac\x34\xa1\x67\x31\x34\xea\xc2\x2f\xef\x13\xe3\x5c\xcf\x8f"
            "\x90\x1e"s;
        Condition const Rsa12Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa12CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed13CondConditionFingerprint =
            "\x7c\x54\x6a\x6d\x7f\x00\x52\x31\x03\xe7\xb4\x5b\x1c\x9f\x72"
            "\xeb\x3c\x18\x08\xa3\x24\xb2\x63\x5f\x77\x55\x4a\x42\xdb\x1e"
            "\xff\x1e"s;
        Condition const Ed13Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed13CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const thresh0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim14CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim14Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim14CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa15CondConditionFingerprint =
            "\x55\x6b\x6d\xe3\x00\xd4\xf3\x7e\x75\x3a\x68\xfc\x25\xdf\xf2"
            "\xf7\x18\x54\xa5\x55\x0c\xa5\xa9\x65\xbf\x66\x9e\x4e\x49\x56"
            "\x1e\xf1"s;
        Condition const Rsa15Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa15CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed16CondConditionFingerprint =
            "\xe4\x66\x69\x86\x87\x57\x0e\xac\xf1\xfd\x06\x81\x48\x90\x82"
            "\x42\x48\x50\x75\x8e\xd4\x2d\xf3\x02\x37\x89\x28\xc5\x68\xd7"
            "\xa0\x11"s;
        Condition const Ed16Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed16CondConditionFingerprint),
                                 std::bitset<5>{0}};

        auto ed4 = std::make_unique<Ed25519>(ed4PublicKey, ed4Sig);
        auto prefix3 = std::make_unique<PrefixSha256>(
            makeSlice(prefix3Prefix), prefix3MaxMsgLength, std::move(ed4));
        auto prefix2 = std::make_unique<PrefixSha256>(
            makeSlice(prefix2Prefix), prefix2MaxMsgLength, std::move(prefix3));
        auto prefix1 = std::make_unique<PrefixSha256>(
            makeSlice(prefix1Prefix), prefix1MaxMsgLength, std::move(prefix2));
        auto ed8 = std::make_unique<Ed25519>(ed8PublicKey, ed8Sig);
        auto prefix7 = std::make_unique<PrefixSha256>(
            makeSlice(prefix7Prefix), prefix7MaxMsgLength, std::move(ed8));
        auto prefix6 = std::make_unique<PrefixSha256>(
            makeSlice(prefix6Prefix), prefix6MaxMsgLength, std::move(prefix7));
        auto prefix5 = std::make_unique<PrefixSha256>(
            makeSlice(prefix5Prefix), prefix5MaxMsgLength, std::move(prefix6));
        auto ed10 = std::make_unique<Ed25519>(ed10PublicKey, ed10Sig);
        std::vector<std::unique_ptr<Fulfillment>> thresh9Subfulfillments;
        thresh9Subfulfillments.emplace_back(std::move(ed10));
        std::vector<Condition> thresh9Subconditions{
            {Preim11Cond, Rsa12Cond, Ed13Cond}};
        auto thresh9 = std::make_unique<ThresholdSha256>(
            std::move(thresh9Subfulfillments), std::move(thresh9Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh0Subfulfillments;
        thresh0Subfulfillments.emplace_back(std::move(prefix1));
        thresh0Subfulfillments.emplace_back(std::move(prefix5));
        thresh0Subfulfillments.emplace_back(std::move(thresh9));
        std::vector<Condition> thresh0Subconditions{
            {Preim14Cond, Rsa15Cond, Ed16Cond}};
        ThresholdSha256 const thresh0(
            std::move(thresh0Subfulfillments), std::move(thresh0Subconditions));
        {
            auto const thresh0EncodedFulfillment =
                "\xa2\x82\x02\x75\xa0\x82\x01\xf6\xa1\x81\x85\x80\x02\x50\x31"
                "\x81\x01\x0e\xa2\x7c\xa1\x7a\x80\x02\x50\x32\x81\x01\x0e\xa2"
                "\x71\xa1\x6f\x80\x02\x50\x33\x81\x01\x0e\xa2\x66\xa4\x64\x80"
                "\x20\x26\x80\x85\x71\x79\x37\x27\xbd\x85\xaf\x22\x49\x59\x42"
                "\x99\x5c\x9c\x5b\x9f\x99\x54\xb6\xd4\xd1\x81\x94\x4c\x22\x53"
                "\x03\xc0\xec\x81\x40\xd9\xe8\x4c\x1d\x34\x07\x8a\x36\x1e\x02"
                "\x10\xfe\xf5\x1c\x7b\xb4\x79\x07\xbd\xf1\x91\x03\xe5\xd5\x35"
                "\xe6\xa3\x44\x22\x86\xe4\xbb\x11\xbc\x29\x77\xba\x15\xe1\x72"
                "\x33\x59\xa7\x3d\x12\x45\xd2\xa0\xde\xff\x54\x32\xa2\x1a\x8a"
                "\x59\x08\xf6\x90\x9b\x63\x2c\xb8\x02\xa1\x81\x85\x80\x02\x50"
                "\x35\x81\x01\x0e\xa2\x7c\xa1\x7a\x80\x02\x50\x36\x81\x01\x0e"
                "\xa2\x71\xa1\x6f\x80\x02\x50\x37\x81\x01\x0e\xa2\x66\xa4\x64"
                "\x80\x20\xb6\x55\xc8\xa4\x14\x20\x73\x44\x12\x06\xf6\xf7\xd0"
                "\x03\x74\x53\xaa\x74\x6c\xf1\x84\x0e\x86\x1d\xb1\x97\x1a\x04"
                "\x91\x83\x3b\x49\x81\x40\x62\x59\xf5\xf7\x5c\xb2\x66\x50\xe8"
                "\x12\x9e\x66\xff\x44\xfa\xf7\x23\x7f\x6d\xef\x6e\x58\x53\x30"
                "\x1f\xd8\x21\x97\xef\x05\x1e\x1d\x12\x32\x04\x7b\xdc\x47\x9b"
                "\x73\xdb\xb7\x5a\x17\xfe\x69\x5e\x90\x24\x21\x20\x19\xb0\x0f"
                "\xfa\x79\x4e\xf5\x9f\xc2\x37\xf0\x3a\x01\xa2\x81\xe3\xa0\x66"
                "\xa4\x64\x80\x20\x7a\xdc\x65\x52\x0f\xca\x06\x72\x5c\xe4\x65"
                "\x57\x82\x6d\x3f\x57\x1f\xc6\xc6\xe4\x5d\xaf\x08\xda\xe2\x07"
                "\x02\xcb\x42\x3d\x2a\xd0\x81\x40\xf2\x7c\x5f\x61\xec\xbc\xc2"
                "\x8c\xad\xd0\xd3\xcb\x89\xab\xac\xe4\x01\x6f\x90\x60\x6f\x89"
                "\xc0\xd9\xca\x2b\x4b\xfd\x78\x80\xae\xf9\xd0\x3f\x45\x7a\xb2"
                "\x26\x0c\xee\xc5\x06\x0e\x94\x6b\xf8\xfe\x96\x4f\x0d\xa0\x2c"
                "\x66\x78\xa5\x60\xfe\x47\x1e\xa9\x88\x76\x55\x03\xa1\x79\xa0"
                "\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e"
                "\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53"
                "\xee\x93\x58\xeb\x4e\x81\x01\x09\xa3\x27\x80\x20\x38\xb9\xf0"
                "\xeb\x68\x8b\x9f\x55\x37\x9a\xec\x07\xd4\xa2\x13\xac\x34\xa1"
                "\x67\x31\x34\xea\xc2\x2f\xef\x13\xe3\x5c\xcf\x8f\x90\x1e\x81"
                "\x03\x01\x00\x00\xa4\x27\x80\x20\x7c\x54\x6a\x6d\x7f\x00\x52"
                "\x31\x03\xe7\xb4\x5b\x1c\x9f\x72\xeb\x3c\x18\x08\xa3\x24\xb2"
                "\x63\x5f\x77\x55\x4a\x42\xdb\x1e\xff\x1e\x81\x03\x02\x00\x00"
                "\xa1\x79\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51"
                "\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68"
                "\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa3\x27\x80\x20"
                "\x55\x6b\x6d\xe3\x00\xd4\xf3\x7e\x75\x3a\x68\xfc\x25\xdf\xf2"
                "\xf7\x18\x54\xa5\x55\x0c\xa5\xa9\x65\xbf\x66\x9e\x4e\x49\x56"
                "\x1e\xf1\x81\x03\x01\x00\x00\xa4\x27\x80\x20\xe4\x66\x69\x86"
                "\x87\x57\x0e\xac\xf1\xfd\x06\x81\x48\x90\x82\x42\x48\x50\x75"
                "\x8e\xd4\x2d\xf3\x02\x37\x89\x28\xc5\x68\xd7\xa0\x11\x81\x03"
                "\x02\x00\x00"s;
            auto const thresh0EncodedCondition =
                "\xa2\x2b\x80\x20\xcf\x9b\x90\x8a\xf1\x92\x06\x88\xbb\x4c\x66"
                "\x08\x44\x56\x59\xb5\xab\x42\x1a\x5d\xfb\x9c\x45\x1b\xad\x71"
                "\xfd\x92\x5c\x85\x40\x78\x81\x03\x06\x40\x60\x82\x02\x03\xd8"s;
            auto const thresh0EncodedFingerprint =
                "\x30\x82\x01\x07\x80\x01\x03\xa1\x82\x01\x00\xa0\x25\x80\x20"
                "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
                "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
                "\xeb\x4e\x81\x01\x09\xa1\x2b\x80\x20\x34\xd4\x5b\x0b\xc1\x31"
                "\x18\x94\x59\xb0\x5a\x02\x66\x79\xbb\xd0\x93\x99\x3c\xd7\x84"
                "\xd0\x6d\xc1\x2c\xbf\x58\x31\x73\x6b\xee\x48\x81\x03\x02\x0c"
                "\x30\x82\x02\x03\x08\xa1\x2b\x80\x20\x77\xda\x5b\xbb\xcf\x33"
                "\xe2\x5b\x43\x11\x94\xb6\xba\xcb\xb5\xa6\xb3\xdd\xb2\x6b\x14"
                "\x2c\xe1\x1d\x4c\x9f\x0c\xe8\x01\xe8\xbb\xf8\x81\x03\x02\x0c"
                "\x30\x82\x02\x03\x08\xa2\x2b\x80\x20\x23\x02\xc8\x59\x96\xc5"
                "\xf2\x78\xa2\x3f\x1a\x61\x8f\x7b\x14\xaa\x3e\x23\x20\xdf\xad"
                "\x5b\x91\x32\x97\xb2\xfc\xe5\x48\x5f\x2b\xdc\x81\x03\x02\x10"
                "\x00\x82\x02\x03\x98\xa3\x27\x80\x20\x55\x6b\x6d\xe3\x00\xd4"
                "\xf3\x7e\x75\x3a\x68\xfc\x25\xdf\xf2\xf7\x18\x54\xa5\x55\x0c"
                "\xa5\xa9\x65\xbf\x66\x9e\x4e\x49\x56\x1e\xf1\x81\x03\x01\x00"
                "\x00\xa4\x27\x80\x20\xe4\x66\x69\x86\x87\x57\x0e\xac\xf1\xfd"
                "\x06\x81\x48\x90\x82\x42\x48\x50\x75\x8e\xd4\x2d\xf3\x02\x37"
                "\x89\x28\xc5\x68\xd7\xa0\x11\x81\x03\x02\x00\x00"s;
            check(
                &thresh0,
                thresh0Msg,
                thresh0EncodedFulfillment,
                thresh0EncodedCondition,
                thresh0EncodedFingerprint);
        }
    }

    void
    testThresh55()
    {
        testcase("Thresh55");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * thresh0
        // ** Preim8Cond
        // ** Rsa9Cond
        // ** Ed10Cond
        // ** Prefix11Cond
        // ** Thresh15Cond
        // ** prefix1
        // *** prefix2
        // **** prefix3
        // ***** ed4
        // ** preim5
        // ** rsa6
        // ** ed7

        auto const ed4Msg = "P3P2P1abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed4PublicKey{
            {0x26, 0x80, 0x85, 0x71, 0x79, 0x37, 0x27, 0xbd, 0x85, 0xaf, 0x22,
             0x49, 0x59, 0x42, 0x99, 0x5c, 0x9c, 0x5b, 0x9f, 0x99, 0x54, 0xb6,
             0xd4, 0xd1, 0x81, 0x94, 0x4c, 0x22, 0x53, 0x03, 0xc0, 0xec}};
        std::array<std::uint8_t, 64> const ed4Sig{
            {0xd9, 0xe8, 0x4c, 0x1d, 0x34, 0x07, 0x8a, 0x36, 0x1e, 0x02, 0x10,
             0xfe, 0xf5, 0x1c, 0x7b, 0xb4, 0x79, 0x07, 0xbd, 0xf1, 0x91, 0x03,
             0xe5, 0xd5, 0x35, 0xe6, 0xa3, 0x44, 0x22, 0x86, 0xe4, 0xbb, 0x11,
             0xbc, 0x29, 0x77, 0xba, 0x15, 0xe1, 0x72, 0x33, 0x59, 0xa7, 0x3d,
             0x12, 0x45, 0xd2, 0xa0, 0xde, 0xff, 0x54, 0x32, 0xa2, 0x1a, 0x8a,
             0x59, 0x08, 0xf6, 0x90, 0x9b, 0x63, 0x2c, 0xb8, 0x02}};
        std::array<std::uint8_t, 32> const ed4SigningKey{
            {0x2a, 0x7a, 0x9a, 0x1f, 0xf1, 0x08, 0x8f, 0x8e, 0xef, 0x3a, 0x39,
             0xce, 0x13, 0xea, 0x08, 0x08, 0x8a, 0xf6, 0x06, 0x78, 0xd5, 0x3e,
             0x0b, 0x9c, 0x84, 0xfb, 0x39, 0x93, 0xd6, 0xfe, 0xa0, 0x3d}};
        (void)ed4SigningKey;
        auto const prefix3Prefix = "P3"s;
        auto const prefix3Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix3MaxMsgLength = 14;
        auto const prefix2Prefix = "P2"s;
        auto const prefix2Msg = "P1abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix2MaxMsgLength = 14;
        auto const prefix1Prefix = "P1"s;
        auto const prefix1Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix1MaxMsgLength = 14;
        auto const preim5Preimage = "I am root"s;
        auto const preim5Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const rsa6Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa6PublicKey{
            {0xd0, 0x07, 0xfc, 0x9d, 0xb0, 0xa1, 0xa6, 0x40, 0xe4, 0x52, 0x30,
             0x42, 0x74, 0xfd, 0x35, 0x04, 0xde, 0x45, 0x68, 0xb3, 0x22, 0xdd,
             0xff, 0x41, 0x43, 0x69, 0x33, 0xc0, 0xff, 0x35, 0xb6, 0x6d, 0x15,
             0xe9, 0x54, 0x15, 0xeb, 0x1d, 0x07, 0xe2, 0x25, 0x2b, 0xdb, 0xaa,
             0x16, 0x8d, 0x0d, 0x7f, 0x05, 0xf0, 0xd2, 0x7d, 0xb4, 0x9b, 0x51,
             0x19, 0x20, 0x1e, 0x3d, 0xba, 0x50, 0x9e, 0x51, 0x13, 0x81, 0x43,
             0x55, 0x96, 0xca, 0xdb, 0x88, 0x1f, 0xef, 0x2d, 0x38, 0x3f, 0xae,
             0x8d, 0xac, 0xc8, 0x6f, 0x2b, 0xd5, 0xf0, 0x34, 0x1a, 0x99, 0x00,
             0x7c, 0x6d, 0xb3, 0x1b, 0x1d, 0x68, 0xdb, 0xf8, 0x1c, 0x59, 0x3a,
             0x63, 0x38, 0x7c, 0x1c, 0x14, 0xbc, 0x22, 0xcf, 0xc8, 0x9a, 0xc6,
             0x96, 0x6f, 0x3d, 0x03, 0x0b, 0x61, 0x6b, 0x7d, 0x75, 0x97, 0xe8,
             0x25, 0xb8, 0x2f, 0xfa, 0xf4, 0x07, 0x44, 0xdf, 0x00, 0x3d, 0xff,
             0x0d, 0xd5, 0x7f, 0x7f, 0xf3, 0x0c, 0x13, 0xac, 0x8d, 0xf8, 0x8c,
             0x79, 0xc5, 0xf3, 0x29, 0xdc, 0x23, 0x65, 0xd3, 0xd1, 0x1c, 0xa6,
             0x14, 0x78, 0x6a, 0x1a, 0xe3, 0x15, 0x8d, 0x8b, 0xdc, 0xa0, 0x5a,
             0xc7, 0x82, 0xb0, 0x03, 0x6c, 0x71, 0x43, 0x59, 0x24, 0xc7, 0x50,
             0x64, 0xb2, 0xa7, 0x69, 0xf5, 0xbd, 0xe6, 0x5e, 0xaa, 0x77, 0x59,
             0x60, 0x36, 0xc0, 0xe3, 0x42, 0x7f, 0x05, 0x3b, 0x4c, 0x02, 0x0e,
             0x70, 0x5a, 0x70, 0xc5, 0x2a, 0xeb, 0x94, 0x4d, 0x15, 0x09, 0xef,
             0xbb, 0x58, 0x42, 0x68, 0x05, 0x59, 0x70, 0xa0, 0x17, 0xb2, 0x8e,
             0xdf, 0x7b, 0x40, 0x5d, 0x21, 0x1e, 0xfe, 0x62, 0x58, 0xde, 0xfb,
             0x14, 0x91, 0x18, 0xf3, 0x4f, 0x9b, 0x36, 0x55, 0xcf, 0xb3, 0x5e,
             0xec, 0x4f, 0xcc, 0x6d, 0x13, 0x58, 0xc8, 0xa3, 0xa3, 0xee, 0x23,
             0x8a, 0xc2, 0xbf}};
        std::array<std::uint8_t, 256> const rsa6Sig{
            {0x3d, 0x23, 0x21, 0x43, 0xce, 0x51, 0x8a, 0xfa, 0xa9, 0xaf, 0x4f,
             0xe6, 0x5a, 0x5e, 0x1f, 0x95, 0xfa, 0xc3, 0xaf, 0x85, 0x66, 0xc9,
             0xd0, 0xbd, 0x89, 0xa1, 0xdf, 0x6c, 0x06, 0x70, 0x67, 0xee, 0x56,
             0xd8, 0x71, 0x62, 0x80, 0x5f, 0xdb, 0xfa, 0x1f, 0x69, 0xa4, 0x35,
             0x4d, 0x69, 0xb7, 0x84, 0xff, 0xca, 0x24, 0x78, 0xb9, 0x89, 0x85,
             0x85, 0xe2, 0x45, 0xf5, 0x51, 0x4a, 0xa4, 0x81, 0xbc, 0x42, 0xfa,
             0xa5, 0x30, 0x36, 0x46, 0x8b, 0x7a, 0x30, 0x12, 0x8d, 0x22, 0x34,
             0x5a, 0xa1, 0xf3, 0x48, 0xbc, 0x85, 0x38, 0xe9, 0x4c, 0x5a, 0x45,
             0x02, 0xce, 0xac, 0x5c, 0xb0, 0xda, 0xa5, 0x54, 0x61, 0x39, 0x50,
             0xb8, 0x90, 0x6e, 0xf2, 0x50, 0x0b, 0xfb, 0xc7, 0x7f, 0x4e, 0x05,
             0x56, 0xa2, 0x4b, 0x54, 0x42, 0x0a, 0xff, 0x67, 0x73, 0xc1, 0xbc,
             0xe5, 0x45, 0x11, 0x8b, 0x12, 0x09, 0x59, 0xa1, 0x76, 0x33, 0xe9,
             0x35, 0x4c, 0x12, 0x04, 0xa1, 0x2a, 0x82, 0x8f, 0x8d, 0x34, 0xc9,
             0xad, 0x32, 0x88, 0x54, 0xd8, 0xf1, 0x5c, 0xf0, 0xa2, 0x1d, 0x01,
             0x41, 0x7c, 0xd8, 0xe8, 0x2a, 0xbe, 0x97, 0x04, 0x52, 0xa9, 0x54,
             0xdf, 0xd8, 0x43, 0x60, 0x83, 0x25, 0xfa, 0x9a, 0x10, 0x2c, 0xf1,
             0x2e, 0xff, 0x53, 0xbc, 0xd2, 0x6a, 0x34, 0x59, 0xf8, 0x3a, 0xad,
             0xd7, 0x00, 0xb7, 0x74, 0x52, 0x45, 0x07, 0xc0, 0xca, 0x96, 0xe3,
             0xfe, 0xd2, 0xab, 0xfb, 0xae, 0xa6, 0x40, 0x0c, 0xd2, 0x4c, 0xea,
             0xf3, 0xc0, 0x4c, 0x42, 0x17, 0xe4, 0x87, 0x55, 0xac, 0xc0, 0xcd,
             0xef, 0x4c, 0x34, 0xd4, 0x2c, 0xa0, 0xb3, 0x32, 0x7f, 0x89, 0x9c,
             0x93, 0xfa, 0xb9, 0x72, 0xc6, 0xca, 0xbe, 0xef, 0xd9, 0x5b, 0x44,
             0x14, 0xde, 0x79, 0x25, 0xad, 0x04, 0xd7, 0x65, 0x23, 0x9f, 0x19,
             0xfa, 0x19, 0x0a}};
        auto const ed7Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed7PublicKey{
            {0x58, 0xcf, 0x4b, 0xc5, 0x59, 0xdb, 0xba, 0x62, 0x25, 0x14, 0x3a,
             0xc0, 0xad, 0xab, 0x5e, 0x35, 0xa1, 0xb4, 0x0e, 0xc1, 0xaf, 0x3c,
             0xa8, 0x2f, 0x69, 0x2c, 0xb6, 0x25, 0xd7, 0xea, 0x15, 0xb3}};
        std::array<std::uint8_t, 64> const ed7Sig{
            {0xd0, 0xd1, 0x17, 0xe2, 0xb5, 0x40, 0x14, 0x81, 0x0b, 0x12, 0xd8,
             0xbe, 0x1d, 0x1c, 0xb0, 0x88, 0x27, 0xaf, 0x6e, 0xc3, 0x13, 0x71,
             0xea, 0xac, 0xf3, 0xd8, 0x6f, 0x38, 0x21, 0xe2, 0x6d, 0x77, 0xe9,
             0xa6, 0xba, 0x03, 0x2a, 0xe3, 0x50, 0xcb, 0x38, 0xbe, 0x36, 0xba,
             0x62, 0x6e, 0x37, 0x5c, 0x8d, 0x69, 0x9f, 0xf0, 0x43, 0x64, 0x83,
             0x82, 0x8e, 0xbe, 0xf5, 0xa6, 0x96, 0x35, 0xb7, 0x03}};
        std::array<std::uint8_t, 32> const ed7SigningKey{
            {0x9c, 0x02, 0x4b, 0x5e, 0x6a, 0x83, 0x35, 0x8a, 0x2a, 0x71, 0x70,
             0x4e, 0xab, 0x74, 0x72, 0x22, 0x33, 0x5a, 0x82, 0xd9, 0x8e, 0x9c,
             0x8c, 0x41, 0x62, 0x6b, 0x02, 0x62, 0xbd, 0x59, 0x31, 0xcb}};
        (void)ed7SigningKey;
        auto const thresh0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim8CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim8Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim8CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa9CondConditionFingerprint =
            "\xe5\x15\x0a\xbd\xf6\x06\xbe\xaa\x6c\x81\xf1\x88\x7e\x70\x64"
            "\x51\xeb\x6f\x70\xb1\xdd\xc5\xf1\x20\x53\xf7\xcb\x9f\x7f\xc7"
            "\xe4\x52"s;
        Condition const Rsa9Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa9CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed10CondConditionFingerprint =
            "\x00\x8b\xe6\x62\xd4\x30\x65\x1e\x40\xb3\x23\x05\x52\x3a\xf3"
            "\x16\xda\x09\xbe\x79\x5f\x41\xc9\x03\x93\x34\x5b\x7c\x24\x87"
            "\x62\xfa"s;
        Condition const Ed10Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed10CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Prefix11CondConditionFingerprint =
            "\xcb\xdc\xba\x6e\x46\x73\x48\xa9\x4b\x73\x1e\xf8\xbf\xc6\xfc"
            "\xd5\x8f\x5e\xcc\x19\x50\x75\x95\x34\xe0\x27\x35\x54\x27\xa4"
            "\xef\x0b"s;
        Condition const Prefix11Cond{
            Type::prefixSha256,
            134207,
            makeSlice(Prefix11CondConditionFingerprint),
            std::bitset<5>{16}};
        auto const Thresh15CondConditionFingerprint =
            "\xeb\xa9\xc8\x49\x6e\xb4\x22\x72\xf9\x7d\x6c\x8b\xcd\xf0\x8b"
            "\x8f\x5b\x37\xbf\x0d\x21\x58\x26\xee\xc0\x21\x6d\xb7\xe8\xda"
            "\xd8\xbb"s;
        Condition const Thresh15Cond{
            Type::thresholdSha256,
            135168,
            makeSlice(Thresh15CondConditionFingerprint),
            std::bitset<5>{25}};

        auto ed4 = std::make_unique<Ed25519>(ed4PublicKey, ed4Sig);
        auto prefix3 = std::make_unique<PrefixSha256>(
            makeSlice(prefix3Prefix), prefix3MaxMsgLength, std::move(ed4));
        auto prefix2 = std::make_unique<PrefixSha256>(
            makeSlice(prefix2Prefix), prefix2MaxMsgLength, std::move(prefix3));
        auto prefix1 = std::make_unique<PrefixSha256>(
            makeSlice(prefix1Prefix), prefix1MaxMsgLength, std::move(prefix2));
        auto preim5 =
            std::make_unique<PreimageSha256>(makeSlice(preim5Preimage));
        auto rsa6 = std::make_unique<RsaSha256>(
            makeSlice(rsa6PublicKey), makeSlice(rsa6Sig));
        auto ed7 = std::make_unique<Ed25519>(ed7PublicKey, ed7Sig);
        std::vector<std::unique_ptr<Fulfillment>> thresh0Subfulfillments;
        thresh0Subfulfillments.emplace_back(std::move(prefix1));
        thresh0Subfulfillments.emplace_back(std::move(preim5));
        thresh0Subfulfillments.emplace_back(std::move(rsa6));
        thresh0Subfulfillments.emplace_back(std::move(ed7));
        std::vector<Condition> thresh0Subconditions{
            {Preim8Cond, Rsa9Cond, Ed10Cond, Prefix11Cond, Thresh15Cond}};
        ThresholdSha256 const thresh0(
            std::move(thresh0Subfulfillments), std::move(thresh0Subconditions));
        {
            auto const thresh0EncodedFulfillment =
                "\xa2\x82\x03\xe1\xa0\x82\x03\x07\xa0\x0b\x80\x09\x49\x20\x61"
                "\x6d\x20\x72\x6f\x6f\x74\xa1\x81\x85\x80\x02\x50\x31\x81\x01"
                "\x0e\xa2\x7c\xa1\x7a\x80\x02\x50\x32\x81\x01\x0e\xa2\x71\xa1"
                "\x6f\x80\x02\x50\x33\x81\x01\x0e\xa2\x66\xa4\x64\x80\x20\x26"
                "\x80\x85\x71\x79\x37\x27\xbd\x85\xaf\x22\x49\x59\x42\x99\x5c"
                "\x9c\x5b\x9f\x99\x54\xb6\xd4\xd1\x81\x94\x4c\x22\x53\x03\xc0"
                "\xec\x81\x40\xd9\xe8\x4c\x1d\x34\x07\x8a\x36\x1e\x02\x10\xfe"
                "\xf5\x1c\x7b\xb4\x79\x07\xbd\xf1\x91\x03\xe5\xd5\x35\xe6\xa3"
                "\x44\x22\x86\xe4\xbb\x11\xbc\x29\x77\xba\x15\xe1\x72\x33\x59"
                "\xa7\x3d\x12\x45\xd2\xa0\xde\xff\x54\x32\xa2\x1a\x8a\x59\x08"
                "\xf6\x90\x9b\x63\x2c\xb8\x02\xa3\x82\x02\x08\x80\x82\x01\x00"
                "\xd0\x07\xfc\x9d\xb0\xa1\xa6\x40\xe4\x52\x30\x42\x74\xfd\x35"
                "\x04\xde\x45\x68\xb3\x22\xdd\xff\x41\x43\x69\x33\xc0\xff\x35"
                "\xb6\x6d\x15\xe9\x54\x15\xeb\x1d\x07\xe2\x25\x2b\xdb\xaa\x16"
                "\x8d\x0d\x7f\x05\xf0\xd2\x7d\xb4\x9b\x51\x19\x20\x1e\x3d\xba"
                "\x50\x9e\x51\x13\x81\x43\x55\x96\xca\xdb\x88\x1f\xef\x2d\x38"
                "\x3f\xae\x8d\xac\xc8\x6f\x2b\xd5\xf0\x34\x1a\x99\x00\x7c\x6d"
                "\xb3\x1b\x1d\x68\xdb\xf8\x1c\x59\x3a\x63\x38\x7c\x1c\x14\xbc"
                "\x22\xcf\xc8\x9a\xc6\x96\x6f\x3d\x03\x0b\x61\x6b\x7d\x75\x97"
                "\xe8\x25\xb8\x2f\xfa\xf4\x07\x44\xdf\x00\x3d\xff\x0d\xd5\x7f"
                "\x7f\xf3\x0c\x13\xac\x8d\xf8\x8c\x79\xc5\xf3\x29\xdc\x23\x65"
                "\xd3\xd1\x1c\xa6\x14\x78\x6a\x1a\xe3\x15\x8d\x8b\xdc\xa0\x5a"
                "\xc7\x82\xb0\x03\x6c\x71\x43\x59\x24\xc7\x50\x64\xb2\xa7\x69"
                "\xf5\xbd\xe6\x5e\xaa\x77\x59\x60\x36\xc0\xe3\x42\x7f\x05\x3b"
                "\x4c\x02\x0e\x70\x5a\x70\xc5\x2a\xeb\x94\x4d\x15\x09\xef\xbb"
                "\x58\x42\x68\x05\x59\x70\xa0\x17\xb2\x8e\xdf\x7b\x40\x5d\x21"
                "\x1e\xfe\x62\x58\xde\xfb\x14\x91\x18\xf3\x4f\x9b\x36\x55\xcf"
                "\xb3\x5e\xec\x4f\xcc\x6d\x13\x58\xc8\xa3\xa3\xee\x23\x8a\xc2"
                "\xbf\x81\x82\x01\x00\x3d\x23\x21\x43\xce\x51\x8a\xfa\xa9\xaf"
                "\x4f\xe6\x5a\x5e\x1f\x95\xfa\xc3\xaf\x85\x66\xc9\xd0\xbd\x89"
                "\xa1\xdf\x6c\x06\x70\x67\xee\x56\xd8\x71\x62\x80\x5f\xdb\xfa"
                "\x1f\x69\xa4\x35\x4d\x69\xb7\x84\xff\xca\x24\x78\xb9\x89\x85"
                "\x85\xe2\x45\xf5\x51\x4a\xa4\x81\xbc\x42\xfa\xa5\x30\x36\x46"
                "\x8b\x7a\x30\x12\x8d\x22\x34\x5a\xa1\xf3\x48\xbc\x85\x38\xe9"
                "\x4c\x5a\x45\x02\xce\xac\x5c\xb0\xda\xa5\x54\x61\x39\x50\xb8"
                "\x90\x6e\xf2\x50\x0b\xfb\xc7\x7f\x4e\x05\x56\xa2\x4b\x54\x42"
                "\x0a\xff\x67\x73\xc1\xbc\xe5\x45\x11\x8b\x12\x09\x59\xa1\x76"
                "\x33\xe9\x35\x4c\x12\x04\xa1\x2a\x82\x8f\x8d\x34\xc9\xad\x32"
                "\x88\x54\xd8\xf1\x5c\xf0\xa2\x1d\x01\x41\x7c\xd8\xe8\x2a\xbe"
                "\x97\x04\x52\xa9\x54\xdf\xd8\x43\x60\x83\x25\xfa\x9a\x10\x2c"
                "\xf1\x2e\xff\x53\xbc\xd2\x6a\x34\x59\xf8\x3a\xad\xd7\x00\xb7"
                "\x74\x52\x45\x07\xc0\xca\x96\xe3\xfe\xd2\xab\xfb\xae\xa6\x40"
                "\x0c\xd2\x4c\xea\xf3\xc0\x4c\x42\x17\xe4\x87\x55\xac\xc0\xcd"
                "\xef\x4c\x34\xd4\x2c\xa0\xb3\x32\x7f\x89\x9c\x93\xfa\xb9\x72"
                "\xc6\xca\xbe\xef\xd9\x5b\x44\x14\xde\x79\x25\xad\x04\xd7\x65"
                "\x23\x9f\x19\xfa\x19\x0a\xa4\x64\x80\x20\x58\xcf\x4b\xc5\x59"
                "\xdb\xba\x62\x25\x14\x3a\xc0\xad\xab\x5e\x35\xa1\xb4\x0e\xc1"
                "\xaf\x3c\xa8\x2f\x69\x2c\xb6\x25\xd7\xea\x15\xb3\x81\x40\xd0"
                "\xd1\x17\xe2\xb5\x40\x14\x81\x0b\x12\xd8\xbe\x1d\x1c\xb0\x88"
                "\x27\xaf\x6e\xc3\x13\x71\xea\xac\xf3\xd8\x6f\x38\x21\xe2\x6d"
                "\x77\xe9\xa6\xba\x03\x2a\xe3\x50\xcb\x38\xbe\x36\xba\x62\x6e"
                "\x37\x5c\x8d\x69\x9f\xf0\x43\x64\x83\x82\x8e\xbe\xf5\xa6\x96"
                "\x35\xb7\x03\xa1\x81\xd3\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd"
                "\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33"
                "\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09"
                "\xa1\x2b\x80\x20\xcb\xdc\xba\x6e\x46\x73\x48\xa9\x4b\x73\x1e"
                "\xf8\xbf\xc6\xfc\xd5\x8f\x5e\xcc\x19\x50\x75\x95\x34\xe0\x27"
                "\x35\x54\x27\xa4\xef\x0b\x81\x03\x02\x0c\x3f\x82\x02\x03\x08"
                "\xa2\x2b\x80\x20\xeb\xa9\xc8\x49\x6e\xb4\x22\x72\xf9\x7d\x6c"
                "\x8b\xcd\xf0\x8b\x8f\x5b\x37\xbf\x0d\x21\x58\x26\xee\xc0\x21"
                "\x6d\xb7\xe8\xda\xd8\xbb\x81\x03\x02\x10\x00\x82\x02\x03\x98"
                "\xa3\x27\x80\x20\xe5\x15\x0a\xbd\xf6\x06\xbe\xaa\x6c\x81\xf1"
                "\x88\x7e\x70\x64\x51\xeb\x6f\x70\xb1\xdd\xc5\xf1\x20\x53\xf7"
                "\xcb\x9f\x7f\xc7\xe4\x52\x81\x03\x01\x00\x00\xa4\x27\x80\x20"
                "\x00\x8b\xe6\x62\xd4\x30\x65\x1e\x40\xb3\x23\x05\x52\x3a\xf3"
                "\x16\xda\x09\xbe\x79\x5f\x41\xc9\x03\x93\x34\x5b\x7c\x24\x87"
                "\x62\xfa\x81\x03\x02\x00\x00"s;
            auto const thresh0EncodedCondition =
                "\xa2\x2b\x80\x20\x78\x22\xe5\xe9\xb0\xac\xf6\xa9\x1d\x0a\xcb"
                "\x09\xe5\x8c\xdf\x1e\xb2\x19\x68\x0f\x15\x8d\xba\x4a\x87\xfc"
                "\x77\x02\xeb\x9b\x9d\x56\x81\x03\x08\x4c\x6f\x82\x02\x03\xd8"s;
            auto const thresh0EncodedFingerprint =
                "\x30\x82\x01\x80\x80\x01\x04\xa1\x82\x01\x79\xa0\x25\x80\x20"
                "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
                "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
                "\xeb\x4e\x81\x01\x09\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1"
                "\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21"
                "\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa1"
                "\x2b\x80\x20\x34\xd4\x5b\x0b\xc1\x31\x18\x94\x59\xb0\x5a\x02"
                "\x66\x79\xbb\xd0\x93\x99\x3c\xd7\x84\xd0\x6d\xc1\x2c\xbf\x58"
                "\x31\x73\x6b\xee\x48\x81\x03\x02\x0c\x30\x82\x02\x03\x08\xa1"
                "\x2b\x80\x20\xcb\xdc\xba\x6e\x46\x73\x48\xa9\x4b\x73\x1e\xf8"
                "\xbf\xc6\xfc\xd5\x8f\x5e\xcc\x19\x50\x75\x95\x34\xe0\x27\x35"
                "\x54\x27\xa4\xef\x0b\x81\x03\x02\x0c\x3f\x82\x02\x03\x08\xa2"
                "\x2b\x80\x20\xeb\xa9\xc8\x49\x6e\xb4\x22\x72\xf9\x7d\x6c\x8b"
                "\xcd\xf0\x8b\x8f\x5b\x37\xbf\x0d\x21\x58\x26\xee\xc0\x21\x6d"
                "\xb7\xe8\xda\xd8\xbb\x81\x03\x02\x10\x00\x82\x02\x03\x98\xa3"
                "\x27\x80\x20\xe5\x15\x0a\xbd\xf6\x06\xbe\xaa\x6c\x81\xf1\x88"
                "\x7e\x70\x64\x51\xeb\x6f\x70\xb1\xdd\xc5\xf1\x20\x53\xf7\xcb"
                "\x9f\x7f\xc7\xe4\x52\x81\x03\x01\x00\x00\xa3\x27\x80\x20\xee"
                "\x75\xbe\xb3\x52\x54\xbd\x24\x06\x3f\xd9\x32\x48\x19\xe1\x5c"
                "\x70\x85\x92\x11\x6c\x3a\xc1\x4c\x9b\x83\xeb\x05\xa7\x59\xe2"
                "\xa0\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x00\x8b\xe6\x62\xd4"
                "\x30\x65\x1e\x40\xb3\x23\x05\x52\x3a\xf3\x16\xda\x09\xbe\x79"
                "\x5f\x41\xc9\x03\x93\x34\x5b\x7c\x24\x87\x62\xfa\x81\x03\x02"
                "\x00\x00\xa4\x27\x80\x20\x1e\x5a\xaf\x3e\x46\xf6\xd4\xdf\x4d"
                "\x70\xf0\xa1\xd1\x35\x6d\xf0\x8b\x86\x91\xac\xb2\xf2\x24\xf0"
                "\x1a\xd4\x23\xc0\x21\x8d\x42\xc0\x81\x03\x02\x00\x00"s;
            check(
                &thresh0,
                thresh0Msg,
                thresh0EncodedFulfillment,
                thresh0EncodedCondition,
                thresh0EncodedFingerprint);
        }
    }

    void
    testThresh56()
    {
        testcase("Thresh56");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * thresh0
        // ** Preim19Cond
        // ** Rsa20Cond
        // ** Ed21Cond
        // ** prefix1
        // *** prefix2
        // **** thresh3
        // ***** ed4
        // ** prefix5
        // *** prefix6
        // **** thresh7
        // ***** ed8
        // ** thresh9
        // *** Preim16Cond
        // *** Rsa17Cond
        // *** Ed18Cond
        // *** ed10
        // *** thresh11
        // **** Preim13Cond
        // **** Rsa14Cond
        // **** Ed15Cond
        // **** ed12

        auto const ed4Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed4PublicKey{
            {0x26, 0x80, 0x85, 0x71, 0x79, 0x37, 0x27, 0xbd, 0x85, 0xaf, 0x22,
             0x49, 0x59, 0x42, 0x99, 0x5c, 0x9c, 0x5b, 0x9f, 0x99, 0x54, 0xb6,
             0xd4, 0xd1, 0x81, 0x94, 0x4c, 0x22, 0x53, 0x03, 0xc0, 0xec}};
        std::array<std::uint8_t, 64> const ed4Sig{
            {0x23, 0x8b, 0xb2, 0xc9, 0xde, 0xad, 0x1b, 0xb6, 0xce, 0x93, 0x9a,
             0x00, 0x47, 0x3d, 0x42, 0xc1, 0x30, 0x19, 0x95, 0x03, 0x55, 0x19,
             0x74, 0x85, 0xe9, 0xed, 0x92, 0xef, 0x22, 0xbd, 0x49, 0xe5, 0x44,
             0xa0, 0x7a, 0x41, 0x7d, 0xa7, 0xb0, 0x3a, 0x90, 0x1b, 0xa1, 0x2b,
             0xcc, 0x1d, 0x0a, 0x8b, 0x95, 0xc1, 0x3c, 0x05, 0x68, 0x26, 0x39,
             0xad, 0xe4, 0xd4, 0x75, 0xf0, 0xb5, 0x18, 0xbe, 0x01}};
        std::array<std::uint8_t, 32> const ed4SigningKey{
            {0x2a, 0x7a, 0x9a, 0x1f, 0xf1, 0x08, 0x8f, 0x8e, 0xef, 0x3a, 0x39,
             0xce, 0x13, 0xea, 0x08, 0x08, 0x8a, 0xf6, 0x06, 0x78, 0xd5, 0x3e,
             0x0b, 0x9c, 0x84, 0xfb, 0x39, 0x93, 0xd6, 0xfe, 0xa0, 0x3d}};
        (void)ed4SigningKey;
        auto const thresh3Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix2Prefix = "P2"s;
        auto const prefix2Msg = "P1abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix2MaxMsgLength = 14;
        auto const prefix1Prefix = "P1"s;
        auto const prefix1Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix1MaxMsgLength = 14;
        auto const ed8Msg = "P6P5abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed8PublicKey{
            {0xb6, 0x55, 0xc8, 0xa4, 0x14, 0x20, 0x73, 0x44, 0x12, 0x06, 0xf6,
             0xf7, 0xd0, 0x03, 0x74, 0x53, 0xaa, 0x74, 0x6c, 0xf1, 0x84, 0x0e,
             0x86, 0x1d, 0xb1, 0x97, 0x1a, 0x04, 0x91, 0x83, 0x3b, 0x49}};
        std::array<std::uint8_t, 64> const ed8Sig{
            {0x7b, 0x8a, 0x4e, 0xef, 0xaf, 0x36, 0xd8, 0x61, 0xd1, 0x03, 0x93,
             0xde, 0xdd, 0x97, 0xbe, 0xdc, 0x36, 0x69, 0xa4, 0x40, 0xda, 0x91,
             0x99, 0x46, 0x5c, 0x9a, 0xa3, 0x24, 0xfb, 0xca, 0xe3, 0xf5, 0x6b,
             0xae, 0x19, 0x79, 0xad, 0x51, 0x13, 0xa5, 0xb8, 0xc7, 0xe4, 0x87,
             0xe0, 0xdd, 0x95, 0x97, 0xab, 0xf5, 0x87, 0xfe, 0x72, 0x78, 0xc1,
             0x3b, 0xd4, 0xd5, 0xec, 0x01, 0x6e, 0x12, 0x2b, 0x01}};
        std::array<std::uint8_t, 32> const ed8SigningKey{
            {0xc2, 0x00, 0xc6, 0x2e, 0x45, 0xde, 0xf2, 0x39, 0x81, 0x0a, 0xf8,
             0x6d, 0x53, 0x29, 0xe3, 0x1b, 0x8e, 0x57, 0xad, 0xfa, 0x29, 0x1b,
             0x07, 0x1a, 0xee, 0x34, 0xe6, 0x57, 0x5a, 0xeb, 0xf2, 0x1c}};
        (void)ed8SigningKey;
        auto const thresh7Msg = "P6P5abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix6Prefix = "P6"s;
        auto const prefix6Msg = "P5abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix6MaxMsgLength = 14;
        auto const prefix5Prefix = "P5"s;
        auto const prefix5Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix5MaxMsgLength = 14;
        auto const ed10Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed10PublicKey{
            {0x7a, 0xdc, 0x65, 0x52, 0x0f, 0xca, 0x06, 0x72, 0x5c, 0xe4, 0x65,
             0x57, 0x82, 0x6d, 0x3f, 0x57, 0x1f, 0xc6, 0xc6, 0xe4, 0x5d, 0xaf,
             0x08, 0xda, 0xe2, 0x07, 0x02, 0xcb, 0x42, 0x3d, 0x2a, 0xd0}};
        std::array<std::uint8_t, 64> const ed10Sig{
            {0xf2, 0x7c, 0x5f, 0x61, 0xec, 0xbc, 0xc2, 0x8c, 0xad, 0xd0, 0xd3,
             0xcb, 0x89, 0xab, 0xac, 0xe4, 0x01, 0x6f, 0x90, 0x60, 0x6f, 0x89,
             0xc0, 0xd9, 0xca, 0x2b, 0x4b, 0xfd, 0x78, 0x80, 0xae, 0xf9, 0xd0,
             0x3f, 0x45, 0x7a, 0xb2, 0x26, 0x0c, 0xee, 0xc5, 0x06, 0x0e, 0x94,
             0x6b, 0xf8, 0xfe, 0x96, 0x4f, 0x0d, 0xa0, 0x2c, 0x66, 0x78, 0xa5,
             0x60, 0xfe, 0x47, 0x1e, 0xa9, 0x88, 0x76, 0x55, 0x03}};
        std::array<std::uint8_t, 32> const ed10SigningKey{
            {0x84, 0x04, 0xdd, 0x34, 0x6a, 0x4d, 0x40, 0xef, 0x70, 0xf7, 0xef,
             0x7f, 0x25, 0xf4, 0xd0, 0xa0, 0xa8, 0xad, 0xc1, 0x51, 0x1c, 0x16,
             0x57, 0x9d, 0x5e, 0xd9, 0xa6, 0x45, 0xda, 0xff, 0x5e, 0x1e}};
        (void)ed10SigningKey;
        auto const ed12Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed12PublicKey{
            {0x38, 0x9a, 0x02, 0xbc, 0x13, 0xa9, 0x1b, 0x1f, 0x53, 0x89, 0xd0,
             0x09, 0xe8, 0x0c, 0xb1, 0xbc, 0xff, 0x16, 0x8a, 0x3f, 0xc7, 0x62,
             0xa6, 0x44, 0x6c, 0xbc, 0x37, 0x68, 0x9f, 0x74, 0x6c, 0xe0}};
        std::array<std::uint8_t, 64> const ed12Sig{
            {0xab, 0xdf, 0x10, 0x5f, 0x85, 0x43, 0xc2, 0x4a, 0x24, 0x1e, 0x89,
             0xd2, 0x9e, 0xcb, 0x86, 0x2e, 0x4b, 0x9a, 0x2f, 0x9e, 0xe2, 0x49,
             0xf3, 0x3f, 0x1e, 0x9b, 0xf1, 0xbc, 0x95, 0xc4, 0xea, 0xf7, 0xde,
             0x3e, 0x17, 0x48, 0x97, 0xcb, 0x0f, 0xc2, 0x8a, 0xf2, 0xef, 0x4f,
             0xd2, 0x49, 0x3e, 0x2d, 0x99, 0x32, 0x44, 0x1b, 0x2b, 0xa7, 0x9c,
             0x41, 0xf5, 0xc0, 0x6f, 0x23, 0x1b, 0xe6, 0x58, 0x00}};
        std::array<std::uint8_t, 32> const ed12SigningKey{
            {0xf8, 0x58, 0x72, 0x64, 0xb9, 0xfd, 0xec, 0x47, 0x17, 0x2f, 0xce,
             0xba, 0xba, 0x4a, 0xcc, 0xb9, 0xb4, 0x9b, 0xfe, 0x0b, 0xe2, 0xc7,
             0xfc, 0xe1, 0x3f, 0xc7, 0x39, 0x0f, 0x96, 0xdf, 0x3f, 0xfa}};
        (void)ed12SigningKey;
        auto const thresh11Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim13CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim13Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim13CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa14CondConditionFingerprint =
            "\x32\xec\xaa\x5e\xa6\x88\xdc\xe4\x81\x0f\x93\x0f\x65\xde\x87"
            "\xfd\x54\x8c\x79\x04\x81\xe3\x63\x3f\x3d\x08\xa1\xba\x0a\x24"
            "\x2b\x46"s;
        Condition const Rsa14Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa14CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed15CondConditionFingerprint =
            "\x40\xd1\x9a\x63\x62\x9b\xc0\x76\xab\x11\x73\x42\x86\xb3\x20"
            "\x9d\x23\xe8\x5e\xee\xb9\x82\x5d\x93\xe3\xac\xad\xa0\x40\x41"
            "\x51\x1b"s;
        Condition const Ed15Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed15CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const thresh9Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim16CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim16Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim16CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa17CondConditionFingerprint =
            "\x78\xe3\x04\xf4\xa6\x16\x68\x4c\x1b\xcf\x3a\x32\xff\xbc\x75"
            "\x1a\xe6\x08\x9b\xff\xba\x79\xf4\x39\x7a\xfc\xe1\x6f\xff\x3e"
            "\xb3\x75"s;
        Condition const Rsa17Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa17CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed18CondConditionFingerprint =
            "\x0d\xea\xc5\x16\x5c\x62\xb8\xd1\xa4\xe7\x5a\x07\x58\x00\x79"
            "\x51\x88\x21\xe9\x4d\xba\x73\x7b\xad\x60\x9c\x5c\x26\x00\x2e"
            "\xd1\x51"s;
        Condition const Ed18Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed18CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const thresh0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim19CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim19Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim19CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa20CondConditionFingerprint =
            "\x8d\xb0\x2c\xb1\x28\xc3\xf4\x97\x50\x84\x64\x57\xca\xf4\x9d"
            "\x63\x08\x73\xfc\xde\x2f\x90\xf0\xf2\xec\x79\xa9\xc6\xa3\xf1"
            "\x33\xfd"s;
        Condition const Rsa20Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa20CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed21CondConditionFingerprint =
            "\x95\x3c\x86\x65\x91\x76\x69\x6b\x72\x61\xaa\x76\x15\x2a\xd7"
            "\x25\x4f\x32\xb7\x73\x7a\xb2\x49\x0c\x0b\xdf\xb5\x4e\x4a\x8b"
            "\xf7\x65"s;
        Condition const Ed21Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed21CondConditionFingerprint),
                                 std::bitset<5>{0}};

        auto ed4 = std::make_unique<Ed25519>(ed4PublicKey, ed4Sig);
        std::vector<std::unique_ptr<Fulfillment>> thresh3Subfulfillments;
        thresh3Subfulfillments.emplace_back(std::move(ed4));
        std::vector<Condition> thresh3Subconditions{};
        auto thresh3 = std::make_unique<ThresholdSha256>(
            std::move(thresh3Subfulfillments), std::move(thresh3Subconditions));
        auto prefix2 = std::make_unique<PrefixSha256>(
            makeSlice(prefix2Prefix), prefix2MaxMsgLength, std::move(thresh3));
        auto prefix1 = std::make_unique<PrefixSha256>(
            makeSlice(prefix1Prefix), prefix1MaxMsgLength, std::move(prefix2));
        auto ed8 = std::make_unique<Ed25519>(ed8PublicKey, ed8Sig);
        std::vector<std::unique_ptr<Fulfillment>> thresh7Subfulfillments;
        thresh7Subfulfillments.emplace_back(std::move(ed8));
        std::vector<Condition> thresh7Subconditions{};
        auto thresh7 = std::make_unique<ThresholdSha256>(
            std::move(thresh7Subfulfillments), std::move(thresh7Subconditions));
        auto prefix6 = std::make_unique<PrefixSha256>(
            makeSlice(prefix6Prefix), prefix6MaxMsgLength, std::move(thresh7));
        auto prefix5 = std::make_unique<PrefixSha256>(
            makeSlice(prefix5Prefix), prefix5MaxMsgLength, std::move(prefix6));
        auto ed10 = std::make_unique<Ed25519>(ed10PublicKey, ed10Sig);
        auto ed12 = std::make_unique<Ed25519>(ed12PublicKey, ed12Sig);
        std::vector<std::unique_ptr<Fulfillment>> thresh11Subfulfillments;
        thresh11Subfulfillments.emplace_back(std::move(ed12));
        std::vector<Condition> thresh11Subconditions{
            {Preim13Cond, Rsa14Cond, Ed15Cond}};
        auto thresh11 = std::make_unique<ThresholdSha256>(
            std::move(thresh11Subfulfillments),
            std::move(thresh11Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh9Subfulfillments;
        thresh9Subfulfillments.emplace_back(std::move(ed10));
        thresh9Subfulfillments.emplace_back(std::move(thresh11));
        std::vector<Condition> thresh9Subconditions{
            {Preim16Cond, Rsa17Cond, Ed18Cond}};
        auto thresh9 = std::make_unique<ThresholdSha256>(
            std::move(thresh9Subfulfillments), std::move(thresh9Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh0Subfulfillments;
        thresh0Subfulfillments.emplace_back(std::move(prefix1));
        thresh0Subfulfillments.emplace_back(std::move(prefix5));
        thresh0Subfulfillments.emplace_back(std::move(thresh9));
        std::vector<Condition> thresh0Subconditions{
            {Preim19Cond, Rsa20Cond, Ed21Cond}};
        ThresholdSha256 const thresh0(
            std::move(thresh0Subfulfillments), std::move(thresh0Subconditions));
        {
            auto const thresh0EncodedFulfillment =
                "\xa2\x82\x03\x54\xa0\x82\x02\xd5\xa1\x81\x80\x80\x02\x50\x31"
                "\x81\x01\x0e\xa2\x77\xa1\x75\x80\x02\x50\x32\x81\x01\x0e\xa2"
                "\x6c\xa2\x6a\xa0\x66\xa4\x64\x80\x20\x26\x80\x85\x71\x79\x37"
                "\x27\xbd\x85\xaf\x22\x49\x59\x42\x99\x5c\x9c\x5b\x9f\x99\x54"
                "\xb6\xd4\xd1\x81\x94\x4c\x22\x53\x03\xc0\xec\x81\x40\x23\x8b"
                "\xb2\xc9\xde\xad\x1b\xb6\xce\x93\x9a\x00\x47\x3d\x42\xc1\x30"
                "\x19\x95\x03\x55\x19\x74\x85\xe9\xed\x92\xef\x22\xbd\x49\xe5"
                "\x44\xa0\x7a\x41\x7d\xa7\xb0\x3a\x90\x1b\xa1\x2b\xcc\x1d\x0a"
                "\x8b\x95\xc1\x3c\x05\x68\x26\x39\xad\xe4\xd4\x75\xf0\xb5\x18"
                "\xbe\x01\xa1\x00\xa1\x81\x80\x80\x02\x50\x35\x81\x01\x0e\xa2"
                "\x77\xa1\x75\x80\x02\x50\x36\x81\x01\x0e\xa2\x6c\xa2\x6a\xa0"
                "\x66\xa4\x64\x80\x20\xb6\x55\xc8\xa4\x14\x20\x73\x44\x12\x06"
                "\xf6\xf7\xd0\x03\x74\x53\xaa\x74\x6c\xf1\x84\x0e\x86\x1d\xb1"
                "\x97\x1a\x04\x91\x83\x3b\x49\x81\x40\x7b\x8a\x4e\xef\xaf\x36"
                "\xd8\x61\xd1\x03\x93\xde\xdd\x97\xbe\xdc\x36\x69\xa4\x40\xda"
                "\x91\x99\x46\x5c\x9a\xa3\x24\xfb\xca\xe3\xf5\x6b\xae\x19\x79"
                "\xad\x51\x13\xa5\xb8\xc7\xe4\x87\xe0\xdd\x95\x97\xab\xf5\x87"
                "\xfe\x72\x78\xc1\x3b\xd4\xd5\xec\x01\x6e\x12\x2b\x01\xa1\x00"
                "\xa2\x82\x01\xcb\xa0\x82\x01\x4c\xa2\x81\xe3\xa0\x66\xa4\x64"
                "\x80\x20\x38\x9a\x02\xbc\x13\xa9\x1b\x1f\x53\x89\xd0\x09\xe8"
                "\x0c\xb1\xbc\xff\x16\x8a\x3f\xc7\x62\xa6\x44\x6c\xbc\x37\x68"
                "\x9f\x74\x6c\xe0\x81\x40\xab\xdf\x10\x5f\x85\x43\xc2\x4a\x24"
                "\x1e\x89\xd2\x9e\xcb\x86\x2e\x4b\x9a\x2f\x9e\xe2\x49\xf3\x3f"
                "\x1e\x9b\xf1\xbc\x95\xc4\xea\xf7\xde\x3e\x17\x48\x97\xcb\x0f"
                "\xc2\x8a\xf2\xef\x4f\xd2\x49\x3e\x2d\x99\x32\x44\x1b\x2b\xa7"
                "\x9c\x41\xf5\xc0\x6f\x23\x1b\xe6\x58\x00\xa1\x79\xa0\x25\x80"
                "\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d"
                "\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93"
                "\x58\xeb\x4e\x81\x01\x09\xa3\x27\x80\x20\x32\xec\xaa\x5e\xa6"
                "\x88\xdc\xe4\x81\x0f\x93\x0f\x65\xde\x87\xfd\x54\x8c\x79\x04"
                "\x81\xe3\x63\x3f\x3d\x08\xa1\xba\x0a\x24\x2b\x46\x81\x03\x01"
                "\x00\x00\xa4\x27\x80\x20\x40\xd1\x9a\x63\x62\x9b\xc0\x76\xab"
                "\x11\x73\x42\x86\xb3\x20\x9d\x23\xe8\x5e\xee\xb9\x82\x5d\x93"
                "\xe3\xac\xad\xa0\x40\x41\x51\x1b\x81\x03\x02\x00\x00\xa4\x64"
                "\x80\x20\x7a\xdc\x65\x52\x0f\xca\x06\x72\x5c\xe4\x65\x57\x82"
                "\x6d\x3f\x57\x1f\xc6\xc6\xe4\x5d\xaf\x08\xda\xe2\x07\x02\xcb"
                "\x42\x3d\x2a\xd0\x81\x40\xf2\x7c\x5f\x61\xec\xbc\xc2\x8c\xad"
                "\xd0\xd3\xcb\x89\xab\xac\xe4\x01\x6f\x90\x60\x6f\x89\xc0\xd9"
                "\xca\x2b\x4b\xfd\x78\x80\xae\xf9\xd0\x3f\x45\x7a\xb2\x26\x0c"
                "\xee\xc5\x06\x0e\x94\x6b\xf8\xfe\x96\x4f\x0d\xa0\x2c\x66\x78"
                "\xa5\x60\xfe\x47\x1e\xa9\x88\x76\x55\x03\xa1\x79\xa0\x25\x80"
                "\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d"
                "\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93"
                "\x58\xeb\x4e\x81\x01\x09\xa3\x27\x80\x20\x78\xe3\x04\xf4\xa6"
                "\x16\x68\x4c\x1b\xcf\x3a\x32\xff\xbc\x75\x1a\xe6\x08\x9b\xff"
                "\xba\x79\xf4\x39\x7a\xfc\xe1\x6f\xff\x3e\xb3\x75\x81\x03\x01"
                "\x00\x00\xa4\x27\x80\x20\x0d\xea\xc5\x16\x5c\x62\xb8\xd1\xa4"
                "\xe7\x5a\x07\x58\x00\x79\x51\x88\x21\xe9\x4d\xba\x73\x7b\xad"
                "\x60\x9c\x5c\x26\x00\x2e\xd1\x51\x81\x03\x02\x00\x00\xa1\x79"
                "\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f"
                "\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd"
                "\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa3\x27\x80\x20\x8d\xb0"
                "\x2c\xb1\x28\xc3\xf4\x97\x50\x84\x64\x57\xca\xf4\x9d\x63\x08"
                "\x73\xfc\xde\x2f\x90\xf0\xf2\xec\x79\xa9\xc6\xa3\xf1\x33\xfd"
                "\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x95\x3c\x86\x65\x91\x76"
                "\x69\x6b\x72\x61\xaa\x76\x15\x2a\xd7\x25\x4f\x32\xb7\x73\x7a"
                "\xb2\x49\x0c\x0b\xdf\xb5\x4e\x4a\x8b\xf7\x65\x81\x03\x02\x00"
                "\x00"s;
            auto const thresh0EncodedCondition =
                "\xa2\x2b\x80\x20\xfc\xe2\xc3\x2e\x1c\xe8\xa5\x9d\x4e\x49\xcd"
                "\x26\xce\xca\x1d\xa7\xdd\xbc\x54\xb9\x44\x39\x8b\x24\x20\xef"
                "\x60\xc8\x4c\x70\x86\xe6\x81\x03\x08\x54\x40\x82\x02\x03\xd8"s;
            auto const thresh0EncodedFingerprint =
                "\x30\x82\x01\x07\x80\x01\x03\xa1\x82\x01\x00\xa0\x25\x80\x20"
                "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
                "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
                "\xeb\x4e\x81\x01\x09\xa1\x2b\x80\x20\x20\x53\xa7\x27\x31\x1d"
                "\x7a\x17\xf9\x8f\x24\xff\xa9\x2f\x71\xbb\x84\xae\x27\x71\x97"
                "\x08\xb0\x08\xde\xa3\xe6\x0d\x19\x94\x4c\x9e\x81\x03\x02\x0c"
                "\x20\x82\x02\x03\x28\xa1\x2b\x80\x20\x86\x5d\x58\x70\xa3\xbd"
                "\x78\x52\xba\xbd\xe2\xa9\xbe\xa5\x36\xcc\xa8\x2a\x63\xb8\xa0"
                "\x13\xa5\xb0\xa8\xe9\xfb\xb2\xb1\xe9\x6d\x35\x81\x03\x02\x0c"
                "\x20\x82\x02\x03\x28\xa2\x2b\x80\x20\x96\xa0\x0c\x42\x66\x42"
                "\x10\x3e\xcb\x02\xa0\x12\xf7\x80\x8b\x3c\x91\x74\x7d\x67\xc3"
                "\x64\x31\x60\xc5\xff\xfe\xd2\x57\x4b\xab\x23\x81\x03\x04\x24"
                "\x00\x82\x02\x03\x98\xa3\x27\x80\x20\x8d\xb0\x2c\xb1\x28\xc3"
                "\xf4\x97\x50\x84\x64\x57\xca\xf4\x9d\x63\x08\x73\xfc\xde\x2f"
                "\x90\xf0\xf2\xec\x79\xa9\xc6\xa3\xf1\x33\xfd\x81\x03\x01\x00"
                "\x00\xa4\x27\x80\x20\x95\x3c\x86\x65\x91\x76\x69\x6b\x72\x61"
                "\xaa\x76\x15\x2a\xd7\x25\x4f\x32\xb7\x73\x7a\xb2\x49\x0c\x0b"
                "\xdf\xb5\x4e\x4a\x8b\xf7\x65\x81\x03\x02\x00\x00"s;
            check(
                &thresh0,
                thresh0Msg,
                thresh0EncodedFulfillment,
                thresh0EncodedCondition,
                thresh0EncodedFingerprint);
        }
    }

    void
    testThresh57()
    {
        testcase("Thresh57");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * thresh0
        // ** Preim8Cond
        // ** Rsa9Cond
        // ** Ed10Cond
        // ** Prefix11Cond
        // ** Thresh15Cond
        // ** prefix1
        // *** prefix2
        // **** thresh3
        // ***** ed4
        // ** preim5
        // ** rsa6
        // ** ed7

        auto const ed4Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed4PublicKey{
            {0x26, 0x80, 0x85, 0x71, 0x79, 0x37, 0x27, 0xbd, 0x85, 0xaf, 0x22,
             0x49, 0x59, 0x42, 0x99, 0x5c, 0x9c, 0x5b, 0x9f, 0x99, 0x54, 0xb6,
             0xd4, 0xd1, 0x81, 0x94, 0x4c, 0x22, 0x53, 0x03, 0xc0, 0xec}};
        std::array<std::uint8_t, 64> const ed4Sig{
            {0x23, 0x8b, 0xb2, 0xc9, 0xde, 0xad, 0x1b, 0xb6, 0xce, 0x93, 0x9a,
             0x00, 0x47, 0x3d, 0x42, 0xc1, 0x30, 0x19, 0x95, 0x03, 0x55, 0x19,
             0x74, 0x85, 0xe9, 0xed, 0x92, 0xef, 0x22, 0xbd, 0x49, 0xe5, 0x44,
             0xa0, 0x7a, 0x41, 0x7d, 0xa7, 0xb0, 0x3a, 0x90, 0x1b, 0xa1, 0x2b,
             0xcc, 0x1d, 0x0a, 0x8b, 0x95, 0xc1, 0x3c, 0x05, 0x68, 0x26, 0x39,
             0xad, 0xe4, 0xd4, 0x75, 0xf0, 0xb5, 0x18, 0xbe, 0x01}};
        std::array<std::uint8_t, 32> const ed4SigningKey{
            {0x2a, 0x7a, 0x9a, 0x1f, 0xf1, 0x08, 0x8f, 0x8e, 0xef, 0x3a, 0x39,
             0xce, 0x13, 0xea, 0x08, 0x08, 0x8a, 0xf6, 0x06, 0x78, 0xd5, 0x3e,
             0x0b, 0x9c, 0x84, 0xfb, 0x39, 0x93, 0xd6, 0xfe, 0xa0, 0x3d}};
        (void)ed4SigningKey;
        auto const thresh3Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix2Prefix = "P2"s;
        auto const prefix2Msg = "P1abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix2MaxMsgLength = 14;
        auto const prefix1Prefix = "P1"s;
        auto const prefix1Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix1MaxMsgLength = 14;
        auto const preim5Preimage = "I am root"s;
        auto const preim5Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const rsa6Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa6PublicKey{
            {0xd0, 0x07, 0xfc, 0x9d, 0xb0, 0xa1, 0xa6, 0x40, 0xe4, 0x52, 0x30,
             0x42, 0x74, 0xfd, 0x35, 0x04, 0xde, 0x45, 0x68, 0xb3, 0x22, 0xdd,
             0xff, 0x41, 0x43, 0x69, 0x33, 0xc0, 0xff, 0x35, 0xb6, 0x6d, 0x15,
             0xe9, 0x54, 0x15, 0xeb, 0x1d, 0x07, 0xe2, 0x25, 0x2b, 0xdb, 0xaa,
             0x16, 0x8d, 0x0d, 0x7f, 0x05, 0xf0, 0xd2, 0x7d, 0xb4, 0x9b, 0x51,
             0x19, 0x20, 0x1e, 0x3d, 0xba, 0x50, 0x9e, 0x51, 0x13, 0x81, 0x43,
             0x55, 0x96, 0xca, 0xdb, 0x88, 0x1f, 0xef, 0x2d, 0x38, 0x3f, 0xae,
             0x8d, 0xac, 0xc8, 0x6f, 0x2b, 0xd5, 0xf0, 0x34, 0x1a, 0x99, 0x00,
             0x7c, 0x6d, 0xb3, 0x1b, 0x1d, 0x68, 0xdb, 0xf8, 0x1c, 0x59, 0x3a,
             0x63, 0x38, 0x7c, 0x1c, 0x14, 0xbc, 0x22, 0xcf, 0xc8, 0x9a, 0xc6,
             0x96, 0x6f, 0x3d, 0x03, 0x0b, 0x61, 0x6b, 0x7d, 0x75, 0x97, 0xe8,
             0x25, 0xb8, 0x2f, 0xfa, 0xf4, 0x07, 0x44, 0xdf, 0x00, 0x3d, 0xff,
             0x0d, 0xd5, 0x7f, 0x7f, 0xf3, 0x0c, 0x13, 0xac, 0x8d, 0xf8, 0x8c,
             0x79, 0xc5, 0xf3, 0x29, 0xdc, 0x23, 0x65, 0xd3, 0xd1, 0x1c, 0xa6,
             0x14, 0x78, 0x6a, 0x1a, 0xe3, 0x15, 0x8d, 0x8b, 0xdc, 0xa0, 0x5a,
             0xc7, 0x82, 0xb0, 0x03, 0x6c, 0x71, 0x43, 0x59, 0x24, 0xc7, 0x50,
             0x64, 0xb2, 0xa7, 0x69, 0xf5, 0xbd, 0xe6, 0x5e, 0xaa, 0x77, 0x59,
             0x60, 0x36, 0xc0, 0xe3, 0x42, 0x7f, 0x05, 0x3b, 0x4c, 0x02, 0x0e,
             0x70, 0x5a, 0x70, 0xc5, 0x2a, 0xeb, 0x94, 0x4d, 0x15, 0x09, 0xef,
             0xbb, 0x58, 0x42, 0x68, 0x05, 0x59, 0x70, 0xa0, 0x17, 0xb2, 0x8e,
             0xdf, 0x7b, 0x40, 0x5d, 0x21, 0x1e, 0xfe, 0x62, 0x58, 0xde, 0xfb,
             0x14, 0x91, 0x18, 0xf3, 0x4f, 0x9b, 0x36, 0x55, 0xcf, 0xb3, 0x5e,
             0xec, 0x4f, 0xcc, 0x6d, 0x13, 0x58, 0xc8, 0xa3, 0xa3, 0xee, 0x23,
             0x8a, 0xc2, 0xbf}};
        std::array<std::uint8_t, 256> const rsa6Sig{
            {0xcf, 0xcc, 0xa1, 0x89, 0xe2, 0xc9, 0x66, 0x02, 0x36, 0x77, 0xc2,
             0xcd, 0xea, 0x31, 0xf4, 0xc0, 0x5e, 0xc3, 0xba, 0xa0, 0xa2, 0x12,
             0xaa, 0x85, 0x75, 0xe0, 0xcc, 0x29, 0xdf, 0x41, 0xed, 0xca, 0x9a,
             0x63, 0x45, 0xfd, 0x3f, 0x05, 0xd2, 0x95, 0xaf, 0xef, 0xc4, 0x35,
             0x7f, 0xc3, 0x0a, 0x97, 0xa8, 0xf6, 0xd6, 0x4b, 0x82, 0x5a, 0xa6,
             0x1a, 0x2e, 0x20, 0x9c, 0xc6, 0x36, 0xc4, 0x36, 0x33, 0x92, 0xf8,
             0xe1, 0xf2, 0x5a, 0x3c, 0xf4, 0x4f, 0x65, 0xf5, 0x19, 0x81, 0x02,
             0x21, 0x1b, 0x39, 0x94, 0xd7, 0xcd, 0x13, 0xeb, 0x7a, 0x04, 0x14,
             0x49, 0xc8, 0x6d, 0x30, 0xe9, 0xa5, 0x53, 0x54, 0x22, 0x8e, 0x37,
             0x6b, 0x9a, 0xe9, 0x6c, 0x70, 0x95, 0xa2, 0x4f, 0x4a, 0x28, 0x86,
             0x66, 0xea, 0x33, 0xbc, 0x37, 0x85, 0x9b, 0x61, 0x9c, 0x4e, 0xb5,
             0x01, 0xf9, 0x3e, 0x22, 0xc5, 0x26, 0xd0, 0x7b, 0x16, 0x64, 0x64,
             0x39, 0xde, 0x2a, 0x05, 0xe3, 0x25, 0xc5, 0x22, 0x65, 0xbd, 0xb8,
             0x74, 0x20, 0x14, 0x77, 0x76, 0x11, 0x11, 0xc1, 0x6d, 0xd3, 0x06,
             0xd5, 0x05, 0xc8, 0x41, 0x1e, 0xd4, 0x7f, 0xad, 0x8f, 0x1b, 0x33,
             0xb1, 0x0e, 0xed, 0x37, 0xba, 0x4c, 0x17, 0x3a, 0x87, 0xe0, 0x28,
             0x84, 0x9b, 0xd5, 0x55, 0x14, 0x46, 0xb3, 0xd8, 0x19, 0x42, 0xca,
             0x24, 0xa3, 0x0f, 0x6d, 0xa9, 0xf6, 0x19, 0x7f, 0x37, 0xcc, 0x5e,
             0x8c, 0x52, 0x06, 0xad, 0x39, 0x5d, 0x0a, 0x7a, 0xa8, 0xe9, 0x21,
             0x43, 0x4d, 0x94, 0x27, 0x0c, 0x32, 0x09, 0x26, 0x15, 0x8f, 0xc1,
             0xca, 0x0e, 0x4b, 0xcd, 0x94, 0xe8, 0xf1, 0xd7, 0xec, 0x0f, 0xba,
             0xcb, 0x36, 0x1e, 0xdb, 0x03, 0x91, 0xeb, 0x8c, 0xdb, 0xac, 0x72,
             0x3b, 0x10, 0x8b, 0xd9, 0xde, 0x7d, 0x0e, 0x9f, 0x8c, 0xaf, 0x6b,
             0x95, 0xb9, 0x48}};
        auto const ed7Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed7PublicKey{
            {0x58, 0xcf, 0x4b, 0xc5, 0x59, 0xdb, 0xba, 0x62, 0x25, 0x14, 0x3a,
             0xc0, 0xad, 0xab, 0x5e, 0x35, 0xa1, 0xb4, 0x0e, 0xc1, 0xaf, 0x3c,
             0xa8, 0x2f, 0x69, 0x2c, 0xb6, 0x25, 0xd7, 0xea, 0x15, 0xb3}};
        std::array<std::uint8_t, 64> const ed7Sig{
            {0xd0, 0xd1, 0x17, 0xe2, 0xb5, 0x40, 0x14, 0x81, 0x0b, 0x12, 0xd8,
             0xbe, 0x1d, 0x1c, 0xb0, 0x88, 0x27, 0xaf, 0x6e, 0xc3, 0x13, 0x71,
             0xea, 0xac, 0xf3, 0xd8, 0x6f, 0x38, 0x21, 0xe2, 0x6d, 0x77, 0xe9,
             0xa6, 0xba, 0x03, 0x2a, 0xe3, 0x50, 0xcb, 0x38, 0xbe, 0x36, 0xba,
             0x62, 0x6e, 0x37, 0x5c, 0x8d, 0x69, 0x9f, 0xf0, 0x43, 0x64, 0x83,
             0x82, 0x8e, 0xbe, 0xf5, 0xa6, 0x96, 0x35, 0xb7, 0x03}};
        std::array<std::uint8_t, 32> const ed7SigningKey{
            {0x9c, 0x02, 0x4b, 0x5e, 0x6a, 0x83, 0x35, 0x8a, 0x2a, 0x71, 0x70,
             0x4e, 0xab, 0x74, 0x72, 0x22, 0x33, 0x5a, 0x82, 0xd9, 0x8e, 0x9c,
             0x8c, 0x41, 0x62, 0x6b, 0x02, 0x62, 0xbd, 0x59, 0x31, 0xcb}};
        (void)ed7SigningKey;
        auto const thresh0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim8CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim8Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim8CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa9CondConditionFingerprint =
            "\xe5\x15\x0a\xbd\xf6\x06\xbe\xaa\x6c\x81\xf1\x88\x7e\x70\x64"
            "\x51\xeb\x6f\x70\xb1\xdd\xc5\xf1\x20\x53\xf7\xcb\x9f\x7f\xc7"
            "\xe4\x52"s;
        Condition const Rsa9Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa9CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed10CondConditionFingerprint =
            "\x00\x8b\xe6\x62\xd4\x30\x65\x1e\x40\xb3\x23\x05\x52\x3a\xf3"
            "\x16\xda\x09\xbe\x79\x5f\x41\xc9\x03\x93\x34\x5b\x7c\x24\x87"
            "\x62\xfa"s;
        Condition const Ed10Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed10CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Prefix11CondConditionFingerprint =
            "\xfe\xbd\xf2\x53\x5d\x96\x6f\x29\x45\x1c\x53\x72\xca\xfe\xff"
            "\x13\xdd\x49\x8e\x93\x4a\x4b\x23\xf0\x9d\x59\x29\x8c\x1d\x1e"
            "\x1e\x9e"s;
        Condition const Prefix11Cond{
            Type::prefixSha256,
            134186,
            makeSlice(Prefix11CondConditionFingerprint),
            std::bitset<5>{20}};
        auto const Thresh15CondConditionFingerprint =
            "\x2e\x79\x72\x9d\x3a\x6b\x9b\x45\x71\x24\x65\xf2\x20\x29\x61"
            "\x6c\x8a\x27\xad\x0c\xc2\x40\x60\xe2\xf4\x27\x2c\x0c\x17\xfb"
            "\x00\x48"s;
        Condition const Thresh15Cond{
            Type::thresholdSha256,
            271360,
            makeSlice(Thresh15CondConditionFingerprint),
            std::bitset<5>{25}};

        auto ed4 = std::make_unique<Ed25519>(ed4PublicKey, ed4Sig);
        std::vector<std::unique_ptr<Fulfillment>> thresh3Subfulfillments;
        thresh3Subfulfillments.emplace_back(std::move(ed4));
        std::vector<Condition> thresh3Subconditions{};
        auto thresh3 = std::make_unique<ThresholdSha256>(
            std::move(thresh3Subfulfillments), std::move(thresh3Subconditions));
        auto prefix2 = std::make_unique<PrefixSha256>(
            makeSlice(prefix2Prefix), prefix2MaxMsgLength, std::move(thresh3));
        auto prefix1 = std::make_unique<PrefixSha256>(
            makeSlice(prefix1Prefix), prefix1MaxMsgLength, std::move(prefix2));
        auto preim5 =
            std::make_unique<PreimageSha256>(makeSlice(preim5Preimage));
        auto rsa6 = std::make_unique<RsaSha256>(
            makeSlice(rsa6PublicKey), makeSlice(rsa6Sig));
        auto ed7 = std::make_unique<Ed25519>(ed7PublicKey, ed7Sig);
        std::vector<std::unique_ptr<Fulfillment>> thresh0Subfulfillments;
        thresh0Subfulfillments.emplace_back(std::move(prefix1));
        thresh0Subfulfillments.emplace_back(std::move(preim5));
        thresh0Subfulfillments.emplace_back(std::move(rsa6));
        thresh0Subfulfillments.emplace_back(std::move(ed7));
        std::vector<Condition> thresh0Subconditions{
            {Preim8Cond, Rsa9Cond, Ed10Cond, Prefix11Cond, Thresh15Cond}};
        ThresholdSha256 const thresh0(
            std::move(thresh0Subfulfillments), std::move(thresh0Subconditions));
        {
            auto const thresh0EncodedFulfillment =
                "\xa2\x82\x03\xdc\xa0\x82\x03\x02\xa0\x0b\x80\x09\x49\x20\x61"
                "\x6d\x20\x72\x6f\x6f\x74\xa1\x81\x80\x80\x02\x50\x31\x81\x01"
                "\x0e\xa2\x77\xa1\x75\x80\x02\x50\x32\x81\x01\x0e\xa2\x6c\xa2"
                "\x6a\xa0\x66\xa4\x64\x80\x20\x26\x80\x85\x71\x79\x37\x27\xbd"
                "\x85\xaf\x22\x49\x59\x42\x99\x5c\x9c\x5b\x9f\x99\x54\xb6\xd4"
                "\xd1\x81\x94\x4c\x22\x53\x03\xc0\xec\x81\x40\x23\x8b\xb2\xc9"
                "\xde\xad\x1b\xb6\xce\x93\x9a\x00\x47\x3d\x42\xc1\x30\x19\x95"
                "\x03\x55\x19\x74\x85\xe9\xed\x92\xef\x22\xbd\x49\xe5\x44\xa0"
                "\x7a\x41\x7d\xa7\xb0\x3a\x90\x1b\xa1\x2b\xcc\x1d\x0a\x8b\x95"
                "\xc1\x3c\x05\x68\x26\x39\xad\xe4\xd4\x75\xf0\xb5\x18\xbe\x01"
                "\xa1\x00\xa3\x82\x02\x08\x80\x82\x01\x00\xd0\x07\xfc\x9d\xb0"
                "\xa1\xa6\x40\xe4\x52\x30\x42\x74\xfd\x35\x04\xde\x45\x68\xb3"
                "\x22\xdd\xff\x41\x43\x69\x33\xc0\xff\x35\xb6\x6d\x15\xe9\x54"
                "\x15\xeb\x1d\x07\xe2\x25\x2b\xdb\xaa\x16\x8d\x0d\x7f\x05\xf0"
                "\xd2\x7d\xb4\x9b\x51\x19\x20\x1e\x3d\xba\x50\x9e\x51\x13\x81"
                "\x43\x55\x96\xca\xdb\x88\x1f\xef\x2d\x38\x3f\xae\x8d\xac\xc8"
                "\x6f\x2b\xd5\xf0\x34\x1a\x99\x00\x7c\x6d\xb3\x1b\x1d\x68\xdb"
                "\xf8\x1c\x59\x3a\x63\x38\x7c\x1c\x14\xbc\x22\xcf\xc8\x9a\xc6"
                "\x96\x6f\x3d\x03\x0b\x61\x6b\x7d\x75\x97\xe8\x25\xb8\x2f\xfa"
                "\xf4\x07\x44\xdf\x00\x3d\xff\x0d\xd5\x7f\x7f\xf3\x0c\x13\xac"
                "\x8d\xf8\x8c\x79\xc5\xf3\x29\xdc\x23\x65\xd3\xd1\x1c\xa6\x14"
                "\x78\x6a\x1a\xe3\x15\x8d\x8b\xdc\xa0\x5a\xc7\x82\xb0\x03\x6c"
                "\x71\x43\x59\x24\xc7\x50\x64\xb2\xa7\x69\xf5\xbd\xe6\x5e\xaa"
                "\x77\x59\x60\x36\xc0\xe3\x42\x7f\x05\x3b\x4c\x02\x0e\x70\x5a"
                "\x70\xc5\x2a\xeb\x94\x4d\x15\x09\xef\xbb\x58\x42\x68\x05\x59"
                "\x70\xa0\x17\xb2\x8e\xdf\x7b\x40\x5d\x21\x1e\xfe\x62\x58\xde"
                "\xfb\x14\x91\x18\xf3\x4f\x9b\x36\x55\xcf\xb3\x5e\xec\x4f\xcc"
                "\x6d\x13\x58\xc8\xa3\xa3\xee\x23\x8a\xc2\xbf\x81\x82\x01\x00"
                "\xcf\xcc\xa1\x89\xe2\xc9\x66\x02\x36\x77\xc2\xcd\xea\x31\xf4"
                "\xc0\x5e\xc3\xba\xa0\xa2\x12\xaa\x85\x75\xe0\xcc\x29\xdf\x41"
                "\xed\xca\x9a\x63\x45\xfd\x3f\x05\xd2\x95\xaf\xef\xc4\x35\x7f"
                "\xc3\x0a\x97\xa8\xf6\xd6\x4b\x82\x5a\xa6\x1a\x2e\x20\x9c\xc6"
                "\x36\xc4\x36\x33\x92\xf8\xe1\xf2\x5a\x3c\xf4\x4f\x65\xf5\x19"
                "\x81\x02\x21\x1b\x39\x94\xd7\xcd\x13\xeb\x7a\x04\x14\x49\xc8"
                "\x6d\x30\xe9\xa5\x53\x54\x22\x8e\x37\x6b\x9a\xe9\x6c\x70\x95"
                "\xa2\x4f\x4a\x28\x86\x66\xea\x33\xbc\x37\x85\x9b\x61\x9c\x4e"
                "\xb5\x01\xf9\x3e\x22\xc5\x26\xd0\x7b\x16\x64\x64\x39\xde\x2a"
                "\x05\xe3\x25\xc5\x22\x65\xbd\xb8\x74\x20\x14\x77\x76\x11\x11"
                "\xc1\x6d\xd3\x06\xd5\x05\xc8\x41\x1e\xd4\x7f\xad\x8f\x1b\x33"
                "\xb1\x0e\xed\x37\xba\x4c\x17\x3a\x87\xe0\x28\x84\x9b\xd5\x55"
                "\x14\x46\xb3\xd8\x19\x42\xca\x24\xa3\x0f\x6d\xa9\xf6\x19\x7f"
                "\x37\xcc\x5e\x8c\x52\x06\xad\x39\x5d\x0a\x7a\xa8\xe9\x21\x43"
                "\x4d\x94\x27\x0c\x32\x09\x26\x15\x8f\xc1\xca\x0e\x4b\xcd\x94"
                "\xe8\xf1\xd7\xec\x0f\xba\xcb\x36\x1e\xdb\x03\x91\xeb\x8c\xdb"
                "\xac\x72\x3b\x10\x8b\xd9\xde\x7d\x0e\x9f\x8c\xaf\x6b\x95\xb9"
                "\x48\xa4\x64\x80\x20\x58\xcf\x4b\xc5\x59\xdb\xba\x62\x25\x14"
                "\x3a\xc0\xad\xab\x5e\x35\xa1\xb4\x0e\xc1\xaf\x3c\xa8\x2f\x69"
                "\x2c\xb6\x25\xd7\xea\x15\xb3\x81\x40\xd0\xd1\x17\xe2\xb5\x40"
                "\x14\x81\x0b\x12\xd8\xbe\x1d\x1c\xb0\x88\x27\xaf\x6e\xc3\x13"
                "\x71\xea\xac\xf3\xd8\x6f\x38\x21\xe2\x6d\x77\xe9\xa6\xba\x03"
                "\x2a\xe3\x50\xcb\x38\xbe\x36\xba\x62\x6e\x37\x5c\x8d\x69\x9f"
                "\xf0\x43\x64\x83\x82\x8e\xbe\xf5\xa6\x96\x35\xb7\x03\xa1\x81"
                "\xd3\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8"
                "\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc"
                "\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa1\x2b\x80\x20\xfe"
                "\xbd\xf2\x53\x5d\x96\x6f\x29\x45\x1c\x53\x72\xca\xfe\xff\x13"
                "\xdd\x49\x8e\x93\x4a\x4b\x23\xf0\x9d\x59\x29\x8c\x1d\x1e\x1e"
                "\x9e\x81\x03\x02\x0c\x2a\x82\x02\x03\x28\xa2\x2b\x80\x20\x2e"
                "\x79\x72\x9d\x3a\x6b\x9b\x45\x71\x24\x65\xf2\x20\x29\x61\x6c"
                "\x8a\x27\xad\x0c\xc2\x40\x60\xe2\xf4\x27\x2c\x0c\x17\xfb\x00"
                "\x48\x81\x03\x04\x24\x00\x82\x02\x03\x98\xa3\x27\x80\x20\xe5"
                "\x15\x0a\xbd\xf6\x06\xbe\xaa\x6c\x81\xf1\x88\x7e\x70\x64\x51"
                "\xeb\x6f\x70\xb1\xdd\xc5\xf1\x20\x53\xf7\xcb\x9f\x7f\xc7\xe4"
                "\x52\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x00\x8b\xe6\x62\xd4"
                "\x30\x65\x1e\x40\xb3\x23\x05\x52\x3a\xf3\x16\xda\x09\xbe\x79"
                "\x5f\x41\xc9\x03\x93\x34\x5b\x7c\x24\x87\x62\xfa\x81\x03\x02"
                "\x00\x00"s;
            auto const thresh0EncodedCondition =
                "\xa2\x2b\x80\x20\x80\xcd\x33\x60\x90\x41\x4a\x4d\x68\xbd\xb6"
                "\x5a\xf3\xb8\xa7\xc7\x89\xa6\x75\xd1\x29\xb4\xc1\x53\x06\xd5"
                "\x9f\xe0\x4e\x03\x3d\xd7\x81\x03\x0a\x60\x4a\x82\x02\x03\xd8"s;
            auto const thresh0EncodedFingerprint =
                "\x30\x82\x01\x80\x80\x01\x04\xa1\x82\x01\x79\xa0\x25\x80\x20"
                "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
                "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
                "\xeb\x4e\x81\x01\x09\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1"
                "\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21"
                "\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa1"
                "\x2b\x80\x20\x20\x53\xa7\x27\x31\x1d\x7a\x17\xf9\x8f\x24\xff"
                "\xa9\x2f\x71\xbb\x84\xae\x27\x71\x97\x08\xb0\x08\xde\xa3\xe6"
                "\x0d\x19\x94\x4c\x9e\x81\x03\x02\x0c\x20\x82\x02\x03\x28\xa1"
                "\x2b\x80\x20\xfe\xbd\xf2\x53\x5d\x96\x6f\x29\x45\x1c\x53\x72"
                "\xca\xfe\xff\x13\xdd\x49\x8e\x93\x4a\x4b\x23\xf0\x9d\x59\x29"
                "\x8c\x1d\x1e\x1e\x9e\x81\x03\x02\x0c\x2a\x82\x02\x03\x28\xa2"
                "\x2b\x80\x20\x2e\x79\x72\x9d\x3a\x6b\x9b\x45\x71\x24\x65\xf2"
                "\x20\x29\x61\x6c\x8a\x27\xad\x0c\xc2\x40\x60\xe2\xf4\x27\x2c"
                "\x0c\x17\xfb\x00\x48\x81\x03\x04\x24\x00\x82\x02\x03\x98\xa3"
                "\x27\x80\x20\xe5\x15\x0a\xbd\xf6\x06\xbe\xaa\x6c\x81\xf1\x88"
                "\x7e\x70\x64\x51\xeb\x6f\x70\xb1\xdd\xc5\xf1\x20\x53\xf7\xcb"
                "\x9f\x7f\xc7\xe4\x52\x81\x03\x01\x00\x00\xa3\x27\x80\x20\xee"
                "\x75\xbe\xb3\x52\x54\xbd\x24\x06\x3f\xd9\x32\x48\x19\xe1\x5c"
                "\x70\x85\x92\x11\x6c\x3a\xc1\x4c\x9b\x83\xeb\x05\xa7\x59\xe2"
                "\xa0\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x00\x8b\xe6\x62\xd4"
                "\x30\x65\x1e\x40\xb3\x23\x05\x52\x3a\xf3\x16\xda\x09\xbe\x79"
                "\x5f\x41\xc9\x03\x93\x34\x5b\x7c\x24\x87\x62\xfa\x81\x03\x02"
                "\x00\x00\xa4\x27\x80\x20\x1e\x5a\xaf\x3e\x46\xf6\xd4\xdf\x4d"
                "\x70\xf0\xa1\xd1\x35\x6d\xf0\x8b\x86\x91\xac\xb2\xf2\x24\xf0"
                "\x1a\xd4\x23\xc0\x21\x8d\x42\xc0\x81\x03\x02\x00\x00"s;
            check(
                &thresh0,
                thresh0Msg,
                thresh0EncodedFulfillment,
                thresh0EncodedCondition,
                thresh0EncodedFingerprint);
        }
    }

    void
    testThresh58()
    {
        testcase("Thresh58");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * thresh0
        // ** Preim30Cond
        // ** Rsa31Cond
        // ** Ed32Cond
        // ** prefix1
        // *** prefix2
        // **** thresh3
        // ***** Preim5Cond
        // ***** Rsa6Cond
        // ***** Ed7Cond
        // ***** ed4
        // ** prefix8
        // *** prefix9
        // **** thresh10
        // ***** Preim12Cond
        // ***** Rsa13Cond
        // ***** Ed14Cond
        // ***** ed11
        // ** thresh15
        // *** Preim22Cond
        // *** Rsa23Cond
        // *** Ed24Cond
        // *** Thresh25Cond
        // *** ed16
        // *** thresh17
        // **** Preim19Cond
        // **** Rsa20Cond
        // **** Ed21Cond
        // **** ed18

        auto const ed4Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed4PublicKey{
            {0x26, 0x80, 0x85, 0x71, 0x79, 0x37, 0x27, 0xbd, 0x85, 0xaf, 0x22,
             0x49, 0x59, 0x42, 0x99, 0x5c, 0x9c, 0x5b, 0x9f, 0x99, 0x54, 0xb6,
             0xd4, 0xd1, 0x81, 0x94, 0x4c, 0x22, 0x53, 0x03, 0xc0, 0xec}};
        std::array<std::uint8_t, 64> const ed4Sig{
            {0x23, 0x8b, 0xb2, 0xc9, 0xde, 0xad, 0x1b, 0xb6, 0xce, 0x93, 0x9a,
             0x00, 0x47, 0x3d, 0x42, 0xc1, 0x30, 0x19, 0x95, 0x03, 0x55, 0x19,
             0x74, 0x85, 0xe9, 0xed, 0x92, 0xef, 0x22, 0xbd, 0x49, 0xe5, 0x44,
             0xa0, 0x7a, 0x41, 0x7d, 0xa7, 0xb0, 0x3a, 0x90, 0x1b, 0xa1, 0x2b,
             0xcc, 0x1d, 0x0a, 0x8b, 0x95, 0xc1, 0x3c, 0x05, 0x68, 0x26, 0x39,
             0xad, 0xe4, 0xd4, 0x75, 0xf0, 0xb5, 0x18, 0xbe, 0x01}};
        std::array<std::uint8_t, 32> const ed4SigningKey{
            {0x2a, 0x7a, 0x9a, 0x1f, 0xf1, 0x08, 0x8f, 0x8e, 0xef, 0x3a, 0x39,
             0xce, 0x13, 0xea, 0x08, 0x08, 0x8a, 0xf6, 0x06, 0x78, 0xd5, 0x3e,
             0x0b, 0x9c, 0x84, 0xfb, 0x39, 0x93, 0xd6, 0xfe, 0xa0, 0x3d}};
        (void)ed4SigningKey;
        auto const thresh3Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim5CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim5Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim5CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa6CondConditionFingerprint =
            "\xee\x75\xbe\xb3\x52\x54\xbd\x24\x06\x3f\xd9\x32\x48\x19\xe1"
            "\x5c\x70\x85\x92\x11\x6c\x3a\xc1\x4c\x9b\x83\xeb\x05\xa7\x59"
            "\xe2\xa0"s;
        Condition const Rsa6Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa6CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed7CondConditionFingerprint =
            "\x1e\x5a\xaf\x3e\x46\xf6\xd4\xdf\x4d\x70\xf0\xa1\xd1\x35\x6d"
            "\xf0\x8b\x86\x91\xac\xb2\xf2\x24\xf0\x1a\xd4\x23\xc0\x21\x8d"
            "\x42\xc0"s;
        Condition const Ed7Cond{Type::ed25519Sha256,
                                131072,
                                makeSlice(Ed7CondConditionFingerprint),
                                std::bitset<5>{0}};
        auto const prefix2Prefix = "P2"s;
        auto const prefix2Msg = "P1abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix2MaxMsgLength = 14;
        auto const prefix1Prefix = "P1"s;
        auto const prefix1Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix1MaxMsgLength = 14;
        auto const ed11Msg = "P9P8abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed11PublicKey{
            {0x89, 0x5e, 0x41, 0x5a, 0x61, 0x75, 0xf5, 0x16, 0xd7, 0x9b, 0x5c,
             0x57, 0x69, 0x5e, 0xa3, 0x22, 0x3e, 0xa5, 0x5d, 0xa3, 0xc0, 0x37,
             0x18, 0x95, 0x26, 0xe7, 0x77, 0x00, 0x5f, 0x95, 0x58, 0x20}};
        std::array<std::uint8_t, 64> const ed11Sig{
            {0x36, 0x92, 0xe4, 0xf5, 0x30, 0x17, 0x60, 0x8b, 0x86, 0xf3, 0x63,
             0xba, 0x13, 0x2d, 0x54, 0xfe, 0x4e, 0xd2, 0x73, 0x6d, 0x44, 0xd4,
             0x06, 0x2d, 0xb7, 0x71, 0xde, 0x39, 0xbd, 0x5f, 0xcd, 0x1e, 0x82,
             0x95, 0x91, 0x7e, 0x62, 0x58, 0xef, 0x27, 0x8d, 0x3d, 0xf9, 0x92,
             0xc7, 0x46, 0xc1, 0x7b, 0xba, 0x97, 0xce, 0x23, 0xd5, 0x30, 0xfa,
             0x31, 0x45, 0xa5, 0x68, 0xaa, 0xcc, 0x69, 0x59, 0x00}};
        std::array<std::uint8_t, 32> const ed11SigningKey{
            {0x56, 0x3d, 0xfd, 0x5f, 0x56, 0xef, 0x52, 0xa4, 0xbc, 0xc5, 0x20,
             0x99, 0x8b, 0xc7, 0xf1, 0xc8, 0x41, 0xcd, 0x93, 0x6e, 0x4e, 0x7f,
             0x95, 0x81, 0x2a, 0xa1, 0x6b, 0x46, 0x33, 0xd9, 0x11, 0x5f}};
        (void)ed11SigningKey;
        auto const thresh10Msg = "P9P8abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim12CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim12Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim12CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa13CondConditionFingerprint =
            "\x65\x58\x3c\x41\x23\xcb\x17\xee\x38\xf7\x10\x74\xdb\xa3\x24"
            "\xb4\x5b\x39\x35\xc1\x1a\xa6\xbd\xbc\xc8\xea\x71\x39\x33\xe5"
            "\xd5\x1a"s;
        Condition const Rsa13Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa13CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed14CondConditionFingerprint =
            "\xde\x4c\x08\x88\x5c\xfe\x31\x01\xbe\xe9\xe4\x12\xce\x03\x59"
            "\x75\xb3\x7b\xac\x62\x26\xfa\x78\x07\x59\x64\x4e\x5e\x89\x64"
            "\x17\x04"s;
        Condition const Ed14Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed14CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const prefix9Prefix = "P9"s;
        auto const prefix9Msg = "P8abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix9MaxMsgLength = 14;
        auto const prefix8Prefix = "P8"s;
        auto const prefix8Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix8MaxMsgLength = 14;
        auto const ed16Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed16PublicKey{
            {0x50, 0x5a, 0xcb, 0xfd, 0xac, 0xce, 0x8b, 0x6f, 0xeb, 0x52, 0x06,
             0x75, 0xb8, 0x72, 0x9d, 0x94, 0x62, 0xdc, 0xe4, 0x11, 0x24, 0xd0,
             0xa3, 0x35, 0x47, 0x20, 0x02, 0xd5, 0xf7, 0x3f, 0x9c, 0x93}};
        std::array<std::uint8_t, 64> const ed16Sig{
            {0x70, 0x10, 0xf0, 0xdf, 0x6b, 0xdf, 0xe8, 0x30, 0x56, 0x8e, 0xd9,
             0x48, 0x92, 0x62, 0x1f, 0x2b, 0x0c, 0x6c, 0x8f, 0x15, 0x04, 0x53,
             0xcb, 0x3a, 0x07, 0xbc, 0x0b, 0xec, 0x8f, 0x4d, 0xea, 0x37, 0xd0,
             0x13, 0x03, 0x03, 0x79, 0x87, 0x83, 0x7e, 0x63, 0xde, 0x71, 0x22,
             0x43, 0x6f, 0x3b, 0x10, 0xad, 0x3b, 0x68, 0x6a, 0x73, 0x05, 0x07,
             0x01, 0xbb, 0x08, 0x93, 0xa6, 0xbf, 0x87, 0x7f, 0x06}};
        std::array<std::uint8_t, 32> const ed16SigningKey{
            {0xb7, 0xbd, 0x93, 0x4b, 0x03, 0x39, 0xf8, 0x6f, 0x47, 0x66, 0x7f,
             0xd4, 0x4f, 0x94, 0x32, 0xe6, 0xb2, 0x70, 0x9c, 0x2c, 0x64, 0x92,
             0xc4, 0xb1, 0xdd, 0x04, 0x6d, 0x00, 0x92, 0x41, 0xe9, 0x41}};
        (void)ed16SigningKey;
        auto const ed18Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed18PublicKey{
            {0x3b, 0x07, 0x0f, 0xe5, 0x29, 0x34, 0xd9, 0x17, 0xf5, 0x06, 0x00,
             0xb8, 0x87, 0x2f, 0xcf, 0x89, 0x52, 0x70, 0xcc, 0x04, 0x92, 0xe1,
             0x67, 0xcb, 0xba, 0xbb, 0x10, 0xa6, 0x2d, 0x06, 0xa4, 0x6b}};
        std::array<std::uint8_t, 64> const ed18Sig{
            {0x09, 0xc4, 0x1d, 0xc3, 0x8e, 0x6c, 0xd6, 0x04, 0xb7, 0x9e, 0x8c,
             0x8b, 0x30, 0x65, 0x88, 0x43, 0xc7, 0xc6, 0xe5, 0xa0, 0xb0, 0x4c,
             0x60, 0xee, 0xb7, 0x1d, 0x69, 0x2a, 0xb7, 0x5d, 0x5f, 0x16, 0x53,
             0xd1, 0xe6, 0x6a, 0x74, 0x5d, 0x63, 0xc0, 0x41, 0x30, 0x6a, 0x58,
             0xce, 0x52, 0xf2, 0xdb, 0x41, 0x03, 0x78, 0xfd, 0x7f, 0x0e, 0xa5,
             0xc1, 0xe4, 0xd2, 0x50, 0x8d, 0x97, 0x1d, 0xf9, 0x06}};
        std::array<std::uint8_t, 32> const ed18SigningKey{
            {0x59, 0x73, 0xbb, 0x41, 0xb0, 0xe0, 0xce, 0xc2, 0xa9, 0x85, 0xaa,
             0x05, 0xa4, 0x7e, 0x3b, 0x51, 0x09, 0x8d, 0x3e, 0x47, 0xb7, 0x75,
             0xda, 0x81, 0x39, 0xa0, 0xe1, 0xd5, 0x9f, 0xb0, 0x9c, 0x5a}};
        (void)ed18SigningKey;
        auto const thresh17Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim19CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim19Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim19CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa20CondConditionFingerprint =
            "\x8d\xb0\x2c\xb1\x28\xc3\xf4\x97\x50\x84\x64\x57\xca\xf4\x9d"
            "\x63\x08\x73\xfc\xde\x2f\x90\xf0\xf2\xec\x79\xa9\xc6\xa3\xf1"
            "\x33\xfd"s;
        Condition const Rsa20Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa20CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed21CondConditionFingerprint =
            "\x95\x3c\x86\x65\x91\x76\x69\x6b\x72\x61\xaa\x76\x15\x2a\xd7"
            "\x25\x4f\x32\xb7\x73\x7a\xb2\x49\x0c\x0b\xdf\xb5\x4e\x4a\x8b"
            "\xf7\x65"s;
        Condition const Ed21Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed21CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const thresh15Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim22CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim22Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim22CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa23CondConditionFingerprint =
            "\x4a\x64\xbf\x23\xa9\x2b\xec\x55\x00\x3d\x55\xf5\xbf\x3f\x26"
            "\x49\x18\xbb\xe0\xda\xf8\x0c\xf4\x5c\x8a\x33\x74\xb6\x58\xa4"
            "\x38\x30"s;
        Condition const Rsa23Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa23CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed24CondConditionFingerprint =
            "\x6b\xf3\xe3\x0f\x92\x6d\x45\x8d\xae\xd2\x8a\x2a\x3e\x53\x37"
            "\x1f\x57\x82\x21\x60\xe4\x5b\x88\x9a\x9d\x13\xa2\x56\x13\x88"
            "\x9e\x21"s;
        Condition const Ed24Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed24CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Thresh25CondConditionFingerprint =
            "\x29\xe8\x9c\x4f\x52\x99\x3e\x96\x07\x4f\x16\x1c\x2b\x76\x5b"
            "\xb1\xb0\x80\xd3\xbe\x4f\xbe\xf9\x8c\x54\x36\x1e\x6f\x67\xf4"
            "\xa5\xbb"s;
        Condition const Thresh25Cond{
            Type::thresholdSha256,
            135168,
            makeSlice(Thresh25CondConditionFingerprint),
            std::bitset<5>{25}};
        auto const thresh0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim30CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim30Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim30CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa31CondConditionFingerprint =
            "\x34\x77\x63\xd7\x27\x76\x4d\x3a\x9b\x6c\xdb\x09\xed\xd8\x5f"
            "\xc2\x12\x9e\x9c\xc4\xc8\xa6\x62\xcf\x14\xde\x09\x30\x64\x8e"
            "\xf4\x84"s;
        Condition const Rsa31Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa31CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed32CondConditionFingerprint =
            "\xe9\x54\x85\xb7\x7d\xa1\x1f\x2f\xaa\x84\x72\x3f\x4e\x3f\x09"
            "\xa7\x49\xf2\x15\x2a\xe6\x13\x5b\x68\xb6\xe1\x98\xa6\x89\x76"
            "\x08\x05"s;
        Condition const Ed32Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed32CondConditionFingerprint),
                                 std::bitset<5>{0}};

        auto ed4 = std::make_unique<Ed25519>(ed4PublicKey, ed4Sig);
        std::vector<std::unique_ptr<Fulfillment>> thresh3Subfulfillments;
        thresh3Subfulfillments.emplace_back(std::move(ed4));
        std::vector<Condition> thresh3Subconditions{
            {Preim5Cond, Rsa6Cond, Ed7Cond}};
        auto thresh3 = std::make_unique<ThresholdSha256>(
            std::move(thresh3Subfulfillments), std::move(thresh3Subconditions));
        auto prefix2 = std::make_unique<PrefixSha256>(
            makeSlice(prefix2Prefix), prefix2MaxMsgLength, std::move(thresh3));
        auto prefix1 = std::make_unique<PrefixSha256>(
            makeSlice(prefix1Prefix), prefix1MaxMsgLength, std::move(prefix2));
        auto ed11 = std::make_unique<Ed25519>(ed11PublicKey, ed11Sig);
        std::vector<std::unique_ptr<Fulfillment>> thresh10Subfulfillments;
        thresh10Subfulfillments.emplace_back(std::move(ed11));
        std::vector<Condition> thresh10Subconditions{
            {Preim12Cond, Rsa13Cond, Ed14Cond}};
        auto thresh10 = std::make_unique<ThresholdSha256>(
            std::move(thresh10Subfulfillments),
            std::move(thresh10Subconditions));
        auto prefix9 = std::make_unique<PrefixSha256>(
            makeSlice(prefix9Prefix), prefix9MaxMsgLength, std::move(thresh10));
        auto prefix8 = std::make_unique<PrefixSha256>(
            makeSlice(prefix8Prefix), prefix8MaxMsgLength, std::move(prefix9));
        auto ed16 = std::make_unique<Ed25519>(ed16PublicKey, ed16Sig);
        auto ed18 = std::make_unique<Ed25519>(ed18PublicKey, ed18Sig);
        std::vector<std::unique_ptr<Fulfillment>> thresh17Subfulfillments;
        thresh17Subfulfillments.emplace_back(std::move(ed18));
        std::vector<Condition> thresh17Subconditions{
            {Preim19Cond, Rsa20Cond, Ed21Cond}};
        auto thresh17 = std::make_unique<ThresholdSha256>(
            std::move(thresh17Subfulfillments),
            std::move(thresh17Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh15Subfulfillments;
        thresh15Subfulfillments.emplace_back(std::move(ed16));
        thresh15Subfulfillments.emplace_back(std::move(thresh17));
        std::vector<Condition> thresh15Subconditions{
            {Preim22Cond, Rsa23Cond, Ed24Cond, Thresh25Cond}};
        auto thresh15 = std::make_unique<ThresholdSha256>(
            std::move(thresh15Subfulfillments),
            std::move(thresh15Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh0Subfulfillments;
        thresh0Subfulfillments.emplace_back(std::move(prefix1));
        thresh0Subfulfillments.emplace_back(std::move(prefix8));
        thresh0Subfulfillments.emplace_back(std::move(thresh15));
        std::vector<Condition> thresh0Subconditions{
            {Preim30Cond, Rsa31Cond, Ed32Cond}};
        ThresholdSha256 const thresh0(
            std::move(thresh0Subfulfillments), std::move(thresh0Subconditions));
        {
            auto const thresh0EncodedFulfillment =
                "\xa2\x82\x04\x7c\xa0\x82\x03\xfd\xa1\x81\xfd\x80\x02\x50\x31"
                "\x81\x01\x0e\xa2\x81\xf3\xa1\x81\xf0\x80\x02\x50\x32\x81\x01"
                "\x0e\xa2\x81\xe6\xa2\x81\xe3\xa0\x66\xa4\x64\x80\x20\x26\x80"
                "\x85\x71\x79\x37\x27\xbd\x85\xaf\x22\x49\x59\x42\x99\x5c\x9c"
                "\x5b\x9f\x99\x54\xb6\xd4\xd1\x81\x94\x4c\x22\x53\x03\xc0\xec"
                "\x81\x40\x23\x8b\xb2\xc9\xde\xad\x1b\xb6\xce\x93\x9a\x00\x47"
                "\x3d\x42\xc1\x30\x19\x95\x03\x55\x19\x74\x85\xe9\xed\x92\xef"
                "\x22\xbd\x49\xe5\x44\xa0\x7a\x41\x7d\xa7\xb0\x3a\x90\x1b\xa1"
                "\x2b\xcc\x1d\x0a\x8b\x95\xc1\x3c\x05\x68\x26\x39\xad\xe4\xd4"
                "\x75\xf0\xb5\x18\xbe\x01\xa1\x79\xa0\x25\x80\x20\x5d\xa0\x30"
                "\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c"
                "\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81"
                "\x01\x09\xa3\x27\x80\x20\xee\x75\xbe\xb3\x52\x54\xbd\x24\x06"
                "\x3f\xd9\x32\x48\x19\xe1\x5c\x70\x85\x92\x11\x6c\x3a\xc1\x4c"
                "\x9b\x83\xeb\x05\xa7\x59\xe2\xa0\x81\x03\x01\x00\x00\xa4\x27"
                "\x80\x20\x1e\x5a\xaf\x3e\x46\xf6\xd4\xdf\x4d\x70\xf0\xa1\xd1"
                "\x35\x6d\xf0\x8b\x86\x91\xac\xb2\xf2\x24\xf0\x1a\xd4\x23\xc0"
                "\x21\x8d\x42\xc0\x81\x03\x02\x00\x00\xa1\x81\xfd\x80\x02\x50"
                "\x38\x81\x01\x0e\xa2\x81\xf3\xa1\x81\xf0\x80\x02\x50\x39\x81"
                "\x01\x0e\xa2\x81\xe6\xa2\x81\xe3\xa0\x66\xa4\x64\x80\x20\x89"
                "\x5e\x41\x5a\x61\x75\xf5\x16\xd7\x9b\x5c\x57\x69\x5e\xa3\x22"
                "\x3e\xa5\x5d\xa3\xc0\x37\x18\x95\x26\xe7\x77\x00\x5f\x95\x58"
                "\x20\x81\x40\x36\x92\xe4\xf5\x30\x17\x60\x8b\x86\xf3\x63\xba"
                "\x13\x2d\x54\xfe\x4e\xd2\x73\x6d\x44\xd4\x06\x2d\xb7\x71\xde"
                "\x39\xbd\x5f\xcd\x1e\x82\x95\x91\x7e\x62\x58\xef\x27\x8d\x3d"
                "\xf9\x92\xc7\x46\xc1\x7b\xba\x97\xce\x23\xd5\x30\xfa\x31\x45"
                "\xa5\x68\xaa\xcc\x69\x59\x00\xa1\x79\xa0\x25\x80\x20\x5d\xa0"
                "\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1"
                "\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e"
                "\x81\x01\x09\xa3\x27\x80\x20\x65\x58\x3c\x41\x23\xcb\x17\xee"
                "\x38\xf7\x10\x74\xdb\xa3\x24\xb4\x5b\x39\x35\xc1\x1a\xa6\xbd"
                "\xbc\xc8\xea\x71\x39\x33\xe5\xd5\x1a\x81\x03\x01\x00\x00\xa4"
                "\x27\x80\x20\xde\x4c\x08\x88\x5c\xfe\x31\x01\xbe\xe9\xe4\x12"
                "\xce\x03\x59\x75\xb3\x7b\xac\x62\x26\xfa\x78\x07\x59\x64\x4e"
                "\x5e\x89\x64\x17\x04\x81\x03\x02\x00\x00\xa2\x82\x01\xf9\xa0"
                "\x82\x01\x4c\xa2\x81\xe3\xa0\x66\xa4\x64\x80\x20\x3b\x07\x0f"
                "\xe5\x29\x34\xd9\x17\xf5\x06\x00\xb8\x87\x2f\xcf\x89\x52\x70"
                "\xcc\x04\x92\xe1\x67\xcb\xba\xbb\x10\xa6\x2d\x06\xa4\x6b\x81"
                "\x40\x09\xc4\x1d\xc3\x8e\x6c\xd6\x04\xb7\x9e\x8c\x8b\x30\x65"
                "\x88\x43\xc7\xc6\xe5\xa0\xb0\x4c\x60\xee\xb7\x1d\x69\x2a\xb7"
                "\x5d\x5f\x16\x53\xd1\xe6\x6a\x74\x5d\x63\xc0\x41\x30\x6a\x58"
                "\xce\x52\xf2\xdb\x41\x03\x78\xfd\x7f\x0e\xa5\xc1\xe4\xd2\x50"
                "\x8d\x97\x1d\xf9\x06\xa1\x79\xa0\x25\x80\x20\x5d\xa0\x30\xef"
                "\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9"
                "\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01"
                "\x09\xa3\x27\x80\x20\x8d\xb0\x2c\xb1\x28\xc3\xf4\x97\x50\x84"
                "\x64\x57\xca\xf4\x9d\x63\x08\x73\xfc\xde\x2f\x90\xf0\xf2\xec"
                "\x79\xa9\xc6\xa3\xf1\x33\xfd\x81\x03\x01\x00\x00\xa4\x27\x80"
                "\x20\x95\x3c\x86\x65\x91\x76\x69\x6b\x72\x61\xaa\x76\x15\x2a"
                "\xd7\x25\x4f\x32\xb7\x73\x7a\xb2\x49\x0c\x0b\xdf\xb5\x4e\x4a"
                "\x8b\xf7\x65\x81\x03\x02\x00\x00\xa4\x64\x80\x20\x50\x5a\xcb"
                "\xfd\xac\xce\x8b\x6f\xeb\x52\x06\x75\xb8\x72\x9d\x94\x62\xdc"
                "\xe4\x11\x24\xd0\xa3\x35\x47\x20\x02\xd5\xf7\x3f\x9c\x93\x81"
                "\x40\x70\x10\xf0\xdf\x6b\xdf\xe8\x30\x56\x8e\xd9\x48\x92\x62"
                "\x1f\x2b\x0c\x6c\x8f\x15\x04\x53\xcb\x3a\x07\xbc\x0b\xec\x8f"
                "\x4d\xea\x37\xd0\x13\x03\x03\x79\x87\x83\x7e\x63\xde\x71\x22"
                "\x43\x6f\x3b\x10\xad\x3b\x68\x6a\x73\x05\x07\x01\xbb\x08\x93"
                "\xa6\xbf\x87\x7f\x06\xa1\x81\xa6\xa0\x25\x80\x20\x5d\xa0\x30"
                "\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c"
                "\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81"
                "\x01\x09\xa2\x2b\x80\x20\x29\xe8\x9c\x4f\x52\x99\x3e\x96\x07"
                "\x4f\x16\x1c\x2b\x76\x5b\xb1\xb0\x80\xd3\xbe\x4f\xbe\xf9\x8c"
                "\x54\x36\x1e\x6f\x67\xf4\xa5\xbb\x81\x03\x02\x10\x00\x82\x02"
                "\x03\x98\xa3\x27\x80\x20\x4a\x64\xbf\x23\xa9\x2b\xec\x55\x00"
                "\x3d\x55\xf5\xbf\x3f\x26\x49\x18\xbb\xe0\xda\xf8\x0c\xf4\x5c"
                "\x8a\x33\x74\xb6\x58\xa4\x38\x30\x81\x03\x01\x00\x00\xa4\x27"
                "\x80\x20\x6b\xf3\xe3\x0f\x92\x6d\x45\x8d\xae\xd2\x8a\x2a\x3e"
                "\x53\x37\x1f\x57\x82\x21\x60\xe4\x5b\x88\x9a\x9d\x13\xa2\x56"
                "\x13\x88\x9e\x21\x81\x03\x02\x00\x00\xa1\x79\xa0\x25\x80\x20"
                "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
                "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
                "\xeb\x4e\x81\x01\x09\xa3\x27\x80\x20\x34\x77\x63\xd7\x27\x76"
                "\x4d\x3a\x9b\x6c\xdb\x09\xed\xd8\x5f\xc2\x12\x9e\x9c\xc4\xc8"
                "\xa6\x62\xcf\x14\xde\x09\x30\x64\x8e\xf4\x84\x81\x03\x01\x00"
                "\x00\xa4\x27\x80\x20\xe9\x54\x85\xb7\x7d\xa1\x1f\x2f\xaa\x84"
                "\x72\x3f\x4e\x3f\x09\xa7\x49\xf2\x15\x2a\xe6\x13\x5b\x68\xb6"
                "\xe1\x98\xa6\x89\x76\x08\x05\x81\x03\x02\x00\x00"s;
            auto const thresh0EncodedCondition =
                "\xa2\x2b\x80\x20\xdc\x0f\x43\xb6\xa2\x41\xd1\x31\x61\x9f\x86"
                "\x4d\xc6\x55\x0a\xb5\xf4\x16\xd4\x89\xf4\xa4\x2d\x1b\x09\xc1"
                "\xf0\xfc\xb2\x14\xd8\xa1\x81\x03\x08\x80\x40\x82\x02\x03\xd8"s;
            auto const thresh0EncodedFingerprint =
                "\x30\x82\x01\x07\x80\x01\x03\xa1\x82\x01\x00\xa0\x25\x80\x20"
                "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
                "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
                "\xeb\x4e\x81\x01\x09\xa1\x2b\x80\x20\x40\x29\x63\xcd\x81\x80"
                "\x8f\xa5\x93\x47\x29\x57\xa8\x64\x38\x12\xe7\x0e\xe4\x93\x10"
                "\x47\xda\x80\x23\x0a\x3c\x09\xb3\xea\x7c\xab\x81\x03\x02\x18"
                "\x20\x82\x02\x03\xb8\xa1\x2b\x80\x20\xe4\xb5\xcf\x3e\xfd\xeb"
                "\xf6\x69\x12\x31\x57\x01\x25\x38\xdf\x6f\xff\xc4\xc6\x44\x24"
                "\x39\x00\x82\x92\x60\x6a\x72\x48\x67\x91\x15\x81\x03\x02\x18"
                "\x20\x82\x02\x03\xb8\xa2\x2b\x80\x20\x64\xb6\x9a\x8e\xca\xeb"
                "\x8f\x0b\xb0\x58\x87\xc1\x4c\xf3\x9e\x26\x0a\x5f\x7e\xc3\xcb"
                "\xbb\xf3\x8d\xf8\x70\xd9\xdc\x98\x53\x46\xd7\x81\x03\x04\x38"
                "\x00\x82\x02\x03\x98\xa3\x27\x80\x20\x34\x77\x63\xd7\x27\x76"
                "\x4d\x3a\x9b\x6c\xdb\x09\xed\xd8\x5f\xc2\x12\x9e\x9c\xc4\xc8"
                "\xa6\x62\xcf\x14\xde\x09\x30\x64\x8e\xf4\x84\x81\x03\x01\x00"
                "\x00\xa4\x27\x80\x20\xe9\x54\x85\xb7\x7d\xa1\x1f\x2f\xaa\x84"
                "\x72\x3f\x4e\x3f\x09\xa7\x49\xf2\x15\x2a\xe6\x13\x5b\x68\xb6"
                "\xe1\x98\xa6\x89\x76\x08\x05\x81\x03\x02\x00\x00"s;
            check(
                &thresh0,
                thresh0Msg,
                thresh0EncodedFulfillment,
                thresh0EncodedCondition,
                thresh0EncodedFingerprint);
        }
    }

    void
    testThresh59()
    {
        testcase("Thresh59");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * thresh0
        // ** Preim11Cond
        // ** Rsa12Cond
        // ** Ed13Cond
        // ** Prefix14Cond
        // ** Thresh21Cond
        // ** prefix1
        // *** prefix2
        // **** thresh3
        // ***** Preim5Cond
        // ***** Rsa6Cond
        // ***** Ed7Cond
        // ***** ed4
        // ** preim8
        // ** rsa9
        // ** ed10

        auto const ed4Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed4PublicKey{
            {0x26, 0x80, 0x85, 0x71, 0x79, 0x37, 0x27, 0xbd, 0x85, 0xaf, 0x22,
             0x49, 0x59, 0x42, 0x99, 0x5c, 0x9c, 0x5b, 0x9f, 0x99, 0x54, 0xb6,
             0xd4, 0xd1, 0x81, 0x94, 0x4c, 0x22, 0x53, 0x03, 0xc0, 0xec}};
        std::array<std::uint8_t, 64> const ed4Sig{
            {0x23, 0x8b, 0xb2, 0xc9, 0xde, 0xad, 0x1b, 0xb6, 0xce, 0x93, 0x9a,
             0x00, 0x47, 0x3d, 0x42, 0xc1, 0x30, 0x19, 0x95, 0x03, 0x55, 0x19,
             0x74, 0x85, 0xe9, 0xed, 0x92, 0xef, 0x22, 0xbd, 0x49, 0xe5, 0x44,
             0xa0, 0x7a, 0x41, 0x7d, 0xa7, 0xb0, 0x3a, 0x90, 0x1b, 0xa1, 0x2b,
             0xcc, 0x1d, 0x0a, 0x8b, 0x95, 0xc1, 0x3c, 0x05, 0x68, 0x26, 0x39,
             0xad, 0xe4, 0xd4, 0x75, 0xf0, 0xb5, 0x18, 0xbe, 0x01}};
        std::array<std::uint8_t, 32> const ed4SigningKey{
            {0x2a, 0x7a, 0x9a, 0x1f, 0xf1, 0x08, 0x8f, 0x8e, 0xef, 0x3a, 0x39,
             0xce, 0x13, 0xea, 0x08, 0x08, 0x8a, 0xf6, 0x06, 0x78, 0xd5, 0x3e,
             0x0b, 0x9c, 0x84, 0xfb, 0x39, 0x93, 0xd6, 0xfe, 0xa0, 0x3d}};
        (void)ed4SigningKey;
        auto const thresh3Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim5CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim5Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim5CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa6CondConditionFingerprint =
            "\xee\x75\xbe\xb3\x52\x54\xbd\x24\x06\x3f\xd9\x32\x48\x19\xe1"
            "\x5c\x70\x85\x92\x11\x6c\x3a\xc1\x4c\x9b\x83\xeb\x05\xa7\x59"
            "\xe2\xa0"s;
        Condition const Rsa6Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa6CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed7CondConditionFingerprint =
            "\x1e\x5a\xaf\x3e\x46\xf6\xd4\xdf\x4d\x70\xf0\xa1\xd1\x35\x6d"
            "\xf0\x8b\x86\x91\xac\xb2\xf2\x24\xf0\x1a\xd4\x23\xc0\x21\x8d"
            "\x42\xc0"s;
        Condition const Ed7Cond{Type::ed25519Sha256,
                                131072,
                                makeSlice(Ed7CondConditionFingerprint),
                                std::bitset<5>{0}};
        auto const prefix2Prefix = "P2"s;
        auto const prefix2Msg = "P1abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix2MaxMsgLength = 14;
        auto const prefix1Prefix = "P1"s;
        auto const prefix1Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix1MaxMsgLength = 14;
        auto const preim8Preimage = "I am root"s;
        auto const preim8Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const rsa9Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa9PublicKey{
            {0xb6, 0x7b, 0xe2, 0x98, 0x9f, 0xff, 0x6c, 0x37, 0xd0, 0xb6, 0x64,
             0x19, 0xfb, 0xa0, 0x21, 0x18, 0xe2, 0xc0, 0xd1, 0x92, 0xbd, 0x04,
             0xa6, 0xd2, 0xb4, 0x7e, 0xc6, 0x6a, 0x1a, 0x34, 0x20, 0x7b, 0xfe,
             0x84, 0xeb, 0xe8, 0xc1, 0x6f, 0xfd, 0xdc, 0x0a, 0xfe, 0x60, 0x55,
             0xb6, 0xfc, 0x86, 0x5a, 0x21, 0xbf, 0xf1, 0x39, 0xfa, 0xec, 0x42,
             0xca, 0x57, 0xb3, 0x3e, 0x3f, 0xe6, 0x26, 0x5a, 0xb7, 0x4a, 0x5f,
             0xbb, 0xb1, 0xf5, 0x91, 0x85, 0x92, 0x3e, 0x6a, 0x18, 0x48, 0x4d,
             0x9e, 0xdd, 0x08, 0x25, 0xa3, 0x3b, 0x3d, 0x75, 0x9a, 0xbe, 0xee,
             0x0d, 0x6e, 0xd2, 0x5d, 0xe2, 0xbd, 0xed, 0x45, 0x60, 0xef, 0xa0,
             0x37, 0xfd, 0xbb, 0xcf, 0x30, 0x97, 0xf1, 0x5b, 0xc8, 0x9c, 0x29,
             0x33, 0x67, 0x3e, 0x23, 0x33, 0x7f, 0x36, 0xd4, 0x75, 0x8b, 0xa1,
             0xcf, 0x9e, 0xe6, 0xc5, 0x63, 0x63, 0xb0, 0x3f, 0xa0, 0xc2, 0xa2,
             0x10, 0xc9, 0xb2, 0x6b, 0xaa, 0x67, 0xc9, 0xf5, 0xb8, 0xbf, 0x5b,
             0x97, 0xe5, 0x29, 0xf2, 0xbb, 0xc7, 0x22, 0x0f, 0x1f, 0xc1, 0xf6,
             0xca, 0x4a, 0x8a, 0x46, 0x89, 0xa0, 0xca, 0x4e, 0x49, 0x9d, 0xfc,
             0x23, 0xd3, 0xb4, 0xdb, 0xc6, 0x84, 0x45, 0xbd, 0x9f, 0x10, 0x86,
             0xe2, 0xf0, 0x47, 0x7b, 0x75, 0xbf, 0x25, 0x99, 0x02, 0x2c, 0xdb,
             0x6b, 0xd6, 0x2b, 0x67, 0x0d, 0xcd, 0x46, 0x63, 0xbd, 0xce, 0x1c,
             0xc5, 0x56, 0x63, 0x58, 0x5b, 0xc8, 0xb2, 0x58, 0x42, 0xf6, 0xaf,
             0xce, 0x47, 0xb2, 0xa9, 0x2a, 0x71, 0x8b, 0x82, 0xf4, 0x72, 0xff,
             0xef, 0xe7, 0xc1, 0x70, 0x12, 0xfa, 0xb8, 0xad, 0xb2, 0xfe, 0xa9,
             0x14, 0xe7, 0xc2, 0xec, 0x12, 0xbf, 0x29, 0x5a, 0x65, 0x91, 0x74,
             0x82, 0xd3, 0x77, 0x1f, 0x14, 0xbf, 0x5f, 0x41, 0x11, 0x6c, 0x7c,
             0x22, 0x70, 0x65}};
        std::array<std::uint8_t, 256> const rsa9Sig{
            {0x8f, 0x71, 0xfd, 0x45, 0xa7, 0x76, 0x10, 0x3e, 0x8d, 0xcb, 0xd8,
             0x25, 0xc0, 0x90, 0x99, 0xfb, 0x42, 0xf1, 0xfa, 0x77, 0xc1, 0x2e,
             0x24, 0x87, 0x83, 0x6a, 0x8f, 0x81, 0x97, 0xac, 0xa3, 0x03, 0x32,
             0x93, 0x9b, 0xc2, 0xc8, 0x64, 0x53, 0x2a, 0x01, 0x6b, 0x34, 0x23,
             0x5e, 0x0f, 0xe0, 0x63, 0x54, 0x1c, 0xce, 0xa0, 0xe0, 0x65, 0x3c,
             0xdb, 0x3e, 0xbe, 0x1a, 0x2a, 0x93, 0x39, 0x4f, 0x7d, 0xda, 0x6b,
             0x83, 0xb8, 0x60, 0x1d, 0x5c, 0x06, 0x0d, 0x02, 0xea, 0x88, 0x4f,
             0xea, 0xe0, 0x02, 0xb4, 0x40, 0xbe, 0xda, 0x62, 0xaf, 0x85, 0x4e,
             0xe9, 0xb8, 0xa4, 0xbe, 0x27, 0xad, 0x23, 0x80, 0x59, 0x2f, 0x11,
             0x93, 0xf5, 0x68, 0x82, 0x67, 0xe6, 0x73, 0x71, 0xa9, 0x55, 0x4a,
             0xb2, 0x0a, 0xec, 0xa0, 0x23, 0x11, 0x55, 0xfe, 0x75, 0x76, 0x9b,
             0xe4, 0x69, 0x5f, 0xe6, 0xae, 0x70, 0x44, 0xbb, 0xf9, 0x01, 0x2f,
             0xdc, 0x62, 0x2a, 0xad, 0x01, 0x7a, 0x82, 0xac, 0xb4, 0x78, 0x2a,
             0xdf, 0x3c, 0x88, 0x33, 0x83, 0x79, 0x80, 0xe7, 0xeb, 0xd3, 0x25,
             0xa1, 0x14, 0xb1, 0x0e, 0x8d, 0x1b, 0xad, 0x8f, 0xba, 0x92, 0xf1,
             0xc1, 0x13, 0xcc, 0xef, 0xe4, 0xe2, 0x21, 0xc5, 0xb2, 0x0e, 0xf8,
             0x9b, 0x8f, 0x62, 0xd5, 0x14, 0xc0, 0x09, 0x40, 0xa1, 0xf0, 0xa8,
             0x0b, 0xe6, 0x91, 0x8f, 0x09, 0xe6, 0xb3, 0xef, 0x6e, 0x38, 0x5b,
             0x38, 0xb3, 0x46, 0x65, 0x6f, 0x49, 0x95, 0x1d, 0xd8, 0xc6, 0xbd,
             0xda, 0x5e, 0x16, 0x28, 0x22, 0xa0, 0xaa, 0x9a, 0x50, 0x3a, 0xa3,
             0x20, 0x2f, 0xc2, 0x5e, 0x88, 0xf4, 0x23, 0xce, 0xaf, 0x4b, 0xfb,
             0x17, 0xa5, 0x64, 0x0c, 0x75, 0xd3, 0x65, 0x86, 0xbe, 0x74, 0x5e,
             0x9a, 0x50, 0x49, 0xc1, 0xf8, 0x0c, 0x34, 0x93, 0xbc, 0xab, 0x3a,
             0x5a, 0x10, 0xe9}};
        auto const ed10Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed10PublicKey{
            {0x7a, 0xdc, 0x65, 0x52, 0x0f, 0xca, 0x06, 0x72, 0x5c, 0xe4, 0x65,
             0x57, 0x82, 0x6d, 0x3f, 0x57, 0x1f, 0xc6, 0xc6, 0xe4, 0x5d, 0xaf,
             0x08, 0xda, 0xe2, 0x07, 0x02, 0xcb, 0x42, 0x3d, 0x2a, 0xd0}};
        std::array<std::uint8_t, 64> const ed10Sig{
            {0xf2, 0x7c, 0x5f, 0x61, 0xec, 0xbc, 0xc2, 0x8c, 0xad, 0xd0, 0xd3,
             0xcb, 0x89, 0xab, 0xac, 0xe4, 0x01, 0x6f, 0x90, 0x60, 0x6f, 0x89,
             0xc0, 0xd9, 0xca, 0x2b, 0x4b, 0xfd, 0x78, 0x80, 0xae, 0xf9, 0xd0,
             0x3f, 0x45, 0x7a, 0xb2, 0x26, 0x0c, 0xee, 0xc5, 0x06, 0x0e, 0x94,
             0x6b, 0xf8, 0xfe, 0x96, 0x4f, 0x0d, 0xa0, 0x2c, 0x66, 0x78, 0xa5,
             0x60, 0xfe, 0x47, 0x1e, 0xa9, 0x88, 0x76, 0x55, 0x03}};
        std::array<std::uint8_t, 32> const ed10SigningKey{
            {0x84, 0x04, 0xdd, 0x34, 0x6a, 0x4d, 0x40, 0xef, 0x70, 0xf7, 0xef,
             0x7f, 0x25, 0xf4, 0xd0, 0xa0, 0xa8, 0xad, 0xc1, 0x51, 0x1c, 0x16,
             0x57, 0x9d, 0x5e, 0xd9, 0xa6, 0x45, 0xda, 0xff, 0x5e, 0x1e}};
        (void)ed10SigningKey;
        auto const thresh0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim11CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim11Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim11CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa12CondConditionFingerprint =
            "\x38\xb9\xf0\xeb\x68\x8b\x9f\x55\x37\x9a\xec\x07\xd4\xa2\x13"
            "\xac\x34\xa1\x67\x31\x34\xea\xc2\x2f\xef\x13\xe3\x5c\xcf\x8f"
            "\x90\x1e"s;
        Condition const Rsa12Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa12CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed13CondConditionFingerprint =
            "\x7c\x54\x6a\x6d\x7f\x00\x52\x31\x03\xe7\xb4\x5b\x1c\x9f\x72"
            "\xeb\x3c\x18\x08\xa3\x24\xb2\x63\x5f\x77\x55\x4a\x42\xdb\x1e"
            "\xff\x1e"s;
        Condition const Ed13Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed13CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Prefix14CondConditionFingerprint =
            "\xeb\xc1\xd2\x9d\xdc\x9f\x6b\xb1\x62\x76\xa8\x69\xdf\x9f\xad"
            "\x31\x41\x34\xba\x9b\xa0\xc5\xea\x3a\x29\x49\x56\x30\x1e\xca"
            "\x51\xe6"s;
        Condition const Prefix14Cond{
            Type::prefixSha256,
            137258,
            makeSlice(Prefix14CondConditionFingerprint),
            std::bitset<5>{29}};
        auto const Thresh21CondConditionFingerprint =
            "\x0d\x91\x83\xba\xa1\x52\xe7\xdc\x99\x9e\x47\xcb\x56\x0f\x80"
            "\x5a\x71\xc0\x40\x40\x21\x2a\xdf\xbb\x77\xdf\x56\x17\x05\xd3"
            "\x28\x3f"s;
        Condition const Thresh21Cond{
            Type::thresholdSha256,
            276480,
            makeSlice(Thresh21CondConditionFingerprint),
            std::bitset<5>{25}};

        auto ed4 = std::make_unique<Ed25519>(ed4PublicKey, ed4Sig);
        std::vector<std::unique_ptr<Fulfillment>> thresh3Subfulfillments;
        thresh3Subfulfillments.emplace_back(std::move(ed4));
        std::vector<Condition> thresh3Subconditions{
            {Preim5Cond, Rsa6Cond, Ed7Cond}};
        auto thresh3 = std::make_unique<ThresholdSha256>(
            std::move(thresh3Subfulfillments), std::move(thresh3Subconditions));
        auto prefix2 = std::make_unique<PrefixSha256>(
            makeSlice(prefix2Prefix), prefix2MaxMsgLength, std::move(thresh3));
        auto prefix1 = std::make_unique<PrefixSha256>(
            makeSlice(prefix1Prefix), prefix1MaxMsgLength, std::move(prefix2));
        auto preim8 =
            std::make_unique<PreimageSha256>(makeSlice(preim8Preimage));
        auto rsa9 = std::make_unique<RsaSha256>(
            makeSlice(rsa9PublicKey), makeSlice(rsa9Sig));
        auto ed10 = std::make_unique<Ed25519>(ed10PublicKey, ed10Sig);
        std::vector<std::unique_ptr<Fulfillment>> thresh0Subfulfillments;
        thresh0Subfulfillments.emplace_back(std::move(prefix1));
        thresh0Subfulfillments.emplace_back(std::move(preim8));
        thresh0Subfulfillments.emplace_back(std::move(rsa9));
        thresh0Subfulfillments.emplace_back(std::move(ed10));
        std::vector<Condition> thresh0Subconditions{
            {Preim11Cond, Rsa12Cond, Ed13Cond, Prefix14Cond, Thresh21Cond}};
        ThresholdSha256 const thresh0(
            std::move(thresh0Subfulfillments), std::move(thresh0Subconditions));
        {
            auto const thresh0EncodedFulfillment =
                "\xa2\x82\x04\x59\xa0\x82\x03\x7f\xa0\x0b\x80\x09\x49\x20\x61"
                "\x6d\x20\x72\x6f\x6f\x74\xa1\x81\xfd\x80\x02\x50\x31\x81\x01"
                "\x0e\xa2\x81\xf3\xa1\x81\xf0\x80\x02\x50\x32\x81\x01\x0e\xa2"
                "\x81\xe6\xa2\x81\xe3\xa0\x66\xa4\x64\x80\x20\x26\x80\x85\x71"
                "\x79\x37\x27\xbd\x85\xaf\x22\x49\x59\x42\x99\x5c\x9c\x5b\x9f"
                "\x99\x54\xb6\xd4\xd1\x81\x94\x4c\x22\x53\x03\xc0\xec\x81\x40"
                "\x23\x8b\xb2\xc9\xde\xad\x1b\xb6\xce\x93\x9a\x00\x47\x3d\x42"
                "\xc1\x30\x19\x95\x03\x55\x19\x74\x85\xe9\xed\x92\xef\x22\xbd"
                "\x49\xe5\x44\xa0\x7a\x41\x7d\xa7\xb0\x3a\x90\x1b\xa1\x2b\xcc"
                "\x1d\x0a\x8b\x95\xc1\x3c\x05\x68\x26\x39\xad\xe4\xd4\x75\xf0"
                "\xb5\x18\xbe\x01\xa1\x79\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd"
                "\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33"
                "\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09"
                "\xa3\x27\x80\x20\xee\x75\xbe\xb3\x52\x54\xbd\x24\x06\x3f\xd9"
                "\x32\x48\x19\xe1\x5c\x70\x85\x92\x11\x6c\x3a\xc1\x4c\x9b\x83"
                "\xeb\x05\xa7\x59\xe2\xa0\x81\x03\x01\x00\x00\xa4\x27\x80\x20"
                "\x1e\x5a\xaf\x3e\x46\xf6\xd4\xdf\x4d\x70\xf0\xa1\xd1\x35\x6d"
                "\xf0\x8b\x86\x91\xac\xb2\xf2\x24\xf0\x1a\xd4\x23\xc0\x21\x8d"
                "\x42\xc0\x81\x03\x02\x00\x00\xa3\x82\x02\x08\x80\x82\x01\x00"
                "\xb6\x7b\xe2\x98\x9f\xff\x6c\x37\xd0\xb6\x64\x19\xfb\xa0\x21"
                "\x18\xe2\xc0\xd1\x92\xbd\x04\xa6\xd2\xb4\x7e\xc6\x6a\x1a\x34"
                "\x20\x7b\xfe\x84\xeb\xe8\xc1\x6f\xfd\xdc\x0a\xfe\x60\x55\xb6"
                "\xfc\x86\x5a\x21\xbf\xf1\x39\xfa\xec\x42\xca\x57\xb3\x3e\x3f"
                "\xe6\x26\x5a\xb7\x4a\x5f\xbb\xb1\xf5\x91\x85\x92\x3e\x6a\x18"
                "\x48\x4d\x9e\xdd\x08\x25\xa3\x3b\x3d\x75\x9a\xbe\xee\x0d\x6e"
                "\xd2\x5d\xe2\xbd\xed\x45\x60\xef\xa0\x37\xfd\xbb\xcf\x30\x97"
                "\xf1\x5b\xc8\x9c\x29\x33\x67\x3e\x23\x33\x7f\x36\xd4\x75\x8b"
                "\xa1\xcf\x9e\xe6\xc5\x63\x63\xb0\x3f\xa0\xc2\xa2\x10\xc9\xb2"
                "\x6b\xaa\x67\xc9\xf5\xb8\xbf\x5b\x97\xe5\x29\xf2\xbb\xc7\x22"
                "\x0f\x1f\xc1\xf6\xca\x4a\x8a\x46\x89\xa0\xca\x4e\x49\x9d\xfc"
                "\x23\xd3\xb4\xdb\xc6\x84\x45\xbd\x9f\x10\x86\xe2\xf0\x47\x7b"
                "\x75\xbf\x25\x99\x02\x2c\xdb\x6b\xd6\x2b\x67\x0d\xcd\x46\x63"
                "\xbd\xce\x1c\xc5\x56\x63\x58\x5b\xc8\xb2\x58\x42\xf6\xaf\xce"
                "\x47\xb2\xa9\x2a\x71\x8b\x82\xf4\x72\xff\xef\xe7\xc1\x70\x12"
                "\xfa\xb8\xad\xb2\xfe\xa9\x14\xe7\xc2\xec\x12\xbf\x29\x5a\x65"
                "\x91\x74\x82\xd3\x77\x1f\x14\xbf\x5f\x41\x11\x6c\x7c\x22\x70"
                "\x65\x81\x82\x01\x00\x8f\x71\xfd\x45\xa7\x76\x10\x3e\x8d\xcb"
                "\xd8\x25\xc0\x90\x99\xfb\x42\xf1\xfa\x77\xc1\x2e\x24\x87\x83"
                "\x6a\x8f\x81\x97\xac\xa3\x03\x32\x93\x9b\xc2\xc8\x64\x53\x2a"
                "\x01\x6b\x34\x23\x5e\x0f\xe0\x63\x54\x1c\xce\xa0\xe0\x65\x3c"
                "\xdb\x3e\xbe\x1a\x2a\x93\x39\x4f\x7d\xda\x6b\x83\xb8\x60\x1d"
                "\x5c\x06\x0d\x02\xea\x88\x4f\xea\xe0\x02\xb4\x40\xbe\xda\x62"
                "\xaf\x85\x4e\xe9\xb8\xa4\xbe\x27\xad\x23\x80\x59\x2f\x11\x93"
                "\xf5\x68\x82\x67\xe6\x73\x71\xa9\x55\x4a\xb2\x0a\xec\xa0\x23"
                "\x11\x55\xfe\x75\x76\x9b\xe4\x69\x5f\xe6\xae\x70\x44\xbb\xf9"
                "\x01\x2f\xdc\x62\x2a\xad\x01\x7a\x82\xac\xb4\x78\x2a\xdf\x3c"
                "\x88\x33\x83\x79\x80\xe7\xeb\xd3\x25\xa1\x14\xb1\x0e\x8d\x1b"
                "\xad\x8f\xba\x92\xf1\xc1\x13\xcc\xef\xe4\xe2\x21\xc5\xb2\x0e"
                "\xf8\x9b\x8f\x62\xd5\x14\xc0\x09\x40\xa1\xf0\xa8\x0b\xe6\x91"
                "\x8f\x09\xe6\xb3\xef\x6e\x38\x5b\x38\xb3\x46\x65\x6f\x49\x95"
                "\x1d\xd8\xc6\xbd\xda\x5e\x16\x28\x22\xa0\xaa\x9a\x50\x3a\xa3"
                "\x20\x2f\xc2\x5e\x88\xf4\x23\xce\xaf\x4b\xfb\x17\xa5\x64\x0c"
                "\x75\xd3\x65\x86\xbe\x74\x5e\x9a\x50\x49\xc1\xf8\x0c\x34\x93"
                "\xbc\xab\x3a\x5a\x10\xe9\xa4\x64\x80\x20\x7a\xdc\x65\x52\x0f"
                "\xca\x06\x72\x5c\xe4\x65\x57\x82\x6d\x3f\x57\x1f\xc6\xc6\xe4"
                "\x5d\xaf\x08\xda\xe2\x07\x02\xcb\x42\x3d\x2a\xd0\x81\x40\xf2"
                "\x7c\x5f\x61\xec\xbc\xc2\x8c\xad\xd0\xd3\xcb\x89\xab\xac\xe4"
                "\x01\x6f\x90\x60\x6f\x89\xc0\xd9\xca\x2b\x4b\xfd\x78\x80\xae"
                "\xf9\xd0\x3f\x45\x7a\xb2\x26\x0c\xee\xc5\x06\x0e\x94\x6b\xf8"
                "\xfe\x96\x4f\x0d\xa0\x2c\x66\x78\xa5\x60\xfe\x47\x1e\xa9\x88"
                "\x76\x55\x03\xa1\x81\xd3\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd"
                "\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33"
                "\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09"
                "\xa1\x2b\x80\x20\xeb\xc1\xd2\x9d\xdc\x9f\x6b\xb1\x62\x76\xa8"
                "\x69\xdf\x9f\xad\x31\x41\x34\xba\x9b\xa0\xc5\xea\x3a\x29\x49"
                "\x56\x30\x1e\xca\x51\xe6\x81\x03\x02\x18\x2a\x82\x02\x03\xb8"
                "\xa2\x2b\x80\x20\x0d\x91\x83\xba\xa1\x52\xe7\xdc\x99\x9e\x47"
                "\xcb\x56\x0f\x80\x5a\x71\xc0\x40\x40\x21\x2a\xdf\xbb\x77\xdf"
                "\x56\x17\x05\xd3\x28\x3f\x81\x03\x04\x38\x00\x82\x02\x03\x98"
                "\xa3\x27\x80\x20\x38\xb9\xf0\xeb\x68\x8b\x9f\x55\x37\x9a\xec"
                "\x07\xd4\xa2\x13\xac\x34\xa1\x67\x31\x34\xea\xc2\x2f\xef\x13"
                "\xe3\x5c\xcf\x8f\x90\x1e\x81\x03\x01\x00\x00\xa4\x27\x80\x20"
                "\x7c\x54\x6a\x6d\x7f\x00\x52\x31\x03\xe7\xb4\x5b\x1c\x9f\x72"
                "\xeb\x3c\x18\x08\xa3\x24\xb2\x63\x5f\x77\x55\x4a\x42\xdb\x1e"
                "\xff\x1e\x81\x03\x02\x00\x00"s;
            auto const thresh0EncodedCondition =
                "\xa2\x2b\x80\x20\x3b\x98\x73\x02\xd1\x64\x0f\xe6\xb4\x67\x1f"
                "\x37\x91\x78\x59\x0f\x4d\xca\x09\x9b\x17\xa3\xe3\x13\x41\x60"
                "\x1c\x06\xdb\xfb\xd1\x0f\x81\x03\x0a\x8c\x4a\x82\x02\x03\xd8"s;
            auto const thresh0EncodedFingerprint =
                "\x30\x82\x01\x80\x80\x01\x04\xa1\x82\x01\x79\xa0\x25\x80\x20"
                "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
                "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
                "\xeb\x4e\x81\x01\x09\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1"
                "\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21"
                "\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa1"
                "\x2b\x80\x20\x40\x29\x63\xcd\x81\x80\x8f\xa5\x93\x47\x29\x57"
                "\xa8\x64\x38\x12\xe7\x0e\xe4\x93\x10\x47\xda\x80\x23\x0a\x3c"
                "\x09\xb3\xea\x7c\xab\x81\x03\x02\x18\x20\x82\x02\x03\xb8\xa1"
                "\x2b\x80\x20\xeb\xc1\xd2\x9d\xdc\x9f\x6b\xb1\x62\x76\xa8\x69"
                "\xdf\x9f\xad\x31\x41\x34\xba\x9b\xa0\xc5\xea\x3a\x29\x49\x56"
                "\x30\x1e\xca\x51\xe6\x81\x03\x02\x18\x2a\x82\x02\x03\xb8\xa2"
                "\x2b\x80\x20\x0d\x91\x83\xba\xa1\x52\xe7\xdc\x99\x9e\x47\xcb"
                "\x56\x0f\x80\x5a\x71\xc0\x40\x40\x21\x2a\xdf\xbb\x77\xdf\x56"
                "\x17\x05\xd3\x28\x3f\x81\x03\x04\x38\x00\x82\x02\x03\x98\xa3"
                "\x27\x80\x20\x38\xb9\xf0\xeb\x68\x8b\x9f\x55\x37\x9a\xec\x07"
                "\xd4\xa2\x13\xac\x34\xa1\x67\x31\x34\xea\xc2\x2f\xef\x13\xe3"
                "\x5c\xcf\x8f\x90\x1e\x81\x03\x01\x00\x00\xa3\x27\x80\x20\xe5"
                "\x15\x0a\xbd\xf6\x06\xbe\xaa\x6c\x81\xf1\x88\x7e\x70\x64\x51"
                "\xeb\x6f\x70\xb1\xdd\xc5\xf1\x20\x53\xf7\xcb\x9f\x7f\xc7\xe4"
                "\x52\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x00\x8b\xe6\x62\xd4"
                "\x30\x65\x1e\x40\xb3\x23\x05\x52\x3a\xf3\x16\xda\x09\xbe\x79"
                "\x5f\x41\xc9\x03\x93\x34\x5b\x7c\x24\x87\x62\xfa\x81\x03\x02"
                "\x00\x00\xa4\x27\x80\x20\x7c\x54\x6a\x6d\x7f\x00\x52\x31\x03"
                "\xe7\xb4\x5b\x1c\x9f\x72\xeb\x3c\x18\x08\xa3\x24\xb2\x63\x5f"
                "\x77\x55\x4a\x42\xdb\x1e\xff\x1e\x81\x03\x02\x00\x00"s;
            check(
                &thresh0,
                thresh0Msg,
                thresh0EncodedFulfillment,
                thresh0EncodedCondition,
                thresh0EncodedFingerprint);
        }
    }

    void
    testThresh60()
    {
        testcase("Thresh60");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * thresh0
        // ** Preim27Cond
        // ** Rsa28Cond
        // ** Ed29Cond
        // ** prefix1
        // *** prefix2
        // **** thresh3
        // ***** Preim10Cond
        // ***** Rsa11Cond
        // ***** Ed12Cond
        // ***** ed4
        // ***** thresh5
        // ****** Preim7Cond
        // ****** Rsa8Cond
        // ****** Ed9Cond
        // ****** ed6
        // ** prefix13
        // *** prefix14
        // **** thresh15
        // ***** Preim22Cond
        // ***** Rsa23Cond
        // ***** Ed24Cond
        // ***** ed16
        // ***** thresh17
        // ****** Preim19Cond
        // ****** Rsa20Cond
        // ****** Ed21Cond
        // ****** ed18
        // ** thresh25
        // *** ed26

        auto const ed4Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed4PublicKey{
            {0x26, 0x80, 0x85, 0x71, 0x79, 0x37, 0x27, 0xbd, 0x85, 0xaf, 0x22,
             0x49, 0x59, 0x42, 0x99, 0x5c, 0x9c, 0x5b, 0x9f, 0x99, 0x54, 0xb6,
             0xd4, 0xd1, 0x81, 0x94, 0x4c, 0x22, 0x53, 0x03, 0xc0, 0xec}};
        std::array<std::uint8_t, 64> const ed4Sig{
            {0x23, 0x8b, 0xb2, 0xc9, 0xde, 0xad, 0x1b, 0xb6, 0xce, 0x93, 0x9a,
             0x00, 0x47, 0x3d, 0x42, 0xc1, 0x30, 0x19, 0x95, 0x03, 0x55, 0x19,
             0x74, 0x85, 0xe9, 0xed, 0x92, 0xef, 0x22, 0xbd, 0x49, 0xe5, 0x44,
             0xa0, 0x7a, 0x41, 0x7d, 0xa7, 0xb0, 0x3a, 0x90, 0x1b, 0xa1, 0x2b,
             0xcc, 0x1d, 0x0a, 0x8b, 0x95, 0xc1, 0x3c, 0x05, 0x68, 0x26, 0x39,
             0xad, 0xe4, 0xd4, 0x75, 0xf0, 0xb5, 0x18, 0xbe, 0x01}};
        std::array<std::uint8_t, 32> const ed4SigningKey{
            {0x2a, 0x7a, 0x9a, 0x1f, 0xf1, 0x08, 0x8f, 0x8e, 0xef, 0x3a, 0x39,
             0xce, 0x13, 0xea, 0x08, 0x08, 0x8a, 0xf6, 0x06, 0x78, 0xd5, 0x3e,
             0x0b, 0x9c, 0x84, 0xfb, 0x39, 0x93, 0xd6, 0xfe, 0xa0, 0x3d}};
        (void)ed4SigningKey;
        auto const ed6Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed6PublicKey{
            {0xa0, 0x45, 0x26, 0xcf, 0xee, 0x7e, 0xda, 0x68, 0xd9, 0x70, 0x23,
             0xac, 0x68, 0x48, 0x9e, 0x20, 0xa4, 0x5e, 0xf8, 0x51, 0xcb, 0xfe,
             0x72, 0xc1, 0x11, 0x5d, 0x25, 0x9c, 0xbc, 0xfd, 0xbb, 0x8b}};
        std::array<std::uint8_t, 64> const ed6Sig{
            {0xfb, 0xc0, 0xf1, 0x77, 0xf4, 0x14, 0xdf, 0xb2, 0x32, 0xc8, 0x99,
             0xc7, 0x9a, 0x9d, 0xe0, 0x4a, 0x03, 0x2d, 0xf5, 0xc9, 0xde, 0x46,
             0xda, 0x77, 0x52, 0x24, 0x22, 0xef, 0xfb, 0x93, 0x63, 0xb1, 0x05,
             0x36, 0x57, 0x4c, 0x78, 0xbc, 0x78, 0x6d, 0x20, 0x08, 0xbd, 0x75,
             0xc3, 0x1e, 0xe0, 0x29, 0x24, 0xde, 0xa7, 0x03, 0xd3, 0xad, 0x5d,
             0x7c, 0x31, 0x05, 0x83, 0xd0, 0xa4, 0xed, 0x95, 0x07}};
        std::array<std::uint8_t, 32> const ed6SigningKey{
            {0x8f, 0xac, 0x15, 0x02, 0xce, 0xb4, 0x10, 0x27, 0x56, 0x91, 0x2b,
             0xd0, 0x57, 0xe7, 0x6c, 0xe0, 0xc5, 0x46, 0x65, 0x38, 0xf0, 0xc8,
             0x09, 0xe0, 0xb4, 0x57, 0xfb, 0x11, 0xfc, 0x00, 0xe9, 0xdf}};
        (void)ed6SigningKey;
        auto const thresh5Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim7CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim7Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim7CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa8CondConditionFingerprint =
            "\xd1\xb5\x1d\x35\x99\x9d\xb4\xc1\xaa\x81\x4d\xd7\x0e\xa9\x2a"
            "\x20\x7f\xe5\x5c\x75\xe8\x57\x8b\xbf\xe8\xd7\x1c\x7e\xb2\xbc"
            "\x91\x16"s;
        Condition const Rsa8Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa8CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed9CondConditionFingerprint =
            "\x92\xfa\xfc\xc6\x2f\xe2\x8d\x8d\x25\x7c\xd4\x46\xab\xea\x82"
            "\xd0\x3f\x36\xbe\x1d\x11\x2b\xa0\xfe\xfe\xd4\x00\xd5\x7d\x9b"
            "\xf6\xc9"s;
        Condition const Ed9Cond{Type::ed25519Sha256,
                                131072,
                                makeSlice(Ed9CondConditionFingerprint),
                                std::bitset<5>{0}};
        auto const thresh3Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim10CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim10Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim10CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa11CondConditionFingerprint =
            "\xaf\x93\xfd\x22\x45\xc2\x08\xab\x43\xf7\x45\x56\x63\xec\xaf"
            "\x15\x33\xa0\x2a\xb4\x9e\x15\xb4\x6e\xda\x87\x35\xde\x09\x4b"
            "\x06\x31"s;
        Condition const Rsa11Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa11CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed12CondConditionFingerprint =
            "\x55\xcc\xd1\xa2\x2c\x90\x8d\xe3\x2e\x42\xd4\xe0\x65\xb2\xf7"
            "\xda\xc0\x07\x1e\xd3\x23\x0f\xfe\x78\x13\xa2\x86\x61\xc4\x34"
            "\x28\x50"s;
        Condition const Ed12Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed12CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const prefix2Prefix = "P2"s;
        auto const prefix2Msg = "P1abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix2MaxMsgLength = 14;
        auto const prefix1Prefix = "P1"s;
        auto const prefix1Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix1MaxMsgLength = 14;
        auto const ed16Msg = "P14P13abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed16PublicKey{
            {0x50, 0x5a, 0xcb, 0xfd, 0xac, 0xce, 0x8b, 0x6f, 0xeb, 0x52, 0x06,
             0x75, 0xb8, 0x72, 0x9d, 0x94, 0x62, 0xdc, 0xe4, 0x11, 0x24, 0xd0,
             0xa3, 0x35, 0x47, 0x20, 0x02, 0xd5, 0xf7, 0x3f, 0x9c, 0x93}};
        std::array<std::uint8_t, 64> const ed16Sig{
            {0x34, 0x3f, 0xf1, 0xb4, 0x3c, 0x0d, 0x27, 0x82, 0xf9, 0xea, 0x84,
             0xf4, 0x21, 0x39, 0x58, 0xf7, 0x53, 0xe1, 0x19, 0x65, 0x8a, 0x7c,
             0x90, 0x42, 0x60, 0x16, 0xc7, 0x53, 0xfa, 0x8f, 0x50, 0x2c, 0x4b,
             0x00, 0x15, 0x17, 0x30, 0x1c, 0x2a, 0xc9, 0xf9, 0xe7, 0xe6, 0x83,
             0x94, 0x43, 0xad, 0x6f, 0x3f, 0x4f, 0xec, 0x09, 0x21, 0xed, 0x48,
             0x2c, 0x7f, 0xd9, 0x64, 0x23, 0xa7, 0x69, 0x58, 0x07}};
        std::array<std::uint8_t, 32> const ed16SigningKey{
            {0xb7, 0xbd, 0x93, 0x4b, 0x03, 0x39, 0xf8, 0x6f, 0x47, 0x66, 0x7f,
             0xd4, 0x4f, 0x94, 0x32, 0xe6, 0xb2, 0x70, 0x9c, 0x2c, 0x64, 0x92,
             0xc4, 0xb1, 0xdd, 0x04, 0x6d, 0x00, 0x92, 0x41, 0xe9, 0x41}};
        (void)ed16SigningKey;
        auto const ed18Msg = "P14P13abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed18PublicKey{
            {0x3b, 0x07, 0x0f, 0xe5, 0x29, 0x34, 0xd9, 0x17, 0xf5, 0x06, 0x00,
             0xb8, 0x87, 0x2f, 0xcf, 0x89, 0x52, 0x70, 0xcc, 0x04, 0x92, 0xe1,
             0x67, 0xcb, 0xba, 0xbb, 0x10, 0xa6, 0x2d, 0x06, 0xa4, 0x6b}};
        std::array<std::uint8_t, 64> const ed18Sig{
            {0xb7, 0x54, 0x1c, 0xd2, 0x7a, 0x9a, 0x47, 0x24, 0xf5, 0x88, 0xc6,
             0x1d, 0x4f, 0xc1, 0xab, 0x44, 0xe6, 0x2c, 0x76, 0x87, 0x82, 0x18,
             0x8f, 0x6a, 0x23, 0x7d, 0xf1, 0x8f, 0x17, 0x89, 0xc5, 0x7a, 0xb4,
             0xe9, 0xe1, 0x9f, 0x6c, 0x6e, 0x4b, 0x32, 0xca, 0x03, 0x1d, 0xd4,
             0x89, 0x45, 0x2f, 0xb6, 0x98, 0x21, 0xc9, 0xce, 0xb5, 0x60, 0x72,
             0xc2, 0xb1, 0x74, 0x8e, 0x9a, 0xf9, 0xf0, 0xe6, 0x05}};
        std::array<std::uint8_t, 32> const ed18SigningKey{
            {0x59, 0x73, 0xbb, 0x41, 0xb0, 0xe0, 0xce, 0xc2, 0xa9, 0x85, 0xaa,
             0x05, 0xa4, 0x7e, 0x3b, 0x51, 0x09, 0x8d, 0x3e, 0x47, 0xb7, 0x75,
             0xda, 0x81, 0x39, 0xa0, 0xe1, 0xd5, 0x9f, 0xb0, 0x9c, 0x5a}};
        (void)ed18SigningKey;
        auto const thresh17Msg = "P14P13abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim19CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim19Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim19CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa20CondConditionFingerprint =
            "\x8d\xb0\x2c\xb1\x28\xc3\xf4\x97\x50\x84\x64\x57\xca\xf4\x9d"
            "\x63\x08\x73\xfc\xde\x2f\x90\xf0\xf2\xec\x79\xa9\xc6\xa3\xf1"
            "\x33\xfd"s;
        Condition const Rsa20Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa20CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed21CondConditionFingerprint =
            "\x95\x3c\x86\x65\x91\x76\x69\x6b\x72\x61\xaa\x76\x15\x2a\xd7"
            "\x25\x4f\x32\xb7\x73\x7a\xb2\x49\x0c\x0b\xdf\xb5\x4e\x4a\x8b"
            "\xf7\x65"s;
        Condition const Ed21Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed21CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const thresh15Msg = "P14P13abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim22CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim22Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim22CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa23CondConditionFingerprint =
            "\x4a\x64\xbf\x23\xa9\x2b\xec\x55\x00\x3d\x55\xf5\xbf\x3f\x26"
            "\x49\x18\xbb\xe0\xda\xf8\x0c\xf4\x5c\x8a\x33\x74\xb6\x58\xa4"
            "\x38\x30"s;
        Condition const Rsa23Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa23CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed24CondConditionFingerprint =
            "\x6b\xf3\xe3\x0f\x92\x6d\x45\x8d\xae\xd2\x8a\x2a\x3e\x53\x37"
            "\x1f\x57\x82\x21\x60\xe4\x5b\x88\x9a\x9d\x13\xa2\x56\x13\x88"
            "\x9e\x21"s;
        Condition const Ed24Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed24CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const prefix14Prefix = "P14"s;
        auto const prefix14Msg = "P13abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix14MaxMsgLength = 14;
        auto const prefix13Prefix = "P13"s;
        auto const prefix13Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix13MaxMsgLength = 14;
        auto const ed26Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed26PublicKey{
            {0x15, 0x24, 0x2d, 0xe4, 0x7b, 0xab, 0xdb, 0x14, 0x1b, 0x6c, 0x2a,
             0x2d, 0x24, 0x68, 0x71, 0xc8, 0xab, 0x55, 0xd6, 0xad, 0xc4, 0x47,
             0x6b, 0x52, 0xea, 0x79, 0x81, 0x91, 0xe7, 0x8f, 0xc5, 0x49}};
        std::array<std::uint8_t, 64> const ed26Sig{
            {0x44, 0xeb, 0x07, 0x36, 0xc3, 0xf5, 0xf5, 0xe1, 0xd8, 0xff, 0x39,
             0x35, 0xfe, 0xe5, 0x56, 0x49, 0xbc, 0x49, 0x45, 0x45, 0x8b, 0xa0,
             0x3c, 0x74, 0xda, 0x84, 0x9b, 0x74, 0x36, 0x08, 0x41, 0x50, 0xea,
             0x6f, 0x42, 0xe4, 0x93, 0x61, 0x42, 0xea, 0xcb, 0x86, 0xa9, 0x75,
             0x8d, 0xe0, 0x99, 0x07, 0xb5, 0x85, 0x1f, 0xe1, 0xdf, 0x75, 0x03,
             0xe3, 0xff, 0x3d, 0xc9, 0x04, 0x67, 0x4e, 0x6a, 0x00}};
        std::array<std::uint8_t, 32> const ed26SigningKey{
            {0x15, 0x75, 0x2c, 0x00, 0xd7, 0xc6, 0x43, 0xee, 0xa1, 0x22, 0x0b,
             0xf0, 0x5a, 0xf5, 0xcd, 0xf6, 0xa2, 0xc0, 0x16, 0x5d, 0x4c, 0x2a,
             0x5c, 0x57, 0x1e, 0xbf, 0x19, 0x5a, 0xc7, 0xc9, 0xf9, 0x5a}};
        (void)ed26SigningKey;
        auto const thresh25Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const thresh0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim27CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim27Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim27CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa28CondConditionFingerprint =
            "\x58\xac\x94\x55\x27\x79\x7a\x0c\xac\x84\x2d\x5c\x13\x32\xee"
            "\x84\x25\xb8\xb8\xec\x25\x0d\x40\xee\xc0\xd4\x79\x18\x3f\xc6"
            "\xbc\xd7"s;
        Condition const Rsa28Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa28CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed29CondConditionFingerprint =
            "\xc5\x39\xb2\xc7\xc4\x92\x8a\x29\xf3\x72\xb4\x6c\xa5\x0d\x8c"
            "\xbe\x43\xda\xc9\xac\x6c\x26\x7c\x44\xb9\x3f\xee\x40\xcc\x8e"
            "\x41\x3c"s;
        Condition const Ed29Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed29CondConditionFingerprint),
                                 std::bitset<5>{0}};

        auto ed4 = std::make_unique<Ed25519>(ed4PublicKey, ed4Sig);
        auto ed6 = std::make_unique<Ed25519>(ed6PublicKey, ed6Sig);
        std::vector<std::unique_ptr<Fulfillment>> thresh5Subfulfillments;
        thresh5Subfulfillments.emplace_back(std::move(ed6));
        std::vector<Condition> thresh5Subconditions{
            {Preim7Cond, Rsa8Cond, Ed9Cond}};
        auto thresh5 = std::make_unique<ThresholdSha256>(
            std::move(thresh5Subfulfillments), std::move(thresh5Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh3Subfulfillments;
        thresh3Subfulfillments.emplace_back(std::move(ed4));
        thresh3Subfulfillments.emplace_back(std::move(thresh5));
        std::vector<Condition> thresh3Subconditions{
            {Preim10Cond, Rsa11Cond, Ed12Cond}};
        auto thresh3 = std::make_unique<ThresholdSha256>(
            std::move(thresh3Subfulfillments), std::move(thresh3Subconditions));
        auto prefix2 = std::make_unique<PrefixSha256>(
            makeSlice(prefix2Prefix), prefix2MaxMsgLength, std::move(thresh3));
        auto prefix1 = std::make_unique<PrefixSha256>(
            makeSlice(prefix1Prefix), prefix1MaxMsgLength, std::move(prefix2));
        auto ed16 = std::make_unique<Ed25519>(ed16PublicKey, ed16Sig);
        auto ed18 = std::make_unique<Ed25519>(ed18PublicKey, ed18Sig);
        std::vector<std::unique_ptr<Fulfillment>> thresh17Subfulfillments;
        thresh17Subfulfillments.emplace_back(std::move(ed18));
        std::vector<Condition> thresh17Subconditions{
            {Preim19Cond, Rsa20Cond, Ed21Cond}};
        auto thresh17 = std::make_unique<ThresholdSha256>(
            std::move(thresh17Subfulfillments),
            std::move(thresh17Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh15Subfulfillments;
        thresh15Subfulfillments.emplace_back(std::move(ed16));
        thresh15Subfulfillments.emplace_back(std::move(thresh17));
        std::vector<Condition> thresh15Subconditions{
            {Preim22Cond, Rsa23Cond, Ed24Cond}};
        auto thresh15 = std::make_unique<ThresholdSha256>(
            std::move(thresh15Subfulfillments),
            std::move(thresh15Subconditions));
        auto prefix14 = std::make_unique<PrefixSha256>(
            makeSlice(prefix14Prefix),
            prefix14MaxMsgLength,
            std::move(thresh15));
        auto prefix13 = std::make_unique<PrefixSha256>(
            makeSlice(prefix13Prefix),
            prefix13MaxMsgLength,
            std::move(prefix14));
        auto ed26 = std::make_unique<Ed25519>(ed26PublicKey, ed26Sig);
        std::vector<std::unique_ptr<Fulfillment>> thresh25Subfulfillments;
        thresh25Subfulfillments.emplace_back(std::move(ed26));
        std::vector<Condition> thresh25Subconditions{};
        auto thresh25 = std::make_unique<ThresholdSha256>(
            std::move(thresh25Subfulfillments),
            std::move(thresh25Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh0Subfulfillments;
        thresh0Subfulfillments.emplace_back(std::move(prefix1));
        thresh0Subfulfillments.emplace_back(std::move(prefix13));
        thresh0Subfulfillments.emplace_back(std::move(thresh25));
        std::vector<Condition> thresh0Subconditions{
            {Preim27Cond, Rsa28Cond, Ed29Cond}};
        ThresholdSha256 const thresh0(
            std::move(thresh0Subfulfillments), std::move(thresh0Subconditions));
        {
            auto const thresh0EncodedFulfillment =
                "\xa2\x82\x04\xc7\xa0\x82\x04\x48\xa1\x82\x01\xe9\x80\x02\x50"
                "\x31\x81\x01\x0e\xa2\x82\x01\xde\xa1\x82\x01\xda\x80\x02\x50"
                "\x32\x81\x01\x0e\xa2\x82\x01\xcf\xa2\x82\x01\xcb\xa0\x82\x01"
                "\x4c\xa2\x81\xe3\xa0\x66\xa4\x64\x80\x20\xa0\x45\x26\xcf\xee"
                "\x7e\xda\x68\xd9\x70\x23\xac\x68\x48\x9e\x20\xa4\x5e\xf8\x51"
                "\xcb\xfe\x72\xc1\x11\x5d\x25\x9c\xbc\xfd\xbb\x8b\x81\x40\xfb"
                "\xc0\xf1\x77\xf4\x14\xdf\xb2\x32\xc8\x99\xc7\x9a\x9d\xe0\x4a"
                "\x03\x2d\xf5\xc9\xde\x46\xda\x77\x52\x24\x22\xef\xfb\x93\x63"
                "\xb1\x05\x36\x57\x4c\x78\xbc\x78\x6d\x20\x08\xbd\x75\xc3\x1e"
                "\xe0\x29\x24\xde\xa7\x03\xd3\xad\x5d\x7c\x31\x05\x83\xd0\xa4"
                "\xed\x95\x07\xa1\x79\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1"
                "\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21"
                "\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa3"
                "\x27\x80\x20\xd1\xb5\x1d\x35\x99\x9d\xb4\xc1\xaa\x81\x4d\xd7"
                "\x0e\xa9\x2a\x20\x7f\xe5\x5c\x75\xe8\x57\x8b\xbf\xe8\xd7\x1c"
                "\x7e\xb2\xbc\x91\x16\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x92"
                "\xfa\xfc\xc6\x2f\xe2\x8d\x8d\x25\x7c\xd4\x46\xab\xea\x82\xd0"
                "\x3f\x36\xbe\x1d\x11\x2b\xa0\xfe\xfe\xd4\x00\xd5\x7d\x9b\xf6"
                "\xc9\x81\x03\x02\x00\x00\xa4\x64\x80\x20\x26\x80\x85\x71\x79"
                "\x37\x27\xbd\x85\xaf\x22\x49\x59\x42\x99\x5c\x9c\x5b\x9f\x99"
                "\x54\xb6\xd4\xd1\x81\x94\x4c\x22\x53\x03\xc0\xec\x81\x40\x23"
                "\x8b\xb2\xc9\xde\xad\x1b\xb6\xce\x93\x9a\x00\x47\x3d\x42\xc1"
                "\x30\x19\x95\x03\x55\x19\x74\x85\xe9\xed\x92\xef\x22\xbd\x49"
                "\xe5\x44\xa0\x7a\x41\x7d\xa7\xb0\x3a\x90\x1b\xa1\x2b\xcc\x1d"
                "\x0a\x8b\x95\xc1\x3c\x05\x68\x26\x39\xad\xe4\xd4\x75\xf0\xb5"
                "\x18\xbe\x01\xa1\x79\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1"
                "\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21"
                "\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa3"
                "\x27\x80\x20\xaf\x93\xfd\x22\x45\xc2\x08\xab\x43\xf7\x45\x56"
                "\x63\xec\xaf\x15\x33\xa0\x2a\xb4\x9e\x15\xb4\x6e\xda\x87\x35"
                "\xde\x09\x4b\x06\x31\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x55"
                "\xcc\xd1\xa2\x2c\x90\x8d\xe3\x2e\x42\xd4\xe0\x65\xb2\xf7\xda"
                "\xc0\x07\x1e\xd3\x23\x0f\xfe\x78\x13\xa2\x86\x61\xc4\x34\x28"
                "\x50\x81\x03\x02\x00\x00\xa1\x82\x01\xeb\x80\x03\x50\x31\x33"
                "\x81\x01\x0e\xa2\x82\x01\xdf\xa1\x82\x01\xdb\x80\x03\x50\x31"
                "\x34\x81\x01\x0e\xa2\x82\x01\xcf\xa2\x82\x01\xcb\xa0\x82\x01"
                "\x4c\xa2\x81\xe3\xa0\x66\xa4\x64\x80\x20\x3b\x07\x0f\xe5\x29"
                "\x34\xd9\x17\xf5\x06\x00\xb8\x87\x2f\xcf\x89\x52\x70\xcc\x04"
                "\x92\xe1\x67\xcb\xba\xbb\x10\xa6\x2d\x06\xa4\x6b\x81\x40\xb7"
                "\x54\x1c\xd2\x7a\x9a\x47\x24\xf5\x88\xc6\x1d\x4f\xc1\xab\x44"
                "\xe6\x2c\x76\x87\x82\x18\x8f\x6a\x23\x7d\xf1\x8f\x17\x89\xc5"
                "\x7a\xb4\xe9\xe1\x9f\x6c\x6e\x4b\x32\xca\x03\x1d\xd4\x89\x45"
                "\x2f\xb6\x98\x21\xc9\xce\xb5\x60\x72\xc2\xb1\x74\x8e\x9a\xf9"
                "\xf0\xe6\x05\xa1\x79\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1"
                "\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21"
                "\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa3"
                "\x27\x80\x20\x8d\xb0\x2c\xb1\x28\xc3\xf4\x97\x50\x84\x64\x57"
                "\xca\xf4\x9d\x63\x08\x73\xfc\xde\x2f\x90\xf0\xf2\xec\x79\xa9"
                "\xc6\xa3\xf1\x33\xfd\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x95"
                "\x3c\x86\x65\x91\x76\x69\x6b\x72\x61\xaa\x76\x15\x2a\xd7\x25"
                "\x4f\x32\xb7\x73\x7a\xb2\x49\x0c\x0b\xdf\xb5\x4e\x4a\x8b\xf7"
                "\x65\x81\x03\x02\x00\x00\xa4\x64\x80\x20\x50\x5a\xcb\xfd\xac"
                "\xce\x8b\x6f\xeb\x52\x06\x75\xb8\x72\x9d\x94\x62\xdc\xe4\x11"
                "\x24\xd0\xa3\x35\x47\x20\x02\xd5\xf7\x3f\x9c\x93\x81\x40\x34"
                "\x3f\xf1\xb4\x3c\x0d\x27\x82\xf9\xea\x84\xf4\x21\x39\x58\xf7"
                "\x53\xe1\x19\x65\x8a\x7c\x90\x42\x60\x16\xc7\x53\xfa\x8f\x50"
                "\x2c\x4b\x00\x15\x17\x30\x1c\x2a\xc9\xf9\xe7\xe6\x83\x94\x43"
                "\xad\x6f\x3f\x4f\xec\x09\x21\xed\x48\x2c\x7f\xd9\x64\x23\xa7"
                "\x69\x58\x07\xa1\x79\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1"
                "\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21"
                "\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa3"
                "\x27\x80\x20\x4a\x64\xbf\x23\xa9\x2b\xec\x55\x00\x3d\x55\xf5"
                "\xbf\x3f\x26\x49\x18\xbb\xe0\xda\xf8\x0c\xf4\x5c\x8a\x33\x74"
                "\xb6\x58\xa4\x38\x30\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x6b"
                "\xf3\xe3\x0f\x92\x6d\x45\x8d\xae\xd2\x8a\x2a\x3e\x53\x37\x1f"
                "\x57\x82\x21\x60\xe4\x5b\x88\x9a\x9d\x13\xa2\x56\x13\x88\x9e"
                "\x21\x81\x03\x02\x00\x00\xa2\x6a\xa0\x66\xa4\x64\x80\x20\x15"
                "\x24\x2d\xe4\x7b\xab\xdb\x14\x1b\x6c\x2a\x2d\x24\x68\x71\xc8"
                "\xab\x55\xd6\xad\xc4\x47\x6b\x52\xea\x79\x81\x91\xe7\x8f\xc5"
                "\x49\x81\x40\x44\xeb\x07\x36\xc3\xf5\xf5\xe1\xd8\xff\x39\x35"
                "\xfe\xe5\x56\x49\xbc\x49\x45\x45\x8b\xa0\x3c\x74\xda\x84\x9b"
                "\x74\x36\x08\x41\x50\xea\x6f\x42\xe4\x93\x61\x42\xea\xcb\x86"
                "\xa9\x75\x8d\xe0\x99\x07\xb5\x85\x1f\xe1\xdf\x75\x03\xe3\xff"
                "\x3d\xc9\x04\x67\x4e\x6a\x00\xa1\x00\xa1\x79\xa0\x25\x80\x20"
                "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
                "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
                "\xeb\x4e\x81\x01\x09\xa3\x27\x80\x20\x58\xac\x94\x55\x27\x79"
                "\x7a\x0c\xac\x84\x2d\x5c\x13\x32\xee\x84\x25\xb8\xb8\xec\x25"
                "\x0d\x40\xee\xc0\xd4\x79\x18\x3f\xc6\xbc\xd7\x81\x03\x01\x00"
                "\x00\xa4\x27\x80\x20\xc5\x39\xb2\xc7\xc4\x92\x8a\x29\xf3\x72"
                "\xb4\x6c\xa5\x0d\x8c\xbe\x43\xda\xc9\xac\x6c\x26\x7c\x44\xb9"
                "\x3f\xee\x40\xcc\x8e\x41\x3c\x81\x03\x02\x00\x00"s;
            auto const thresh0EncodedCondition =
                "\xa2\x2b\x80\x20\xf9\xad\x40\xe7\xda\xa9\x93\xce\xa4\x35\x73"
                "\x85\x8c\x59\xc4\xd0\xf7\x62\xe6\x2f\x48\x82\x11\x8e\x5b\xdf"
                "\x64\xde\x55\x6e\x8b\x2a\x81\x03\x0a\x74\x42\x82\x02\x03\xd8"s;
            auto const thresh0EncodedFingerprint =
                "\x30\x82\x01\x07\x80\x01\x03\xa1\x82\x01\x00\xa0\x25\x80\x20"
                "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
                "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
                "\xeb\x4e\x81\x01\x09\xa1\x2b\x80\x20\x16\xae\xfb\xf0\x3e\xc8"
                "\x19\xe2\x09\x1a\x47\x82\xe7\xfd\xd2\xda\xfb\xbf\x17\xe9\x6a"
                "\xe4\x58\x5d\x83\x7f\xde\xec\x15\x56\x5a\x62\x81\x03\x04\x2c"
                "\x20\x82\x02\x03\xb8\xa1\x2b\x80\x20\x6a\x28\x72\x95\x60\x5c"
                "\x29\xdf\x2e\x3d\x1c\x34\xec\x11\x13\xa3\x2b\x4d\x1c\x74\xc3"
                "\xbb\x32\x40\xca\x46\x35\x5e\x5b\x8f\x5e\x3d\x81\x03\x04\x2c"
                "\x22\x82\x02\x03\xb8\xa2\x2b\x80\x20\x9e\x49\xa3\x57\x1b\x0d"
                "\xe2\x18\x99\xd2\xed\x0a\x78\x6e\x51\x57\x7f\x79\xbe\x26\xa0"
                "\x31\xd8\xa4\x0a\xc1\xa5\xa3\x7d\xef\x3c\x94\x81\x03\x02\x04"
                "\x00\x82\x02\x03\x08\xa3\x27\x80\x20\x58\xac\x94\x55\x27\x79"
                "\x7a\x0c\xac\x84\x2d\x5c\x13\x32\xee\x84\x25\xb8\xb8\xec\x25"
                "\x0d\x40\xee\xc0\xd4\x79\x18\x3f\xc6\xbc\xd7\x81\x03\x01\x00"
                "\x00\xa4\x27\x80\x20\xc5\x39\xb2\xc7\xc4\x92\x8a\x29\xf3\x72"
                "\xb4\x6c\xa5\x0d\x8c\xbe\x43\xda\xc9\xac\x6c\x26\x7c\x44\xb9"
                "\x3f\xee\x40\xcc\x8e\x41\x3c\x81\x03\x02\x00\x00"s;
            check(
                &thresh0,
                thresh0Msg,
                thresh0EncodedFulfillment,
                thresh0EncodedCondition,
                thresh0EncodedFingerprint);
        }
    }

    void
    testThresh61()
    {
        testcase("Thresh61");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * thresh0
        // ** Preim16Cond
        // ** Rsa17Cond
        // ** Ed18Cond
        // ** Prefix19Cond
        // ** Thresh31Cond
        // ** prefix1
        // *** prefix2
        // **** thresh3
        // ***** Preim10Cond
        // ***** Rsa11Cond
        // ***** Ed12Cond
        // ***** ed4
        // ***** thresh5
        // ****** Preim7Cond
        // ****** Rsa8Cond
        // ****** Ed9Cond
        // ****** ed6
        // ** preim13
        // ** rsa14
        // ** ed15

        auto const ed4Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed4PublicKey{
            {0x26, 0x80, 0x85, 0x71, 0x79, 0x37, 0x27, 0xbd, 0x85, 0xaf, 0x22,
             0x49, 0x59, 0x42, 0x99, 0x5c, 0x9c, 0x5b, 0x9f, 0x99, 0x54, 0xb6,
             0xd4, 0xd1, 0x81, 0x94, 0x4c, 0x22, 0x53, 0x03, 0xc0, 0xec}};
        std::array<std::uint8_t, 64> const ed4Sig{
            {0x23, 0x8b, 0xb2, 0xc9, 0xde, 0xad, 0x1b, 0xb6, 0xce, 0x93, 0x9a,
             0x00, 0x47, 0x3d, 0x42, 0xc1, 0x30, 0x19, 0x95, 0x03, 0x55, 0x19,
             0x74, 0x85, 0xe9, 0xed, 0x92, 0xef, 0x22, 0xbd, 0x49, 0xe5, 0x44,
             0xa0, 0x7a, 0x41, 0x7d, 0xa7, 0xb0, 0x3a, 0x90, 0x1b, 0xa1, 0x2b,
             0xcc, 0x1d, 0x0a, 0x8b, 0x95, 0xc1, 0x3c, 0x05, 0x68, 0x26, 0x39,
             0xad, 0xe4, 0xd4, 0x75, 0xf0, 0xb5, 0x18, 0xbe, 0x01}};
        std::array<std::uint8_t, 32> const ed4SigningKey{
            {0x2a, 0x7a, 0x9a, 0x1f, 0xf1, 0x08, 0x8f, 0x8e, 0xef, 0x3a, 0x39,
             0xce, 0x13, 0xea, 0x08, 0x08, 0x8a, 0xf6, 0x06, 0x78, 0xd5, 0x3e,
             0x0b, 0x9c, 0x84, 0xfb, 0x39, 0x93, 0xd6, 0xfe, 0xa0, 0x3d}};
        (void)ed4SigningKey;
        auto const ed6Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed6PublicKey{
            {0xa0, 0x45, 0x26, 0xcf, 0xee, 0x7e, 0xda, 0x68, 0xd9, 0x70, 0x23,
             0xac, 0x68, 0x48, 0x9e, 0x20, 0xa4, 0x5e, 0xf8, 0x51, 0xcb, 0xfe,
             0x72, 0xc1, 0x11, 0x5d, 0x25, 0x9c, 0xbc, 0xfd, 0xbb, 0x8b}};
        std::array<std::uint8_t, 64> const ed6Sig{
            {0xfb, 0xc0, 0xf1, 0x77, 0xf4, 0x14, 0xdf, 0xb2, 0x32, 0xc8, 0x99,
             0xc7, 0x9a, 0x9d, 0xe0, 0x4a, 0x03, 0x2d, 0xf5, 0xc9, 0xde, 0x46,
             0xda, 0x77, 0x52, 0x24, 0x22, 0xef, 0xfb, 0x93, 0x63, 0xb1, 0x05,
             0x36, 0x57, 0x4c, 0x78, 0xbc, 0x78, 0x6d, 0x20, 0x08, 0xbd, 0x75,
             0xc3, 0x1e, 0xe0, 0x29, 0x24, 0xde, 0xa7, 0x03, 0xd3, 0xad, 0x5d,
             0x7c, 0x31, 0x05, 0x83, 0xd0, 0xa4, 0xed, 0x95, 0x07}};
        std::array<std::uint8_t, 32> const ed6SigningKey{
            {0x8f, 0xac, 0x15, 0x02, 0xce, 0xb4, 0x10, 0x27, 0x56, 0x91, 0x2b,
             0xd0, 0x57, 0xe7, 0x6c, 0xe0, 0xc5, 0x46, 0x65, 0x38, 0xf0, 0xc8,
             0x09, 0xe0, 0xb4, 0x57, 0xfb, 0x11, 0xfc, 0x00, 0xe9, 0xdf}};
        (void)ed6SigningKey;
        auto const thresh5Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim7CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim7Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim7CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa8CondConditionFingerprint =
            "\xd1\xb5\x1d\x35\x99\x9d\xb4\xc1\xaa\x81\x4d\xd7\x0e\xa9\x2a"
            "\x20\x7f\xe5\x5c\x75\xe8\x57\x8b\xbf\xe8\xd7\x1c\x7e\xb2\xbc"
            "\x91\x16"s;
        Condition const Rsa8Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa8CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed9CondConditionFingerprint =
            "\x92\xfa\xfc\xc6\x2f\xe2\x8d\x8d\x25\x7c\xd4\x46\xab\xea\x82"
            "\xd0\x3f\x36\xbe\x1d\x11\x2b\xa0\xfe\xfe\xd4\x00\xd5\x7d\x9b"
            "\xf6\xc9"s;
        Condition const Ed9Cond{Type::ed25519Sha256,
                                131072,
                                makeSlice(Ed9CondConditionFingerprint),
                                std::bitset<5>{0}};
        auto const thresh3Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim10CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim10Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim10CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa11CondConditionFingerprint =
            "\xaf\x93\xfd\x22\x45\xc2\x08\xab\x43\xf7\x45\x56\x63\xec\xaf"
            "\x15\x33\xa0\x2a\xb4\x9e\x15\xb4\x6e\xda\x87\x35\xde\x09\x4b"
            "\x06\x31"s;
        Condition const Rsa11Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa11CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed12CondConditionFingerprint =
            "\x55\xcc\xd1\xa2\x2c\x90\x8d\xe3\x2e\x42\xd4\xe0\x65\xb2\xf7"
            "\xda\xc0\x07\x1e\xd3\x23\x0f\xfe\x78\x13\xa2\x86\x61\xc4\x34"
            "\x28\x50"s;
        Condition const Ed12Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed12CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const prefix2Prefix = "P2"s;
        auto const prefix2Msg = "P1abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix2MaxMsgLength = 14;
        auto const prefix1Prefix = "P1"s;
        auto const prefix1Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix1MaxMsgLength = 14;
        auto const preim13Preimage = "I am root"s;
        auto const preim13Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const rsa14Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa14PublicKey{
            {0xbd, 0x63, 0x74, 0xd9, 0xc0, 0x3e, 0x0c, 0x57, 0x55, 0x99, 0x00,
             0xf3, 0xa8, 0x03, 0xdc, 0x9a, 0x6c, 0x14, 0xfc, 0x83, 0x33, 0x63,
             0x87, 0x35, 0x9c, 0xfe, 0xc3, 0x00, 0xb4, 0x8b, 0x03, 0xc7, 0x5f,
             0x0a, 0xe2, 0x94, 0xaa, 0x3f, 0x76, 0x15, 0xb1, 0xb9, 0xf6, 0x5f,
             0x0a, 0x87, 0x0c, 0x5c, 0x35, 0xbc, 0x2f, 0x0f, 0x04, 0xdd, 0x9d,
             0x12, 0x8d, 0x94, 0xeb, 0x8b, 0x93, 0xb4, 0x4e, 0x96, 0x20, 0xb7,
             0x17, 0xa0, 0x8e, 0xff, 0x9e, 0x1f, 0x43, 0xbf, 0xd6, 0x6a, 0x1e,
             0xb6, 0x0d, 0x7f, 0x2c, 0x08, 0x67, 0xa5, 0xe7, 0xa3, 0xb6, 0xd2,
             0x63, 0x6a, 0xf2, 0xeb, 0xd1, 0x21, 0x83, 0x8f, 0xa0, 0x25, 0x4a,
             0xc6, 0xcb, 0x4e, 0x66, 0xc3, 0x5f, 0x37, 0xdf, 0x5c, 0x12, 0xb7,
             0xb8, 0xfa, 0x7a, 0x57, 0x91, 0x9d, 0x55, 0xa6, 0x96, 0x91, 0xee,
             0x94, 0xb0, 0xcc, 0x45, 0xd3, 0x76, 0x70, 0x6f, 0x12, 0xbd, 0x81,
             0x9d, 0x08, 0x1b, 0x6d, 0x55, 0x3c, 0x19, 0x56, 0x9c, 0xcf, 0xc4,
             0xb4, 0x63, 0x8a, 0x87, 0x35, 0x2b, 0x4c, 0xc6, 0xe1, 0x0d, 0x74,
             0x31, 0xaa, 0xc6, 0x25, 0x0d, 0x90, 0x55, 0x14, 0xf1, 0x73, 0x09,
             0x93, 0xba, 0xc6, 0xda, 0x52, 0x7f, 0xc2, 0xdd, 0x9d, 0xb2, 0x4f,
             0x92, 0x43, 0xa6, 0xc9, 0x2c, 0x22, 0xc4, 0x5a, 0x22, 0xc2, 0x56,
             0xac, 0xfa, 0x6a, 0x37, 0x6a, 0x0c, 0x22, 0x72, 0x5d, 0x30, 0x50,
             0x4a, 0x6b, 0x93, 0xab, 0xcf, 0x69, 0x5a, 0x09, 0xd2, 0x5a, 0x87,
             0x31, 0x80, 0xa7, 0x5b, 0xe4, 0x34, 0x42, 0x13, 0x44, 0x1d, 0xe6,
             0xf9, 0x27, 0x21, 0xa7, 0x03, 0x74, 0x64, 0x18, 0xfa, 0xd0, 0x68,
             0x28, 0x73, 0x37, 0x3c, 0xf6, 0x63, 0x10, 0x56, 0xcc, 0x25, 0x08,
             0xb9, 0xad, 0xc8, 0x25, 0x64, 0xd1, 0x9c, 0x7c, 0xe7, 0x6c, 0xa6,
             0x12, 0x2c, 0x7d}};
        std::array<std::uint8_t, 256> const rsa14Sig{
            {0x65, 0xf0, 0x52, 0x7a, 0x31, 0x62, 0x96, 0x98, 0xfc, 0x23, 0x0d,
             0xb6, 0xb5, 0x08, 0xd1, 0x11, 0x7a, 0xb3, 0x09, 0xc2, 0x6c, 0xd2,
             0x78, 0x91, 0xec, 0xd4, 0x32, 0x84, 0x4c, 0x46, 0x44, 0x27, 0x8a,
             0xad, 0x78, 0x45, 0x78, 0x60, 0xa1, 0xf8, 0x39, 0xad, 0xf2, 0x4a,
             0xb3, 0x99, 0x12, 0x20, 0xe2, 0x52, 0xbf, 0x5f, 0xbb, 0x53, 0x61,
             0x22, 0x78, 0x7b, 0x83, 0x81, 0x61, 0x81, 0x8a, 0xc3, 0x73, 0xcc,
             0x65, 0x8b, 0x8c, 0xce, 0x52, 0xef, 0xfd, 0x87, 0x1a, 0xdb, 0x98,
             0x00, 0x7b, 0xc5, 0x23, 0x02, 0xae, 0x98, 0xfe, 0x40, 0xb2, 0x3b,
             0x75, 0x9c, 0x72, 0x43, 0x16, 0xd8, 0x77, 0x75, 0xf9, 0x87, 0x4a,
             0x94, 0x3b, 0x09, 0x82, 0x98, 0x38, 0xc8, 0xc6, 0xfe, 0x42, 0x2b,
             0x54, 0xf7, 0xa6, 0xb3, 0x00, 0x4b, 0x15, 0x0a, 0x7c, 0x9b, 0x55,
             0x45, 0xf4, 0x96, 0x80, 0x27, 0xd6, 0x7c, 0xad, 0x94, 0x68, 0x06,
             0xc1, 0x33, 0xfc, 0xa6, 0x56, 0xd7, 0x86, 0x86, 0x73, 0x48, 0xfc,
             0x09, 0x1b, 0x5f, 0x8f, 0x9f, 0xe3, 0x7e, 0xd8, 0x2c, 0x89, 0x29,
             0x2b, 0x85, 0x43, 0xb1, 0x79, 0x94, 0xb1, 0xfa, 0x00, 0xc8, 0x4f,
             0x25, 0x15, 0xdd, 0x80, 0xce, 0xd5, 0xd9, 0x59, 0x84, 0xa2, 0x2a,
             0xec, 0xf6, 0xf9, 0x61, 0xe7, 0xfa, 0x16, 0xae, 0xde, 0x14, 0x2c,
             0xa2, 0x1f, 0xc3, 0x16, 0xcb, 0x26, 0xe3, 0x31, 0x92, 0xa5, 0xfb,
             0xb1, 0xa0, 0xa6, 0x52, 0x01, 0x87, 0xc9, 0xad, 0xb9, 0x6d, 0xf7,
             0x4b, 0xab, 0xfc, 0xd2, 0x24, 0xdb, 0xd1, 0xfb, 0xe1, 0x61, 0xf0,
             0xb0, 0x32, 0xd5, 0x03, 0x7d, 0xea, 0x20, 0x9c, 0x67, 0xfb, 0xfb,
             0x7c, 0x38, 0x43, 0xf7, 0xe9, 0x82, 0x0a, 0x26, 0x54, 0xd9, 0x56,
             0xb5, 0xc4, 0xc2, 0x28, 0x3d, 0xfd, 0x30, 0x1d, 0x57, 0x4c, 0x6c,
             0x64, 0xce, 0xa6}};
        auto const ed15Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed15PublicKey{
            {0x37, 0x86, 0xc1, 0x8d, 0x06, 0xf2, 0xe9, 0x58, 0x82, 0x95, 0xcd,
             0xb6, 0x5d, 0x37, 0x28, 0xc9, 0x72, 0xa9, 0x41, 0x20, 0xdc, 0x78,
             0x3d, 0xac, 0x24, 0x8c, 0xb0, 0x6f, 0x1e, 0x44, 0x22, 0xc3}};
        std::array<std::uint8_t, 64> const ed15Sig{
            {0xd8, 0x59, 0x56, 0xbd, 0x99, 0x5c, 0xdd, 0xcd, 0x82, 0x9b, 0xea,
             0x14, 0x18, 0x09, 0x9a, 0x8c, 0x54, 0xff, 0xb3, 0xd4, 0xf3, 0xbf,
             0xc1, 0x4b, 0x70, 0x2a, 0xc9, 0x69, 0x5d, 0x42, 0x8a, 0x34, 0x08,
             0x74, 0x3a, 0xef, 0x8b, 0xd9, 0x2e, 0x7a, 0x0d, 0xb7, 0xdb, 0x68,
             0xb3, 0xa8, 0xb8, 0x12, 0x3a, 0x11, 0x60, 0x20, 0xee, 0xd9, 0x1e,
             0x4a, 0xb6, 0x33, 0x94, 0x27, 0x4e, 0x83, 0xf0, 0x0e}};
        std::array<std::uint8_t, 32> const ed15SigningKey{
            {0x0e, 0x2d, 0x40, 0x72, 0x23, 0x7c, 0x11, 0x66, 0xdb, 0xe2, 0xa2,
             0x6e, 0x4a, 0x4e, 0x95, 0x3a, 0x03, 0x78, 0x62, 0x84, 0x2b, 0x40,
             0x3e, 0xc5, 0xa8, 0x93, 0x4d, 0xb5, 0xe0, 0xe4, 0xc5, 0xdd}};
        (void)ed15SigningKey;
        auto const thresh0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim16CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim16Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim16CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa17CondConditionFingerprint =
            "\x78\xe3\x04\xf4\xa6\x16\x68\x4c\x1b\xcf\x3a\x32\xff\xbc\x75"
            "\x1a\xe6\x08\x9b\xff\xba\x79\xf4\x39\x7a\xfc\xe1\x6f\xff\x3e"
            "\xb3\x75"s;
        Condition const Rsa17Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa17CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed18CondConditionFingerprint =
            "\x0d\xea\xc5\x16\x5c\x62\xb8\xd1\xa4\xe7\x5a\x07\x58\x00\x79"
            "\x51\x88\x21\xe9\x4d\xba\x73\x7b\xad\x60\x9c\x5c\x26\x00\x2e"
            "\xd1\x51"s;
        Condition const Ed18Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed18CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Prefix19CondConditionFingerprint =
            "\xa7\xdd\xcf\xef\x6b\x97\xcf\x17\x6e\xfa\xf7\x1c\xc5\xc0\x42"
            "\x27\x5e\xc8\x72\x13\xb0\xe0\x36\x6f\x1b\xc2\x34\x1a\xf3\x11"
            "\xc6\x52"s;
        Condition const Prefix19Cond{
            Type::prefixSha256,
            273450,
            makeSlice(Prefix19CondConditionFingerprint),
            std::bitset<5>{29}};
        auto const Thresh31CondConditionFingerprint =
            "\xd6\xcb\x13\x43\xfa\x3d\x4a\xac\x4b\x6d\x4d\x47\x5a\xf6\x3a"
            "\xca\x1a\x83\x6b\x8a\x9a\x71\xe1\xd3\x01\x9d\xbe\x75\x4d\x1d"
            "\x7c\x92"s;
        Condition const Thresh31Cond{
            Type::thresholdSha256,
            132096,
            makeSlice(Thresh31CondConditionFingerprint),
            std::bitset<5>{16}};

        auto ed4 = std::make_unique<Ed25519>(ed4PublicKey, ed4Sig);
        auto ed6 = std::make_unique<Ed25519>(ed6PublicKey, ed6Sig);
        std::vector<std::unique_ptr<Fulfillment>> thresh5Subfulfillments;
        thresh5Subfulfillments.emplace_back(std::move(ed6));
        std::vector<Condition> thresh5Subconditions{
            {Preim7Cond, Rsa8Cond, Ed9Cond}};
        auto thresh5 = std::make_unique<ThresholdSha256>(
            std::move(thresh5Subfulfillments), std::move(thresh5Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh3Subfulfillments;
        thresh3Subfulfillments.emplace_back(std::move(ed4));
        thresh3Subfulfillments.emplace_back(std::move(thresh5));
        std::vector<Condition> thresh3Subconditions{
            {Preim10Cond, Rsa11Cond, Ed12Cond}};
        auto thresh3 = std::make_unique<ThresholdSha256>(
            std::move(thresh3Subfulfillments), std::move(thresh3Subconditions));
        auto prefix2 = std::make_unique<PrefixSha256>(
            makeSlice(prefix2Prefix), prefix2MaxMsgLength, std::move(thresh3));
        auto prefix1 = std::make_unique<PrefixSha256>(
            makeSlice(prefix1Prefix), prefix1MaxMsgLength, std::move(prefix2));
        auto preim13 =
            std::make_unique<PreimageSha256>(makeSlice(preim13Preimage));
        auto rsa14 = std::make_unique<RsaSha256>(
            makeSlice(rsa14PublicKey), makeSlice(rsa14Sig));
        auto ed15 = std::make_unique<Ed25519>(ed15PublicKey, ed15Sig);
        std::vector<std::unique_ptr<Fulfillment>> thresh0Subfulfillments;
        thresh0Subfulfillments.emplace_back(std::move(prefix1));
        thresh0Subfulfillments.emplace_back(std::move(preim13));
        thresh0Subfulfillments.emplace_back(std::move(rsa14));
        thresh0Subfulfillments.emplace_back(std::move(ed15));
        std::vector<Condition> thresh0Subconditions{
            {Preim16Cond, Rsa17Cond, Ed18Cond, Prefix19Cond, Thresh31Cond}};
        ThresholdSha256 const thresh0(
            std::move(thresh0Subfulfillments), std::move(thresh0Subconditions));
        {
            auto const thresh0EncodedFulfillment =
                "\xa2\x82\x05\x46\xa0\x82\x04\x6c\xa0\x0b\x80\x09\x49\x20\x61"
                "\x6d\x20\x72\x6f\x6f\x74\xa1\x82\x01\xe9\x80\x02\x50\x31\x81"
                "\x01\x0e\xa2\x82\x01\xde\xa1\x82\x01\xda\x80\x02\x50\x32\x81"
                "\x01\x0e\xa2\x82\x01\xcf\xa2\x82\x01\xcb\xa0\x82\x01\x4c\xa2"
                "\x81\xe3\xa0\x66\xa4\x64\x80\x20\xa0\x45\x26\xcf\xee\x7e\xda"
                "\x68\xd9\x70\x23\xac\x68\x48\x9e\x20\xa4\x5e\xf8\x51\xcb\xfe"
                "\x72\xc1\x11\x5d\x25\x9c\xbc\xfd\xbb\x8b\x81\x40\xfb\xc0\xf1"
                "\x77\xf4\x14\xdf\xb2\x32\xc8\x99\xc7\x9a\x9d\xe0\x4a\x03\x2d"
                "\xf5\xc9\xde\x46\xda\x77\x52\x24\x22\xef\xfb\x93\x63\xb1\x05"
                "\x36\x57\x4c\x78\xbc\x78\x6d\x20\x08\xbd\x75\xc3\x1e\xe0\x29"
                "\x24\xde\xa7\x03\xd3\xad\x5d\x7c\x31\x05\x83\xd0\xa4\xed\x95"
                "\x07\xa1\x79\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11"
                "\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2"
                "\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa3\x27\x80"
                "\x20\xd1\xb5\x1d\x35\x99\x9d\xb4\xc1\xaa\x81\x4d\xd7\x0e\xa9"
                "\x2a\x20\x7f\xe5\x5c\x75\xe8\x57\x8b\xbf\xe8\xd7\x1c\x7e\xb2"
                "\xbc\x91\x16\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x92\xfa\xfc"
                "\xc6\x2f\xe2\x8d\x8d\x25\x7c\xd4\x46\xab\xea\x82\xd0\x3f\x36"
                "\xbe\x1d\x11\x2b\xa0\xfe\xfe\xd4\x00\xd5\x7d\x9b\xf6\xc9\x81"
                "\x03\x02\x00\x00\xa4\x64\x80\x20\x26\x80\x85\x71\x79\x37\x27"
                "\xbd\x85\xaf\x22\x49\x59\x42\x99\x5c\x9c\x5b\x9f\x99\x54\xb6"
                "\xd4\xd1\x81\x94\x4c\x22\x53\x03\xc0\xec\x81\x40\x23\x8b\xb2"
                "\xc9\xde\xad\x1b\xb6\xce\x93\x9a\x00\x47\x3d\x42\xc1\x30\x19"
                "\x95\x03\x55\x19\x74\x85\xe9\xed\x92\xef\x22\xbd\x49\xe5\x44"
                "\xa0\x7a\x41\x7d\xa7\xb0\x3a\x90\x1b\xa1\x2b\xcc\x1d\x0a\x8b"
                "\x95\xc1\x3c\x05\x68\x26\x39\xad\xe4\xd4\x75\xf0\xb5\x18\xbe"
                "\x01\xa1\x79\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11"
                "\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2"
                "\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa3\x27\x80"
                "\x20\xaf\x93\xfd\x22\x45\xc2\x08\xab\x43\xf7\x45\x56\x63\xec"
                "\xaf\x15\x33\xa0\x2a\xb4\x9e\x15\xb4\x6e\xda\x87\x35\xde\x09"
                "\x4b\x06\x31\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x55\xcc\xd1"
                "\xa2\x2c\x90\x8d\xe3\x2e\x42\xd4\xe0\x65\xb2\xf7\xda\xc0\x07"
                "\x1e\xd3\x23\x0f\xfe\x78\x13\xa2\x86\x61\xc4\x34\x28\x50\x81"
                "\x03\x02\x00\x00\xa3\x82\x02\x08\x80\x82\x01\x00\xbd\x63\x74"
                "\xd9\xc0\x3e\x0c\x57\x55\x99\x00\xf3\xa8\x03\xdc\x9a\x6c\x14"
                "\xfc\x83\x33\x63\x87\x35\x9c\xfe\xc3\x00\xb4\x8b\x03\xc7\x5f"
                "\x0a\xe2\x94\xaa\x3f\x76\x15\xb1\xb9\xf6\x5f\x0a\x87\x0c\x5c"
                "\x35\xbc\x2f\x0f\x04\xdd\x9d\x12\x8d\x94\xeb\x8b\x93\xb4\x4e"
                "\x96\x20\xb7\x17\xa0\x8e\xff\x9e\x1f\x43\xbf\xd6\x6a\x1e\xb6"
                "\x0d\x7f\x2c\x08\x67\xa5\xe7\xa3\xb6\xd2\x63\x6a\xf2\xeb\xd1"
                "\x21\x83\x8f\xa0\x25\x4a\xc6\xcb\x4e\x66\xc3\x5f\x37\xdf\x5c"
                "\x12\xb7\xb8\xfa\x7a\x57\x91\x9d\x55\xa6\x96\x91\xee\x94\xb0"
                "\xcc\x45\xd3\x76\x70\x6f\x12\xbd\x81\x9d\x08\x1b\x6d\x55\x3c"
                "\x19\x56\x9c\xcf\xc4\xb4\x63\x8a\x87\x35\x2b\x4c\xc6\xe1\x0d"
                "\x74\x31\xaa\xc6\x25\x0d\x90\x55\x14\xf1\x73\x09\x93\xba\xc6"
                "\xda\x52\x7f\xc2\xdd\x9d\xb2\x4f\x92\x43\xa6\xc9\x2c\x22\xc4"
                "\x5a\x22\xc2\x56\xac\xfa\x6a\x37\x6a\x0c\x22\x72\x5d\x30\x50"
                "\x4a\x6b\x93\xab\xcf\x69\x5a\x09\xd2\x5a\x87\x31\x80\xa7\x5b"
                "\xe4\x34\x42\x13\x44\x1d\xe6\xf9\x27\x21\xa7\x03\x74\x64\x18"
                "\xfa\xd0\x68\x28\x73\x37\x3c\xf6\x63\x10\x56\xcc\x25\x08\xb9"
                "\xad\xc8\x25\x64\xd1\x9c\x7c\xe7\x6c\xa6\x12\x2c\x7d\x81\x82"
                "\x01\x00\x65\xf0\x52\x7a\x31\x62\x96\x98\xfc\x23\x0d\xb6\xb5"
                "\x08\xd1\x11\x7a\xb3\x09\xc2\x6c\xd2\x78\x91\xec\xd4\x32\x84"
                "\x4c\x46\x44\x27\x8a\xad\x78\x45\x78\x60\xa1\xf8\x39\xad\xf2"
                "\x4a\xb3\x99\x12\x20\xe2\x52\xbf\x5f\xbb\x53\x61\x22\x78\x7b"
                "\x83\x81\x61\x81\x8a\xc3\x73\xcc\x65\x8b\x8c\xce\x52\xef\xfd"
                "\x87\x1a\xdb\x98\x00\x7b\xc5\x23\x02\xae\x98\xfe\x40\xb2\x3b"
                "\x75\x9c\x72\x43\x16\xd8\x77\x75\xf9\x87\x4a\x94\x3b\x09\x82"
                "\x98\x38\xc8\xc6\xfe\x42\x2b\x54\xf7\xa6\xb3\x00\x4b\x15\x0a"
                "\x7c\x9b\x55\x45\xf4\x96\x80\x27\xd6\x7c\xad\x94\x68\x06\xc1"
                "\x33\xfc\xa6\x56\xd7\x86\x86\x73\x48\xfc\x09\x1b\x5f\x8f\x9f"
                "\xe3\x7e\xd8\x2c\x89\x29\x2b\x85\x43\xb1\x79\x94\xb1\xfa\x00"
                "\xc8\x4f\x25\x15\xdd\x80\xce\xd5\xd9\x59\x84\xa2\x2a\xec\xf6"
                "\xf9\x61\xe7\xfa\x16\xae\xde\x14\x2c\xa2\x1f\xc3\x16\xcb\x26"
                "\xe3\x31\x92\xa5\xfb\xb1\xa0\xa6\x52\x01\x87\xc9\xad\xb9\x6d"
                "\xf7\x4b\xab\xfc\xd2\x24\xdb\xd1\xfb\xe1\x61\xf0\xb0\x32\xd5"
                "\x03\x7d\xea\x20\x9c\x67\xfb\xfb\x7c\x38\x43\xf7\xe9\x82\x0a"
                "\x26\x54\xd9\x56\xb5\xc4\xc2\x28\x3d\xfd\x30\x1d\x57\x4c\x6c"
                "\x64\xce\xa6\xa4\x64\x80\x20\x37\x86\xc1\x8d\x06\xf2\xe9\x58"
                "\x82\x95\xcd\xb6\x5d\x37\x28\xc9\x72\xa9\x41\x20\xdc\x78\x3d"
                "\xac\x24\x8c\xb0\x6f\x1e\x44\x22\xc3\x81\x40\xd8\x59\x56\xbd"
                "\x99\x5c\xdd\xcd\x82\x9b\xea\x14\x18\x09\x9a\x8c\x54\xff\xb3"
                "\xd4\xf3\xbf\xc1\x4b\x70\x2a\xc9\x69\x5d\x42\x8a\x34\x08\x74"
                "\x3a\xef\x8b\xd9\x2e\x7a\x0d\xb7\xdb\x68\xb3\xa8\xb8\x12\x3a"
                "\x11\x60\x20\xee\xd9\x1e\x4a\xb6\x33\x94\x27\x4e\x83\xf0\x0e"
                "\xa1\x81\xd3\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11"
                "\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2"
                "\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa1\x2b\x80"
                "\x20\xa7\xdd\xcf\xef\x6b\x97\xcf\x17\x6e\xfa\xf7\x1c\xc5\xc0"
                "\x42\x27\x5e\xc8\x72\x13\xb0\xe0\x36\x6f\x1b\xc2\x34\x1a\xf3"
                "\x11\xc6\x52\x81\x03\x04\x2c\x2a\x82\x02\x03\xb8\xa2\x2b\x80"
                "\x20\xd6\xcb\x13\x43\xfa\x3d\x4a\xac\x4b\x6d\x4d\x47\x5a\xf6"
                "\x3a\xca\x1a\x83\x6b\x8a\x9a\x71\xe1\xd3\x01\x9d\xbe\x75\x4d"
                "\x1d\x7c\x92\x81\x03\x02\x04\x00\x82\x02\x03\x08\xa3\x27\x80"
                "\x20\x78\xe3\x04\xf4\xa6\x16\x68\x4c\x1b\xcf\x3a\x32\xff\xbc"
                "\x75\x1a\xe6\x08\x9b\xff\xba\x79\xf4\x39\x7a\xfc\xe1\x6f\xff"
                "\x3e\xb3\x75\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x0d\xea\xc5"
                "\x16\x5c\x62\xb8\xd1\xa4\xe7\x5a\x07\x58\x00\x79\x51\x88\x21"
                "\xe9\x4d\xba\x73\x7b\xad\x60\x9c\x5c\x26\x00\x2e\xd1\x51\x81"
                "\x03\x02\x00\x00"s;
            auto const thresh0EncodedCondition =
                "\xa2\x2b\x80\x20\x8a\xaa\x06\xe0\xd2\x8e\x2d\x46\xeb\xf0\xa1"
                "\x2e\x1a\x55\xf6\xbc\x0e\x77\x17\xa3\xe2\x34\x9d\xec\xa8\xf7"
                "\xdd\x92\x5e\xf2\x01\xd3\x81\x03\x0c\x80\x4a\x82\x02\x03\xd8"s;
            auto const thresh0EncodedFingerprint =
                "\x30\x82\x01\x80\x80\x01\x04\xa1\x82\x01\x79\xa0\x25\x80\x20"
                "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
                "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
                "\xeb\x4e\x81\x01\x09\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1"
                "\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21"
                "\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa1"
                "\x2b\x80\x20\x16\xae\xfb\xf0\x3e\xc8\x19\xe2\x09\x1a\x47\x82"
                "\xe7\xfd\xd2\xda\xfb\xbf\x17\xe9\x6a\xe4\x58\x5d\x83\x7f\xde"
                "\xec\x15\x56\x5a\x62\x81\x03\x04\x2c\x20\x82\x02\x03\xb8\xa1"
                "\x2b\x80\x20\xa7\xdd\xcf\xef\x6b\x97\xcf\x17\x6e\xfa\xf7\x1c"
                "\xc5\xc0\x42\x27\x5e\xc8\x72\x13\xb0\xe0\x36\x6f\x1b\xc2\x34"
                "\x1a\xf3\x11\xc6\x52\x81\x03\x04\x2c\x2a\x82\x02\x03\xb8\xa2"
                "\x2b\x80\x20\xd6\xcb\x13\x43\xfa\x3d\x4a\xac\x4b\x6d\x4d\x47"
                "\x5a\xf6\x3a\xca\x1a\x83\x6b\x8a\x9a\x71\xe1\xd3\x01\x9d\xbe"
                "\x75\x4d\x1d\x7c\x92\x81\x03\x02\x04\x00\x82\x02\x03\x08\xa3"
                "\x27\x80\x20\x32\xec\xaa\x5e\xa6\x88\xdc\xe4\x81\x0f\x93\x0f"
                "\x65\xde\x87\xfd\x54\x8c\x79\x04\x81\xe3\x63\x3f\x3d\x08\xa1"
                "\xba\x0a\x24\x2b\x46\x81\x03\x01\x00\x00\xa3\x27\x80\x20\x78"
                "\xe3\x04\xf4\xa6\x16\x68\x4c\x1b\xcf\x3a\x32\xff\xbc\x75\x1a"
                "\xe6\x08\x9b\xff\xba\x79\xf4\x39\x7a\xfc\xe1\x6f\xff\x3e\xb3"
                "\x75\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x0d\xea\xc5\x16\x5c"
                "\x62\xb8\xd1\xa4\xe7\x5a\x07\x58\x00\x79\x51\x88\x21\xe9\x4d"
                "\xba\x73\x7b\xad\x60\x9c\x5c\x26\x00\x2e\xd1\x51\x81\x03\x02"
                "\x00\x00\xa4\x27\x80\x20\x40\xd1\x9a\x63\x62\x9b\xc0\x76\xab"
                "\x11\x73\x42\x86\xb3\x20\x9d\x23\xe8\x5e\xee\xb9\x82\x5d\x93"
                "\xe3\xac\xad\xa0\x40\x41\x51\x1b\x81\x03\x02\x00\x00"s;
            check(
                &thresh0,
                thresh0Msg,
                thresh0EncodedFulfillment,
                thresh0EncodedCondition,
                thresh0EncodedFingerprint);
        }
    }

    void
    testThresh62()
    {
        testcase("Thresh62");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * thresh0
        // ** Preim40Cond
        // ** Rsa41Cond
        // ** Ed42Cond
        // ** prefix1
        // *** prefix2
        // **** thresh3
        // ***** Preim10Cond
        // ***** Rsa11Cond
        // ***** Ed12Cond
        // ***** Thresh13Cond
        // ***** ed4
        // ***** thresh5
        // ****** Preim7Cond
        // ****** Rsa8Cond
        // ****** Ed9Cond
        // ****** ed6
        // ** prefix18
        // *** prefix19
        // **** thresh20
        // ***** Preim27Cond
        // ***** Rsa28Cond
        // ***** Ed29Cond
        // ***** Thresh30Cond
        // ***** ed21
        // ***** thresh22
        // ****** Preim24Cond
        // ****** Rsa25Cond
        // ****** Ed26Cond
        // ****** ed23
        // ** thresh35
        // *** Preim37Cond
        // *** Rsa38Cond
        // *** Ed39Cond
        // *** ed36

        auto const ed4Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed4PublicKey{
            {0x26, 0x80, 0x85, 0x71, 0x79, 0x37, 0x27, 0xbd, 0x85, 0xaf, 0x22,
             0x49, 0x59, 0x42, 0x99, 0x5c, 0x9c, 0x5b, 0x9f, 0x99, 0x54, 0xb6,
             0xd4, 0xd1, 0x81, 0x94, 0x4c, 0x22, 0x53, 0x03, 0xc0, 0xec}};
        std::array<std::uint8_t, 64> const ed4Sig{
            {0x23, 0x8b, 0xb2, 0xc9, 0xde, 0xad, 0x1b, 0xb6, 0xce, 0x93, 0x9a,
             0x00, 0x47, 0x3d, 0x42, 0xc1, 0x30, 0x19, 0x95, 0x03, 0x55, 0x19,
             0x74, 0x85, 0xe9, 0xed, 0x92, 0xef, 0x22, 0xbd, 0x49, 0xe5, 0x44,
             0xa0, 0x7a, 0x41, 0x7d, 0xa7, 0xb0, 0x3a, 0x90, 0x1b, 0xa1, 0x2b,
             0xcc, 0x1d, 0x0a, 0x8b, 0x95, 0xc1, 0x3c, 0x05, 0x68, 0x26, 0x39,
             0xad, 0xe4, 0xd4, 0x75, 0xf0, 0xb5, 0x18, 0xbe, 0x01}};
        std::array<std::uint8_t, 32> const ed4SigningKey{
            {0x2a, 0x7a, 0x9a, 0x1f, 0xf1, 0x08, 0x8f, 0x8e, 0xef, 0x3a, 0x39,
             0xce, 0x13, 0xea, 0x08, 0x08, 0x8a, 0xf6, 0x06, 0x78, 0xd5, 0x3e,
             0x0b, 0x9c, 0x84, 0xfb, 0x39, 0x93, 0xd6, 0xfe, 0xa0, 0x3d}};
        (void)ed4SigningKey;
        auto const ed6Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed6PublicKey{
            {0xa0, 0x45, 0x26, 0xcf, 0xee, 0x7e, 0xda, 0x68, 0xd9, 0x70, 0x23,
             0xac, 0x68, 0x48, 0x9e, 0x20, 0xa4, 0x5e, 0xf8, 0x51, 0xcb, 0xfe,
             0x72, 0xc1, 0x11, 0x5d, 0x25, 0x9c, 0xbc, 0xfd, 0xbb, 0x8b}};
        std::array<std::uint8_t, 64> const ed6Sig{
            {0xfb, 0xc0, 0xf1, 0x77, 0xf4, 0x14, 0xdf, 0xb2, 0x32, 0xc8, 0x99,
             0xc7, 0x9a, 0x9d, 0xe0, 0x4a, 0x03, 0x2d, 0xf5, 0xc9, 0xde, 0x46,
             0xda, 0x77, 0x52, 0x24, 0x22, 0xef, 0xfb, 0x93, 0x63, 0xb1, 0x05,
             0x36, 0x57, 0x4c, 0x78, 0xbc, 0x78, 0x6d, 0x20, 0x08, 0xbd, 0x75,
             0xc3, 0x1e, 0xe0, 0x29, 0x24, 0xde, 0xa7, 0x03, 0xd3, 0xad, 0x5d,
             0x7c, 0x31, 0x05, 0x83, 0xd0, 0xa4, 0xed, 0x95, 0x07}};
        std::array<std::uint8_t, 32> const ed6SigningKey{
            {0x8f, 0xac, 0x15, 0x02, 0xce, 0xb4, 0x10, 0x27, 0x56, 0x91, 0x2b,
             0xd0, 0x57, 0xe7, 0x6c, 0xe0, 0xc5, 0x46, 0x65, 0x38, 0xf0, 0xc8,
             0x09, 0xe0, 0xb4, 0x57, 0xfb, 0x11, 0xfc, 0x00, 0xe9, 0xdf}};
        (void)ed6SigningKey;
        auto const thresh5Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim7CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim7Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim7CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa8CondConditionFingerprint =
            "\xd1\xb5\x1d\x35\x99\x9d\xb4\xc1\xaa\x81\x4d\xd7\x0e\xa9\x2a"
            "\x20\x7f\xe5\x5c\x75\xe8\x57\x8b\xbf\xe8\xd7\x1c\x7e\xb2\xbc"
            "\x91\x16"s;
        Condition const Rsa8Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa8CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed9CondConditionFingerprint =
            "\x92\xfa\xfc\xc6\x2f\xe2\x8d\x8d\x25\x7c\xd4\x46\xab\xea\x82"
            "\xd0\x3f\x36\xbe\x1d\x11\x2b\xa0\xfe\xfe\xd4\x00\xd5\x7d\x9b"
            "\xf6\xc9"s;
        Condition const Ed9Cond{Type::ed25519Sha256,
                                131072,
                                makeSlice(Ed9CondConditionFingerprint),
                                std::bitset<5>{0}};
        auto const thresh3Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim10CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim10Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim10CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa11CondConditionFingerprint =
            "\xaf\x93\xfd\x22\x45\xc2\x08\xab\x43\xf7\x45\x56\x63\xec\xaf"
            "\x15\x33\xa0\x2a\xb4\x9e\x15\xb4\x6e\xda\x87\x35\xde\x09\x4b"
            "\x06\x31"s;
        Condition const Rsa11Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa11CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed12CondConditionFingerprint =
            "\x55\xcc\xd1\xa2\x2c\x90\x8d\xe3\x2e\x42\xd4\xe0\x65\xb2\xf7"
            "\xda\xc0\x07\x1e\xd3\x23\x0f\xfe\x78\x13\xa2\x86\x61\xc4\x34"
            "\x28\x50"s;
        Condition const Ed12Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed12CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Thresh13CondConditionFingerprint =
            "\xae\x21\x0d\x3e\x92\xa0\xdb\x8d\x22\xd6\x15\xe6\x30\xb0\x7c"
            "\x07\xc2\x89\x69\x67\xb4\x87\x81\x5c\x0a\xc7\xa1\x72\xa9\x3e"
            "\x49\xe2"s;
        Condition const Thresh13Cond{
            Type::thresholdSha256,
            135168,
            makeSlice(Thresh13CondConditionFingerprint),
            std::bitset<5>{25}};
        auto const prefix2Prefix = "P2"s;
        auto const prefix2Msg = "P1abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix2MaxMsgLength = 14;
        auto const prefix1Prefix = "P1"s;
        auto const prefix1Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix1MaxMsgLength = 14;
        auto const ed21Msg = "P19P18abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed21PublicKey{
            {0x02, 0x14, 0x74, 0x80, 0x5a, 0xe0, 0x16, 0xb1, 0xfc, 0x36, 0x0f,
             0x1d, 0x57, 0xdb, 0x72, 0x46, 0xf7, 0x50, 0xe0, 0x7c, 0xcc, 0x48,
             0xee, 0x1f, 0x1e, 0x22, 0x2c, 0x96, 0x5f, 0xd0, 0xd7, 0x4b}};
        std::array<std::uint8_t, 64> const ed21Sig{
            {0xd4, 0x5a, 0xfe, 0x26, 0xdf, 0xeb, 0x15, 0xab, 0x82, 0x8d, 0xcc,
             0xf4, 0x8e, 0x22, 0xec, 0x84, 0xf0, 0x6c, 0x71, 0xa3, 0xe0, 0xb2,
             0x2b, 0x55, 0x98, 0x0f, 0x40, 0xae, 0x01, 0x82, 0x07, 0x49, 0x9a,
             0x9e, 0x94, 0x42, 0x93, 0xe7, 0xf7, 0xc0, 0x63, 0xb4, 0x68, 0xe4,
             0xce, 0x54, 0x61, 0x7c, 0xba, 0x1b, 0xaf, 0xcb, 0x67, 0x26, 0xa8,
             0x42, 0x2b, 0x73, 0xb3, 0x95, 0xa7, 0xcb, 0xe9, 0x07}};
        std::array<std::uint8_t, 32> const ed21SigningKey{
            {0x6f, 0x78, 0xdc, 0x8f, 0x33, 0xc2, 0x31, 0x0b, 0x53, 0x7d, 0x72,
             0xae, 0xe1, 0x3a, 0x9b, 0x8d, 0x6f, 0x77, 0x88, 0xdc, 0x3f, 0xba,
             0x1d, 0xc1, 0x78, 0x52, 0x30, 0xf9, 0x4f, 0x20, 0x76, 0xb8}};
        (void)ed21SigningKey;
        auto const ed23Msg = "P19P18abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed23PublicKey{
            {0x8a, 0xfc, 0x00, 0xab, 0x50, 0x13, 0x80, 0x92, 0xc3, 0x2f, 0xe7,
             0x61, 0xef, 0xc2, 0xdd, 0xb6, 0x9a, 0x24, 0x0a, 0xb3, 0x36, 0xd5,
             0xe1, 0xe2, 0x89, 0x2f, 0x53, 0x5c, 0xdd, 0x21, 0xd2, 0x81}};
        std::array<std::uint8_t, 64> const ed23Sig{
            {0xb0, 0x16, 0x53, 0x61, 0x6d, 0xcf, 0xa3, 0x94, 0x46, 0x47, 0x60,
             0xd6, 0xf6, 0x9c, 0xae, 0x85, 0x0e, 0x98, 0xfd, 0x98, 0x75, 0xec,
             0x8d, 0x10, 0xa1, 0x4b, 0x35, 0x85, 0x93, 0x1f, 0x28, 0xa4, 0x13,
             0x70, 0x48, 0x57, 0x16, 0xac, 0x5e, 0x5b, 0x4e, 0xf1, 0x2c, 0x7d,
             0xe5, 0x16, 0x22, 0x00, 0x47, 0x5e, 0xc3, 0x9e, 0xd8, 0xd8, 0x06,
             0x9d, 0xdb, 0xf3, 0xe9, 0xbf, 0xf7, 0x02, 0x39, 0x07}};
        std::array<std::uint8_t, 32> const ed23SigningKey{
            {0xc7, 0xab, 0x87, 0x0b, 0xb3, 0xca, 0x9f, 0x0c, 0x87, 0xed, 0x7b,
             0x4c, 0xe2, 0x89, 0xc2, 0x3c, 0xe4, 0xab, 0xa6, 0x23, 0x18, 0x3f,
             0xab, 0xa5, 0xae, 0x7d, 0x20, 0x5f, 0x65, 0x6d, 0x40, 0xa9}};
        (void)ed23SigningKey;
        auto const thresh22Msg = "P19P18abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim24CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim24Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim24CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa25CondConditionFingerprint =
            "\xb2\x7f\x94\xe3\xdf\x0c\x9a\x71\x3a\xd2\xeb\x71\x91\x72\x40"
            "\xb9\xcb\xb7\xac\xbc\x77\x0a\x08\x85\x07\xa3\x85\x4e\x7e\xc9"
            "\x50\x96"s;
        Condition const Rsa25Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa25CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed26CondConditionFingerprint =
            "\xd6\x2f\x07\xbd\x56\xfe\x9a\x02\x8c\x98\x1a\x72\x17\xb6\x26"
            "\x90\x51\xaf\xe4\xea\x51\x64\xe0\x58\x3e\x85\xc9\x29\x22\x94"
            "\xa1\xbf"s;
        Condition const Ed26Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed26CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const thresh20Msg = "P19P18abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim27CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim27Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim27CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa28CondConditionFingerprint =
            "\x58\xac\x94\x55\x27\x79\x7a\x0c\xac\x84\x2d\x5c\x13\x32\xee"
            "\x84\x25\xb8\xb8\xec\x25\x0d\x40\xee\xc0\xd4\x79\x18\x3f\xc6"
            "\xbc\xd7"s;
        Condition const Rsa28Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa28CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed29CondConditionFingerprint =
            "\xc5\x39\xb2\xc7\xc4\x92\x8a\x29\xf3\x72\xb4\x6c\xa5\x0d\x8c"
            "\xbe\x43\xda\xc9\xac\x6c\x26\x7c\x44\xb9\x3f\xee\x40\xcc\x8e"
            "\x41\x3c"s;
        Condition const Ed29Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed29CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Thresh30CondConditionFingerprint =
            "\x16\x94\x83\xc9\x00\x1c\x85\xcc\xab\xe8\x23\xe4\xaf\x61\xa9"
            "\x61\xf1\x64\x3e\x5b\x42\xac\x03\x3c\xe1\xaf\x7a\xeb\xee\x91"
            "\x10\xd6"s;
        Condition const Thresh30Cond{
            Type::thresholdSha256,
            135168,
            makeSlice(Thresh30CondConditionFingerprint),
            std::bitset<5>{25}};
        auto const prefix19Prefix = "P19"s;
        auto const prefix19Msg = "P18abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix19MaxMsgLength = 14;
        auto const prefix18Prefix = "P18"s;
        auto const prefix18Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix18MaxMsgLength = 14;
        auto const ed36Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed36PublicKey{
            {0x05, 0x4a, 0x11, 0x63, 0xdc, 0x2f, 0xec, 0x10, 0x45, 0x73, 0x28,
             0x4f, 0xc1, 0x6d, 0x7c, 0x08, 0xd7, 0x47, 0xa5, 0x2d, 0xb7, 0x18,
             0xde, 0x6c, 0xfe, 0x41, 0x4d, 0x87, 0xfd, 0xda, 0x2d, 0x76}};
        std::array<std::uint8_t, 64> const ed36Sig{
            {0xff, 0x18, 0x6c, 0xc0, 0x6e, 0xfa, 0x25, 0x7c, 0xf5, 0x54, 0x81,
             0x9c, 0x85, 0x33, 0xe1, 0xf6, 0x39, 0xe2, 0x2f, 0xab, 0xaa, 0x27,
             0x6e, 0xf7, 0xcc, 0x65, 0xd5, 0x15, 0x3a, 0x05, 0xc0, 0x6a, 0x21,
             0x52, 0x70, 0xb0, 0x60, 0x62, 0xbb, 0xab, 0x29, 0x3f, 0xe5, 0x69,
             0x81, 0xc2, 0xdb, 0x84, 0xb7, 0xe8, 0x82, 0x07, 0x42, 0xa8, 0xf8,
             0xd2, 0x3f, 0x65, 0x7a, 0xb1, 0x37, 0xb4, 0x39, 0x09}};
        std::array<std::uint8_t, 32> const ed36SigningKey{
            {0x21, 0xc7, 0x26, 0xda, 0x41, 0x61, 0x98, 0x3b, 0x2c, 0xf3, 0xe4,
             0x80, 0x23, 0x34, 0xad, 0x5e, 0xa3, 0xa7, 0xb2, 0xd5, 0x33, 0x29,
             0xc9, 0x8b, 0x4d, 0xd5, 0x1a, 0xdd, 0x8e, 0x54, 0x23, 0x4f}};
        (void)ed36SigningKey;
        auto const thresh35Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim37CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim37Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim37CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa38CondConditionFingerprint =
            "\x13\xb3\xe0\x2d\xea\x58\x68\x9a\xa7\x10\x7e\xb2\x1a\x12\x55"
            "\x79\xd6\xfe\xde\x57\x0f\x6c\x6b\xde\xd7\xfd\x12\xeb\xa6\x1d"
            "\xad\x43"s;
        Condition const Rsa38Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa38CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed39CondConditionFingerprint =
            "\xbe\x9b\x3b\xe3\x70\xfc\xc2\x29\xaa\xe9\x72\x91\x42\x6b\xd7"
            "\x1f\x1a\x25\x7d\xde\xa8\x39\xfb\xce\x5c\xaa\x63\xde\xfd\x1d"
            "\x23\xcf"s;
        Condition const Ed39Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed39CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const thresh0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim40CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim40Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim40CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa41CondConditionFingerprint =
            "\xf3\xe3\x0d\x35\x45\x3f\x9f\x57\x07\x0b\x13\x04\x4d\x62\x56"
            "\x30\x18\x34\x88\x02\x22\xa6\x94\x6e\xba\x97\xa4\x4a\x64\x5d"
            "\x05\xd1"s;
        Condition const Rsa41Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa41CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed42CondConditionFingerprint =
            "\xe3\x9a\x66\x70\xcd\x9b\x26\x4a\x79\xac\x64\xbe\x92\xbb\xfb"
            "\x70\x0b\xdc\x9c\xbd\x13\x61\xb7\x00\x22\xaa\x2f\xdc\x96\xc9"
            "\x45\x44"s;
        Condition const Ed42Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed42CondConditionFingerprint),
                                 std::bitset<5>{0}};

        auto ed4 = std::make_unique<Ed25519>(ed4PublicKey, ed4Sig);
        auto ed6 = std::make_unique<Ed25519>(ed6PublicKey, ed6Sig);
        std::vector<std::unique_ptr<Fulfillment>> thresh5Subfulfillments;
        thresh5Subfulfillments.emplace_back(std::move(ed6));
        std::vector<Condition> thresh5Subconditions{
            {Preim7Cond, Rsa8Cond, Ed9Cond}};
        auto thresh5 = std::make_unique<ThresholdSha256>(
            std::move(thresh5Subfulfillments), std::move(thresh5Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh3Subfulfillments;
        thresh3Subfulfillments.emplace_back(std::move(ed4));
        thresh3Subfulfillments.emplace_back(std::move(thresh5));
        std::vector<Condition> thresh3Subconditions{
            {Preim10Cond, Rsa11Cond, Ed12Cond, Thresh13Cond}};
        auto thresh3 = std::make_unique<ThresholdSha256>(
            std::move(thresh3Subfulfillments), std::move(thresh3Subconditions));
        auto prefix2 = std::make_unique<PrefixSha256>(
            makeSlice(prefix2Prefix), prefix2MaxMsgLength, std::move(thresh3));
        auto prefix1 = std::make_unique<PrefixSha256>(
            makeSlice(prefix1Prefix), prefix1MaxMsgLength, std::move(prefix2));
        auto ed21 = std::make_unique<Ed25519>(ed21PublicKey, ed21Sig);
        auto ed23 = std::make_unique<Ed25519>(ed23PublicKey, ed23Sig);
        std::vector<std::unique_ptr<Fulfillment>> thresh22Subfulfillments;
        thresh22Subfulfillments.emplace_back(std::move(ed23));
        std::vector<Condition> thresh22Subconditions{
            {Preim24Cond, Rsa25Cond, Ed26Cond}};
        auto thresh22 = std::make_unique<ThresholdSha256>(
            std::move(thresh22Subfulfillments),
            std::move(thresh22Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh20Subfulfillments;
        thresh20Subfulfillments.emplace_back(std::move(ed21));
        thresh20Subfulfillments.emplace_back(std::move(thresh22));
        std::vector<Condition> thresh20Subconditions{
            {Preim27Cond, Rsa28Cond, Ed29Cond, Thresh30Cond}};
        auto thresh20 = std::make_unique<ThresholdSha256>(
            std::move(thresh20Subfulfillments),
            std::move(thresh20Subconditions));
        auto prefix19 = std::make_unique<PrefixSha256>(
            makeSlice(prefix19Prefix),
            prefix19MaxMsgLength,
            std::move(thresh20));
        auto prefix18 = std::make_unique<PrefixSha256>(
            makeSlice(prefix18Prefix),
            prefix18MaxMsgLength,
            std::move(prefix19));
        auto ed36 = std::make_unique<Ed25519>(ed36PublicKey, ed36Sig);
        std::vector<std::unique_ptr<Fulfillment>> thresh35Subfulfillments;
        thresh35Subfulfillments.emplace_back(std::move(ed36));
        std::vector<Condition> thresh35Subconditions{
            {Preim37Cond, Rsa38Cond, Ed39Cond}};
        auto thresh35 = std::make_unique<ThresholdSha256>(
            std::move(thresh35Subfulfillments),
            std::move(thresh35Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh0Subfulfillments;
        thresh0Subfulfillments.emplace_back(std::move(prefix1));
        thresh0Subfulfillments.emplace_back(std::move(prefix18));
        thresh0Subfulfillments.emplace_back(std::move(thresh35));
        std::vector<Condition> thresh0Subconditions{
            {Preim40Cond, Rsa41Cond, Ed42Cond}};
        ThresholdSha256 const thresh0(
            std::move(thresh0Subfulfillments), std::move(thresh0Subconditions));
        {
            auto const thresh0EncodedFulfillment =
                "\xa2\x82\x05\x9d\xa0\x82\x05\x1e\xa1\x82\x02\x17\x80\x02\x50"
                "\x31\x81\x01\x0e\xa2\x82\x02\x0c\xa1\x82\x02\x08\x80\x02\x50"
                "\x32\x81\x01\x0e\xa2\x82\x01\xfd\xa2\x82\x01\xf9\xa0\x82\x01"
                "\x4c\xa2\x81\xe3\xa0\x66\xa4\x64\x80\x20\xa0\x45\x26\xcf\xee"
                "\x7e\xda\x68\xd9\x70\x23\xac\x68\x48\x9e\x20\xa4\x5e\xf8\x51"
                "\xcb\xfe\x72\xc1\x11\x5d\x25\x9c\xbc\xfd\xbb\x8b\x81\x40\xfb"
                "\xc0\xf1\x77\xf4\x14\xdf\xb2\x32\xc8\x99\xc7\x9a\x9d\xe0\x4a"
                "\x03\x2d\xf5\xc9\xde\x46\xda\x77\x52\x24\x22\xef\xfb\x93\x63"
                "\xb1\x05\x36\x57\x4c\x78\xbc\x78\x6d\x20\x08\xbd\x75\xc3\x1e"
                "\xe0\x29\x24\xde\xa7\x03\xd3\xad\x5d\x7c\x31\x05\x83\xd0\xa4"
                "\xed\x95\x07\xa1\x79\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1"
                "\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21"
                "\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa3"
                "\x27\x80\x20\xd1\xb5\x1d\x35\x99\x9d\xb4\xc1\xaa\x81\x4d\xd7"
                "\x0e\xa9\x2a\x20\x7f\xe5\x5c\x75\xe8\x57\x8b\xbf\xe8\xd7\x1c"
                "\x7e\xb2\xbc\x91\x16\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x92"
                "\xfa\xfc\xc6\x2f\xe2\x8d\x8d\x25\x7c\xd4\x46\xab\xea\x82\xd0"
                "\x3f\x36\xbe\x1d\x11\x2b\xa0\xfe\xfe\xd4\x00\xd5\x7d\x9b\xf6"
                "\xc9\x81\x03\x02\x00\x00\xa4\x64\x80\x20\x26\x80\x85\x71\x79"
                "\x37\x27\xbd\x85\xaf\x22\x49\x59\x42\x99\x5c\x9c\x5b\x9f\x99"
                "\x54\xb6\xd4\xd1\x81\x94\x4c\x22\x53\x03\xc0\xec\x81\x40\x23"
                "\x8b\xb2\xc9\xde\xad\x1b\xb6\xce\x93\x9a\x00\x47\x3d\x42\xc1"
                "\x30\x19\x95\x03\x55\x19\x74\x85\xe9\xed\x92\xef\x22\xbd\x49"
                "\xe5\x44\xa0\x7a\x41\x7d\xa7\xb0\x3a\x90\x1b\xa1\x2b\xcc\x1d"
                "\x0a\x8b\x95\xc1\x3c\x05\x68\x26\x39\xad\xe4\xd4\x75\xf0\xb5"
                "\x18\xbe\x01\xa1\x81\xa6\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd"
                "\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33"
                "\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09"
                "\xa2\x2b\x80\x20\xae\x21\x0d\x3e\x92\xa0\xdb\x8d\x22\xd6\x15"
                "\xe6\x30\xb0\x7c\x07\xc2\x89\x69\x67\xb4\x87\x81\x5c\x0a\xc7"
                "\xa1\x72\xa9\x3e\x49\xe2\x81\x03\x02\x10\x00\x82\x02\x03\x98"
                "\xa3\x27\x80\x20\xaf\x93\xfd\x22\x45\xc2\x08\xab\x43\xf7\x45"
                "\x56\x63\xec\xaf\x15\x33\xa0\x2a\xb4\x9e\x15\xb4\x6e\xda\x87"
                "\x35\xde\x09\x4b\x06\x31\x81\x03\x01\x00\x00\xa4\x27\x80\x20"
                "\x55\xcc\xd1\xa2\x2c\x90\x8d\xe3\x2e\x42\xd4\xe0\x65\xb2\xf7"
                "\xda\xc0\x07\x1e\xd3\x23\x0f\xfe\x78\x13\xa2\x86\x61\xc4\x34"
                "\x28\x50\x81\x03\x02\x00\x00\xa1\x82\x02\x19\x80\x03\x50\x31"
                "\x38\x81\x01\x0e\xa2\x82\x02\x0d\xa1\x82\x02\x09\x80\x03\x50"
                "\x31\x39\x81\x01\x0e\xa2\x82\x01\xfd\xa2\x82\x01\xf9\xa0\x82"
                "\x01\x4c\xa2\x81\xe3\xa0\x66\xa4\x64\x80\x20\x8a\xfc\x00\xab"
                "\x50\x13\x80\x92\xc3\x2f\xe7\x61\xef\xc2\xdd\xb6\x9a\x24\x0a"
                "\xb3\x36\xd5\xe1\xe2\x89\x2f\x53\x5c\xdd\x21\xd2\x81\x81\x40"
                "\xb0\x16\x53\x61\x6d\xcf\xa3\x94\x46\x47\x60\xd6\xf6\x9c\xae"
                "\x85\x0e\x98\xfd\x98\x75\xec\x8d\x10\xa1\x4b\x35\x85\x93\x1f"
                "\x28\xa4\x13\x70\x48\x57\x16\xac\x5e\x5b\x4e\xf1\x2c\x7d\xe5"
                "\x16\x22\x00\x47\x5e\xc3\x9e\xd8\xd8\x06\x9d\xdb\xf3\xe9\xbf"
                "\xf7\x02\x39\x07\xa1\x79\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd"
                "\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33"
                "\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09"
                "\xa3\x27\x80\x20\xb2\x7f\x94\xe3\xdf\x0c\x9a\x71\x3a\xd2\xeb"
                "\x71\x91\x72\x40\xb9\xcb\xb7\xac\xbc\x77\x0a\x08\x85\x07\xa3"
                "\x85\x4e\x7e\xc9\x50\x96\x81\x03\x01\x00\x00\xa4\x27\x80\x20"
                "\xd6\x2f\x07\xbd\x56\xfe\x9a\x02\x8c\x98\x1a\x72\x17\xb6\x26"
                "\x90\x51\xaf\xe4\xea\x51\x64\xe0\x58\x3e\x85\xc9\x29\x22\x94"
                "\xa1\xbf\x81\x03\x02\x00\x00\xa4\x64\x80\x20\x02\x14\x74\x80"
                "\x5a\xe0\x16\xb1\xfc\x36\x0f\x1d\x57\xdb\x72\x46\xf7\x50\xe0"
                "\x7c\xcc\x48\xee\x1f\x1e\x22\x2c\x96\x5f\xd0\xd7\x4b\x81\x40"
                "\xd4\x5a\xfe\x26\xdf\xeb\x15\xab\x82\x8d\xcc\xf4\x8e\x22\xec"
                "\x84\xf0\x6c\x71\xa3\xe0\xb2\x2b\x55\x98\x0f\x40\xae\x01\x82"
                "\x07\x49\x9a\x9e\x94\x42\x93\xe7\xf7\xc0\x63\xb4\x68\xe4\xce"
                "\x54\x61\x7c\xba\x1b\xaf\xcb\x67\x26\xa8\x42\x2b\x73\xb3\x95"
                "\xa7\xcb\xe9\x07\xa1\x81\xa6\xa0\x25\x80\x20\x5d\xa0\x30\xef"
                "\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9"
                "\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01"
                "\x09\xa2\x2b\x80\x20\x16\x94\x83\xc9\x00\x1c\x85\xcc\xab\xe8"
                "\x23\xe4\xaf\x61\xa9\x61\xf1\x64\x3e\x5b\x42\xac\x03\x3c\xe1"
                "\xaf\x7a\xeb\xee\x91\x10\xd6\x81\x03\x02\x10\x00\x82\x02\x03"
                "\x98\xa3\x27\x80\x20\x58\xac\x94\x55\x27\x79\x7a\x0c\xac\x84"
                "\x2d\x5c\x13\x32\xee\x84\x25\xb8\xb8\xec\x25\x0d\x40\xee\xc0"
                "\xd4\x79\x18\x3f\xc6\xbc\xd7\x81\x03\x01\x00\x00\xa4\x27\x80"
                "\x20\xc5\x39\xb2\xc7\xc4\x92\x8a\x29\xf3\x72\xb4\x6c\xa5\x0d"
                "\x8c\xbe\x43\xda\xc9\xac\x6c\x26\x7c\x44\xb9\x3f\xee\x40\xcc"
                "\x8e\x41\x3c\x81\x03\x02\x00\x00\xa2\x81\xe3\xa0\x66\xa4\x64"
                "\x80\x20\x05\x4a\x11\x63\xdc\x2f\xec\x10\x45\x73\x28\x4f\xc1"
                "\x6d\x7c\x08\xd7\x47\xa5\x2d\xb7\x18\xde\x6c\xfe\x41\x4d\x87"
                "\xfd\xda\x2d\x76\x81\x40\xff\x18\x6c\xc0\x6e\xfa\x25\x7c\xf5"
                "\x54\x81\x9c\x85\x33\xe1\xf6\x39\xe2\x2f\xab\xaa\x27\x6e\xf7"
                "\xcc\x65\xd5\x15\x3a\x05\xc0\x6a\x21\x52\x70\xb0\x60\x62\xbb"
                "\xab\x29\x3f\xe5\x69\x81\xc2\xdb\x84\xb7\xe8\x82\x07\x42\xa8"
                "\xf8\xd2\x3f\x65\x7a\xb1\x37\xb4\x39\x09\xa1\x79\xa0\x25\x80"
                "\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d"
                "\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93"
                "\x58\xeb\x4e\x81\x01\x09\xa3\x27\x80\x20\x13\xb3\xe0\x2d\xea"
                "\x58\x68\x9a\xa7\x10\x7e\xb2\x1a\x12\x55\x79\xd6\xfe\xde\x57"
                "\x0f\x6c\x6b\xde\xd7\xfd\x12\xeb\xa6\x1d\xad\x43\x81\x03\x01"
                "\x00\x00\xa4\x27\x80\x20\xbe\x9b\x3b\xe3\x70\xfc\xc2\x29\xaa"
                "\xe9\x72\x91\x42\x6b\xd7\x1f\x1a\x25\x7d\xde\xa8\x39\xfb\xce"
                "\x5c\xaa\x63\xde\xfd\x1d\x23\xcf\x81\x03\x02\x00\x00\xa1\x79"
                "\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f"
                "\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd"
                "\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa3\x27\x80\x20\xf3\xe3"
                "\x0d\x35\x45\x3f\x9f\x57\x07\x0b\x13\x04\x4d\x62\x56\x30\x18"
                "\x34\x88\x02\x22\xa6\x94\x6e\xba\x97\xa4\x4a\x64\x5d\x05\xd1"
                "\x81\x03\x01\x00\x00\xa4\x27\x80\x20\xe3\x9a\x66\x70\xcd\x9b"
                "\x26\x4a\x79\xac\x64\xbe\x92\xbb\xfb\x70\x0b\xdc\x9c\xbd\x13"
                "\x61\xb7\x00\x22\xaa\x2f\xdc\x96\xc9\x45\x44\x81\x03\x02\x00"
                "\x00"s;
            auto const thresh0EncodedCondition =
                "\xa2\x2b\x80\x20\x8c\xee\x83\x88\x3c\xf6\xbb\xce\xb5\x92\x52"
                "\x0c\x86\xb9\xbf\x2e\x96\xec\x16\x3c\x72\x61\xda\xef\xa8\xee"
                "\x83\x62\x1d\xc7\x8a\x25\x81\x03\x0a\xa8\x42\x82\x02\x03\xd8"s;
            auto const thresh0EncodedFingerprint =
                "\x30\x82\x01\x07\x80\x01\x03\xa1\x82\x01\x00\xa0\x25\x80\x20"
                "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
                "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
                "\xeb\x4e\x81\x01\x09\xa1\x2b\x80\x20\x52\x2e\x41\x1f\xaf\x58"
                "\xad\x79\x02\x9a\x3e\x2c\xe9\x97\x2a\x72\x3c\x7b\x47\x2a\x04"
                "\xb7\x78\x50\x94\xe9\x38\xfe\xda\xb4\xcd\xab\x81\x03\x04\x40"
                "\x22\x82\x02\x03\xb8\xa1\x2b\x80\x20\x53\xe3\xe6\x63\x67\x44"
                "\x21\xb5\xec\x39\x8d\x6e\x00\xa9\x11\x4a\xcc\x23\x70\xd6\x72"
                "\x49\x37\x66\x52\xcd\xc8\xd1\x7f\xa8\xf8\x35\x81\x03\x04\x40"
                "\x20\x82\x02\x03\xb8\xa2\x2b\x80\x20\x14\x9d\x47\xf0\x94\xe1"
                "\x4a\xf7\x9c\x4e\x5c\x17\xe0\x5b\x44\xde\x36\xa4\x80\x55\x3c"
                "\x83\x65\xd2\xd9\x7a\x60\x40\x63\x3a\xc0\x5b\x81\x03\x02\x10"
                "\x00\x82\x02\x03\x98\xa3\x27\x80\x20\xf3\xe3\x0d\x35\x45\x3f"
                "\x9f\x57\x07\x0b\x13\x04\x4d\x62\x56\x30\x18\x34\x88\x02\x22"
                "\xa6\x94\x6e\xba\x97\xa4\x4a\x64\x5d\x05\xd1\x81\x03\x01\x00"
                "\x00\xa4\x27\x80\x20\xe3\x9a\x66\x70\xcd\x9b\x26\x4a\x79\xac"
                "\x64\xbe\x92\xbb\xfb\x70\x0b\xdc\x9c\xbd\x13\x61\xb7\x00\x22"
                "\xaa\x2f\xdc\x96\xc9\x45\x44\x81\x03\x02\x00\x00"s;
            check(
                &thresh0,
                thresh0Msg,
                thresh0EncodedFulfillment,
                thresh0EncodedCondition,
                thresh0EncodedFingerprint);
        }
    }

    void
    testThresh63()
    {
        testcase("Thresh63");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * thresh0
        // ** Preim21Cond
        // ** Rsa22Cond
        // ** Ed23Cond
        // ** Prefix24Cond
        // ** Thresh41Cond
        // ** prefix1
        // *** prefix2
        // **** thresh3
        // ***** Preim10Cond
        // ***** Rsa11Cond
        // ***** Ed12Cond
        // ***** Thresh13Cond
        // ***** ed4
        // ***** thresh5
        // ****** Preim7Cond
        // ****** Rsa8Cond
        // ****** Ed9Cond
        // ****** ed6
        // ** preim18
        // ** rsa19
        // ** ed20

        auto const ed4Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed4PublicKey{
            {0x26, 0x80, 0x85, 0x71, 0x79, 0x37, 0x27, 0xbd, 0x85, 0xaf, 0x22,
             0x49, 0x59, 0x42, 0x99, 0x5c, 0x9c, 0x5b, 0x9f, 0x99, 0x54, 0xb6,
             0xd4, 0xd1, 0x81, 0x94, 0x4c, 0x22, 0x53, 0x03, 0xc0, 0xec}};
        std::array<std::uint8_t, 64> const ed4Sig{
            {0x23, 0x8b, 0xb2, 0xc9, 0xde, 0xad, 0x1b, 0xb6, 0xce, 0x93, 0x9a,
             0x00, 0x47, 0x3d, 0x42, 0xc1, 0x30, 0x19, 0x95, 0x03, 0x55, 0x19,
             0x74, 0x85, 0xe9, 0xed, 0x92, 0xef, 0x22, 0xbd, 0x49, 0xe5, 0x44,
             0xa0, 0x7a, 0x41, 0x7d, 0xa7, 0xb0, 0x3a, 0x90, 0x1b, 0xa1, 0x2b,
             0xcc, 0x1d, 0x0a, 0x8b, 0x95, 0xc1, 0x3c, 0x05, 0x68, 0x26, 0x39,
             0xad, 0xe4, 0xd4, 0x75, 0xf0, 0xb5, 0x18, 0xbe, 0x01}};
        std::array<std::uint8_t, 32> const ed4SigningKey{
            {0x2a, 0x7a, 0x9a, 0x1f, 0xf1, 0x08, 0x8f, 0x8e, 0xef, 0x3a, 0x39,
             0xce, 0x13, 0xea, 0x08, 0x08, 0x8a, 0xf6, 0x06, 0x78, 0xd5, 0x3e,
             0x0b, 0x9c, 0x84, 0xfb, 0x39, 0x93, 0xd6, 0xfe, 0xa0, 0x3d}};
        (void)ed4SigningKey;
        auto const ed6Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed6PublicKey{
            {0xa0, 0x45, 0x26, 0xcf, 0xee, 0x7e, 0xda, 0x68, 0xd9, 0x70, 0x23,
             0xac, 0x68, 0x48, 0x9e, 0x20, 0xa4, 0x5e, 0xf8, 0x51, 0xcb, 0xfe,
             0x72, 0xc1, 0x11, 0x5d, 0x25, 0x9c, 0xbc, 0xfd, 0xbb, 0x8b}};
        std::array<std::uint8_t, 64> const ed6Sig{
            {0xfb, 0xc0, 0xf1, 0x77, 0xf4, 0x14, 0xdf, 0xb2, 0x32, 0xc8, 0x99,
             0xc7, 0x9a, 0x9d, 0xe0, 0x4a, 0x03, 0x2d, 0xf5, 0xc9, 0xde, 0x46,
             0xda, 0x77, 0x52, 0x24, 0x22, 0xef, 0xfb, 0x93, 0x63, 0xb1, 0x05,
             0x36, 0x57, 0x4c, 0x78, 0xbc, 0x78, 0x6d, 0x20, 0x08, 0xbd, 0x75,
             0xc3, 0x1e, 0xe0, 0x29, 0x24, 0xde, 0xa7, 0x03, 0xd3, 0xad, 0x5d,
             0x7c, 0x31, 0x05, 0x83, 0xd0, 0xa4, 0xed, 0x95, 0x07}};
        std::array<std::uint8_t, 32> const ed6SigningKey{
            {0x8f, 0xac, 0x15, 0x02, 0xce, 0xb4, 0x10, 0x27, 0x56, 0x91, 0x2b,
             0xd0, 0x57, 0xe7, 0x6c, 0xe0, 0xc5, 0x46, 0x65, 0x38, 0xf0, 0xc8,
             0x09, 0xe0, 0xb4, 0x57, 0xfb, 0x11, 0xfc, 0x00, 0xe9, 0xdf}};
        (void)ed6SigningKey;
        auto const thresh5Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim7CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim7Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim7CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa8CondConditionFingerprint =
            "\xd1\xb5\x1d\x35\x99\x9d\xb4\xc1\xaa\x81\x4d\xd7\x0e\xa9\x2a"
            "\x20\x7f\xe5\x5c\x75\xe8\x57\x8b\xbf\xe8\xd7\x1c\x7e\xb2\xbc"
            "\x91\x16"s;
        Condition const Rsa8Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa8CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed9CondConditionFingerprint =
            "\x92\xfa\xfc\xc6\x2f\xe2\x8d\x8d\x25\x7c\xd4\x46\xab\xea\x82"
            "\xd0\x3f\x36\xbe\x1d\x11\x2b\xa0\xfe\xfe\xd4\x00\xd5\x7d\x9b"
            "\xf6\xc9"s;
        Condition const Ed9Cond{Type::ed25519Sha256,
                                131072,
                                makeSlice(Ed9CondConditionFingerprint),
                                std::bitset<5>{0}};
        auto const thresh3Msg = "P2P1abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim10CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim10Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim10CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa11CondConditionFingerprint =
            "\xaf\x93\xfd\x22\x45\xc2\x08\xab\x43\xf7\x45\x56\x63\xec\xaf"
            "\x15\x33\xa0\x2a\xb4\x9e\x15\xb4\x6e\xda\x87\x35\xde\x09\x4b"
            "\x06\x31"s;
        Condition const Rsa11Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa11CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed12CondConditionFingerprint =
            "\x55\xcc\xd1\xa2\x2c\x90\x8d\xe3\x2e\x42\xd4\xe0\x65\xb2\xf7"
            "\xda\xc0\x07\x1e\xd3\x23\x0f\xfe\x78\x13\xa2\x86\x61\xc4\x34"
            "\x28\x50"s;
        Condition const Ed12Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed12CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Thresh13CondConditionFingerprint =
            "\xae\x21\x0d\x3e\x92\xa0\xdb\x8d\x22\xd6\x15\xe6\x30\xb0\x7c"
            "\x07\xc2\x89\x69\x67\xb4\x87\x81\x5c\x0a\xc7\xa1\x72\xa9\x3e"
            "\x49\xe2"s;
        Condition const Thresh13Cond{
            Type::thresholdSha256,
            135168,
            makeSlice(Thresh13CondConditionFingerprint),
            std::bitset<5>{25}};
        auto const prefix2Prefix = "P2"s;
        auto const prefix2Msg = "P1abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix2MaxMsgLength = 14;
        auto const prefix1Prefix = "P1"s;
        auto const prefix1Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix1MaxMsgLength = 14;
        auto const preim18Preimage = "I am root"s;
        auto const preim18Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const rsa19Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa19PublicKey{
            {0xc0, 0x81, 0x79, 0x3f, 0x26, 0x8f, 0xe8, 0x48, 0xf1, 0x9c, 0xd2,
             0x09, 0x7c, 0x96, 0x0d, 0x3c, 0xbb, 0x85, 0xdb, 0x1f, 0xab, 0xbe,
             0x97, 0x7d, 0xc0, 0x31, 0x07, 0xb0, 0x2e, 0xb9, 0x5c, 0x2c, 0xae,
             0x82, 0xf5, 0x3e, 0xb6, 0x91, 0xb8, 0x88, 0x2a, 0xa4, 0xa7, 0x81,
             0x97, 0xa5, 0x71, 0xad, 0x09, 0x4d, 0xfc, 0x25, 0x41, 0x3e, 0xe0,
             0xa3, 0xa6, 0x19, 0xba, 0x8f, 0x02, 0x41, 0x8d, 0x05, 0x51, 0xcd,
             0xf8, 0x22, 0xb3, 0x7a, 0x6e, 0x94, 0x7e, 0xaa, 0x58, 0xda, 0x02,
             0xae, 0x73, 0x00, 0x94, 0x1c, 0xb5, 0xb5, 0x26, 0x9f, 0xc5, 0x8b,
             0x04, 0xe0, 0xe0, 0x73, 0x96, 0x4b, 0xaf, 0x6d, 0x0a, 0xe4, 0x25,
             0x90, 0x2d, 0x13, 0x3c, 0xbe, 0x0e, 0x68, 0x7d, 0xfe, 0xa6, 0x12,
             0x6b, 0xb6, 0xec, 0xa0, 0xda, 0x2b, 0x22, 0x31, 0xe6, 0x05, 0x76,
             0xf5, 0x98, 0x8e, 0x76, 0x86, 0xbe, 0xc6, 0x07, 0x73, 0x52, 0x20,
             0x13, 0x8f, 0x93, 0x1f, 0xd9, 0x73, 0xfa, 0xb3, 0xed, 0x50, 0x1b,
             0xf7, 0x68, 0xf6, 0x60, 0xa3, 0x12, 0x73, 0x10, 0xda, 0x06, 0x70,
             0x69, 0xcb, 0xb5, 0x6c, 0x85, 0x29, 0xe8, 0x9e, 0x29, 0xb1, 0x4d,
             0x7e, 0x7e, 0xce, 0x15, 0xf5, 0x25, 0x55, 0xc5, 0x89, 0x7e, 0x34,
             0x48, 0x34, 0x43, 0x30, 0x2b, 0x6a, 0x8a, 0x6d, 0x1b, 0x55, 0x2a,
             0x2c, 0xf4, 0xcd, 0xc1, 0x72, 0x78, 0xda, 0x0d, 0x54, 0x32, 0x46,
             0x93, 0xd7, 0x96, 0xce, 0x33, 0x06, 0xe9, 0x7a, 0x7b, 0x6d, 0xe9,
             0x54, 0xe4, 0xbe, 0x56, 0x37, 0xa7, 0x7c, 0xc8, 0xba, 0x17, 0xb1,
             0xba, 0x76, 0xd7, 0x7f, 0xca, 0x7f, 0xfe, 0x60, 0x7d, 0x60, 0x27,
             0xd0, 0x80, 0x65, 0x74, 0xdc, 0xd6, 0xc8, 0x58, 0x4d, 0xcd, 0x8e,
             0xc9, 0x4e, 0xb2, 0x3e, 0x6e, 0x4f, 0xfa, 0x22, 0xfa, 0x9f, 0x3a,
             0x9f, 0x14, 0xeb}};
        std::array<std::uint8_t, 256> const rsa19Sig{
            {0x77, 0xe9, 0xb3, 0xc2, 0x00, 0x93, 0x27, 0x15, 0xd0, 0x8d, 0xfb,
             0x6c, 0x0a, 0x7d, 0x15, 0x50, 0x46, 0xb1, 0x08, 0x55, 0x6f, 0xd5,
             0x0c, 0x1d, 0x12, 0xfa, 0xd6, 0xc2, 0x4c, 0x7b, 0x20, 0x46, 0xfb,
             0xd1, 0x71, 0xa3, 0x38, 0xe7, 0x58, 0x24, 0xb1, 0x84, 0x71, 0xdf,
             0xb2, 0x90, 0x2b, 0xb2, 0x7d, 0xca, 0xb1, 0xef, 0x6e, 0x4d, 0xb3,
             0x30, 0x78, 0x91, 0x64, 0xd2, 0x10, 0x09, 0xc1, 0x03, 0x47, 0x2f,
             0x6d, 0x4d, 0xd6, 0x64, 0xaa, 0x79, 0x9e, 0xfe, 0x74, 0xe5, 0x5a,
             0x78, 0x8f, 0xaa, 0xec, 0xb3, 0x41, 0xdd, 0x15, 0x1d, 0xa3, 0x75,
             0x14, 0xe5, 0x59, 0x46, 0x0c, 0x4f, 0x60, 0x96, 0xf9, 0x45, 0x8e,
             0x99, 0x6e, 0x72, 0x21, 0xfe, 0x89, 0x8b, 0xd3, 0x2b, 0x7d, 0x5e,
             0x29, 0xc9, 0xce, 0xfa, 0x21, 0xbe, 0xe7, 0x2b, 0xb2, 0xed, 0xa3,
             0x27, 0x50, 0x5e, 0xa1, 0xa7, 0x3a, 0x19, 0xd8, 0xb6, 0x3f, 0xad,
             0x7d, 0x9e, 0x20, 0x52, 0x15, 0x91, 0x5c, 0x4e, 0x94, 0x11, 0x2d,
             0xc8, 0x6e, 0x63, 0xf4, 0xf5, 0x1e, 0x12, 0xa3, 0xea, 0x4d, 0x3d,
             0x2a, 0x0a, 0xde, 0x53, 0x92, 0xb8, 0x06, 0xa8, 0x42, 0x17, 0xbd,
             0xde, 0x1d, 0x81, 0xb7, 0xc5, 0xb5, 0x58, 0x90, 0x5c, 0x88, 0xd1,
             0xeb, 0xab, 0xad, 0xe4, 0xda, 0xf0, 0x91, 0xd6, 0xf7, 0x3a, 0xe6,
             0x2b, 0xef, 0xdc, 0xfc, 0x8e, 0x54, 0xbd, 0x58, 0xd2, 0x1a, 0x84,
             0x9e, 0xae, 0x94, 0xc2, 0xbf, 0x36, 0xe3, 0x52, 0x28, 0x03, 0x8b,
             0x8f, 0xe4, 0x81, 0xc7, 0xd5, 0x23, 0x81, 0xb7, 0x70, 0x4a, 0xb2,
             0x01, 0xb3, 0x25, 0xa4, 0xc1, 0x24, 0x29, 0x71, 0x2e, 0x58, 0x03,
             0xfa, 0x57, 0x7b, 0x85, 0x96, 0x99, 0x34, 0xf4, 0x50, 0x54, 0x05,
             0x07, 0xd5, 0xa4, 0x8c, 0x7c, 0x95, 0xa6, 0x33, 0xf9, 0x24, 0x56,
             0x54, 0x27, 0x4c}};
        auto const ed20Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed20PublicKey{
            {0x63, 0x87, 0xe7, 0xfd, 0x5e, 0x93, 0x76, 0x3e, 0x74, 0x42, 0x8e,
             0xd5, 0xc9, 0x79, 0xa6, 0xa9, 0xc4, 0x3d, 0x61, 0x14, 0x7b, 0x49,
             0xf3, 0xda, 0x52, 0xc2, 0x74, 0x9b, 0x62, 0xae, 0x8c, 0x90}};
        std::array<std::uint8_t, 64> const ed20Sig{
            {0x4f, 0x9d, 0xaf, 0x7e, 0x00, 0x50, 0x3d, 0xdc, 0xb2, 0xd9, 0x56,
             0x79, 0x61, 0xb7, 0xcb, 0xe6, 0x2d, 0xf3, 0xc8, 0xce, 0x6f, 0x7a,
             0xde, 0x9a, 0x85, 0xf8, 0xc5, 0xc7, 0x93, 0x7d, 0xf8, 0xdc, 0xdb,
             0xbc, 0x12, 0x87, 0x0d, 0x42, 0x62, 0xc8, 0xc8, 0xd0, 0xbd, 0xb7,
             0xa9, 0x05, 0x0c, 0x57, 0x2a, 0xf5, 0x59, 0x83, 0x81, 0x69, 0xc8,
             0xbc, 0xec, 0x4b, 0xf8, 0xf6, 0xbd, 0xc7, 0x70, 0x0f}};
        std::array<std::uint8_t, 32> const ed20SigningKey{
            {0x15, 0xe5, 0xd2, 0xb8, 0x15, 0x1f, 0xe1, 0x89, 0x7e, 0x3f, 0x33,
             0x3b, 0x27, 0xed, 0x94, 0xb6, 0xe4, 0x47, 0x82, 0xa0, 0xa8, 0x40,
             0xb9, 0x4d, 0xa8, 0x65, 0xb8, 0x79, 0x2b, 0x0f, 0x1b, 0x4c}};
        (void)ed20SigningKey;
        auto const thresh0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim21CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim21Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim21CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa22CondConditionFingerprint =
            "\x1a\x59\xf0\xd9\x99\xe2\xac\x9a\xc7\x84\xc3\xe7\x21\x3d\x86"
            "\x3b\x18\xfd\x67\xc1\x70\x5f\x36\x60\xc3\x4d\xb6\x1c\x84\x53"
            "\x7e\xda"s;
        Condition const Rsa22Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa22CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed23CondConditionFingerprint =
            "\x1a\x18\x47\x1f\xd0\x23\xc4\x4d\x07\x5b\x1e\x43\xa6\x28\x54"
            "\xce\xec\x02\x4d\xc1\x00\x3c\x0c\x55\x02\xa3\xa3\x28\x38\x88"
            "\x5c\x84"s;
        Condition const Ed23Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed23CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Prefix24CondConditionFingerprint =
            "\xda\x59\x9e\x5a\x86\x3b\x00\x19\x75\x3b\x88\xe1\x5f\x8a\xd8"
            "\x1a\x32\xe2\x93\x94\x29\x80\x63\x91\x1a\xb3\xf6\x2a\xd6\x64"
            "\xaa\x29"s;
        Condition const Prefix24Cond{
            Type::prefixSha256,
            278570,
            makeSlice(Prefix24CondConditionFingerprint),
            std::bitset<5>{29}};
        auto const Thresh41CondConditionFingerprint =
            "\x52\x92\x62\x3c\x18\xb5\xda\xcd\xb0\x67\xfe\x2b\xb0\x51\x84"
            "\xf3\x90\xc9\xe6\x46\x39\x96\x20\xd2\x46\x94\xad\x71\x87\x34"
            "\xd8\x6c"s;
        Condition const Thresh41Cond{
            Type::thresholdSha256,
            135168,
            makeSlice(Thresh41CondConditionFingerprint),
            std::bitset<5>{25}};

        auto ed4 = std::make_unique<Ed25519>(ed4PublicKey, ed4Sig);
        auto ed6 = std::make_unique<Ed25519>(ed6PublicKey, ed6Sig);
        std::vector<std::unique_ptr<Fulfillment>> thresh5Subfulfillments;
        thresh5Subfulfillments.emplace_back(std::move(ed6));
        std::vector<Condition> thresh5Subconditions{
            {Preim7Cond, Rsa8Cond, Ed9Cond}};
        auto thresh5 = std::make_unique<ThresholdSha256>(
            std::move(thresh5Subfulfillments), std::move(thresh5Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh3Subfulfillments;
        thresh3Subfulfillments.emplace_back(std::move(ed4));
        thresh3Subfulfillments.emplace_back(std::move(thresh5));
        std::vector<Condition> thresh3Subconditions{
            {Preim10Cond, Rsa11Cond, Ed12Cond, Thresh13Cond}};
        auto thresh3 = std::make_unique<ThresholdSha256>(
            std::move(thresh3Subfulfillments), std::move(thresh3Subconditions));
        auto prefix2 = std::make_unique<PrefixSha256>(
            makeSlice(prefix2Prefix), prefix2MaxMsgLength, std::move(thresh3));
        auto prefix1 = std::make_unique<PrefixSha256>(
            makeSlice(prefix1Prefix), prefix1MaxMsgLength, std::move(prefix2));
        auto preim18 =
            std::make_unique<PreimageSha256>(makeSlice(preim18Preimage));
        auto rsa19 = std::make_unique<RsaSha256>(
            makeSlice(rsa19PublicKey), makeSlice(rsa19Sig));
        auto ed20 = std::make_unique<Ed25519>(ed20PublicKey, ed20Sig);
        std::vector<std::unique_ptr<Fulfillment>> thresh0Subfulfillments;
        thresh0Subfulfillments.emplace_back(std::move(prefix1));
        thresh0Subfulfillments.emplace_back(std::move(preim18));
        thresh0Subfulfillments.emplace_back(std::move(rsa19));
        thresh0Subfulfillments.emplace_back(std::move(ed20));
        std::vector<Condition> thresh0Subconditions{
            {Preim21Cond, Rsa22Cond, Ed23Cond, Prefix24Cond, Thresh41Cond}};
        ThresholdSha256 const thresh0(
            std::move(thresh0Subfulfillments), std::move(thresh0Subconditions));
        {
            auto const thresh0EncodedFulfillment =
                "\xa2\x82\x05\x74\xa0\x82\x04\x9a\xa0\x0b\x80\x09\x49\x20\x61"
                "\x6d\x20\x72\x6f\x6f\x74\xa1\x82\x02\x17\x80\x02\x50\x31\x81"
                "\x01\x0e\xa2\x82\x02\x0c\xa1\x82\x02\x08\x80\x02\x50\x32\x81"
                "\x01\x0e\xa2\x82\x01\xfd\xa2\x82\x01\xf9\xa0\x82\x01\x4c\xa2"
                "\x81\xe3\xa0\x66\xa4\x64\x80\x20\xa0\x45\x26\xcf\xee\x7e\xda"
                "\x68\xd9\x70\x23\xac\x68\x48\x9e\x20\xa4\x5e\xf8\x51\xcb\xfe"
                "\x72\xc1\x11\x5d\x25\x9c\xbc\xfd\xbb\x8b\x81\x40\xfb\xc0\xf1"
                "\x77\xf4\x14\xdf\xb2\x32\xc8\x99\xc7\x9a\x9d\xe0\x4a\x03\x2d"
                "\xf5\xc9\xde\x46\xda\x77\x52\x24\x22\xef\xfb\x93\x63\xb1\x05"
                "\x36\x57\x4c\x78\xbc\x78\x6d\x20\x08\xbd\x75\xc3\x1e\xe0\x29"
                "\x24\xde\xa7\x03\xd3\xad\x5d\x7c\x31\x05\x83\xd0\xa4\xed\x95"
                "\x07\xa1\x79\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11"
                "\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2"
                "\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa3\x27\x80"
                "\x20\xd1\xb5\x1d\x35\x99\x9d\xb4\xc1\xaa\x81\x4d\xd7\x0e\xa9"
                "\x2a\x20\x7f\xe5\x5c\x75\xe8\x57\x8b\xbf\xe8\xd7\x1c\x7e\xb2"
                "\xbc\x91\x16\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x92\xfa\xfc"
                "\xc6\x2f\xe2\x8d\x8d\x25\x7c\xd4\x46\xab\xea\x82\xd0\x3f\x36"
                "\xbe\x1d\x11\x2b\xa0\xfe\xfe\xd4\x00\xd5\x7d\x9b\xf6\xc9\x81"
                "\x03\x02\x00\x00\xa4\x64\x80\x20\x26\x80\x85\x71\x79\x37\x27"
                "\xbd\x85\xaf\x22\x49\x59\x42\x99\x5c\x9c\x5b\x9f\x99\x54\xb6"
                "\xd4\xd1\x81\x94\x4c\x22\x53\x03\xc0\xec\x81\x40\x23\x8b\xb2"
                "\xc9\xde\xad\x1b\xb6\xce\x93\x9a\x00\x47\x3d\x42\xc1\x30\x19"
                "\x95\x03\x55\x19\x74\x85\xe9\xed\x92\xef\x22\xbd\x49\xe5\x44"
                "\xa0\x7a\x41\x7d\xa7\xb0\x3a\x90\x1b\xa1\x2b\xcc\x1d\x0a\x8b"
                "\x95\xc1\x3c\x05\x68\x26\x39\xad\xe4\xd4\x75\xf0\xb5\x18\xbe"
                "\x01\xa1\x81\xa6\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75"
                "\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c"
                "\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa2\x2b"
                "\x80\x20\xae\x21\x0d\x3e\x92\xa0\xdb\x8d\x22\xd6\x15\xe6\x30"
                "\xb0\x7c\x07\xc2\x89\x69\x67\xb4\x87\x81\x5c\x0a\xc7\xa1\x72"
                "\xa9\x3e\x49\xe2\x81\x03\x02\x10\x00\x82\x02\x03\x98\xa3\x27"
                "\x80\x20\xaf\x93\xfd\x22\x45\xc2\x08\xab\x43\xf7\x45\x56\x63"
                "\xec\xaf\x15\x33\xa0\x2a\xb4\x9e\x15\xb4\x6e\xda\x87\x35\xde"
                "\x09\x4b\x06\x31\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x55\xcc"
                "\xd1\xa2\x2c\x90\x8d\xe3\x2e\x42\xd4\xe0\x65\xb2\xf7\xda\xc0"
                "\x07\x1e\xd3\x23\x0f\xfe\x78\x13\xa2\x86\x61\xc4\x34\x28\x50"
                "\x81\x03\x02\x00\x00\xa3\x82\x02\x08\x80\x82\x01\x00\xc0\x81"
                "\x79\x3f\x26\x8f\xe8\x48\xf1\x9c\xd2\x09\x7c\x96\x0d\x3c\xbb"
                "\x85\xdb\x1f\xab\xbe\x97\x7d\xc0\x31\x07\xb0\x2e\xb9\x5c\x2c"
                "\xae\x82\xf5\x3e\xb6\x91\xb8\x88\x2a\xa4\xa7\x81\x97\xa5\x71"
                "\xad\x09\x4d\xfc\x25\x41\x3e\xe0\xa3\xa6\x19\xba\x8f\x02\x41"
                "\x8d\x05\x51\xcd\xf8\x22\xb3\x7a\x6e\x94\x7e\xaa\x58\xda\x02"
                "\xae\x73\x00\x94\x1c\xb5\xb5\x26\x9f\xc5\x8b\x04\xe0\xe0\x73"
                "\x96\x4b\xaf\x6d\x0a\xe4\x25\x90\x2d\x13\x3c\xbe\x0e\x68\x7d"
                "\xfe\xa6\x12\x6b\xb6\xec\xa0\xda\x2b\x22\x31\xe6\x05\x76\xf5"
                "\x98\x8e\x76\x86\xbe\xc6\x07\x73\x52\x20\x13\x8f\x93\x1f\xd9"
                "\x73\xfa\xb3\xed\x50\x1b\xf7\x68\xf6\x60\xa3\x12\x73\x10\xda"
                "\x06\x70\x69\xcb\xb5\x6c\x85\x29\xe8\x9e\x29\xb1\x4d\x7e\x7e"
                "\xce\x15\xf5\x25\x55\xc5\x89\x7e\x34\x48\x34\x43\x30\x2b\x6a"
                "\x8a\x6d\x1b\x55\x2a\x2c\xf4\xcd\xc1\x72\x78\xda\x0d\x54\x32"
                "\x46\x93\xd7\x96\xce\x33\x06\xe9\x7a\x7b\x6d\xe9\x54\xe4\xbe"
                "\x56\x37\xa7\x7c\xc8\xba\x17\xb1\xba\x76\xd7\x7f\xca\x7f\xfe"
                "\x60\x7d\x60\x27\xd0\x80\x65\x74\xdc\xd6\xc8\x58\x4d\xcd\x8e"
                "\xc9\x4e\xb2\x3e\x6e\x4f\xfa\x22\xfa\x9f\x3a\x9f\x14\xeb\x81"
                "\x82\x01\x00\x77\xe9\xb3\xc2\x00\x93\x27\x15\xd0\x8d\xfb\x6c"
                "\x0a\x7d\x15\x50\x46\xb1\x08\x55\x6f\xd5\x0c\x1d\x12\xfa\xd6"
                "\xc2\x4c\x7b\x20\x46\xfb\xd1\x71\xa3\x38\xe7\x58\x24\xb1\x84"
                "\x71\xdf\xb2\x90\x2b\xb2\x7d\xca\xb1\xef\x6e\x4d\xb3\x30\x78"
                "\x91\x64\xd2\x10\x09\xc1\x03\x47\x2f\x6d\x4d\xd6\x64\xaa\x79"
                "\x9e\xfe\x74\xe5\x5a\x78\x8f\xaa\xec\xb3\x41\xdd\x15\x1d\xa3"
                "\x75\x14\xe5\x59\x46\x0c\x4f\x60\x96\xf9\x45\x8e\x99\x6e\x72"
                "\x21\xfe\x89\x8b\xd3\x2b\x7d\x5e\x29\xc9\xce\xfa\x21\xbe\xe7"
                "\x2b\xb2\xed\xa3\x27\x50\x5e\xa1\xa7\x3a\x19\xd8\xb6\x3f\xad"
                "\x7d\x9e\x20\x52\x15\x91\x5c\x4e\x94\x11\x2d\xc8\x6e\x63\xf4"
                "\xf5\x1e\x12\xa3\xea\x4d\x3d\x2a\x0a\xde\x53\x92\xb8\x06\xa8"
                "\x42\x17\xbd\xde\x1d\x81\xb7\xc5\xb5\x58\x90\x5c\x88\xd1\xeb"
                "\xab\xad\xe4\xda\xf0\x91\xd6\xf7\x3a\xe6\x2b\xef\xdc\xfc\x8e"
                "\x54\xbd\x58\xd2\x1a\x84\x9e\xae\x94\xc2\xbf\x36\xe3\x52\x28"
                "\x03\x8b\x8f\xe4\x81\xc7\xd5\x23\x81\xb7\x70\x4a\xb2\x01\xb3"
                "\x25\xa4\xc1\x24\x29\x71\x2e\x58\x03\xfa\x57\x7b\x85\x96\x99"
                "\x34\xf4\x50\x54\x05\x07\xd5\xa4\x8c\x7c\x95\xa6\x33\xf9\x24"
                "\x56\x54\x27\x4c\xa4\x64\x80\x20\x63\x87\xe7\xfd\x5e\x93\x76"
                "\x3e\x74\x42\x8e\xd5\xc9\x79\xa6\xa9\xc4\x3d\x61\x14\x7b\x49"
                "\xf3\xda\x52\xc2\x74\x9b\x62\xae\x8c\x90\x81\x40\x4f\x9d\xaf"
                "\x7e\x00\x50\x3d\xdc\xb2\xd9\x56\x79\x61\xb7\xcb\xe6\x2d\xf3"
                "\xc8\xce\x6f\x7a\xde\x9a\x85\xf8\xc5\xc7\x93\x7d\xf8\xdc\xdb"
                "\xbc\x12\x87\x0d\x42\x62\xc8\xc8\xd0\xbd\xb7\xa9\x05\x0c\x57"
                "\x2a\xf5\x59\x83\x81\x69\xc8\xbc\xec\x4b\xf8\xf6\xbd\xc7\x70"
                "\x0f\xa1\x81\xd3\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75"
                "\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c"
                "\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa1\x2b"
                "\x80\x20\xda\x59\x9e\x5a\x86\x3b\x00\x19\x75\x3b\x88\xe1\x5f"
                "\x8a\xd8\x1a\x32\xe2\x93\x94\x29\x80\x63\x91\x1a\xb3\xf6\x2a"
                "\xd6\x64\xaa\x29\x81\x03\x04\x40\x2a\x82\x02\x03\xb8\xa2\x2b"
                "\x80\x20\x52\x92\x62\x3c\x18\xb5\xda\xcd\xb0\x67\xfe\x2b\xb0"
                "\x51\x84\xf3\x90\xc9\xe6\x46\x39\x96\x20\xd2\x46\x94\xad\x71"
                "\x87\x34\xd8\x6c\x81\x03\x02\x10\x00\x82\x02\x03\x98\xa3\x27"
                "\x80\x20\x1a\x59\xf0\xd9\x99\xe2\xac\x9a\xc7\x84\xc3\xe7\x21"
                "\x3d\x86\x3b\x18\xfd\x67\xc1\x70\x5f\x36\x60\xc3\x4d\xb6\x1c"
                "\x84\x53\x7e\xda\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x1a\x18"
                "\x47\x1f\xd0\x23\xc4\x4d\x07\x5b\x1e\x43\xa6\x28\x54\xce\xec"
                "\x02\x4d\xc1\x00\x3c\x0c\x55\x02\xa3\xa3\x28\x38\x88\x5c\x84"
                "\x81\x03\x02\x00\x00"s;
            auto const thresh0EncodedCondition =
                "\xa2\x2b\x80\x20\xc5\x93\xe3\x65\x5d\x67\xc1\xe3\x31\x11\xd3"
                "\x30\xa7\xa2\xa2\x61\x81\x00\xe5\x4b\x9a\x81\x86\x58\x2a\xc2"
                "\x65\x2f\x1a\x29\xb8\x35\x81\x03\x0c\xb4\x4a\x82\x02\x03\xd8"s;
            auto const thresh0EncodedFingerprint =
                "\x30\x82\x01\x80\x80\x01\x04\xa1\x82\x01\x79\xa0\x25\x80\x20"
                "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
                "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
                "\xeb\x4e\x81\x01\x09\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1"
                "\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21"
                "\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa1"
                "\x2b\x80\x20\x53\xe3\xe6\x63\x67\x44\x21\xb5\xec\x39\x8d\x6e"
                "\x00\xa9\x11\x4a\xcc\x23\x70\xd6\x72\x49\x37\x66\x52\xcd\xc8"
                "\xd1\x7f\xa8\xf8\x35\x81\x03\x04\x40\x20\x82\x02\x03\xb8\xa1"
                "\x2b\x80\x20\xda\x59\x9e\x5a\x86\x3b\x00\x19\x75\x3b\x88\xe1"
                "\x5f\x8a\xd8\x1a\x32\xe2\x93\x94\x29\x80\x63\x91\x1a\xb3\xf6"
                "\x2a\xd6\x64\xaa\x29\x81\x03\x04\x40\x2a\x82\x02\x03\xb8\xa2"
                "\x2b\x80\x20\x52\x92\x62\x3c\x18\xb5\xda\xcd\xb0\x67\xfe\x2b"
                "\xb0\x51\x84\xf3\x90\xc9\xe6\x46\x39\x96\x20\xd2\x46\x94\xad"
                "\x71\x87\x34\xd8\x6c\x81\x03\x02\x10\x00\x82\x02\x03\x98\xa3"
                "\x27\x80\x20\x19\x8c\xcc\x4c\x02\x17\xf3\xb7\xc0\x65\x68\xae"
                "\xf6\xd8\x1a\x44\xd5\x39\x52\x93\x1c\xb2\x4f\x8f\xb3\x6f\x21"
                "\xfc\x18\x2c\x58\x10\x81\x03\x01\x00\x00\xa3\x27\x80\x20\x1a"
                "\x59\xf0\xd9\x99\xe2\xac\x9a\xc7\x84\xc3\xe7\x21\x3d\x86\x3b"
                "\x18\xfd\x67\xc1\x70\x5f\x36\x60\xc3\x4d\xb6\x1c\x84\x53\x7e"
                "\xda\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x1a\x18\x47\x1f\xd0"
                "\x23\xc4\x4d\x07\x5b\x1e\x43\xa6\x28\x54\xce\xec\x02\x4d\xc1"
                "\x00\x3c\x0c\x55\x02\xa3\xa3\x28\x38\x88\x5c\x84\x81\x03\x02"
                "\x00\x00\xa4\x27\x80\x20\xa1\xa0\xd1\xf4\xea\x8d\x9a\x14\x25"
                "\xca\x52\x3a\x77\x7e\xf4\x0d\x86\x56\xc7\x22\x12\xd3\xa3\xc2"
                "\x32\xa3\x2b\x80\x96\xf3\xd4\x23\x81\x03\x02\x00\x00"s;
            check(
                &thresh0,
                thresh0Msg,
                thresh0EncodedFulfillment,
                thresh0EncodedCondition,
                thresh0EncodedFingerprint);
        }
    }

    void
    testThresh64()
    {
        testcase("Thresh64");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * thresh0
        // ** Preim16Cond
        // ** Rsa17Cond
        // ** Ed18Cond
        // ** thresh1
        // *** ed2
        // ** prefix3
        // *** prefix4
        // **** ed5
        // ** thresh6
        // *** Preim13Cond
        // *** Rsa14Cond
        // *** Ed15Cond
        // *** ed7
        // *** thresh8
        // **** Preim10Cond
        // **** Rsa11Cond
        // **** Ed12Cond
        // **** ed9

        auto const ed2Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed2PublicKey{
            {0xb1, 0x2f, 0x54, 0xbe, 0xb6, 0xf8, 0x76, 0x71, 0x72, 0xed, 0x44,
             0x03, 0x71, 0x74, 0x2d, 0x7f, 0x98, 0x10, 0x4b, 0x57, 0xf2, 0x45,
             0xfb, 0x3e, 0xea, 0xfd, 0xdd, 0x39, 0x42, 0xbf, 0x24, 0x4d}};
        std::array<std::uint8_t, 64> const ed2Sig{
            {0x86, 0xf5, 0xe9, 0x44, 0x74, 0xe8, 0x98, 0xca, 0xc8, 0x20, 0xde,
             0x21, 0xcb, 0xf7, 0xf8, 0x65, 0x37, 0x6c, 0xd2, 0xe2, 0xd2, 0x46,
             0x6f, 0xcf, 0xd4, 0xdd, 0x48, 0x66, 0x8a, 0x9c, 0x06, 0xda, 0xa5,
             0x0e, 0x11, 0xfb, 0x87, 0x94, 0xd2, 0xed, 0xaa, 0xdd, 0x4e, 0x48,
             0x09, 0x7a, 0x4b, 0xdd, 0xa5, 0xe8, 0x46, 0x2e, 0x1a, 0xbb, 0x51,
             0x60, 0x0c, 0x9d, 0x8e, 0x35, 0x3e, 0xc1, 0x79, 0x09}};
        std::array<std::uint8_t, 32> const ed2SigningKey{
            {0xa7, 0xeb, 0x15, 0xc5, 0x2a, 0x41, 0x59, 0xf9, 0xf7, 0xb4, 0x78,
             0x5f, 0xdb, 0x79, 0xe5, 0x5b, 0x16, 0x44, 0xf7, 0xc7, 0xcf, 0xe2,
             0x46, 0xc5, 0xb3, 0x54, 0x64, 0xb5, 0x2f, 0x6c, 0x8e, 0x8e}};
        (void)ed2SigningKey;
        auto const thresh1Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const ed5Msg = "P4P3abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed5PublicKey{
            {0xae, 0xbc, 0xe5, 0x4b, 0x88, 0x09, 0x8d, 0x4f, 0xc4, 0xe1, 0x22,
             0xa0, 0x7c, 0x41, 0x05, 0xd7, 0x9f, 0xbe, 0xc8, 0x3d, 0x1d, 0x7e,
             0xd6, 0x55, 0xf4, 0x01, 0x67, 0x68, 0x93, 0x55, 0x85, 0xdf}};
        std::array<std::uint8_t, 64> const ed5Sig{
            {0x2d, 0x65, 0x3f, 0x89, 0xcb, 0x5e, 0x7b, 0x0c, 0x8d, 0x4f, 0xe4,
             0x27, 0xe6, 0xa4, 0x72, 0x93, 0xf7, 0xef, 0xba, 0xab, 0x6d, 0x8a,
             0xd8, 0xb3, 0x46, 0x96, 0x93, 0x47, 0xe6, 0xa8, 0x0f, 0x34, 0x40,
             0x02, 0x20, 0x78, 0x71, 0x1a, 0x81, 0x01, 0x83, 0x66, 0x49, 0xc0,
             0x59, 0x1c, 0x13, 0x16, 0x55, 0x4b, 0x62, 0xa3, 0x68, 0x67, 0x4c,
             0x82, 0x9a, 0x12, 0xb9, 0x12, 0x47, 0x92, 0x44, 0x0f}};
        std::array<std::uint8_t, 32> const ed5SigningKey{
            {0x42, 0x67, 0x67, 0xc0, 0xba, 0xdf, 0xb4, 0xd3, 0xf5, 0xc5, 0x1f,
             0x71, 0x97, 0x8a, 0xb4, 0x8e, 0x9a, 0xea, 0x3e, 0xec, 0xaf, 0xdc,
             0xc7, 0x2b, 0x01, 0x1b, 0x06, 0x8f, 0x05, 0x56, 0x63, 0xbc}};
        (void)ed5SigningKey;
        auto const prefix4Prefix = "P4"s;
        auto const prefix4Msg = "P3abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix4MaxMsgLength = 14;
        auto const prefix3Prefix = "P3"s;
        auto const prefix3Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix3MaxMsgLength = 14;
        auto const ed7Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed7PublicKey{
            {0x58, 0xcf, 0x4b, 0xc5, 0x59, 0xdb, 0xba, 0x62, 0x25, 0x14, 0x3a,
             0xc0, 0xad, 0xab, 0x5e, 0x35, 0xa1, 0xb4, 0x0e, 0xc1, 0xaf, 0x3c,
             0xa8, 0x2f, 0x69, 0x2c, 0xb6, 0x25, 0xd7, 0xea, 0x15, 0xb3}};
        std::array<std::uint8_t, 64> const ed7Sig{
            {0xd0, 0xd1, 0x17, 0xe2, 0xb5, 0x40, 0x14, 0x81, 0x0b, 0x12, 0xd8,
             0xbe, 0x1d, 0x1c, 0xb0, 0x88, 0x27, 0xaf, 0x6e, 0xc3, 0x13, 0x71,
             0xea, 0xac, 0xf3, 0xd8, 0x6f, 0x38, 0x21, 0xe2, 0x6d, 0x77, 0xe9,
             0xa6, 0xba, 0x03, 0x2a, 0xe3, 0x50, 0xcb, 0x38, 0xbe, 0x36, 0xba,
             0x62, 0x6e, 0x37, 0x5c, 0x8d, 0x69, 0x9f, 0xf0, 0x43, 0x64, 0x83,
             0x82, 0x8e, 0xbe, 0xf5, 0xa6, 0x96, 0x35, 0xb7, 0x03}};
        std::array<std::uint8_t, 32> const ed7SigningKey{
            {0x9c, 0x02, 0x4b, 0x5e, 0x6a, 0x83, 0x35, 0x8a, 0x2a, 0x71, 0x70,
             0x4e, 0xab, 0x74, 0x72, 0x22, 0x33, 0x5a, 0x82, 0xd9, 0x8e, 0x9c,
             0x8c, 0x41, 0x62, 0x6b, 0x02, 0x62, 0xbd, 0x59, 0x31, 0xcb}};
        (void)ed7SigningKey;
        auto const ed9Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed9PublicKey{
            {0x33, 0xcd, 0x8f, 0x06, 0xdd, 0xfe, 0x8e, 0xf2, 0x53, 0x04, 0x88,
             0x2d, 0xb0, 0xa0, 0x58, 0xbd, 0xdc, 0xcf, 0xc8, 0x1e, 0x77, 0x28,
             0x4e, 0xf8, 0x45, 0xb2, 0x31, 0x2a, 0x7c, 0x88, 0x23, 0x5e}};
        std::array<std::uint8_t, 64> const ed9Sig{
            {0x28, 0x7f, 0x0d, 0x0a, 0x6d, 0x6f, 0xbd, 0xdc, 0xc9, 0x65, 0x9a,
             0xb5, 0x2c, 0xf0, 0xf0, 0xbf, 0xc3, 0x43, 0xad, 0x7f, 0x89, 0x4e,
             0x57, 0x50, 0xe2, 0x72, 0x1d, 0x00, 0x81, 0x15, 0xbe, 0x4e, 0x58,
             0x0a, 0x4e, 0xcb, 0xe7, 0xd1, 0xc6, 0x85, 0xed, 0x39, 0x45, 0x82,
             0xfe, 0x09, 0x10, 0x47, 0x37, 0x7c, 0xf3, 0x5f, 0xbc, 0x40, 0xf1,
             0x93, 0xfc, 0x97, 0xf3, 0x20, 0x5e, 0x3a, 0x87, 0x00}};
        std::array<std::uint8_t, 32> const ed9SigningKey{
            {0x3e, 0x5f, 0x71, 0xf5, 0x40, 0xbf, 0xa2, 0xe5, 0xbb, 0xae, 0xd4,
             0x9e, 0xb8, 0xfd, 0xcf, 0x8b, 0xb5, 0x7a, 0x30, 0x53, 0x80, 0xf9,
             0x1f, 0x0f, 0x4e, 0xdd, 0x7b, 0x2e, 0x49, 0xcf, 0x7c, 0x12}};
        (void)ed9SigningKey;
        auto const thresh8Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim10CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim10Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim10CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa11CondConditionFingerprint =
            "\xaf\x93\xfd\x22\x45\xc2\x08\xab\x43\xf7\x45\x56\x63\xec\xaf"
            "\x15\x33\xa0\x2a\xb4\x9e\x15\xb4\x6e\xda\x87\x35\xde\x09\x4b"
            "\x06\x31"s;
        Condition const Rsa11Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa11CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed12CondConditionFingerprint =
            "\x55\xcc\xd1\xa2\x2c\x90\x8d\xe3\x2e\x42\xd4\xe0\x65\xb2\xf7"
            "\xda\xc0\x07\x1e\xd3\x23\x0f\xfe\x78\x13\xa2\x86\x61\xc4\x34"
            "\x28\x50"s;
        Condition const Ed12Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed12CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const thresh6Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim13CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim13Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim13CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa14CondConditionFingerprint =
            "\x32\xec\xaa\x5e\xa6\x88\xdc\xe4\x81\x0f\x93\x0f\x65\xde\x87"
            "\xfd\x54\x8c\x79\x04\x81\xe3\x63\x3f\x3d\x08\xa1\xba\x0a\x24"
            "\x2b\x46"s;
        Condition const Rsa14Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa14CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed15CondConditionFingerprint =
            "\x40\xd1\x9a\x63\x62\x9b\xc0\x76\xab\x11\x73\x42\x86\xb3\x20"
            "\x9d\x23\xe8\x5e\xee\xb9\x82\x5d\x93\xe3\xac\xad\xa0\x40\x41"
            "\x51\x1b"s;
        Condition const Ed15Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed15CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const thresh0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim16CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim16Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim16CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa17CondConditionFingerprint =
            "\x78\xe3\x04\xf4\xa6\x16\x68\x4c\x1b\xcf\x3a\x32\xff\xbc\x75"
            "\x1a\xe6\x08\x9b\xff\xba\x79\xf4\x39\x7a\xfc\xe1\x6f\xff\x3e"
            "\xb3\x75"s;
        Condition const Rsa17Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa17CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed18CondConditionFingerprint =
            "\x0d\xea\xc5\x16\x5c\x62\xb8\xd1\xa4\xe7\x5a\x07\x58\x00\x79"
            "\x51\x88\x21\xe9\x4d\xba\x73\x7b\xad\x60\x9c\x5c\x26\x00\x2e"
            "\xd1\x51"s;
        Condition const Ed18Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed18CondConditionFingerprint),
                                 std::bitset<5>{0}};

        auto ed2 = std::make_unique<Ed25519>(ed2PublicKey, ed2Sig);
        std::vector<std::unique_ptr<Fulfillment>> thresh1Subfulfillments;
        thresh1Subfulfillments.emplace_back(std::move(ed2));
        std::vector<Condition> thresh1Subconditions{};
        auto thresh1 = std::make_unique<ThresholdSha256>(
            std::move(thresh1Subfulfillments), std::move(thresh1Subconditions));
        auto ed5 = std::make_unique<Ed25519>(ed5PublicKey, ed5Sig);
        auto prefix4 = std::make_unique<PrefixSha256>(
            makeSlice(prefix4Prefix), prefix4MaxMsgLength, std::move(ed5));
        auto prefix3 = std::make_unique<PrefixSha256>(
            makeSlice(prefix3Prefix), prefix3MaxMsgLength, std::move(prefix4));
        auto ed7 = std::make_unique<Ed25519>(ed7PublicKey, ed7Sig);
        auto ed9 = std::make_unique<Ed25519>(ed9PublicKey, ed9Sig);
        std::vector<std::unique_ptr<Fulfillment>> thresh8Subfulfillments;
        thresh8Subfulfillments.emplace_back(std::move(ed9));
        std::vector<Condition> thresh8Subconditions{
            {Preim10Cond, Rsa11Cond, Ed12Cond}};
        auto thresh8 = std::make_unique<ThresholdSha256>(
            std::move(thresh8Subfulfillments), std::move(thresh8Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh6Subfulfillments;
        thresh6Subfulfillments.emplace_back(std::move(ed7));
        thresh6Subfulfillments.emplace_back(std::move(thresh8));
        std::vector<Condition> thresh6Subconditions{
            {Preim13Cond, Rsa14Cond, Ed15Cond}};
        auto thresh6 = std::make_unique<ThresholdSha256>(
            std::move(thresh6Subfulfillments), std::move(thresh6Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh0Subfulfillments;
        thresh0Subfulfillments.emplace_back(std::move(thresh1));
        thresh0Subfulfillments.emplace_back(std::move(prefix3));
        thresh0Subfulfillments.emplace_back(std::move(thresh6));
        std::vector<Condition> thresh0Subconditions{
            {Preim16Cond, Rsa17Cond, Ed18Cond}};
        ThresholdSha256 const thresh0(
            std::move(thresh0Subfulfillments), std::move(thresh0Subconditions));
        {
            auto const thresh0EncodedFulfillment =
                "\xa2\x82\x03\x36\xa0\x82\x02\xb7\xa1\x7a\x80\x02\x50\x33\x81"
                "\x01\x0e\xa2\x71\xa1\x6f\x80\x02\x50\x34\x81\x01\x0e\xa2\x66"
                "\xa4\x64\x80\x20\xae\xbc\xe5\x4b\x88\x09\x8d\x4f\xc4\xe1\x22"
                "\xa0\x7c\x41\x05\xd7\x9f\xbe\xc8\x3d\x1d\x7e\xd6\x55\xf4\x01"
                "\x67\x68\x93\x55\x85\xdf\x81\x40\x2d\x65\x3f\x89\xcb\x5e\x7b"
                "\x0c\x8d\x4f\xe4\x27\xe6\xa4\x72\x93\xf7\xef\xba\xab\x6d\x8a"
                "\xd8\xb3\x46\x96\x93\x47\xe6\xa8\x0f\x34\x40\x02\x20\x78\x71"
                "\x1a\x81\x01\x83\x66\x49\xc0\x59\x1c\x13\x16\x55\x4b\x62\xa3"
                "\x68\x67\x4c\x82\x9a\x12\xb9\x12\x47\x92\x44\x0f\xa2\x6a\xa0"
                "\x66\xa4\x64\x80\x20\xb1\x2f\x54\xbe\xb6\xf8\x76\x71\x72\xed"
                "\x44\x03\x71\x74\x2d\x7f\x98\x10\x4b\x57\xf2\x45\xfb\x3e\xea"
                "\xfd\xdd\x39\x42\xbf\x24\x4d\x81\x40\x86\xf5\xe9\x44\x74\xe8"
                "\x98\xca\xc8\x20\xde\x21\xcb\xf7\xf8\x65\x37\x6c\xd2\xe2\xd2"
                "\x46\x6f\xcf\xd4\xdd\x48\x66\x8a\x9c\x06\xda\xa5\x0e\x11\xfb"
                "\x87\x94\xd2\xed\xaa\xdd\x4e\x48\x09\x7a\x4b\xdd\xa5\xe8\x46"
                "\x2e\x1a\xbb\x51\x60\x0c\x9d\x8e\x35\x3e\xc1\x79\x09\xa1\x00"
                "\xa2\x82\x01\xcb\xa0\x82\x01\x4c\xa2\x81\xe3\xa0\x66\xa4\x64"
                "\x80\x20\x33\xcd\x8f\x06\xdd\xfe\x8e\xf2\x53\x04\x88\x2d\xb0"
                "\xa0\x58\xbd\xdc\xcf\xc8\x1e\x77\x28\x4e\xf8\x45\xb2\x31\x2a"
                "\x7c\x88\x23\x5e\x81\x40\x28\x7f\x0d\x0a\x6d\x6f\xbd\xdc\xc9"
                "\x65\x9a\xb5\x2c\xf0\xf0\xbf\xc3\x43\xad\x7f\x89\x4e\x57\x50"
                "\xe2\x72\x1d\x00\x81\x15\xbe\x4e\x58\x0a\x4e\xcb\xe7\xd1\xc6"
                "\x85\xed\x39\x45\x82\xfe\x09\x10\x47\x37\x7c\xf3\x5f\xbc\x40"
                "\xf1\x93\xfc\x97\xf3\x20\x5e\x3a\x87\x00\xa1\x79\xa0\x25\x80"
                "\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d"
                "\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93"
                "\x58\xeb\x4e\x81\x01\x09\xa3\x27\x80\x20\xaf\x93\xfd\x22\x45"
                "\xc2\x08\xab\x43\xf7\x45\x56\x63\xec\xaf\x15\x33\xa0\x2a\xb4"
                "\x9e\x15\xb4\x6e\xda\x87\x35\xde\x09\x4b\x06\x31\x81\x03\x01"
                "\x00\x00\xa4\x27\x80\x20\x55\xcc\xd1\xa2\x2c\x90\x8d\xe3\x2e"
                "\x42\xd4\xe0\x65\xb2\xf7\xda\xc0\x07\x1e\xd3\x23\x0f\xfe\x78"
                "\x13\xa2\x86\x61\xc4\x34\x28\x50\x81\x03\x02\x00\x00\xa4\x64"
                "\x80\x20\x58\xcf\x4b\xc5\x59\xdb\xba\x62\x25\x14\x3a\xc0\xad"
                "\xab\x5e\x35\xa1\xb4\x0e\xc1\xaf\x3c\xa8\x2f\x69\x2c\xb6\x25"
                "\xd7\xea\x15\xb3\x81\x40\xd0\xd1\x17\xe2\xb5\x40\x14\x81\x0b"
                "\x12\xd8\xbe\x1d\x1c\xb0\x88\x27\xaf\x6e\xc3\x13\x71\xea\xac"
                "\xf3\xd8\x6f\x38\x21\xe2\x6d\x77\xe9\xa6\xba\x03\x2a\xe3\x50"
                "\xcb\x38\xbe\x36\xba\x62\x6e\x37\x5c\x8d\x69\x9f\xf0\x43\x64"
                "\x83\x82\x8e\xbe\xf5\xa6\x96\x35\xb7\x03\xa1\x79\xa0\x25\x80"
                "\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d"
                "\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93"
                "\x58\xeb\x4e\x81\x01\x09\xa3\x27\x80\x20\x32\xec\xaa\x5e\xa6"
                "\x88\xdc\xe4\x81\x0f\x93\x0f\x65\xde\x87\xfd\x54\x8c\x79\x04"
                "\x81\xe3\x63\x3f\x3d\x08\xa1\xba\x0a\x24\x2b\x46\x81\x03\x01"
                "\x00\x00\xa4\x27\x80\x20\x40\xd1\x9a\x63\x62\x9b\xc0\x76\xab"
                "\x11\x73\x42\x86\xb3\x20\x9d\x23\xe8\x5e\xee\xb9\x82\x5d\x93"
                "\xe3\xac\xad\xa0\x40\x41\x51\x1b\x81\x03\x02\x00\x00\xa1\x79"
                "\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f"
                "\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd"
                "\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa3\x27\x80\x20\x78\xe3"
                "\x04\xf4\xa6\x16\x68\x4c\x1b\xcf\x3a\x32\xff\xbc\x75\x1a\xe6"
                "\x08\x9b\xff\xba\x79\xf4\x39\x7a\xfc\xe1\x6f\xff\x3e\xb3\x75"
                "\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x0d\xea\xc5\x16\x5c\x62"
                "\xb8\xd1\xa4\xe7\x5a\x07\x58\x00\x79\x51\x88\x21\xe9\x4d\xba"
                "\x73\x7b\xad\x60\x9c\x5c\x26\x00\x2e\xd1\x51\x81\x03\x02\x00"
                "\x00"s;
            auto const thresh0EncodedCondition =
                "\xa2\x2b\x80\x20\x09\x50\x61\x3b\xed\xf8\xc4\x61\x3b\xfd\x69"
                "\xfb\x59\xae\x02\x98\x22\x65\x64\x9c\xfa\x87\x26\x30\xfa\x5b"
                "\x20\xcd\x76\xbb\x5c\x70\x81\x03\x08\x48\x20\x82\x02\x03\xd8"s;
            auto const thresh0EncodedFingerprint =
                "\x30\x82\x01\x07\x80\x01\x03\xa1\x82\x01\x00\xa0\x25\x80\x20"
                "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
                "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
                "\xeb\x4e\x81\x01\x09\xa1\x2b\x80\x20\xbc\xa1\x89\xe8\x2b\x29"
                "\x24\x63\x65\x21\x75\x4f\xca\xcb\xd6\x41\xef\xbd\x1a\xf1\xee"
                "\x64\x6b\x38\x65\x1d\x68\x99\x2b\x06\xd1\x4a\x81\x03\x02\x08"
                "\x20\x82\x02\x03\x08\xa2\x2b\x80\x20\x1a\xcd\xf4\x00\x7d\xba"
                "\xb8\x97\xdd\x52\xa5\x9f\xe4\xf9\x08\xce\x4e\xe3\xce\xe3\x53"
                "\x76\xb1\xf8\xa2\x0d\x70\xc8\xf5\x09\x0d\x1d\x81\x03\x02\x04"
                "\x00\x82\x02\x03\x08\xa2\x2b\x80\x20\x94\xcf\x62\x9f\x9d\x94"
                "\x41\x76\x29\x2b\x22\x45\x9b\xe8\x05\xc1\x11\x74\x81\xc7\x3f"
                "\xe7\xe9\xba\x31\xf2\xf5\xa0\x47\x52\x86\x23\x81\x03\x04\x24"
                "\x00\x82\x02\x03\x98\xa3\x27\x80\x20\x78\xe3\x04\xf4\xa6\x16"
                "\x68\x4c\x1b\xcf\x3a\x32\xff\xbc\x75\x1a\xe6\x08\x9b\xff\xba"
                "\x79\xf4\x39\x7a\xfc\xe1\x6f\xff\x3e\xb3\x75\x81\x03\x01\x00"
                "\x00\xa4\x27\x80\x20\x0d\xea\xc5\x16\x5c\x62\xb8\xd1\xa4\xe7"
                "\x5a\x07\x58\x00\x79\x51\x88\x21\xe9\x4d\xba\x73\x7b\xad\x60"
                "\x9c\x5c\x26\x00\x2e\xd1\x51\x81\x03\x02\x00\x00"s;
            check(
                &thresh0,
                thresh0Msg,
                thresh0EncodedFulfillment,
                thresh0EncodedCondition,
                thresh0EncodedFingerprint);
        }
    }

    void
    testThresh65()
    {
        testcase("Thresh65");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * thresh0
        // ** Preim6Cond
        // ** Rsa7Cond
        // ** Ed8Cond
        // ** Prefix9Cond
        // ** Thresh12Cond
        // ** thresh1
        // *** ed2
        // ** preim3
        // ** rsa4
        // ** ed5

        auto const ed2Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed2PublicKey{
            {0xb1, 0x2f, 0x54, 0xbe, 0xb6, 0xf8, 0x76, 0x71, 0x72, 0xed, 0x44,
             0x03, 0x71, 0x74, 0x2d, 0x7f, 0x98, 0x10, 0x4b, 0x57, 0xf2, 0x45,
             0xfb, 0x3e, 0xea, 0xfd, 0xdd, 0x39, 0x42, 0xbf, 0x24, 0x4d}};
        std::array<std::uint8_t, 64> const ed2Sig{
            {0x86, 0xf5, 0xe9, 0x44, 0x74, 0xe8, 0x98, 0xca, 0xc8, 0x20, 0xde,
             0x21, 0xcb, 0xf7, 0xf8, 0x65, 0x37, 0x6c, 0xd2, 0xe2, 0xd2, 0x46,
             0x6f, 0xcf, 0xd4, 0xdd, 0x48, 0x66, 0x8a, 0x9c, 0x06, 0xda, 0xa5,
             0x0e, 0x11, 0xfb, 0x87, 0x94, 0xd2, 0xed, 0xaa, 0xdd, 0x4e, 0x48,
             0x09, 0x7a, 0x4b, 0xdd, 0xa5, 0xe8, 0x46, 0x2e, 0x1a, 0xbb, 0x51,
             0x60, 0x0c, 0x9d, 0x8e, 0x35, 0x3e, 0xc1, 0x79, 0x09}};
        std::array<std::uint8_t, 32> const ed2SigningKey{
            {0xa7, 0xeb, 0x15, 0xc5, 0x2a, 0x41, 0x59, 0xf9, 0xf7, 0xb4, 0x78,
             0x5f, 0xdb, 0x79, 0xe5, 0x5b, 0x16, 0x44, 0xf7, 0xc7, 0xcf, 0xe2,
             0x46, 0xc5, 0xb3, 0x54, 0x64, 0xb5, 0x2f, 0x6c, 0x8e, 0x8e}};
        (void)ed2SigningKey;
        auto const thresh1Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const preim3Preimage = "I am root"s;
        auto const preim3Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const rsa4Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa4PublicKey{
            {0xbe, 0x09, 0xc5, 0xa4, 0x27, 0x29, 0xdf, 0xd4, 0x67, 0x76, 0xbe,
             0xbf, 0x2c, 0xf3, 0xa2, 0x0b, 0x42, 0xe4, 0xbf, 0xeb, 0xdd, 0x67,
             0x20, 0xfb, 0x7a, 0x27, 0x93, 0xc0, 0x78, 0x47, 0x78, 0xd7, 0x15,
             0x32, 0xee, 0x38, 0x81, 0x0d, 0x36, 0xa2, 0xc4, 0x65, 0x44, 0xe6,
             0x62, 0x26, 0xb9, 0x58, 0x13, 0xa4, 0x15, 0x82, 0xab, 0xb1, 0x16,
             0x61, 0xfc, 0x01, 0x98, 0xc6, 0x1a, 0x69, 0xc6, 0xba, 0x39, 0x3f,
             0x01, 0x55, 0x3d, 0xd7, 0x8e, 0x14, 0x42, 0x6d, 0x78, 0x74, 0x9b,
             0x28, 0xcb, 0x31, 0x39, 0x98, 0x5a, 0x11, 0xdc, 0xc1, 0x18, 0x9d,
             0x8d, 0xb0, 0xcd, 0x1b, 0x4c, 0x10, 0xab, 0x14, 0x64, 0x19, 0xf1,
             0x33, 0x15, 0x45, 0xc8, 0x92, 0x82, 0x03, 0x82, 0x8a, 0xaa, 0xad,
             0x94, 0xfc, 0x24, 0x11, 0x96, 0x99, 0x7e, 0x94, 0x5a, 0x82, 0x57,
             0x68, 0x61, 0x9f, 0x7b, 0x45, 0xe0, 0x99, 0x9e, 0x4f, 0x32, 0x50,
             0x5f, 0x05, 0xc8, 0x11, 0xae, 0xc4, 0x0c, 0x63, 0x18, 0x0e, 0x02,
             0x59, 0x36, 0x25, 0x92, 0x06, 0x32, 0xc7, 0x71, 0x47, 0x99, 0xcc,
             0x0a, 0x6e, 0x0a, 0x58, 0x71, 0x3f, 0x5e, 0xb7, 0x78, 0xf7, 0x98,
             0x79, 0xdf, 0x74, 0xa4, 0xeb, 0xa9, 0x00, 0xfd, 0x81, 0xb3, 0xcf,
             0x04, 0x8c, 0x5d, 0x7d, 0xe7, 0xb2, 0x82, 0x90, 0x49, 0xbd, 0x69,
             0xf3, 0x08, 0xe9, 0x92, 0xc6, 0x9e, 0x41, 0xba, 0x74, 0xd8, 0x8d,
             0x81, 0x97, 0x6f, 0x86, 0xab, 0xc9, 0xf1, 0x02, 0x31, 0xb4, 0xce,
             0x47, 0xb0, 0x39, 0xc8, 0xba, 0x51, 0xa7, 0x39, 0xf3, 0x71, 0xa2,
             0x25, 0x27, 0x37, 0x6e, 0x09, 0x6f, 0x19, 0x59, 0xbc, 0x65, 0xd9,
             0xcd, 0x12, 0xd3, 0x2c, 0xa2, 0x78, 0xfa, 0x23, 0x15, 0x1a, 0x82,
             0x41, 0x91, 0x1b, 0xbe, 0x8a, 0xe7, 0xfe, 0x3c, 0x3c, 0x30, 0x32,
             0xaa, 0xe9, 0xf3}};
        std::array<std::uint8_t, 256> const rsa4Sig{
            {0x9e, 0x86, 0xee, 0x5c, 0x2c, 0x4c, 0x38, 0x3b, 0xd4, 0x44, 0x88,
             0xa4, 0xb4, 0x24, 0xe7, 0x6b, 0xda, 0x53, 0xb6, 0xef, 0xf9, 0xb9,
             0xd3, 0x29, 0x82, 0x4e, 0x15, 0xb3, 0x7d, 0xab, 0x97, 0x1d, 0x4d,
             0x43, 0x7d, 0xab, 0x91, 0x96, 0x66, 0x41, 0xa3, 0x7f, 0x2f, 0x92,
             0x0b, 0x2e, 0xc7, 0x7a, 0xcd, 0xe8, 0x1b, 0xec, 0x26, 0x1e, 0x20,
             0x24, 0xdd, 0xe3, 0x9c, 0xf7, 0x3b, 0xe9, 0x4b, 0xcc, 0x36, 0x2b,
             0xe3, 0x47, 0xbf, 0x03, 0x83, 0x50, 0x17, 0xd7, 0x97, 0x54, 0x96,
             0x68, 0xa6, 0x59, 0xd6, 0x56, 0xae, 0xb5, 0x5b, 0xc5, 0x6f, 0xcc,
             0x19, 0x31, 0x1c, 0x45, 0x9c, 0x50, 0xad, 0x82, 0xab, 0x55, 0xf1,
             0xae, 0xcb, 0x36, 0x63, 0x91, 0x39, 0xb0, 0x02, 0xe9, 0x07, 0x5e,
             0x12, 0xa8, 0x1f, 0x4c, 0x55, 0xde, 0x8e, 0xd9, 0xec, 0xcd, 0xe4,
             0x75, 0x8e, 0x78, 0xec, 0x5d, 0x1d, 0xf8, 0x63, 0x4f, 0x37, 0x46,
             0x63, 0xa3, 0x00, 0xf5, 0xff, 0x72, 0x27, 0x05, 0xa0, 0xda, 0xe8,
             0x9a, 0x61, 0x54, 0x6c, 0xa7, 0xda, 0xf0, 0xa6, 0x9c, 0xec, 0xa6,
             0xa3, 0x39, 0x93, 0xfe, 0x19, 0xf9, 0xc4, 0x84, 0x1f, 0xef, 0x09,
             0x4a, 0xbe, 0x24, 0x15, 0xf1, 0xe0, 0xbf, 0xb3, 0x19, 0xc7, 0x5b,
             0x95, 0x78, 0x21, 0xbd, 0x3b, 0xec, 0x7f, 0xa0, 0x72, 0x66, 0x89,
             0x73, 0x2c, 0xc2, 0x4d, 0x16, 0x13, 0x64, 0xda, 0x6f, 0xa1, 0x25,
             0x5a, 0x8e, 0xf9, 0x56, 0x70, 0x76, 0x73, 0xcc, 0xfb, 0x55, 0xe8,
             0x51, 0x55, 0x3c, 0xff, 0xb0, 0x50, 0x4c, 0x58, 0x26, 0xd7, 0x73,
             0x07, 0x70, 0x5a, 0xa4, 0x0b, 0xde, 0x71, 0x22, 0xee, 0x21, 0x3b,
             0x4a, 0x12, 0xd9, 0x98, 0x52, 0x5b, 0x6c, 0xf0, 0x37, 0x9f, 0x51,
             0x89, 0x18, 0x8e, 0x08, 0x72, 0x5a, 0x7c, 0xcd, 0xb9, 0x35, 0x20,
             0xaf, 0x4c, 0x40}};
        auto const ed5Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed5PublicKey{
            {0xae, 0xbc, 0xe5, 0x4b, 0x88, 0x09, 0x8d, 0x4f, 0xc4, 0xe1, 0x22,
             0xa0, 0x7c, 0x41, 0x05, 0xd7, 0x9f, 0xbe, 0xc8, 0x3d, 0x1d, 0x7e,
             0xd6, 0x55, 0xf4, 0x01, 0x67, 0x68, 0x93, 0x55, 0x85, 0xdf}};
        std::array<std::uint8_t, 64> const ed5Sig{
            {0x30, 0xe8, 0x22, 0x9b, 0x51, 0x8c, 0xaa, 0x86, 0x9b, 0xd0, 0xb2,
             0x06, 0xe0, 0xf0, 0xf2, 0xc0, 0x87, 0x43, 0x0f, 0xb0, 0xbd, 0xe1,
             0xeb, 0x17, 0x7f, 0x85, 0xe8, 0x79, 0xc6, 0xa2, 0x9d, 0x19, 0x17,
             0x07, 0x7e, 0x56, 0x06, 0xcb, 0x5a, 0xe1, 0xca, 0x36, 0x5c, 0x0a,
             0xb5, 0x81, 0x2a, 0x42, 0xf6, 0xcc, 0x6e, 0x04, 0xe2, 0x61, 0x8b,
             0x12, 0x16, 0xc2, 0x36, 0xfc, 0xd5, 0xd8, 0xfc, 0x0c}};
        std::array<std::uint8_t, 32> const ed5SigningKey{
            {0x42, 0x67, 0x67, 0xc0, 0xba, 0xdf, 0xb4, 0xd3, 0xf5, 0xc5, 0x1f,
             0x71, 0x97, 0x8a, 0xb4, 0x8e, 0x9a, 0xea, 0x3e, 0xec, 0xaf, 0xdc,
             0xc7, 0x2b, 0x01, 0x1b, 0x06, 0x8f, 0x05, 0x56, 0x63, 0xbc}};
        (void)ed5SigningKey;
        auto const thresh0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim6CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim6Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim6CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa7CondConditionFingerprint =
            "\x6c\x7b\xea\x83\xa1\xf4\x82\x3d\x36\xe7\x6e\xae\x1a\xbc\xa0"
            "\xba\x90\x3d\x96\xc1\xe6\xad\x3a\x47\xa5\xcb\x88\xab\x3c\x5f"
            "\xcc\xd5"s;
        Condition const Rsa7Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa7CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed8CondConditionFingerprint =
            "\xf1\x68\x96\xa6\x2e\xef\x7f\x47\x06\x51\x4c\xc6\x7e\x24\xf7"
            "\x29\x84\x9c\xd6\xb0\xd9\x4b\xd9\x0f\xc9\x34\x01\x9d\x92\xeb"
            "\xbc\x0a"s;
        Condition const Ed8Cond{Type::ed25519Sha256,
                                131072,
                                makeSlice(Ed8CondConditionFingerprint),
                                std::bitset<5>{0}};
        auto const Prefix9CondConditionFingerprint =
            "\x9c\xe3\xe0\x47\x47\xf2\xbc\x0e\x25\x6f\x01\xcc\x1f\x1b\x18"
            "\x23\xb2\xc1\x4b\xbd\x97\xb7\x1a\x24\x60\xea\xbb\x3f\xd2\xc7"
            "\xf4\xf2"s;
        Condition const Prefix9Cond{Type::prefixSha256,
                                    133162,
                                    makeSlice(Prefix9CondConditionFingerprint),
                                    std::bitset<5>{16}};
        auto const Thresh12CondConditionFingerprint =
            "\xb0\x40\x18\xf3\x6b\x1b\xa9\x36\x3a\x3c\xf7\x7d\x0f\x1a\x40"
            "\x22\xb1\x09\x48\x0e\xd5\x8e\x6e\xbe\x8d\xa6\x50\x20\x0c\x20"
            "\x78\x19"s;
        Condition const Thresh12Cond{
            Type::thresholdSha256,
            271360,
            makeSlice(Thresh12CondConditionFingerprint),
            std::bitset<5>{25}};

        auto ed2 = std::make_unique<Ed25519>(ed2PublicKey, ed2Sig);
        std::vector<std::unique_ptr<Fulfillment>> thresh1Subfulfillments;
        thresh1Subfulfillments.emplace_back(std::move(ed2));
        std::vector<Condition> thresh1Subconditions{};
        auto thresh1 = std::make_unique<ThresholdSha256>(
            std::move(thresh1Subfulfillments), std::move(thresh1Subconditions));
        auto preim3 =
            std::make_unique<PreimageSha256>(makeSlice(preim3Preimage));
        auto rsa4 = std::make_unique<RsaSha256>(
            makeSlice(rsa4PublicKey), makeSlice(rsa4Sig));
        auto ed5 = std::make_unique<Ed25519>(ed5PublicKey, ed5Sig);
        std::vector<std::unique_ptr<Fulfillment>> thresh0Subfulfillments;
        thresh0Subfulfillments.emplace_back(std::move(thresh1));
        thresh0Subfulfillments.emplace_back(std::move(preim3));
        thresh0Subfulfillments.emplace_back(std::move(rsa4));
        thresh0Subfulfillments.emplace_back(std::move(ed5));
        std::vector<Condition> thresh0Subconditions{
            {Preim6Cond, Rsa7Cond, Ed8Cond, Prefix9Cond, Thresh12Cond}};
        ThresholdSha256 const thresh0(
            std::move(thresh0Subfulfillments), std::move(thresh0Subconditions));
        {
            auto const thresh0EncodedFulfillment =
                "\xa2\x82\x03\xc5\xa0\x82\x02\xeb\xa0\x0b\x80\x09\x49\x20\x61"
                "\x6d\x20\x72\x6f\x6f\x74\xa2\x6a\xa0\x66\xa4\x64\x80\x20\xb1"
                "\x2f\x54\xbe\xb6\xf8\x76\x71\x72\xed\x44\x03\x71\x74\x2d\x7f"
                "\x98\x10\x4b\x57\xf2\x45\xfb\x3e\xea\xfd\xdd\x39\x42\xbf\x24"
                "\x4d\x81\x40\x86\xf5\xe9\x44\x74\xe8\x98\xca\xc8\x20\xde\x21"
                "\xcb\xf7\xf8\x65\x37\x6c\xd2\xe2\xd2\x46\x6f\xcf\xd4\xdd\x48"
                "\x66\x8a\x9c\x06\xda\xa5\x0e\x11\xfb\x87\x94\xd2\xed\xaa\xdd"
                "\x4e\x48\x09\x7a\x4b\xdd\xa5\xe8\x46\x2e\x1a\xbb\x51\x60\x0c"
                "\x9d\x8e\x35\x3e\xc1\x79\x09\xa1\x00\xa3\x82\x02\x08\x80\x82"
                "\x01\x00\xbe\x09\xc5\xa4\x27\x29\xdf\xd4\x67\x76\xbe\xbf\x2c"
                "\xf3\xa2\x0b\x42\xe4\xbf\xeb\xdd\x67\x20\xfb\x7a\x27\x93\xc0"
                "\x78\x47\x78\xd7\x15\x32\xee\x38\x81\x0d\x36\xa2\xc4\x65\x44"
                "\xe6\x62\x26\xb9\x58\x13\xa4\x15\x82\xab\xb1\x16\x61\xfc\x01"
                "\x98\xc6\x1a\x69\xc6\xba\x39\x3f\x01\x55\x3d\xd7\x8e\x14\x42"
                "\x6d\x78\x74\x9b\x28\xcb\x31\x39\x98\x5a\x11\xdc\xc1\x18\x9d"
                "\x8d\xb0\xcd\x1b\x4c\x10\xab\x14\x64\x19\xf1\x33\x15\x45\xc8"
                "\x92\x82\x03\x82\x8a\xaa\xad\x94\xfc\x24\x11\x96\x99\x7e\x94"
                "\x5a\x82\x57\x68\x61\x9f\x7b\x45\xe0\x99\x9e\x4f\x32\x50\x5f"
                "\x05\xc8\x11\xae\xc4\x0c\x63\x18\x0e\x02\x59\x36\x25\x92\x06"
                "\x32\xc7\x71\x47\x99\xcc\x0a\x6e\x0a\x58\x71\x3f\x5e\xb7\x78"
                "\xf7\x98\x79\xdf\x74\xa4\xeb\xa9\x00\xfd\x81\xb3\xcf\x04\x8c"
                "\x5d\x7d\xe7\xb2\x82\x90\x49\xbd\x69\xf3\x08\xe9\x92\xc6\x9e"
                "\x41\xba\x74\xd8\x8d\x81\x97\x6f\x86\xab\xc9\xf1\x02\x31\xb4"
                "\xce\x47\xb0\x39\xc8\xba\x51\xa7\x39\xf3\x71\xa2\x25\x27\x37"
                "\x6e\x09\x6f\x19\x59\xbc\x65\xd9\xcd\x12\xd3\x2c\xa2\x78\xfa"
                "\x23\x15\x1a\x82\x41\x91\x1b\xbe\x8a\xe7\xfe\x3c\x3c\x30\x32"
                "\xaa\xe9\xf3\x81\x82\x01\x00\x9e\x86\xee\x5c\x2c\x4c\x38\x3b"
                "\xd4\x44\x88\xa4\xb4\x24\xe7\x6b\xda\x53\xb6\xef\xf9\xb9\xd3"
                "\x29\x82\x4e\x15\xb3\x7d\xab\x97\x1d\x4d\x43\x7d\xab\x91\x96"
                "\x66\x41\xa3\x7f\x2f\x92\x0b\x2e\xc7\x7a\xcd\xe8\x1b\xec\x26"
                "\x1e\x20\x24\xdd\xe3\x9c\xf7\x3b\xe9\x4b\xcc\x36\x2b\xe3\x47"
                "\xbf\x03\x83\x50\x17\xd7\x97\x54\x96\x68\xa6\x59\xd6\x56\xae"
                "\xb5\x5b\xc5\x6f\xcc\x19\x31\x1c\x45\x9c\x50\xad\x82\xab\x55"
                "\xf1\xae\xcb\x36\x63\x91\x39\xb0\x02\xe9\x07\x5e\x12\xa8\x1f"
                "\x4c\x55\xde\x8e\xd9\xec\xcd\xe4\x75\x8e\x78\xec\x5d\x1d\xf8"
                "\x63\x4f\x37\x46\x63\xa3\x00\xf5\xff\x72\x27\x05\xa0\xda\xe8"
                "\x9a\x61\x54\x6c\xa7\xda\xf0\xa6\x9c\xec\xa6\xa3\x39\x93\xfe"
                "\x19\xf9\xc4\x84\x1f\xef\x09\x4a\xbe\x24\x15\xf1\xe0\xbf\xb3"
                "\x19\xc7\x5b\x95\x78\x21\xbd\x3b\xec\x7f\xa0\x72\x66\x89\x73"
                "\x2c\xc2\x4d\x16\x13\x64\xda\x6f\xa1\x25\x5a\x8e\xf9\x56\x70"
                "\x76\x73\xcc\xfb\x55\xe8\x51\x55\x3c\xff\xb0\x50\x4c\x58\x26"
                "\xd7\x73\x07\x70\x5a\xa4\x0b\xde\x71\x22\xee\x21\x3b\x4a\x12"
                "\xd9\x98\x52\x5b\x6c\xf0\x37\x9f\x51\x89\x18\x8e\x08\x72\x5a"
                "\x7c\xcd\xb9\x35\x20\xaf\x4c\x40\xa4\x64\x80\x20\xae\xbc\xe5"
                "\x4b\x88\x09\x8d\x4f\xc4\xe1\x22\xa0\x7c\x41\x05\xd7\x9f\xbe"
                "\xc8\x3d\x1d\x7e\xd6\x55\xf4\x01\x67\x68\x93\x55\x85\xdf\x81"
                "\x40\x30\xe8\x22\x9b\x51\x8c\xaa\x86\x9b\xd0\xb2\x06\xe0\xf0"
                "\xf2\xc0\x87\x43\x0f\xb0\xbd\xe1\xeb\x17\x7f\x85\xe8\x79\xc6"
                "\xa2\x9d\x19\x17\x07\x7e\x56\x06\xcb\x5a\xe1\xca\x36\x5c\x0a"
                "\xb5\x81\x2a\x42\xf6\xcc\x6e\x04\xe2\x61\x8b\x12\x16\xc2\x36"
                "\xfc\xd5\xd8\xfc\x0c\xa1\x81\xd3\xa0\x25\x80\x20\x5d\xa0\x30"
                "\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c"
                "\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81"
                "\x01\x09\xa1\x2b\x80\x20\x9c\xe3\xe0\x47\x47\xf2\xbc\x0e\x25"
                "\x6f\x01\xcc\x1f\x1b\x18\x23\xb2\xc1\x4b\xbd\x97\xb7\x1a\x24"
                "\x60\xea\xbb\x3f\xd2\xc7\xf4\xf2\x81\x03\x02\x08\x2a\x82\x02"
                "\x03\x08\xa2\x2b\x80\x20\xb0\x40\x18\xf3\x6b\x1b\xa9\x36\x3a"
                "\x3c\xf7\x7d\x0f\x1a\x40\x22\xb1\x09\x48\x0e\xd5\x8e\x6e\xbe"
                "\x8d\xa6\x50\x20\x0c\x20\x78\x19\x81\x03\x04\x24\x00\x82\x02"
                "\x03\x98\xa3\x27\x80\x20\x6c\x7b\xea\x83\xa1\xf4\x82\x3d\x36"
                "\xe7\x6e\xae\x1a\xbc\xa0\xba\x90\x3d\x96\xc1\xe6\xad\x3a\x47"
                "\xa5\xcb\x88\xab\x3c\x5f\xcc\xd5\x81\x03\x01\x00\x00\xa4\x27"
                "\x80\x20\xf1\x68\x96\xa6\x2e\xef\x7f\x47\x06\x51\x4c\xc6\x7e"
                "\x24\xf7\x29\x84\x9c\xd6\xb0\xd9\x4b\xd9\x0f\xc9\x34\x01\x9d"
                "\x92\xeb\xbc\x0a\x81\x03\x02\x00\x00"s;
            auto const thresh0EncodedCondition =
                "\xa2\x2b\x80\x20\xad\x13\xd9\xd5\x30\xfa\x6a\x3d\x25\x05\x7e"
                "\x97\xe2\x5b\x95\xd8\x1d\x52\x26\x17\x1c\x60\x51\xa6\xa3\x66"
                "\x57\x3a\xdf\x41\x02\xb1\x81\x03\x0a\x54\x2a\x82\x02\x03\xd8"s;
            auto const thresh0EncodedFingerprint =
                "\x30\x82\x01\x80\x80\x01\x04\xa1\x82\x01\x79\xa0\x25\x80\x20"
                "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
                "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
                "\xeb\x4e\x81\x01\x09\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1"
                "\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21"
                "\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa1"
                "\x2b\x80\x20\x9c\xe3\xe0\x47\x47\xf2\xbc\x0e\x25\x6f\x01\xcc"
                "\x1f\x1b\x18\x23\xb2\xc1\x4b\xbd\x97\xb7\x1a\x24\x60\xea\xbb"
                "\x3f\xd2\xc7\xf4\xf2\x81\x03\x02\x08\x2a\x82\x02\x03\x08\xa2"
                "\x2b\x80\x20\x1a\xcd\xf4\x00\x7d\xba\xb8\x97\xdd\x52\xa5\x9f"
                "\xe4\xf9\x08\xce\x4e\xe3\xce\xe3\x53\x76\xb1\xf8\xa2\x0d\x70"
                "\xc8\xf5\x09\x0d\x1d\x81\x03\x02\x04\x00\x82\x02\x03\x08\xa2"
                "\x2b\x80\x20\xb0\x40\x18\xf3\x6b\x1b\xa9\x36\x3a\x3c\xf7\x7d"
                "\x0f\x1a\x40\x22\xb1\x09\x48\x0e\xd5\x8e\x6e\xbe\x8d\xa6\x50"
                "\x20\x0c\x20\x78\x19\x81\x03\x04\x24\x00\x82\x02\x03\x98\xa3"
                "\x27\x80\x20\x3a\x82\x3b\x32\x38\xb1\x3c\x17\x87\x60\x62\xec"
                "\xcf\x91\xb0\xaf\xaa\xe5\x11\xe6\xfb\xe2\xb0\x3d\x70\x4d\x1d"
                "\xad\xd6\x7c\xee\xa6\x81\x03\x01\x00\x00\xa3\x27\x80\x20\x6c"
                "\x7b\xea\x83\xa1\xf4\x82\x3d\x36\xe7\x6e\xae\x1a\xbc\xa0\xba"
                "\x90\x3d\x96\xc1\xe6\xad\x3a\x47\xa5\xcb\x88\xab\x3c\x5f\xcc"
                "\xd5\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x90\xce\xed\x45\x98"
                "\x68\xff\x19\x2b\x27\xc1\x2a\xa2\x6e\x2e\x82\xf3\xbd\x71\x13"
                "\x61\xb0\x76\x40\x4d\x48\xea\x16\xfb\x27\x57\xdc\x81\x03\x02"
                "\x00\x00\xa4\x27\x80\x20\xf1\x68\x96\xa6\x2e\xef\x7f\x47\x06"
                "\x51\x4c\xc6\x7e\x24\xf7\x29\x84\x9c\xd6\xb0\xd9\x4b\xd9\x0f"
                "\xc9\x34\x01\x9d\x92\xeb\xbc\x0a\x81\x03\x02\x00\x00"s;
            check(
                &thresh0,
                thresh0Msg,
                thresh0EncodedFulfillment,
                thresh0EncodedCondition,
                thresh0EncodedFingerprint);
        }
    }

    void
    testThresh66()
    {
        testcase("Thresh66");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * thresh0
        // ** Preim25Cond
        // ** Rsa26Cond
        // ** Ed27Cond
        // ** thresh1
        // *** Preim3Cond
        // *** Rsa4Cond
        // *** Ed5Cond
        // *** ed2
        // ** prefix6
        // *** prefix7
        // **** prefix8
        // ***** ed9
        // ** thresh10
        // *** Preim17Cond
        // *** Rsa18Cond
        // *** Ed19Cond
        // *** Thresh20Cond
        // *** ed11
        // *** thresh12
        // **** Preim14Cond
        // **** Rsa15Cond
        // **** Ed16Cond
        // **** ed13

        auto const ed2Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed2PublicKey{
            {0xb1, 0x2f, 0x54, 0xbe, 0xb6, 0xf8, 0x76, 0x71, 0x72, 0xed, 0x44,
             0x03, 0x71, 0x74, 0x2d, 0x7f, 0x98, 0x10, 0x4b, 0x57, 0xf2, 0x45,
             0xfb, 0x3e, 0xea, 0xfd, 0xdd, 0x39, 0x42, 0xbf, 0x24, 0x4d}};
        std::array<std::uint8_t, 64> const ed2Sig{
            {0x86, 0xf5, 0xe9, 0x44, 0x74, 0xe8, 0x98, 0xca, 0xc8, 0x20, 0xde,
             0x21, 0xcb, 0xf7, 0xf8, 0x65, 0x37, 0x6c, 0xd2, 0xe2, 0xd2, 0x46,
             0x6f, 0xcf, 0xd4, 0xdd, 0x48, 0x66, 0x8a, 0x9c, 0x06, 0xda, 0xa5,
             0x0e, 0x11, 0xfb, 0x87, 0x94, 0xd2, 0xed, 0xaa, 0xdd, 0x4e, 0x48,
             0x09, 0x7a, 0x4b, 0xdd, 0xa5, 0xe8, 0x46, 0x2e, 0x1a, 0xbb, 0x51,
             0x60, 0x0c, 0x9d, 0x8e, 0x35, 0x3e, 0xc1, 0x79, 0x09}};
        std::array<std::uint8_t, 32> const ed2SigningKey{
            {0xa7, 0xeb, 0x15, 0xc5, 0x2a, 0x41, 0x59, 0xf9, 0xf7, 0xb4, 0x78,
             0x5f, 0xdb, 0x79, 0xe5, 0x5b, 0x16, 0x44, 0xf7, 0xc7, 0xcf, 0xe2,
             0x46, 0xc5, 0xb3, 0x54, 0x64, 0xb5, 0x2f, 0x6c, 0x8e, 0x8e}};
        (void)ed2SigningKey;
        auto const thresh1Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim3CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim3Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim3CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa4CondConditionFingerprint =
            "\x3a\x82\x3b\x32\x38\xb1\x3c\x17\x87\x60\x62\xec\xcf\x91\xb0"
            "\xaf\xaa\xe5\x11\xe6\xfb\xe2\xb0\x3d\x70\x4d\x1d\xad\xd6\x7c"
            "\xee\xa6"s;
        Condition const Rsa4Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa4CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed5CondConditionFingerprint =
            "\x90\xce\xed\x45\x98\x68\xff\x19\x2b\x27\xc1\x2a\xa2\x6e\x2e"
            "\x82\xf3\xbd\x71\x13\x61\xb0\x76\x40\x4d\x48\xea\x16\xfb\x27"
            "\x57\xdc"s;
        Condition const Ed5Cond{Type::ed25519Sha256,
                                131072,
                                makeSlice(Ed5CondConditionFingerprint),
                                std::bitset<5>{0}};
        auto const ed9Msg = "P8P7P6abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed9PublicKey{
            {0x33, 0xcd, 0x8f, 0x06, 0xdd, 0xfe, 0x8e, 0xf2, 0x53, 0x04, 0x88,
             0x2d, 0xb0, 0xa0, 0x58, 0xbd, 0xdc, 0xcf, 0xc8, 0x1e, 0x77, 0x28,
             0x4e, 0xf8, 0x45, 0xb2, 0x31, 0x2a, 0x7c, 0x88, 0x23, 0x5e}};
        std::array<std::uint8_t, 64> const ed9Sig{
            {0xd6, 0xae, 0xb2, 0xf8, 0xaf, 0x3b, 0xfe, 0x3b, 0x73, 0x27, 0xef,
             0x22, 0x86, 0xf4, 0xca, 0x40, 0x82, 0x3b, 0x2b, 0x21, 0xa5, 0xc4,
             0xa5, 0x1e, 0x32, 0x78, 0x8c, 0xe9, 0xbe, 0x40, 0x48, 0x82, 0x83,
             0x2f, 0x31, 0x65, 0x79, 0x97, 0x23, 0x72, 0x77, 0x97, 0x16, 0x06,
             0x94, 0xef, 0x37, 0x6d, 0x68, 0xef, 0x5c, 0x6b, 0xb5, 0x8c, 0xab,
             0x0d, 0x74, 0x5c, 0x52, 0x91, 0xc8, 0x1e, 0x12, 0x02}};
        std::array<std::uint8_t, 32> const ed9SigningKey{
            {0x3e, 0x5f, 0x71, 0xf5, 0x40, 0xbf, 0xa2, 0xe5, 0xbb, 0xae, 0xd4,
             0x9e, 0xb8, 0xfd, 0xcf, 0x8b, 0xb5, 0x7a, 0x30, 0x53, 0x80, 0xf9,
             0x1f, 0x0f, 0x4e, 0xdd, 0x7b, 0x2e, 0x49, 0xcf, 0x7c, 0x12}};
        (void)ed9SigningKey;
        auto const prefix8Prefix = "P8"s;
        auto const prefix8Msg = "P7P6abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix8MaxMsgLength = 14;
        auto const prefix7Prefix = "P7"s;
        auto const prefix7Msg = "P6abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix7MaxMsgLength = 14;
        auto const prefix6Prefix = "P6"s;
        auto const prefix6Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix6MaxMsgLength = 14;
        auto const ed11Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed11PublicKey{
            {0x89, 0x5e, 0x41, 0x5a, 0x61, 0x75, 0xf5, 0x16, 0xd7, 0x9b, 0x5c,
             0x57, 0x69, 0x5e, 0xa3, 0x22, 0x3e, 0xa5, 0x5d, 0xa3, 0xc0, 0x37,
             0x18, 0x95, 0x26, 0xe7, 0x77, 0x00, 0x5f, 0x95, 0x58, 0x20}};
        std::array<std::uint8_t, 64> const ed11Sig{
            {0x06, 0x41, 0xf5, 0xcf, 0x53, 0x93, 0xe5, 0x1f, 0x90, 0x49, 0xcf,
             0x52, 0xf8, 0x23, 0xc8, 0xd1, 0xac, 0x80, 0xd6, 0x18, 0x17, 0xbc,
             0x70, 0x41, 0x4e, 0x96, 0xce, 0x1a, 0x07, 0x87, 0x30, 0xcc, 0x01,
             0x85, 0x0b, 0x7a, 0x31, 0xb9, 0x0f, 0x11, 0xa5, 0x14, 0x1f, 0x1e,
             0x27, 0x8d, 0xcd, 0xca, 0xd3, 0xa7, 0xa0, 0x86, 0x6f, 0x62, 0xce,
             0xf2, 0x3b, 0x0c, 0x39, 0x61, 0xb7, 0x65, 0xa1, 0x01}};
        std::array<std::uint8_t, 32> const ed11SigningKey{
            {0x56, 0x3d, 0xfd, 0x5f, 0x56, 0xef, 0x52, 0xa4, 0xbc, 0xc5, 0x20,
             0x99, 0x8b, 0xc7, 0xf1, 0xc8, 0x41, 0xcd, 0x93, 0x6e, 0x4e, 0x7f,
             0x95, 0x81, 0x2a, 0xa1, 0x6b, 0x46, 0x33, 0xd9, 0x11, 0x5f}};
        (void)ed11SigningKey;
        auto const ed13Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed13PublicKey{
            {0xe8, 0xb1, 0xe9, 0x04, 0xef, 0x8f, 0x78, 0x4c, 0x54, 0xf2, 0x45,
             0x60, 0x93, 0xb4, 0xc6, 0xa4, 0xc2, 0x9a, 0xa9, 0xb7, 0x5a, 0x0b,
             0x06, 0xf1, 0x78, 0xdc, 0xa9, 0x08, 0x12, 0xb2, 0x2f, 0xf4}};
        std::array<std::uint8_t, 64> const ed13Sig{
            {0x03, 0x17, 0xa0, 0x49, 0x7b, 0xee, 0x0d, 0x84, 0x64, 0xee, 0xa8,
             0xc1, 0xe6, 0x3e, 0xc6, 0xed, 0xd6, 0x25, 0x7e, 0x7d, 0xad, 0x96,
             0xf3, 0x82, 0x4a, 0xa6, 0xb1, 0x38, 0xf1, 0x2f, 0x54, 0x6a, 0x52,
             0x39, 0x26, 0x08, 0x2d, 0xe6, 0xfd, 0xb2, 0xfa, 0x23, 0xb3, 0x91,
             0x30, 0x07, 0x9a, 0x4b, 0x63, 0xbb, 0x6f, 0x55, 0xcb, 0x0a, 0xe9,
             0xb1, 0xfb, 0x40, 0x9e, 0x1f, 0x87, 0x70, 0x5a, 0x07}};
        std::array<std::uint8_t, 32> const ed13SigningKey{
            {0x0c, 0x45, 0x3e, 0x20, 0xe2, 0x12, 0x63, 0x6a, 0x7c, 0x36, 0x75,
             0xad, 0x2e, 0xd7, 0xc0, 0x39, 0x27, 0x7e, 0x38, 0x9a, 0xa2, 0xd3,
             0x3b, 0x24, 0x18, 0xf8, 0x68, 0x4e, 0x7f, 0xfa, 0x5d, 0xf3}};
        (void)ed13SigningKey;
        auto const thresh12Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim14CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim14Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim14CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa15CondConditionFingerprint =
            "\x55\x6b\x6d\xe3\x00\xd4\xf3\x7e\x75\x3a\x68\xfc\x25\xdf\xf2"
            "\xf7\x18\x54\xa5\x55\x0c\xa5\xa9\x65\xbf\x66\x9e\x4e\x49\x56"
            "\x1e\xf1"s;
        Condition const Rsa15Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa15CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed16CondConditionFingerprint =
            "\xe4\x66\x69\x86\x87\x57\x0e\xac\xf1\xfd\x06\x81\x48\x90\x82"
            "\x42\x48\x50\x75\x8e\xd4\x2d\xf3\x02\x37\x89\x28\xc5\x68\xd7"
            "\xa0\x11"s;
        Condition const Ed16Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed16CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const thresh10Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim17CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim17Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim17CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa18CondConditionFingerprint =
            "\x9d\xbe\x65\xf4\xae\x81\x90\x79\x09\x18\xa2\x66\x12\x9c\x10"
            "\x94\x66\x21\x94\x70\x60\x20\x4a\x3d\x5f\xb3\x62\xb6\x06\x46"
            "\x37\xfe"s;
        Condition const Rsa18Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa18CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed19CondConditionFingerprint =
            "\xe5\x88\xb7\x6e\xec\x2d\xaf\x47\xc7\xa2\xf4\x6e\xbf\x7f\x5e"
            "\x46\xd7\xfa\x33\x2c\x0a\x7e\x86\x1d\x8c\x38\xa8\x93\x52\xe8"
            "\x97\xe9"s;
        Condition const Ed19Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed19CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Thresh20CondConditionFingerprint =
            "\xbb\x5c\x6d\x91\xa5\x7d\x41\x56\x1f\x07\x7e\xc5\x3d\x14\x43"
            "\x8b\xbd\x04\xb2\xf2\x2c\x44\x50\xff\x06\x5f\x5a\x2e\xa5\x03"
            "\xe4\xdf"s;
        Condition const Thresh20Cond{
            Type::thresholdSha256,
            135168,
            makeSlice(Thresh20CondConditionFingerprint),
            std::bitset<5>{25}};
        auto const thresh0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim25CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim25Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim25CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa26CondConditionFingerprint =
            "\xd6\x40\x0d\x21\x44\x8a\xd4\x5a\xe6\x10\x3f\xd4\x3a\x14\x5a"
            "\x5b\x87\x86\x20\x3c\x43\x20\x9d\x9d\x0c\x75\x57\x80\x7d\xda"
            "\x9d\x06"s;
        Condition const Rsa26Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa26CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed27CondConditionFingerprint =
            "\x6a\x26\x73\x6f\xc3\xbf\x25\x73\x8e\x3b\x27\x79\x47\xa5\x37"
            "\x7c\x78\xa0\x72\xd8\x77\x91\xfc\x45\x87\x7f\x11\x57\xfe\x94"
            "\x57\x45"s;
        Condition const Ed27Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed27CondConditionFingerprint),
                                 std::bitset<5>{0}};

        auto ed2 = std::make_unique<Ed25519>(ed2PublicKey, ed2Sig);
        std::vector<std::unique_ptr<Fulfillment>> thresh1Subfulfillments;
        thresh1Subfulfillments.emplace_back(std::move(ed2));
        std::vector<Condition> thresh1Subconditions{
            {Preim3Cond, Rsa4Cond, Ed5Cond}};
        auto thresh1 = std::make_unique<ThresholdSha256>(
            std::move(thresh1Subfulfillments), std::move(thresh1Subconditions));
        auto ed9 = std::make_unique<Ed25519>(ed9PublicKey, ed9Sig);
        auto prefix8 = std::make_unique<PrefixSha256>(
            makeSlice(prefix8Prefix), prefix8MaxMsgLength, std::move(ed9));
        auto prefix7 = std::make_unique<PrefixSha256>(
            makeSlice(prefix7Prefix), prefix7MaxMsgLength, std::move(prefix8));
        auto prefix6 = std::make_unique<PrefixSha256>(
            makeSlice(prefix6Prefix), prefix6MaxMsgLength, std::move(prefix7));
        auto ed11 = std::make_unique<Ed25519>(ed11PublicKey, ed11Sig);
        auto ed13 = std::make_unique<Ed25519>(ed13PublicKey, ed13Sig);
        std::vector<std::unique_ptr<Fulfillment>> thresh12Subfulfillments;
        thresh12Subfulfillments.emplace_back(std::move(ed13));
        std::vector<Condition> thresh12Subconditions{
            {Preim14Cond, Rsa15Cond, Ed16Cond}};
        auto thresh12 = std::make_unique<ThresholdSha256>(
            std::move(thresh12Subfulfillments),
            std::move(thresh12Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh10Subfulfillments;
        thresh10Subfulfillments.emplace_back(std::move(ed11));
        thresh10Subfulfillments.emplace_back(std::move(thresh12));
        std::vector<Condition> thresh10Subconditions{
            {Preim17Cond, Rsa18Cond, Ed19Cond, Thresh20Cond}};
        auto thresh10 = std::make_unique<ThresholdSha256>(
            std::move(thresh10Subfulfillments),
            std::move(thresh10Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh0Subfulfillments;
        thresh0Subfulfillments.emplace_back(std::move(thresh1));
        thresh0Subfulfillments.emplace_back(std::move(prefix6));
        thresh0Subfulfillments.emplace_back(std::move(thresh10));
        std::vector<Condition> thresh0Subconditions{
            {Preim25Cond, Rsa26Cond, Ed27Cond}};
        ThresholdSha256 const thresh0(
            std::move(thresh0Subfulfillments), std::move(thresh0Subconditions));
        {
            auto const thresh0EncodedFulfillment =
                "\xa2\x82\x03\xea\xa0\x82\x03\x6b\xa1\x81\x85\x80\x02\x50\x36"
                "\x81\x01\x0e\xa2\x7c\xa1\x7a\x80\x02\x50\x37\x81\x01\x0e\xa2"
                "\x71\xa1\x6f\x80\x02\x50\x38\x81\x01\x0e\xa2\x66\xa4\x64\x80"
                "\x20\x33\xcd\x8f\x06\xdd\xfe\x8e\xf2\x53\x04\x88\x2d\xb0\xa0"
                "\x58\xbd\xdc\xcf\xc8\x1e\x77\x28\x4e\xf8\x45\xb2\x31\x2a\x7c"
                "\x88\x23\x5e\x81\x40\xd6\xae\xb2\xf8\xaf\x3b\xfe\x3b\x73\x27"
                "\xef\x22\x86\xf4\xca\x40\x82\x3b\x2b\x21\xa5\xc4\xa5\x1e\x32"
                "\x78\x8c\xe9\xbe\x40\x48\x82\x83\x2f\x31\x65\x79\x97\x23\x72"
                "\x77\x97\x16\x06\x94\xef\x37\x6d\x68\xef\x5c\x6b\xb5\x8c\xab"
                "\x0d\x74\x5c\x52\x91\xc8\x1e\x12\x02\xa2\x81\xe3\xa0\x66\xa4"
                "\x64\x80\x20\xb1\x2f\x54\xbe\xb6\xf8\x76\x71\x72\xed\x44\x03"
                "\x71\x74\x2d\x7f\x98\x10\x4b\x57\xf2\x45\xfb\x3e\xea\xfd\xdd"
                "\x39\x42\xbf\x24\x4d\x81\x40\x86\xf5\xe9\x44\x74\xe8\x98\xca"
                "\xc8\x20\xde\x21\xcb\xf7\xf8\x65\x37\x6c\xd2\xe2\xd2\x46\x6f"
                "\xcf\xd4\xdd\x48\x66\x8a\x9c\x06\xda\xa5\x0e\x11\xfb\x87\x94"
                "\xd2\xed\xaa\xdd\x4e\x48\x09\x7a\x4b\xdd\xa5\xe8\x46\x2e\x1a"
                "\xbb\x51\x60\x0c\x9d\x8e\x35\x3e\xc1\x79\x09\xa1\x79\xa0\x25"
                "\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54"
                "\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee"
                "\x93\x58\xeb\x4e\x81\x01\x09\xa3\x27\x80\x20\x3a\x82\x3b\x32"
                "\x38\xb1\x3c\x17\x87\x60\x62\xec\xcf\x91\xb0\xaf\xaa\xe5\x11"
                "\xe6\xfb\xe2\xb0\x3d\x70\x4d\x1d\xad\xd6\x7c\xee\xa6\x81\x03"
                "\x01\x00\x00\xa4\x27\x80\x20\x90\xce\xed\x45\x98\x68\xff\x19"
                "\x2b\x27\xc1\x2a\xa2\x6e\x2e\x82\xf3\xbd\x71\x13\x61\xb0\x76"
                "\x40\x4d\x48\xea\x16\xfb\x27\x57\xdc\x81\x03\x02\x00\x00\xa2"
                "\x82\x01\xf9\xa0\x82\x01\x4c\xa2\x81\xe3\xa0\x66\xa4\x64\x80"
                "\x20\xe8\xb1\xe9\x04\xef\x8f\x78\x4c\x54\xf2\x45\x60\x93\xb4"
                "\xc6\xa4\xc2\x9a\xa9\xb7\x5a\x0b\x06\xf1\x78\xdc\xa9\x08\x12"
                "\xb2\x2f\xf4\x81\x40\x03\x17\xa0\x49\x7b\xee\x0d\x84\x64\xee"
                "\xa8\xc1\xe6\x3e\xc6\xed\xd6\x25\x7e\x7d\xad\x96\xf3\x82\x4a"
                "\xa6\xb1\x38\xf1\x2f\x54\x6a\x52\x39\x26\x08\x2d\xe6\xfd\xb2"
                "\xfa\x23\xb3\x91\x30\x07\x9a\x4b\x63\xbb\x6f\x55\xcb\x0a\xe9"
                "\xb1\xfb\x40\x9e\x1f\x87\x70\x5a\x07\xa1\x79\xa0\x25\x80\x20"
                "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
                "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
                "\xeb\x4e\x81\x01\x09\xa3\x27\x80\x20\x55\x6b\x6d\xe3\x00\xd4"
                "\xf3\x7e\x75\x3a\x68\xfc\x25\xdf\xf2\xf7\x18\x54\xa5\x55\x0c"
                "\xa5\xa9\x65\xbf\x66\x9e\x4e\x49\x56\x1e\xf1\x81\x03\x01\x00"
                "\x00\xa4\x27\x80\x20\xe4\x66\x69\x86\x87\x57\x0e\xac\xf1\xfd"
                "\x06\x81\x48\x90\x82\x42\x48\x50\x75\x8e\xd4\x2d\xf3\x02\x37"
                "\x89\x28\xc5\x68\xd7\xa0\x11\x81\x03\x02\x00\x00\xa4\x64\x80"
                "\x20\x89\x5e\x41\x5a\x61\x75\xf5\x16\xd7\x9b\x5c\x57\x69\x5e"
                "\xa3\x22\x3e\xa5\x5d\xa3\xc0\x37\x18\x95\x26\xe7\x77\x00\x5f"
                "\x95\x58\x20\x81\x40\x06\x41\xf5\xcf\x53\x93\xe5\x1f\x90\x49"
                "\xcf\x52\xf8\x23\xc8\xd1\xac\x80\xd6\x18\x17\xbc\x70\x41\x4e"
                "\x96\xce\x1a\x07\x87\x30\xcc\x01\x85\x0b\x7a\x31\xb9\x0f\x11"
                "\xa5\x14\x1f\x1e\x27\x8d\xcd\xca\xd3\xa7\xa0\x86\x6f\x62\xce"
                "\xf2\x3b\x0c\x39\x61\xb7\x65\xa1\x01\xa1\x81\xa6\xa0\x25\x80"
                "\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d"
                "\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93"
                "\x58\xeb\x4e\x81\x01\x09\xa2\x2b\x80\x20\xbb\x5c\x6d\x91\xa5"
                "\x7d\x41\x56\x1f\x07\x7e\xc5\x3d\x14\x43\x8b\xbd\x04\xb2\xf2"
                "\x2c\x44\x50\xff\x06\x5f\x5a\x2e\xa5\x03\xe4\xdf\x81\x03\x02"
                "\x10\x00\x82\x02\x03\x98\xa3\x27\x80\x20\x9d\xbe\x65\xf4\xae"
                "\x81\x90\x79\x09\x18\xa2\x66\x12\x9c\x10\x94\x66\x21\x94\x70"
                "\x60\x20\x4a\x3d\x5f\xb3\x62\xb6\x06\x46\x37\xfe\x81\x03\x01"
                "\x00\x00\xa4\x27\x80\x20\xe5\x88\xb7\x6e\xec\x2d\xaf\x47\xc7"
                "\xa2\xf4\x6e\xbf\x7f\x5e\x46\xd7\xfa\x33\x2c\x0a\x7e\x86\x1d"
                "\x8c\x38\xa8\x93\x52\xe8\x97\xe9\x81\x03\x02\x00\x00\xa1\x79"
                "\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f"
                "\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd"
                "\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa3\x27\x80\x20\xd6\x40"
                "\x0d\x21\x44\x8a\xd4\x5a\xe6\x10\x3f\xd4\x3a\x14\x5a\x5b\x87"
                "\x86\x20\x3c\x43\x20\x9d\x9d\x0c\x75\x57\x80\x7d\xda\x9d\x06"
                "\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x6a\x26\x73\x6f\xc3\xbf"
                "\x25\x73\x8e\x3b\x27\x79\x47\xa5\x37\x7c\x78\xa0\x72\xd8\x77"
                "\x91\xfc\x45\x87\x7f\x11\x57\xfe\x94\x57\x45\x81\x03\x02\x00"
                "\x00"s;
            auto const thresh0EncodedCondition =
                "\xa2\x2b\x80\x20\xee\x24\x34\xf9\x26\x8e\xa2\x0d\xd8\x11\xce"
                "\x5f\xea\xbb\x3b\x7a\x00\xdc\xe6\x49\xa7\x86\x5b\xb3\xe0\xa8"
                "\xaa\xa3\xeb\xcc\x7a\x80\x81\x03\x08\x6c\x30\x82\x02\x03\xd8"s;
            auto const thresh0EncodedFingerprint =
                "\x30\x82\x01\x07\x80\x01\x03\xa1\x82\x01\x00\xa0\x25\x80\x20"
                "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
                "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
                "\xeb\x4e\x81\x01\x09\xa1\x2b\x80\x20\x25\x6e\x0f\x27\x75\x5f"
                "\x4d\xad\xc5\x8f\x94\x65\x62\x95\x43\xcd\xfc\x35\x2b\x65\xa3"
                "\x10\xdc\x3d\x31\x11\x68\x9c\xe5\xfa\x02\x77\x81\x03\x02\x0c"
                "\x30\x82\x02\x03\x08\xa2\x2b\x80\x20\x04\x1d\xf9\x4a\xb5\xa5"
                "\x1c\xe3\x4d\x70\xa8\xa4\xf3\x75\x21\x04\x7b\x5f\x95\xff\x34"
                "\x2e\x84\xbb\x2d\x24\x92\x74\x82\x65\xc3\xe4\x81\x03\x04\x38"
                "\x00\x82\x02\x03\x98\xa2\x2b\x80\x20\x9f\x36\x43\xa2\x47\xa2"
                "\xbb\xd4\x21\x5d\x1c\x8b\xc0\x74\x8f\x83\xf5\x20\x64\x35\x02"
                "\xbb\x0a\xd9\x49\xed\x85\xf8\x9d\x8e\x8f\xe6\x81\x03\x02\x10"
                "\x00\x82\x02\x03\x98\xa3\x27\x80\x20\xd6\x40\x0d\x21\x44\x8a"
                "\xd4\x5a\xe6\x10\x3f\xd4\x3a\x14\x5a\x5b\x87\x86\x20\x3c\x43"
                "\x20\x9d\x9d\x0c\x75\x57\x80\x7d\xda\x9d\x06\x81\x03\x01\x00"
                "\x00\xa4\x27\x80\x20\x6a\x26\x73\x6f\xc3\xbf\x25\x73\x8e\x3b"
                "\x27\x79\x47\xa5\x37\x7c\x78\xa0\x72\xd8\x77\x91\xfc\x45\x87"
                "\x7f\x11\x57\xfe\x94\x57\x45\x81\x03\x02\x00\x00"s;
            check(
                &thresh0,
                thresh0Msg,
                thresh0EncodedFulfillment,
                thresh0EncodedCondition,
                thresh0EncodedFingerprint);
        }
    }

    void
    testThresh67()
    {
        testcase("Thresh67");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * thresh0
        // ** Preim9Cond
        // ** Rsa10Cond
        // ** Ed11Cond
        // ** Prefix12Cond
        // ** Thresh16Cond
        // ** thresh1
        // *** Preim3Cond
        // *** Rsa4Cond
        // *** Ed5Cond
        // *** ed2
        // ** preim6
        // ** rsa7
        // ** ed8

        auto const ed2Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed2PublicKey{
            {0xb1, 0x2f, 0x54, 0xbe, 0xb6, 0xf8, 0x76, 0x71, 0x72, 0xed, 0x44,
             0x03, 0x71, 0x74, 0x2d, 0x7f, 0x98, 0x10, 0x4b, 0x57, 0xf2, 0x45,
             0xfb, 0x3e, 0xea, 0xfd, 0xdd, 0x39, 0x42, 0xbf, 0x24, 0x4d}};
        std::array<std::uint8_t, 64> const ed2Sig{
            {0x86, 0xf5, 0xe9, 0x44, 0x74, 0xe8, 0x98, 0xca, 0xc8, 0x20, 0xde,
             0x21, 0xcb, 0xf7, 0xf8, 0x65, 0x37, 0x6c, 0xd2, 0xe2, 0xd2, 0x46,
             0x6f, 0xcf, 0xd4, 0xdd, 0x48, 0x66, 0x8a, 0x9c, 0x06, 0xda, 0xa5,
             0x0e, 0x11, 0xfb, 0x87, 0x94, 0xd2, 0xed, 0xaa, 0xdd, 0x4e, 0x48,
             0x09, 0x7a, 0x4b, 0xdd, 0xa5, 0xe8, 0x46, 0x2e, 0x1a, 0xbb, 0x51,
             0x60, 0x0c, 0x9d, 0x8e, 0x35, 0x3e, 0xc1, 0x79, 0x09}};
        std::array<std::uint8_t, 32> const ed2SigningKey{
            {0xa7, 0xeb, 0x15, 0xc5, 0x2a, 0x41, 0x59, 0xf9, 0xf7, 0xb4, 0x78,
             0x5f, 0xdb, 0x79, 0xe5, 0x5b, 0x16, 0x44, 0xf7, 0xc7, 0xcf, 0xe2,
             0x46, 0xc5, 0xb3, 0x54, 0x64, 0xb5, 0x2f, 0x6c, 0x8e, 0x8e}};
        (void)ed2SigningKey;
        auto const thresh1Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim3CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim3Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim3CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa4CondConditionFingerprint =
            "\x3a\x82\x3b\x32\x38\xb1\x3c\x17\x87\x60\x62\xec\xcf\x91\xb0"
            "\xaf\xaa\xe5\x11\xe6\xfb\xe2\xb0\x3d\x70\x4d\x1d\xad\xd6\x7c"
            "\xee\xa6"s;
        Condition const Rsa4Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa4CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed5CondConditionFingerprint =
            "\x90\xce\xed\x45\x98\x68\xff\x19\x2b\x27\xc1\x2a\xa2\x6e\x2e"
            "\x82\xf3\xbd\x71\x13\x61\xb0\x76\x40\x4d\x48\xea\x16\xfb\x27"
            "\x57\xdc"s;
        Condition const Ed5Cond{Type::ed25519Sha256,
                                131072,
                                makeSlice(Ed5CondConditionFingerprint),
                                std::bitset<5>{0}};
        auto const preim6Preimage = "I am root"s;
        auto const preim6Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const rsa7Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa7PublicKey{
            {0xb5, 0x8b, 0xa2, 0xa1, 0xc0, 0x5b, 0xc3, 0xa3, 0x64, 0xe9, 0x88,
             0xe3, 0x25, 0x89, 0xa0, 0x6d, 0x73, 0x8a, 0x46, 0x09, 0x58, 0xb4,
             0x85, 0x66, 0x87, 0x56, 0x85, 0x39, 0xee, 0x6d, 0x77, 0xbb, 0x99,
             0x57, 0x90, 0x0e, 0x9c, 0x9c, 0xd5, 0x40, 0xc4, 0x8b, 0x37, 0xb1,
             0xfe, 0x78, 0xb7, 0xe1, 0xe8, 0xb7, 0x74, 0xee, 0x74, 0x9c, 0xe5,
             0xa3, 0xdd, 0xb7, 0x87, 0x77, 0xb7, 0x14, 0x08, 0x71, 0xc4, 0xec,
             0x85, 0xe2, 0xe3, 0xc1, 0x1e, 0x34, 0x14, 0x21, 0xe1, 0xac, 0xd3,
             0x20, 0x0f, 0xb8, 0x11, 0x24, 0x69, 0xa3, 0x7d, 0x98, 0x35, 0x2a,
             0xdf, 0x56, 0x7d, 0x30, 0xf7, 0x31, 0x64, 0x73, 0xcf, 0x0c, 0x9e,
             0xa6, 0x3b, 0x7d, 0x93, 0xb1, 0xc4, 0xb6, 0x78, 0x39, 0x52, 0x3b,
             0x4d, 0xb6, 0xb2, 0x55, 0x17, 0x95, 0x27, 0xbd, 0xd6, 0xc1, 0x28,
             0x7b, 0x82, 0xbb, 0xeb, 0xea, 0xec, 0x7e, 0x48, 0x35, 0xb3, 0x4b,
             0x78, 0x30, 0xc4, 0x66, 0x32, 0x39, 0x2d, 0xd6, 0x5f, 0x59, 0xeb,
             0x81, 0x64, 0x68, 0xdb, 0x94, 0xf4, 0x8e, 0x5f, 0x34, 0x4f, 0x3b,
             0x03, 0xe5, 0xa6, 0x1b, 0x30, 0x6c, 0xea, 0xe8, 0xc6, 0x36, 0xf8,
             0xee, 0x0b, 0x0f, 0xb5, 0xd2, 0xe7, 0xa4, 0x0a, 0xbc, 0xef, 0x80,
             0x7e, 0xb1, 0x9b, 0xda, 0xe6, 0x40, 0x4a, 0x3f, 0x6f, 0xd1, 0x5a,
             0x64, 0x84, 0xb2, 0x5c, 0xd2, 0xf0, 0x38, 0x7c, 0xcb, 0xd1, 0xcd,
             0xdd, 0x37, 0x3f, 0x76, 0xe7, 0x08, 0x25, 0xe5, 0xd3, 0xd9, 0xe3,
             0x21, 0x1b, 0x88, 0x41, 0x3d, 0x2d, 0x32, 0xff, 0xd3, 0xfe, 0x4d,
             0x40, 0x85, 0x1b, 0x0f, 0xd6, 0xab, 0x4e, 0xb7, 0x38, 0x68, 0xe9,
             0x67, 0xc7, 0xb5, 0xd1, 0x38, 0xdb, 0x85, 0x2e, 0x2f, 0x76, 0xea,
             0x4a, 0xce, 0xff, 0x08, 0x5e, 0x93, 0x87, 0x98, 0xf7, 0x95, 0xeb,
             0x49, 0xf6, 0x8d}};
        std::array<std::uint8_t, 256> const rsa7Sig{
            {0x69, 0xba, 0xdd, 0x17, 0x3b, 0xe7, 0x31, 0xdd, 0xdd, 0x39, 0xf2,
             0x43, 0xf7, 0xa5, 0x3c, 0x69, 0xd7, 0xe3, 0xbb, 0x79, 0x74, 0x75,
             0x47, 0x29, 0xd6, 0x53, 0x09, 0xb3, 0x8b, 0x7d, 0xa5, 0xfa, 0x32,
             0xf3, 0xc7, 0x7b, 0xac, 0x01, 0x9b, 0xcb, 0x91, 0x9d, 0x80, 0xe9,
             0xbf, 0xe8, 0x6c, 0x89, 0x55, 0x04, 0x83, 0x03, 0x3f, 0xda, 0x95,
             0xfb, 0x13, 0x17, 0x96, 0x70, 0x0f, 0xbf, 0x1d, 0xf0, 0x93, 0x9a,
             0x3e, 0xd8, 0x19, 0x57, 0xa2, 0x2c, 0xa2, 0xc3, 0x39, 0xfd, 0x8f,
             0xec, 0xab, 0x05, 0xb6, 0x3f, 0x38, 0x8e, 0x9a, 0xf5, 0xfc, 0x4e,
             0x54, 0x8f, 0x9e, 0x25, 0x8f, 0x20, 0x07, 0x9b, 0x41, 0x13, 0x68,
             0x0c, 0x63, 0x84, 0x45, 0x70, 0x57, 0xca, 0x34, 0xc4, 0xf2, 0x8b,
             0xe0, 0xf9, 0x91, 0x8e, 0x0a, 0xec, 0xd3, 0x30, 0xba, 0x43, 0x63,
             0x76, 0x17, 0x54, 0x1a, 0x55, 0x49, 0x60, 0x8d, 0x4d, 0x03, 0x7c,
             0x50, 0x23, 0x94, 0xf0, 0x7c, 0x2d, 0xa5, 0x11, 0x31, 0x4a, 0x09,
             0x63, 0x89, 0x33, 0xde, 0x03, 0xd5, 0x9f, 0x5b, 0x7c, 0xfa, 0x4c,
             0xf7, 0x99, 0xe8, 0x3d, 0xc1, 0x58, 0x78, 0x0f, 0x56, 0x63, 0x9f,
             0x8d, 0xe5, 0x7a, 0xf5, 0xaa, 0x52, 0xec, 0x9d, 0x57, 0x04, 0x9c,
             0x5e, 0x4d, 0x19, 0x44, 0xbd, 0x17, 0xb2, 0xe8, 0x63, 0x26, 0x54,
             0x01, 0xb9, 0xe5, 0x27, 0xe9, 0x2d, 0x25, 0xd1, 0x94, 0x54, 0x29,
             0x19, 0x45, 0xd1, 0x37, 0x79, 0xe9, 0xc7, 0x45, 0x0e, 0x53, 0x5e,
             0x29, 0xb9, 0xdb, 0x1f, 0x98, 0x9f, 0x90, 0x59, 0xef, 0x49, 0x01,
             0x58, 0xc2, 0xd4, 0xf8, 0x66, 0xa4, 0x27, 0x59, 0x72, 0xf8, 0xe4,
             0x26, 0xe0, 0x27, 0xc6, 0xba, 0x2b, 0x12, 0xa8, 0x8f, 0x19, 0xee,
             0x09, 0x98, 0xc1, 0xb9, 0x49, 0x4b, 0x2c, 0xf3, 0x26, 0x73, 0x1c,
             0x23, 0xe6, 0x4f}};
        auto const ed8Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed8PublicKey{
            {0xb6, 0x55, 0xc8, 0xa4, 0x14, 0x20, 0x73, 0x44, 0x12, 0x06, 0xf6,
             0xf7, 0xd0, 0x03, 0x74, 0x53, 0xaa, 0x74, 0x6c, 0xf1, 0x84, 0x0e,
             0x86, 0x1d, 0xb1, 0x97, 0x1a, 0x04, 0x91, 0x83, 0x3b, 0x49}};
        std::array<std::uint8_t, 64> const ed8Sig{
            {0x4d, 0xf6, 0x5a, 0x0e, 0xa4, 0x6f, 0x3d, 0xa0, 0x76, 0xe4, 0x3a,
             0xea, 0x69, 0x1e, 0x3f, 0xe4, 0x45, 0x51, 0x97, 0xc8, 0x7e, 0x3c,
             0xd6, 0x34, 0xc8, 0x7f, 0xa3, 0xf9, 0xd7, 0xfe, 0x0a, 0xf4, 0x86,
             0x18, 0xc5, 0xfa, 0x1c, 0x73, 0x88, 0x37, 0x33, 0x3d, 0xd4, 0x8c,
             0x08, 0xf9, 0xa5, 0xf0, 0x83, 0x37, 0x06, 0x5b, 0xd3, 0xfc, 0x20,
             0x12, 0x42, 0x7a, 0x7a, 0xd7, 0x60, 0xc5, 0xd1, 0x0b}};
        std::array<std::uint8_t, 32> const ed8SigningKey{
            {0xc2, 0x00, 0xc6, 0x2e, 0x45, 0xde, 0xf2, 0x39, 0x81, 0x0a, 0xf8,
             0x6d, 0x53, 0x29, 0xe3, 0x1b, 0x8e, 0x57, 0xad, 0xfa, 0x29, 0x1b,
             0x07, 0x1a, 0xee, 0x34, 0xe6, 0x57, 0x5a, 0xeb, 0xf2, 0x1c}};
        (void)ed8SigningKey;
        auto const thresh0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim9CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim9Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim9CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa10CondConditionFingerprint =
            "\x3c\x73\x38\xcf\x23\xc6\x31\x53\x28\xc4\x27\xf8\x95\x87\x99"
            "\x83\x2d\x35\x3c\x03\x9b\xd1\xff\xff\x2e\x53\x20\xe9\x5e\x62"
            "\xb9\xb7"s;
        Condition const Rsa10Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa10CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed11CondConditionFingerprint =
            "\x41\x80\x08\xb2\x60\x74\x57\x6d\xac\xed\x74\x7f\x54\xdb\x96"
            "\x18\x91\x06\x0a\x95\xa1\x49\x17\xc7\x65\xe3\x94\xc8\x5e\x2c"
            "\x92\x20"s;
        Condition const Ed11Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed11CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Prefix12CondConditionFingerprint =
            "\x41\x84\x52\xb1\xe3\xe8\xd2\xca\x8a\x60\xc8\x5e\xce\x47\xeb"
            "\x3b\x5f\x50\xde\x8c\x73\x5b\x53\xb2\x5a\x2b\x91\x38\xe2\x6c"
            "\xa8\x21"s;
        Condition const Prefix12Cond{
            Type::prefixSha256,
            134207,
            makeSlice(Prefix12CondConditionFingerprint),
            std::bitset<5>{16}};
        auto const Thresh16CondConditionFingerprint =
            "\xb3\x51\x97\xe4\x76\xfa\xfb\x73\x98\x2a\xbb\x87\x0f\x46\xe3"
            "\x68\x99\x9d\xe8\x14\x51\xeb\xa0\xec\x18\xa7\x53\xf5\x47\x45"
            "\x8a\x5e"s;
        Condition const Thresh16Cond{
            Type::thresholdSha256,
            276480,
            makeSlice(Thresh16CondConditionFingerprint),
            std::bitset<5>{25}};

        auto ed2 = std::make_unique<Ed25519>(ed2PublicKey, ed2Sig);
        std::vector<std::unique_ptr<Fulfillment>> thresh1Subfulfillments;
        thresh1Subfulfillments.emplace_back(std::move(ed2));
        std::vector<Condition> thresh1Subconditions{
            {Preim3Cond, Rsa4Cond, Ed5Cond}};
        auto thresh1 = std::make_unique<ThresholdSha256>(
            std::move(thresh1Subfulfillments), std::move(thresh1Subconditions));
        auto preim6 =
            std::make_unique<PreimageSha256>(makeSlice(preim6Preimage));
        auto rsa7 = std::make_unique<RsaSha256>(
            makeSlice(rsa7PublicKey), makeSlice(rsa7Sig));
        auto ed8 = std::make_unique<Ed25519>(ed8PublicKey, ed8Sig);
        std::vector<std::unique_ptr<Fulfillment>> thresh0Subfulfillments;
        thresh0Subfulfillments.emplace_back(std::move(thresh1));
        thresh0Subfulfillments.emplace_back(std::move(preim6));
        thresh0Subfulfillments.emplace_back(std::move(rsa7));
        thresh0Subfulfillments.emplace_back(std::move(ed8));
        std::vector<Condition> thresh0Subconditions{
            {Preim9Cond, Rsa10Cond, Ed11Cond, Prefix12Cond, Thresh16Cond}};
        ThresholdSha256 const thresh0(
            std::move(thresh0Subfulfillments), std::move(thresh0Subconditions));
        {
            auto const thresh0EncodedFulfillment =
                "\xa2\x82\x04\x3f\xa0\x82\x03\x65\xa0\x0b\x80\x09\x49\x20\x61"
                "\x6d\x20\x72\x6f\x6f\x74\xa2\x81\xe3\xa0\x66\xa4\x64\x80\x20"
                "\xb1\x2f\x54\xbe\xb6\xf8\x76\x71\x72\xed\x44\x03\x71\x74\x2d"
                "\x7f\x98\x10\x4b\x57\xf2\x45\xfb\x3e\xea\xfd\xdd\x39\x42\xbf"
                "\x24\x4d\x81\x40\x86\xf5\xe9\x44\x74\xe8\x98\xca\xc8\x20\xde"
                "\x21\xcb\xf7\xf8\x65\x37\x6c\xd2\xe2\xd2\x46\x6f\xcf\xd4\xdd"
                "\x48\x66\x8a\x9c\x06\xda\xa5\x0e\x11\xfb\x87\x94\xd2\xed\xaa"
                "\xdd\x4e\x48\x09\x7a\x4b\xdd\xa5\xe8\x46\x2e\x1a\xbb\x51\x60"
                "\x0c\x9d\x8e\x35\x3e\xc1\x79\x09\xa1\x79\xa0\x25\x80\x20\x5d"
                "\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b"
                "\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb"
                "\x4e\x81\x01\x09\xa3\x27\x80\x20\x3a\x82\x3b\x32\x38\xb1\x3c"
                "\x17\x87\x60\x62\xec\xcf\x91\xb0\xaf\xaa\xe5\x11\xe6\xfb\xe2"
                "\xb0\x3d\x70\x4d\x1d\xad\xd6\x7c\xee\xa6\x81\x03\x01\x00\x00"
                "\xa4\x27\x80\x20\x90\xce\xed\x45\x98\x68\xff\x19\x2b\x27\xc1"
                "\x2a\xa2\x6e\x2e\x82\xf3\xbd\x71\x13\x61\xb0\x76\x40\x4d\x48"
                "\xea\x16\xfb\x27\x57\xdc\x81\x03\x02\x00\x00\xa3\x82\x02\x08"
                "\x80\x82\x01\x00\xb5\x8b\xa2\xa1\xc0\x5b\xc3\xa3\x64\xe9\x88"
                "\xe3\x25\x89\xa0\x6d\x73\x8a\x46\x09\x58\xb4\x85\x66\x87\x56"
                "\x85\x39\xee\x6d\x77\xbb\x99\x57\x90\x0e\x9c\x9c\xd5\x40\xc4"
                "\x8b\x37\xb1\xfe\x78\xb7\xe1\xe8\xb7\x74\xee\x74\x9c\xe5\xa3"
                "\xdd\xb7\x87\x77\xb7\x14\x08\x71\xc4\xec\x85\xe2\xe3\xc1\x1e"
                "\x34\x14\x21\xe1\xac\xd3\x20\x0f\xb8\x11\x24\x69\xa3\x7d\x98"
                "\x35\x2a\xdf\x56\x7d\x30\xf7\x31\x64\x73\xcf\x0c\x9e\xa6\x3b"
                "\x7d\x93\xb1\xc4\xb6\x78\x39\x52\x3b\x4d\xb6\xb2\x55\x17\x95"
                "\x27\xbd\xd6\xc1\x28\x7b\x82\xbb\xeb\xea\xec\x7e\x48\x35\xb3"
                "\x4b\x78\x30\xc4\x66\x32\x39\x2d\xd6\x5f\x59\xeb\x81\x64\x68"
                "\xdb\x94\xf4\x8e\x5f\x34\x4f\x3b\x03\xe5\xa6\x1b\x30\x6c\xea"
                "\xe8\xc6\x36\xf8\xee\x0b\x0f\xb5\xd2\xe7\xa4\x0a\xbc\xef\x80"
                "\x7e\xb1\x9b\xda\xe6\x40\x4a\x3f\x6f\xd1\x5a\x64\x84\xb2\x5c"
                "\xd2\xf0\x38\x7c\xcb\xd1\xcd\xdd\x37\x3f\x76\xe7\x08\x25\xe5"
                "\xd3\xd9\xe3\x21\x1b\x88\x41\x3d\x2d\x32\xff\xd3\xfe\x4d\x40"
                "\x85\x1b\x0f\xd6\xab\x4e\xb7\x38\x68\xe9\x67\xc7\xb5\xd1\x38"
                "\xdb\x85\x2e\x2f\x76\xea\x4a\xce\xff\x08\x5e\x93\x87\x98\xf7"
                "\x95\xeb\x49\xf6\x8d\x81\x82\x01\x00\x69\xba\xdd\x17\x3b\xe7"
                "\x31\xdd\xdd\x39\xf2\x43\xf7\xa5\x3c\x69\xd7\xe3\xbb\x79\x74"
                "\x75\x47\x29\xd6\x53\x09\xb3\x8b\x7d\xa5\xfa\x32\xf3\xc7\x7b"
                "\xac\x01\x9b\xcb\x91\x9d\x80\xe9\xbf\xe8\x6c\x89\x55\x04\x83"
                "\x03\x3f\xda\x95\xfb\x13\x17\x96\x70\x0f\xbf\x1d\xf0\x93\x9a"
                "\x3e\xd8\x19\x57\xa2\x2c\xa2\xc3\x39\xfd\x8f\xec\xab\x05\xb6"
                "\x3f\x38\x8e\x9a\xf5\xfc\x4e\x54\x8f\x9e\x25\x8f\x20\x07\x9b"
                "\x41\x13\x68\x0c\x63\x84\x45\x70\x57\xca\x34\xc4\xf2\x8b\xe0"
                "\xf9\x91\x8e\x0a\xec\xd3\x30\xba\x43\x63\x76\x17\x54\x1a\x55"
                "\x49\x60\x8d\x4d\x03\x7c\x50\x23\x94\xf0\x7c\x2d\xa5\x11\x31"
                "\x4a\x09\x63\x89\x33\xde\x03\xd5\x9f\x5b\x7c\xfa\x4c\xf7\x99"
                "\xe8\x3d\xc1\x58\x78\x0f\x56\x63\x9f\x8d\xe5\x7a\xf5\xaa\x52"
                "\xec\x9d\x57\x04\x9c\x5e\x4d\x19\x44\xbd\x17\xb2\xe8\x63\x26"
                "\x54\x01\xb9\xe5\x27\xe9\x2d\x25\xd1\x94\x54\x29\x19\x45\xd1"
                "\x37\x79\xe9\xc7\x45\x0e\x53\x5e\x29\xb9\xdb\x1f\x98\x9f\x90"
                "\x59\xef\x49\x01\x58\xc2\xd4\xf8\x66\xa4\x27\x59\x72\xf8\xe4"
                "\x26\xe0\x27\xc6\xba\x2b\x12\xa8\x8f\x19\xee\x09\x98\xc1\xb9"
                "\x49\x4b\x2c\xf3\x26\x73\x1c\x23\xe6\x4f\xa4\x64\x80\x20\xb6"
                "\x55\xc8\xa4\x14\x20\x73\x44\x12\x06\xf6\xf7\xd0\x03\x74\x53"
                "\xaa\x74\x6c\xf1\x84\x0e\x86\x1d\xb1\x97\x1a\x04\x91\x83\x3b"
                "\x49\x81\x40\x4d\xf6\x5a\x0e\xa4\x6f\x3d\xa0\x76\xe4\x3a\xea"
                "\x69\x1e\x3f\xe4\x45\x51\x97\xc8\x7e\x3c\xd6\x34\xc8\x7f\xa3"
                "\xf9\xd7\xfe\x0a\xf4\x86\x18\xc5\xfa\x1c\x73\x88\x37\x33\x3d"
                "\xd4\x8c\x08\xf9\xa5\xf0\x83\x37\x06\x5b\xd3\xfc\x20\x12\x42"
                "\x7a\x7a\xd7\x60\xc5\xd1\x0b\xa1\x81\xd3\xa0\x25\x80\x20\x5d"
                "\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b"
                "\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb"
                "\x4e\x81\x01\x09\xa1\x2b\x80\x20\x41\x84\x52\xb1\xe3\xe8\xd2"
                "\xca\x8a\x60\xc8\x5e\xce\x47\xeb\x3b\x5f\x50\xde\x8c\x73\x5b"
                "\x53\xb2\x5a\x2b\x91\x38\xe2\x6c\xa8\x21\x81\x03\x02\x0c\x3f"
                "\x82\x02\x03\x08\xa2\x2b\x80\x20\xb3\x51\x97\xe4\x76\xfa\xfb"
                "\x73\x98\x2a\xbb\x87\x0f\x46\xe3\x68\x99\x9d\xe8\x14\x51\xeb"
                "\xa0\xec\x18\xa7\x53\xf5\x47\x45\x8a\x5e\x81\x03\x04\x38\x00"
                "\x82\x02\x03\x98\xa3\x27\x80\x20\x3c\x73\x38\xcf\x23\xc6\x31"
                "\x53\x28\xc4\x27\xf8\x95\x87\x99\x83\x2d\x35\x3c\x03\x9b\xd1"
                "\xff\xff\x2e\x53\x20\xe9\x5e\x62\xb9\xb7\x81\x03\x01\x00\x00"
                "\xa4\x27\x80\x20\x41\x80\x08\xb2\x60\x74\x57\x6d\xac\xed\x74"
                "\x7f\x54\xdb\x96\x18\x91\x06\x0a\x95\xa1\x49\x17\xc7\x65\xe3"
                "\x94\xc8\x5e\x2c\x92\x20\x81\x03\x02\x00\x00"s;
            auto const thresh0EncodedCondition =
                "\xa2\x2b\x80\x20\x07\xaf\x3e\x04\x1a\xfb\x86\xf7\x4b\x03\xf4"
                "\x47\x1a\xd4\x19\x1f\xac\x7d\xf2\x57\x2d\x9e\x7a\xe5\x8b\x6b"
                "\xe8\xe5\xac\x8c\x97\xdd\x81\x03\x0a\x78\x3f\x82\x02\x03\xd8"s;
            auto const thresh0EncodedFingerprint =
                "\x30\x82\x01\x80\x80\x01\x04\xa1\x82\x01\x79\xa0\x25\x80\x20"
                "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
                "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
                "\xeb\x4e\x81\x01\x09\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1"
                "\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21"
                "\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa1"
                "\x2b\x80\x20\x41\x84\x52\xb1\xe3\xe8\xd2\xca\x8a\x60\xc8\x5e"
                "\xce\x47\xeb\x3b\x5f\x50\xde\x8c\x73\x5b\x53\xb2\x5a\x2b\x91"
                "\x38\xe2\x6c\xa8\x21\x81\x03\x02\x0c\x3f\x82\x02\x03\x08\xa2"
                "\x2b\x80\x20\x9f\x36\x43\xa2\x47\xa2\xbb\xd4\x21\x5d\x1c\x8b"
                "\xc0\x74\x8f\x83\xf5\x20\x64\x35\x02\xbb\x0a\xd9\x49\xed\x85"
                "\xf8\x9d\x8e\x8f\xe6\x81\x03\x02\x10\x00\x82\x02\x03\x98\xa2"
                "\x2b\x80\x20\xb3\x51\x97\xe4\x76\xfa\xfb\x73\x98\x2a\xbb\x87"
                "\x0f\x46\xe3\x68\x99\x9d\xe8\x14\x51\xeb\xa0\xec\x18\xa7\x53"
                "\xf5\x47\x45\x8a\x5e\x81\x03\x04\x38\x00\x82\x02\x03\x98\xa3"
                "\x27\x80\x20\x3c\x73\x38\xcf\x23\xc6\x31\x53\x28\xc4\x27\xf8"
                "\x95\x87\x99\x83\x2d\x35\x3c\x03\x9b\xd1\xff\xff\x2e\x53\x20"
                "\xe9\x5e\x62\xb9\xb7\x81\x03\x01\x00\x00\xa3\x27\x80\x20\x6c"
                "\x7b\xea\x83\xa1\xf4\x82\x3d\x36\xe7\x6e\xae\x1a\xbc\xa0\xba"
                "\x90\x3d\x96\xc1\xe6\xad\x3a\x47\xa5\xcb\x88\xab\x3c\x5f\xcc"
                "\xd5\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x41\x80\x08\xb2\x60"
                "\x74\x57\x6d\xac\xed\x74\x7f\x54\xdb\x96\x18\x91\x06\x0a\x95"
                "\xa1\x49\x17\xc7\x65\xe3\x94\xc8\x5e\x2c\x92\x20\x81\x03\x02"
                "\x00\x00\xa4\x27\x80\x20\xf1\x68\x96\xa6\x2e\xef\x7f\x47\x06"
                "\x51\x4c\xc6\x7e\x24\xf7\x29\x84\x9c\xd6\xb0\xd9\x4b\xd9\x0f"
                "\xc9\x34\x01\x9d\x92\xeb\xbc\x0a\x81\x03\x02\x00\x00"s;
            check(
                &thresh0,
                thresh0Msg,
                thresh0EncodedFulfillment,
                thresh0EncodedCondition,
                thresh0EncodedFingerprint);
        }
    }

    void
    testThresh68()
    {
        testcase("Thresh68");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * thresh0
        // ** Preim17Cond
        // ** Rsa18Cond
        // ** Ed19Cond
        // ** thresh1
        // *** Preim8Cond
        // *** Rsa9Cond
        // *** Ed10Cond
        // *** ed2
        // *** thresh3
        // **** Preim5Cond
        // **** Rsa6Cond
        // **** Ed7Cond
        // **** ed4
        // ** prefix11
        // *** prefix12
        // **** thresh13
        // ***** ed14
        // ** thresh15
        // *** ed16

        auto const ed2Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed2PublicKey{
            {0xb1, 0x2f, 0x54, 0xbe, 0xb6, 0xf8, 0x76, 0x71, 0x72, 0xed, 0x44,
             0x03, 0x71, 0x74, 0x2d, 0x7f, 0x98, 0x10, 0x4b, 0x57, 0xf2, 0x45,
             0xfb, 0x3e, 0xea, 0xfd, 0xdd, 0x39, 0x42, 0xbf, 0x24, 0x4d}};
        std::array<std::uint8_t, 64> const ed2Sig{
            {0x86, 0xf5, 0xe9, 0x44, 0x74, 0xe8, 0x98, 0xca, 0xc8, 0x20, 0xde,
             0x21, 0xcb, 0xf7, 0xf8, 0x65, 0x37, 0x6c, 0xd2, 0xe2, 0xd2, 0x46,
             0x6f, 0xcf, 0xd4, 0xdd, 0x48, 0x66, 0x8a, 0x9c, 0x06, 0xda, 0xa5,
             0x0e, 0x11, 0xfb, 0x87, 0x94, 0xd2, 0xed, 0xaa, 0xdd, 0x4e, 0x48,
             0x09, 0x7a, 0x4b, 0xdd, 0xa5, 0xe8, 0x46, 0x2e, 0x1a, 0xbb, 0x51,
             0x60, 0x0c, 0x9d, 0x8e, 0x35, 0x3e, 0xc1, 0x79, 0x09}};
        std::array<std::uint8_t, 32> const ed2SigningKey{
            {0xa7, 0xeb, 0x15, 0xc5, 0x2a, 0x41, 0x59, 0xf9, 0xf7, 0xb4, 0x78,
             0x5f, 0xdb, 0x79, 0xe5, 0x5b, 0x16, 0x44, 0xf7, 0xc7, 0xcf, 0xe2,
             0x46, 0xc5, 0xb3, 0x54, 0x64, 0xb5, 0x2f, 0x6c, 0x8e, 0x8e}};
        (void)ed2SigningKey;
        auto const ed4Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed4PublicKey{
            {0x26, 0x80, 0x85, 0x71, 0x79, 0x37, 0x27, 0xbd, 0x85, 0xaf, 0x22,
             0x49, 0x59, 0x42, 0x99, 0x5c, 0x9c, 0x5b, 0x9f, 0x99, 0x54, 0xb6,
             0xd4, 0xd1, 0x81, 0x94, 0x4c, 0x22, 0x53, 0x03, 0xc0, 0xec}};
        std::array<std::uint8_t, 64> const ed4Sig{
            {0x8d, 0xea, 0x41, 0xb3, 0xf6, 0x63, 0xef, 0xfe, 0x6e, 0x52, 0xf2,
             0x37, 0x9c, 0xd3, 0x57, 0x55, 0x0e, 0xe9, 0x51, 0x31, 0x07, 0xf9,
             0x9c, 0x6c, 0x58, 0xbf, 0x7f, 0x00, 0xa4, 0xe1, 0x81, 0x55, 0xfc,
             0xd5, 0xfb, 0x5c, 0xfc, 0xda, 0x85, 0xd3, 0xd5, 0xf4, 0xca, 0x25,
             0x5e, 0xa0, 0x0b, 0x4e, 0x70, 0x50, 0x6e, 0x70, 0x34, 0x91, 0x30,
             0x96, 0x75, 0xb2, 0x8f, 0x39, 0xf8, 0xd3, 0x8b, 0x0d}};
        std::array<std::uint8_t, 32> const ed4SigningKey{
            {0x2a, 0x7a, 0x9a, 0x1f, 0xf1, 0x08, 0x8f, 0x8e, 0xef, 0x3a, 0x39,
             0xce, 0x13, 0xea, 0x08, 0x08, 0x8a, 0xf6, 0x06, 0x78, 0xd5, 0x3e,
             0x0b, 0x9c, 0x84, 0xfb, 0x39, 0x93, 0xd6, 0xfe, 0xa0, 0x3d}};
        (void)ed4SigningKey;
        auto const thresh3Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim5CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim5Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim5CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa6CondConditionFingerprint =
            "\xee\x75\xbe\xb3\x52\x54\xbd\x24\x06\x3f\xd9\x32\x48\x19\xe1"
            "\x5c\x70\x85\x92\x11\x6c\x3a\xc1\x4c\x9b\x83\xeb\x05\xa7\x59"
            "\xe2\xa0"s;
        Condition const Rsa6Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa6CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed7CondConditionFingerprint =
            "\x1e\x5a\xaf\x3e\x46\xf6\xd4\xdf\x4d\x70\xf0\xa1\xd1\x35\x6d"
            "\xf0\x8b\x86\x91\xac\xb2\xf2\x24\xf0\x1a\xd4\x23\xc0\x21\x8d"
            "\x42\xc0"s;
        Condition const Ed7Cond{Type::ed25519Sha256,
                                131072,
                                makeSlice(Ed7CondConditionFingerprint),
                                std::bitset<5>{0}};
        auto const thresh1Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim8CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim8Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim8CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa9CondConditionFingerprint =
            "\xe5\x15\x0a\xbd\xf6\x06\xbe\xaa\x6c\x81\xf1\x88\x7e\x70\x64"
            "\x51\xeb\x6f\x70\xb1\xdd\xc5\xf1\x20\x53\xf7\xcb\x9f\x7f\xc7"
            "\xe4\x52"s;
        Condition const Rsa9Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa9CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed10CondConditionFingerprint =
            "\x00\x8b\xe6\x62\xd4\x30\x65\x1e\x40\xb3\x23\x05\x52\x3a\xf3"
            "\x16\xda\x09\xbe\x79\x5f\x41\xc9\x03\x93\x34\x5b\x7c\x24\x87"
            "\x62\xfa"s;
        Condition const Ed10Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed10CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const ed14Msg = "P12P11abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed14PublicKey{
            {0x43, 0x3f, 0x99, 0xf7, 0x16, 0x69, 0xed, 0xc3, 0xdb, 0xfb, 0x19,
             0xca, 0x32, 0x08, 0x6d, 0x4e, 0xb1, 0x04, 0x16, 0xb7, 0x9f, 0xf3,
             0x9f, 0xbd, 0x9b, 0xb1, 0xaf, 0xdb, 0xba, 0x50, 0x4f, 0x00}};
        std::array<std::uint8_t, 64> const ed14Sig{
            {0x14, 0xf1, 0xfe, 0x3a, 0x37, 0xf0, 0x32, 0x65, 0xf2, 0xa2, 0xa6,
             0x0d, 0x5f, 0x8f, 0x74, 0x9b, 0x5f, 0xcc, 0x64, 0xca, 0x5f, 0x44,
             0x16, 0x79, 0xf2, 0xdb, 0x93, 0x5f, 0x60, 0xe1, 0xe6, 0x3e, 0x33,
             0xc7, 0xea, 0x87, 0x74, 0xd7, 0xca, 0x65, 0xb3, 0xd0, 0xd6, 0x71,
             0xf0, 0x11, 0xa4, 0x8c, 0x59, 0x0c, 0xa1, 0x03, 0x7b, 0x29, 0x2a,
             0xd0, 0x70, 0x28, 0xec, 0x87, 0xcc, 0x3b, 0x58, 0x06}};
        std::array<std::uint8_t, 32> const ed14SigningKey{
            {0x55, 0x91, 0x83, 0xd0, 0x62, 0xbb, 0x44, 0x99, 0x6e, 0xfd, 0xc1,
             0xaa, 0xef, 0xf4, 0x8b, 0x05, 0x5f, 0x39, 0xda, 0x5a, 0xcd, 0xa0,
             0xc5, 0xd4, 0x3b, 0x12, 0xe9, 0xc2, 0x2b, 0x7d, 0x0c, 0xc7}};
        (void)ed14SigningKey;
        auto const thresh13Msg = "P12P11abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix12Prefix = "P12"s;
        auto const prefix12Msg = "P11abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix12MaxMsgLength = 14;
        auto const prefix11Prefix = "P11"s;
        auto const prefix11Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix11MaxMsgLength = 14;
        auto const ed16Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed16PublicKey{
            {0x50, 0x5a, 0xcb, 0xfd, 0xac, 0xce, 0x8b, 0x6f, 0xeb, 0x52, 0x06,
             0x75, 0xb8, 0x72, 0x9d, 0x94, 0x62, 0xdc, 0xe4, 0x11, 0x24, 0xd0,
             0xa3, 0x35, 0x47, 0x20, 0x02, 0xd5, 0xf7, 0x3f, 0x9c, 0x93}};
        std::array<std::uint8_t, 64> const ed16Sig{
            {0x70, 0x10, 0xf0, 0xdf, 0x6b, 0xdf, 0xe8, 0x30, 0x56, 0x8e, 0xd9,
             0x48, 0x92, 0x62, 0x1f, 0x2b, 0x0c, 0x6c, 0x8f, 0x15, 0x04, 0x53,
             0xcb, 0x3a, 0x07, 0xbc, 0x0b, 0xec, 0x8f, 0x4d, 0xea, 0x37, 0xd0,
             0x13, 0x03, 0x03, 0x79, 0x87, 0x83, 0x7e, 0x63, 0xde, 0x71, 0x22,
             0x43, 0x6f, 0x3b, 0x10, 0xad, 0x3b, 0x68, 0x6a, 0x73, 0x05, 0x07,
             0x01, 0xbb, 0x08, 0x93, 0xa6, 0xbf, 0x87, 0x7f, 0x06}};
        std::array<std::uint8_t, 32> const ed16SigningKey{
            {0xb7, 0xbd, 0x93, 0x4b, 0x03, 0x39, 0xf8, 0x6f, 0x47, 0x66, 0x7f,
             0xd4, 0x4f, 0x94, 0x32, 0xe6, 0xb2, 0x70, 0x9c, 0x2c, 0x64, 0x92,
             0xc4, 0xb1, 0xdd, 0x04, 0x6d, 0x00, 0x92, 0x41, 0xe9, 0x41}};
        (void)ed16SigningKey;
        auto const thresh15Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const thresh0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim17CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim17Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim17CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa18CondConditionFingerprint =
            "\x9d\xbe\x65\xf4\xae\x81\x90\x79\x09\x18\xa2\x66\x12\x9c\x10"
            "\x94\x66\x21\x94\x70\x60\x20\x4a\x3d\x5f\xb3\x62\xb6\x06\x46"
            "\x37\xfe"s;
        Condition const Rsa18Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa18CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed19CondConditionFingerprint =
            "\xe5\x88\xb7\x6e\xec\x2d\xaf\x47\xc7\xa2\xf4\x6e\xbf\x7f\x5e"
            "\x46\xd7\xfa\x33\x2c\x0a\x7e\x86\x1d\x8c\x38\xa8\x93\x52\xe8"
            "\x97\xe9"s;
        Condition const Ed19Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed19CondConditionFingerprint),
                                 std::bitset<5>{0}};

        auto ed2 = std::make_unique<Ed25519>(ed2PublicKey, ed2Sig);
        auto ed4 = std::make_unique<Ed25519>(ed4PublicKey, ed4Sig);
        std::vector<std::unique_ptr<Fulfillment>> thresh3Subfulfillments;
        thresh3Subfulfillments.emplace_back(std::move(ed4));
        std::vector<Condition> thresh3Subconditions{
            {Preim5Cond, Rsa6Cond, Ed7Cond}};
        auto thresh3 = std::make_unique<ThresholdSha256>(
            std::move(thresh3Subfulfillments), std::move(thresh3Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh1Subfulfillments;
        thresh1Subfulfillments.emplace_back(std::move(ed2));
        thresh1Subfulfillments.emplace_back(std::move(thresh3));
        std::vector<Condition> thresh1Subconditions{
            {Preim8Cond, Rsa9Cond, Ed10Cond}};
        auto thresh1 = std::make_unique<ThresholdSha256>(
            std::move(thresh1Subfulfillments), std::move(thresh1Subconditions));
        auto ed14 = std::make_unique<Ed25519>(ed14PublicKey, ed14Sig);
        std::vector<std::unique_ptr<Fulfillment>> thresh13Subfulfillments;
        thresh13Subfulfillments.emplace_back(std::move(ed14));
        std::vector<Condition> thresh13Subconditions{};
        auto thresh13 = std::make_unique<ThresholdSha256>(
            std::move(thresh13Subfulfillments),
            std::move(thresh13Subconditions));
        auto prefix12 = std::make_unique<PrefixSha256>(
            makeSlice(prefix12Prefix),
            prefix12MaxMsgLength,
            std::move(thresh13));
        auto prefix11 = std::make_unique<PrefixSha256>(
            makeSlice(prefix11Prefix),
            prefix11MaxMsgLength,
            std::move(prefix12));
        auto ed16 = std::make_unique<Ed25519>(ed16PublicKey, ed16Sig);
        std::vector<std::unique_ptr<Fulfillment>> thresh15Subfulfillments;
        thresh15Subfulfillments.emplace_back(std::move(ed16));
        std::vector<Condition> thresh15Subconditions{};
        auto thresh15 = std::make_unique<ThresholdSha256>(
            std::move(thresh15Subfulfillments),
            std::move(thresh15Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh0Subfulfillments;
        thresh0Subfulfillments.emplace_back(std::move(thresh1));
        thresh0Subfulfillments.emplace_back(std::move(prefix11));
        thresh0Subfulfillments.emplace_back(std::move(thresh15));
        std::vector<Condition> thresh0Subconditions{
            {Preim17Cond, Rsa18Cond, Ed19Cond}};
        ThresholdSha256 const thresh0(
            std::move(thresh0Subfulfillments), std::move(thresh0Subconditions));
        {
            auto const thresh0EncodedFulfillment =
                "\xa2\x82\x03\x3f\xa0\x82\x02\xc0\xa1\x81\x82\x80\x03\x50\x31"
                "\x31\x81\x01\x0e\xa2\x78\xa1\x76\x80\x03\x50\x31\x32\x81\x01"
                "\x0e\xa2\x6c\xa2\x6a\xa0\x66\xa4\x64\x80\x20\x43\x3f\x99\xf7"
                "\x16\x69\xed\xc3\xdb\xfb\x19\xca\x32\x08\x6d\x4e\xb1\x04\x16"
                "\xb7\x9f\xf3\x9f\xbd\x9b\xb1\xaf\xdb\xba\x50\x4f\x00\x81\x40"
                "\x14\xf1\xfe\x3a\x37\xf0\x32\x65\xf2\xa2\xa6\x0d\x5f\x8f\x74"
                "\x9b\x5f\xcc\x64\xca\x5f\x44\x16\x79\xf2\xdb\x93\x5f\x60\xe1"
                "\xe6\x3e\x33\xc7\xea\x87\x74\xd7\xca\x65\xb3\xd0\xd6\x71\xf0"
                "\x11\xa4\x8c\x59\x0c\xa1\x03\x7b\x29\x2a\xd0\x70\x28\xec\x87"
                "\xcc\x3b\x58\x06\xa1\x00\xa2\x6a\xa0\x66\xa4\x64\x80\x20\x50"
                "\x5a\xcb\xfd\xac\xce\x8b\x6f\xeb\x52\x06\x75\xb8\x72\x9d\x94"
                "\x62\xdc\xe4\x11\x24\xd0\xa3\x35\x47\x20\x02\xd5\xf7\x3f\x9c"
                "\x93\x81\x40\x70\x10\xf0\xdf\x6b\xdf\xe8\x30\x56\x8e\xd9\x48"
                "\x92\x62\x1f\x2b\x0c\x6c\x8f\x15\x04\x53\xcb\x3a\x07\xbc\x0b"
                "\xec\x8f\x4d\xea\x37\xd0\x13\x03\x03\x79\x87\x83\x7e\x63\xde"
                "\x71\x22\x43\x6f\x3b\x10\xad\x3b\x68\x6a\x73\x05\x07\x01\xbb"
                "\x08\x93\xa6\xbf\x87\x7f\x06\xa1\x00\xa2\x82\x01\xcb\xa0\x82"
                "\x01\x4c\xa2\x81\xe3\xa0\x66\xa4\x64\x80\x20\x26\x80\x85\x71"
                "\x79\x37\x27\xbd\x85\xaf\x22\x49\x59\x42\x99\x5c\x9c\x5b\x9f"
                "\x99\x54\xb6\xd4\xd1\x81\x94\x4c\x22\x53\x03\xc0\xec\x81\x40"
                "\x8d\xea\x41\xb3\xf6\x63\xef\xfe\x6e\x52\xf2\x37\x9c\xd3\x57"
                "\x55\x0e\xe9\x51\x31\x07\xf9\x9c\x6c\x58\xbf\x7f\x00\xa4\xe1"
                "\x81\x55\xfc\xd5\xfb\x5c\xfc\xda\x85\xd3\xd5\xf4\xca\x25\x5e"
                "\xa0\x0b\x4e\x70\x50\x6e\x70\x34\x91\x30\x96\x75\xb2\x8f\x39"
                "\xf8\xd3\x8b\x0d\xa1\x79\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd"
                "\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33"
                "\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09"
                "\xa3\x27\x80\x20\xee\x75\xbe\xb3\x52\x54\xbd\x24\x06\x3f\xd9"
                "\x32\x48\x19\xe1\x5c\x70\x85\x92\x11\x6c\x3a\xc1\x4c\x9b\x83"
                "\xeb\x05\xa7\x59\xe2\xa0\x81\x03\x01\x00\x00\xa4\x27\x80\x20"
                "\x1e\x5a\xaf\x3e\x46\xf6\xd4\xdf\x4d\x70\xf0\xa1\xd1\x35\x6d"
                "\xf0\x8b\x86\x91\xac\xb2\xf2\x24\xf0\x1a\xd4\x23\xc0\x21\x8d"
                "\x42\xc0\x81\x03\x02\x00\x00\xa4\x64\x80\x20\xb1\x2f\x54\xbe"
                "\xb6\xf8\x76\x71\x72\xed\x44\x03\x71\x74\x2d\x7f\x98\x10\x4b"
                "\x57\xf2\x45\xfb\x3e\xea\xfd\xdd\x39\x42\xbf\x24\x4d\x81\x40"
                "\x86\xf5\xe9\x44\x74\xe8\x98\xca\xc8\x20\xde\x21\xcb\xf7\xf8"
                "\x65\x37\x6c\xd2\xe2\xd2\x46\x6f\xcf\xd4\xdd\x48\x66\x8a\x9c"
                "\x06\xda\xa5\x0e\x11\xfb\x87\x94\xd2\xed\xaa\xdd\x4e\x48\x09"
                "\x7a\x4b\xdd\xa5\xe8\x46\x2e\x1a\xbb\x51\x60\x0c\x9d\x8e\x35"
                "\x3e\xc1\x79\x09\xa1\x79\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd"
                "\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33"
                "\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09"
                "\xa3\x27\x80\x20\xe5\x15\x0a\xbd\xf6\x06\xbe\xaa\x6c\x81\xf1"
                "\x88\x7e\x70\x64\x51\xeb\x6f\x70\xb1\xdd\xc5\xf1\x20\x53\xf7"
                "\xcb\x9f\x7f\xc7\xe4\x52\x81\x03\x01\x00\x00\xa4\x27\x80\x20"
                "\x00\x8b\xe6\x62\xd4\x30\x65\x1e\x40\xb3\x23\x05\x52\x3a\xf3"
                "\x16\xda\x09\xbe\x79\x5f\x41\xc9\x03\x93\x34\x5b\x7c\x24\x87"
                "\x62\xfa\x81\x03\x02\x00\x00\xa1\x79\xa0\x25\x80\x20\x5d\xa0"
                "\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1"
                "\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e"
                "\x81\x01\x09\xa3\x27\x80\x20\x9d\xbe\x65\xf4\xae\x81\x90\x79"
                "\x09\x18\xa2\x66\x12\x9c\x10\x94\x66\x21\x94\x70\x60\x20\x4a"
                "\x3d\x5f\xb3\x62\xb6\x06\x46\x37\xfe\x81\x03\x01\x00\x00\xa4"
                "\x27\x80\x20\xe5\x88\xb7\x6e\xec\x2d\xaf\x47\xc7\xa2\xf4\x6e"
                "\xbf\x7f\x5e\x46\xd7\xfa\x33\x2c\x0a\x7e\x86\x1d\x8c\x38\xa8"
                "\x93\x52\xe8\x97\xe9\x81\x03\x02\x00\x00"s;
            auto const thresh0EncodedCondition =
                "\xa2\x2b\x80\x20\xbc\xf4\x25\x81\xfb\x71\x44\x60\x5a\xe4\x16"
                "\x21\x7b\x06\xa9\x3b\x8f\x82\x99\x2e\x69\xe3\x0e\x2e\xcc\x5d"
                "\x4a\x56\xc3\x4a\x90\x78\x81\x03\x08\x4c\x22\x82\x02\x03\xd8"s;
            auto const thresh0EncodedFingerprint =
                "\x30\x82\x01\x07\x80\x01\x03\xa1\x82\x01\x00\xa0\x25\x80\x20"
                "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
                "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
                "\xeb\x4e\x81\x01\x09\xa1\x2b\x80\x20\x54\x9d\xa3\x72\x4f\xf5"
                "\x8f\x0b\x7d\xaa\x78\xe6\x70\xab\x73\xc4\x32\x54\xf1\xb8\x12"
                "\x70\xad\x30\xb4\x37\x1a\xe8\x6a\x14\x40\x2c\x81\x03\x02\x0c"
                "\x22\x82\x02\x03\x28\xa2\x2b\x80\x20\x58\x74\xa9\x88\x06\x27"
                "\x9b\xb5\x18\xe1\x31\x8d\x83\xe8\xe7\xfc\x9c\xd5\xd0\xc1\x36"
                "\xa4\x23\x67\x5f\x5d\x6d\xd8\xc1\x26\xc8\x8f\x81\x03\x02\x04"
                "\x00\x82\x02\x03\x08\xa2\x2b\x80\x20\x6e\x43\x2a\xb9\x45\x97"
                "\xfb\x3d\x36\x01\x97\x4c\x2e\xd2\x64\x38\x84\xdb\xc6\x2a\x9f"
                "\x58\x55\x9b\xda\x5d\x3a\xa3\xdf\x36\x31\xa5\x81\x03\x04\x24"
                "\x00\x82\x02\x03\x98\xa3\x27\x80\x20\x9d\xbe\x65\xf4\xae\x81"
                "\x90\x79\x09\x18\xa2\x66\x12\x9c\x10\x94\x66\x21\x94\x70\x60"
                "\x20\x4a\x3d\x5f\xb3\x62\xb6\x06\x46\x37\xfe\x81\x03\x01\x00"
                "\x00\xa4\x27\x80\x20\xe5\x88\xb7\x6e\xec\x2d\xaf\x47\xc7\xa2"
                "\xf4\x6e\xbf\x7f\x5e\x46\xd7\xfa\x33\x2c\x0a\x7e\x86\x1d\x8c"
                "\x38\xa8\x93\x52\xe8\x97\xe9\x81\x03\x02\x00\x00"s;
            check(
                &thresh0,
                thresh0Msg,
                thresh0EncodedFulfillment,
                thresh0EncodedCondition,
                thresh0EncodedFingerprint);
        }
    }

    void
    testThresh69()
    {
        testcase("Thresh69");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * thresh0
        // ** Preim14Cond
        // ** Rsa15Cond
        // ** Ed16Cond
        // ** Prefix17Cond
        // ** Thresh21Cond
        // ** thresh1
        // *** Preim8Cond
        // *** Rsa9Cond
        // *** Ed10Cond
        // *** ed2
        // *** thresh3
        // **** Preim5Cond
        // **** Rsa6Cond
        // **** Ed7Cond
        // **** ed4
        // ** preim11
        // ** rsa12
        // ** ed13

        auto const ed2Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed2PublicKey{
            {0xb1, 0x2f, 0x54, 0xbe, 0xb6, 0xf8, 0x76, 0x71, 0x72, 0xed, 0x44,
             0x03, 0x71, 0x74, 0x2d, 0x7f, 0x98, 0x10, 0x4b, 0x57, 0xf2, 0x45,
             0xfb, 0x3e, 0xea, 0xfd, 0xdd, 0x39, 0x42, 0xbf, 0x24, 0x4d}};
        std::array<std::uint8_t, 64> const ed2Sig{
            {0x86, 0xf5, 0xe9, 0x44, 0x74, 0xe8, 0x98, 0xca, 0xc8, 0x20, 0xde,
             0x21, 0xcb, 0xf7, 0xf8, 0x65, 0x37, 0x6c, 0xd2, 0xe2, 0xd2, 0x46,
             0x6f, 0xcf, 0xd4, 0xdd, 0x48, 0x66, 0x8a, 0x9c, 0x06, 0xda, 0xa5,
             0x0e, 0x11, 0xfb, 0x87, 0x94, 0xd2, 0xed, 0xaa, 0xdd, 0x4e, 0x48,
             0x09, 0x7a, 0x4b, 0xdd, 0xa5, 0xe8, 0x46, 0x2e, 0x1a, 0xbb, 0x51,
             0x60, 0x0c, 0x9d, 0x8e, 0x35, 0x3e, 0xc1, 0x79, 0x09}};
        std::array<std::uint8_t, 32> const ed2SigningKey{
            {0xa7, 0xeb, 0x15, 0xc5, 0x2a, 0x41, 0x59, 0xf9, 0xf7, 0xb4, 0x78,
             0x5f, 0xdb, 0x79, 0xe5, 0x5b, 0x16, 0x44, 0xf7, 0xc7, 0xcf, 0xe2,
             0x46, 0xc5, 0xb3, 0x54, 0x64, 0xb5, 0x2f, 0x6c, 0x8e, 0x8e}};
        (void)ed2SigningKey;
        auto const ed4Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed4PublicKey{
            {0x26, 0x80, 0x85, 0x71, 0x79, 0x37, 0x27, 0xbd, 0x85, 0xaf, 0x22,
             0x49, 0x59, 0x42, 0x99, 0x5c, 0x9c, 0x5b, 0x9f, 0x99, 0x54, 0xb6,
             0xd4, 0xd1, 0x81, 0x94, 0x4c, 0x22, 0x53, 0x03, 0xc0, 0xec}};
        std::array<std::uint8_t, 64> const ed4Sig{
            {0x8d, 0xea, 0x41, 0xb3, 0xf6, 0x63, 0xef, 0xfe, 0x6e, 0x52, 0xf2,
             0x37, 0x9c, 0xd3, 0x57, 0x55, 0x0e, 0xe9, 0x51, 0x31, 0x07, 0xf9,
             0x9c, 0x6c, 0x58, 0xbf, 0x7f, 0x00, 0xa4, 0xe1, 0x81, 0x55, 0xfc,
             0xd5, 0xfb, 0x5c, 0xfc, 0xda, 0x85, 0xd3, 0xd5, 0xf4, 0xca, 0x25,
             0x5e, 0xa0, 0x0b, 0x4e, 0x70, 0x50, 0x6e, 0x70, 0x34, 0x91, 0x30,
             0x96, 0x75, 0xb2, 0x8f, 0x39, 0xf8, 0xd3, 0x8b, 0x0d}};
        std::array<std::uint8_t, 32> const ed4SigningKey{
            {0x2a, 0x7a, 0x9a, 0x1f, 0xf1, 0x08, 0x8f, 0x8e, 0xef, 0x3a, 0x39,
             0xce, 0x13, 0xea, 0x08, 0x08, 0x8a, 0xf6, 0x06, 0x78, 0xd5, 0x3e,
             0x0b, 0x9c, 0x84, 0xfb, 0x39, 0x93, 0xd6, 0xfe, 0xa0, 0x3d}};
        (void)ed4SigningKey;
        auto const thresh3Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim5CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim5Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim5CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa6CondConditionFingerprint =
            "\xee\x75\xbe\xb3\x52\x54\xbd\x24\x06\x3f\xd9\x32\x48\x19\xe1"
            "\x5c\x70\x85\x92\x11\x6c\x3a\xc1\x4c\x9b\x83\xeb\x05\xa7\x59"
            "\xe2\xa0"s;
        Condition const Rsa6Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa6CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed7CondConditionFingerprint =
            "\x1e\x5a\xaf\x3e\x46\xf6\xd4\xdf\x4d\x70\xf0\xa1\xd1\x35\x6d"
            "\xf0\x8b\x86\x91\xac\xb2\xf2\x24\xf0\x1a\xd4\x23\xc0\x21\x8d"
            "\x42\xc0"s;
        Condition const Ed7Cond{Type::ed25519Sha256,
                                131072,
                                makeSlice(Ed7CondConditionFingerprint),
                                std::bitset<5>{0}};
        auto const thresh1Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim8CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim8Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim8CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa9CondConditionFingerprint =
            "\xe5\x15\x0a\xbd\xf6\x06\xbe\xaa\x6c\x81\xf1\x88\x7e\x70\x64"
            "\x51\xeb\x6f\x70\xb1\xdd\xc5\xf1\x20\x53\xf7\xcb\x9f\x7f\xc7"
            "\xe4\x52"s;
        Condition const Rsa9Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa9CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed10CondConditionFingerprint =
            "\x00\x8b\xe6\x62\xd4\x30\x65\x1e\x40\xb3\x23\x05\x52\x3a\xf3"
            "\x16\xda\x09\xbe\x79\x5f\x41\xc9\x03\x93\x34\x5b\x7c\x24\x87"
            "\x62\xfa"s;
        Condition const Ed10Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed10CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const preim11Preimage = "I am root"s;
        auto const preim11Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const rsa12Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa12PublicKey{
            {0xd9, 0x25, 0xc3, 0xba, 0x0a, 0x46, 0x6e, 0xa9, 0x1d, 0x05, 0xd7,
             0x54, 0xf1, 0xff, 0xf4, 0xaf, 0xe5, 0x13, 0xcf, 0xd6, 0x74, 0xb0,
             0xcf, 0xc2, 0x8c, 0x68, 0x5c, 0xa9, 0xf3, 0x44, 0x4b, 0xfd, 0x4a,
             0x4d, 0x29, 0x64, 0xbc, 0xa8, 0x98, 0xf5, 0x35, 0x0a, 0x65, 0xe5,
             0xcd, 0x5d, 0x08, 0x9f, 0x58, 0x22, 0xed, 0x21, 0x78, 0x04, 0x4d,
             0x2a, 0xce, 0x80, 0x33, 0x19, 0x5b, 0x7a, 0xbd, 0xa6, 0x89, 0xfa,
             0x80, 0xa4, 0xf5, 0x32, 0xa6, 0xb1, 0x34, 0x61, 0x55, 0x5a, 0xbd,
             0x05, 0xaf, 0x4b, 0x4b, 0xdf, 0xe0, 0xa9, 0x3e, 0x1d, 0x2f, 0x3e,
             0xaf, 0x0c, 0x65, 0x32, 0xc6, 0xf2, 0xe0, 0x5c, 0x09, 0xc0, 0xa2,
             0x41, 0xe6, 0xc9, 0x96, 0x5e, 0x88, 0x62, 0x4a, 0x28, 0x4b, 0x23,
             0x2f, 0xcf, 0xb3, 0xb7, 0x1e, 0x11, 0x7f, 0xc4, 0x63, 0x1a, 0xe4,
             0x24, 0x29, 0x46, 0xf4, 0x48, 0xde, 0x30, 0x45, 0x97, 0xf8, 0x6c,
             0x8d, 0x4e, 0x4a, 0xce, 0x5e, 0x41, 0xb2, 0xb7, 0x5a, 0xd5, 0x94,
             0x42, 0x5a, 0x14, 0xd1, 0x11, 0x99, 0xc5, 0xeb, 0x66, 0xbe, 0xb1,
             0xc6, 0xc3, 0xdb, 0x2f, 0x8f, 0xa0, 0x6c, 0xa9, 0x27, 0x0f, 0xc0,
             0x92, 0x77, 0x0b, 0x8d, 0x66, 0xb8, 0x93, 0x0b, 0xc0, 0x5c, 0xcb,
             0x51, 0x4e, 0xa3, 0x83, 0xd2, 0xbd, 0x04, 0xd8, 0xc0, 0x0c, 0xb2,
             0xf7, 0x38, 0x4e, 0x6a, 0xec, 0xfe, 0x76, 0xd9, 0x71, 0x0b, 0x90,
             0x21, 0x7c, 0xbf, 0x07, 0xc4, 0xd8, 0x4c, 0x6d, 0xb9, 0x35, 0x48,
             0x5d, 0x82, 0xea, 0x61, 0xc5, 0x14, 0xff, 0x25, 0x50, 0x47, 0xaf,
             0x06, 0x58, 0xa9, 0x95, 0x2c, 0xdd, 0xe5, 0xbd, 0x95, 0x4a, 0x7b,
             0x27, 0xa1, 0x46, 0xe3, 0xf0, 0x16, 0xe8, 0xf9, 0xba, 0x43, 0xb8,
             0x77, 0xdc, 0x87, 0x81, 0x3a, 0xc0, 0xf2, 0xed, 0x3b, 0x03, 0x5e,
             0xe6, 0x89, 0x71}};
        std::array<std::uint8_t, 256> const rsa12Sig{
            {0x39, 0xff, 0x6a, 0xeb, 0xab, 0xed, 0x0e, 0x3e, 0x40, 0x7f, 0xca,
             0xfd, 0xc7, 0xec, 0x09, 0x09, 0x66, 0xf0, 0xfe, 0x55, 0x69, 0xc7,
             0x63, 0x9e, 0x33, 0x42, 0xfe, 0x36, 0xc4, 0x42, 0x9e, 0x86, 0x0e,
             0xf4, 0xa6, 0xb5, 0x87, 0x24, 0xc8, 0xc8, 0xf0, 0x94, 0x8d, 0xf8,
             0x60, 0x3a, 0xe7, 0xb1, 0xc0, 0xe0, 0xe4, 0x42, 0x59, 0xba, 0xd9,
             0xc5, 0x2e, 0x84, 0x20, 0xd5, 0x43, 0x48, 0x78, 0x44, 0x98, 0x22,
             0x3d, 0x89, 0x56, 0x2d, 0x14, 0xda, 0x60, 0x0a, 0xa5, 0x86, 0x7e,
             0x47, 0xde, 0x87, 0x9f, 0x33, 0xba, 0xf2, 0x5c, 0xf6, 0x49, 0xbc,
             0x40, 0xe2, 0xc0, 0x2b, 0x28, 0x2b, 0xe7, 0xab, 0x96, 0x95, 0x5e,
             0xaf, 0x23, 0x13, 0xe9, 0xef, 0xd4, 0x3a, 0x26, 0x98, 0x66, 0xfb,
             0x29, 0x70, 0x69, 0x5e, 0x32, 0x34, 0xb4, 0x4a, 0xd7, 0x08, 0x24,
             0x93, 0x16, 0x6f, 0x37, 0x4b, 0xea, 0xd9, 0x32, 0x6b, 0x26, 0x92,
             0xc1, 0xa3, 0x84, 0x91, 0xac, 0x15, 0xc5, 0xbb, 0x59, 0xf7, 0xc0,
             0xdc, 0x28, 0x39, 0x15, 0x27, 0xb1, 0x5f, 0xa7, 0x23, 0x9f, 0x36,
             0x6c, 0x22, 0xa3, 0xb5, 0x44, 0x6f, 0x9f, 0x77, 0x9e, 0x67, 0x3b,
             0xde, 0x30, 0x89, 0x35, 0x8a, 0x94, 0x38, 0xbd, 0x95, 0x5a, 0x31,
             0x5e, 0xa0, 0x7f, 0x88, 0xd4, 0xb4, 0xf3, 0xdd, 0x74, 0xf5, 0x25,
             0x8b, 0x09, 0xb8, 0x44, 0x6c, 0x1b, 0x54, 0xe5, 0x53, 0x96, 0xa2,
             0xeb, 0xd0, 0x28, 0x3e, 0x07, 0x31, 0xeb, 0x2d, 0xc1, 0x62, 0x82,
             0x94, 0x3c, 0xbd, 0x89, 0xf1, 0xa1, 0x1c, 0xae, 0xdf, 0xd8, 0x2f,
             0x01, 0xd7, 0xca, 0x4c, 0xc3, 0x7e, 0x8d, 0xf8, 0xca, 0xb7, 0xc9,
             0xed, 0x81, 0x8f, 0x6a, 0xde, 0x44, 0xec, 0xce, 0x90, 0x00, 0xc9,
             0x84, 0xad, 0x39, 0x60, 0xc9, 0x84, 0xe8, 0x65, 0x74, 0x0c, 0x45,
             0xdc, 0xe9, 0x69}};
        auto const ed13Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed13PublicKey{
            {0xe8, 0xb1, 0xe9, 0x04, 0xef, 0x8f, 0x78, 0x4c, 0x54, 0xf2, 0x45,
             0x60, 0x93, 0xb4, 0xc6, 0xa4, 0xc2, 0x9a, 0xa9, 0xb7, 0x5a, 0x0b,
             0x06, 0xf1, 0x78, 0xdc, 0xa9, 0x08, 0x12, 0xb2, 0x2f, 0xf4}};
        std::array<std::uint8_t, 64> const ed13Sig{
            {0x03, 0x17, 0xa0, 0x49, 0x7b, 0xee, 0x0d, 0x84, 0x64, 0xee, 0xa8,
             0xc1, 0xe6, 0x3e, 0xc6, 0xed, 0xd6, 0x25, 0x7e, 0x7d, 0xad, 0x96,
             0xf3, 0x82, 0x4a, 0xa6, 0xb1, 0x38, 0xf1, 0x2f, 0x54, 0x6a, 0x52,
             0x39, 0x26, 0x08, 0x2d, 0xe6, 0xfd, 0xb2, 0xfa, 0x23, 0xb3, 0x91,
             0x30, 0x07, 0x9a, 0x4b, 0x63, 0xbb, 0x6f, 0x55, 0xcb, 0x0a, 0xe9,
             0xb1, 0xfb, 0x40, 0x9e, 0x1f, 0x87, 0x70, 0x5a, 0x07}};
        std::array<std::uint8_t, 32> const ed13SigningKey{
            {0x0c, 0x45, 0x3e, 0x20, 0xe2, 0x12, 0x63, 0x6a, 0x7c, 0x36, 0x75,
             0xad, 0x2e, 0xd7, 0xc0, 0x39, 0x27, 0x7e, 0x38, 0x9a, 0xa2, 0xd3,
             0x3b, 0x24, 0x18, 0xf8, 0x68, 0x4e, 0x7f, 0xfa, 0x5d, 0xf3}};
        (void)ed13SigningKey;
        auto const thresh0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim14CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim14Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim14CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa15CondConditionFingerprint =
            "\x55\x6b\x6d\xe3\x00\xd4\xf3\x7e\x75\x3a\x68\xfc\x25\xdf\xf2"
            "\xf7\x18\x54\xa5\x55\x0c\xa5\xa9\x65\xbf\x66\x9e\x4e\x49\x56"
            "\x1e\xf1"s;
        Condition const Rsa15Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa15CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed16CondConditionFingerprint =
            "\xe4\x66\x69\x86\x87\x57\x0e\xac\xf1\xfd\x06\x81\x48\x90\x82"
            "\x42\x48\x50\x75\x8e\xd4\x2d\xf3\x02\x37\x89\x28\xc5\x68\xd7"
            "\xa0\x11"s;
        Condition const Ed16Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed16CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Prefix17CondConditionFingerprint =
            "\xcd\x90\x5a\x0c\x17\xf9\x20\x2c\x33\xac\x5c\x51\xad\x10\xeb"
            "\x44\xc1\x86\xfd\x54\xc3\x34\x9c\x35\x82\x8a\xf4\x43\xf6\x04"
            "\x92\xa2"s;
        Condition const Prefix17Cond{
            Type::prefixSha256,
            134186,
            makeSlice(Prefix17CondConditionFingerprint),
            std::bitset<5>{20}};
        auto const Thresh21CondConditionFingerprint =
            "\x13\xe9\xc7\xaf\x08\xf9\xff\x83\x07\xaa\xb7\x0c\xa0\x82\x88"
            "\x02\x30\x04\xd8\xc5\xd1\xfd\xf7\x18\x3e\x4d\x7b\x6e\x59\x5f"
            "\x83\x87"s;
        Condition const Thresh21Cond{
            Type::thresholdSha256,
            132096,
            makeSlice(Thresh21CondConditionFingerprint),
            std::bitset<5>{16}};

        auto ed2 = std::make_unique<Ed25519>(ed2PublicKey, ed2Sig);
        auto ed4 = std::make_unique<Ed25519>(ed4PublicKey, ed4Sig);
        std::vector<std::unique_ptr<Fulfillment>> thresh3Subfulfillments;
        thresh3Subfulfillments.emplace_back(std::move(ed4));
        std::vector<Condition> thresh3Subconditions{
            {Preim5Cond, Rsa6Cond, Ed7Cond}};
        auto thresh3 = std::make_unique<ThresholdSha256>(
            std::move(thresh3Subfulfillments), std::move(thresh3Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh1Subfulfillments;
        thresh1Subfulfillments.emplace_back(std::move(ed2));
        thresh1Subfulfillments.emplace_back(std::move(thresh3));
        std::vector<Condition> thresh1Subconditions{
            {Preim8Cond, Rsa9Cond, Ed10Cond}};
        auto thresh1 = std::make_unique<ThresholdSha256>(
            std::move(thresh1Subfulfillments), std::move(thresh1Subconditions));
        auto preim11 =
            std::make_unique<PreimageSha256>(makeSlice(preim11Preimage));
        auto rsa12 = std::make_unique<RsaSha256>(
            makeSlice(rsa12PublicKey), makeSlice(rsa12Sig));
        auto ed13 = std::make_unique<Ed25519>(ed13PublicKey, ed13Sig);
        std::vector<std::unique_ptr<Fulfillment>> thresh0Subfulfillments;
        thresh0Subfulfillments.emplace_back(std::move(thresh1));
        thresh0Subfulfillments.emplace_back(std::move(preim11));
        thresh0Subfulfillments.emplace_back(std::move(rsa12));
        thresh0Subfulfillments.emplace_back(std::move(ed13));
        std::vector<Condition> thresh0Subconditions{
            {Preim14Cond, Rsa15Cond, Ed16Cond, Prefix17Cond, Thresh21Cond}};
        ThresholdSha256 const thresh0(
            std::move(thresh0Subfulfillments), std::move(thresh0Subconditions));
        {
            auto const thresh0EncodedFulfillment =
                "\xa2\x82\x05\x28\xa0\x82\x04\x4e\xa0\x0b\x80\x09\x49\x20\x61"
                "\x6d\x20\x72\x6f\x6f\x74\xa2\x82\x01\xcb\xa0\x82\x01\x4c\xa2"
                "\x81\xe3\xa0\x66\xa4\x64\x80\x20\x26\x80\x85\x71\x79\x37\x27"
                "\xbd\x85\xaf\x22\x49\x59\x42\x99\x5c\x9c\x5b\x9f\x99\x54\xb6"
                "\xd4\xd1\x81\x94\x4c\x22\x53\x03\xc0\xec\x81\x40\x8d\xea\x41"
                "\xb3\xf6\x63\xef\xfe\x6e\x52\xf2\x37\x9c\xd3\x57\x55\x0e\xe9"
                "\x51\x31\x07\xf9\x9c\x6c\x58\xbf\x7f\x00\xa4\xe1\x81\x55\xfc"
                "\xd5\xfb\x5c\xfc\xda\x85\xd3\xd5\xf4\xca\x25\x5e\xa0\x0b\x4e"
                "\x70\x50\x6e\x70\x34\x91\x30\x96\x75\xb2\x8f\x39\xf8\xd3\x8b"
                "\x0d\xa1\x79\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11"
                "\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2"
                "\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa3\x27\x80"
                "\x20\xee\x75\xbe\xb3\x52\x54\xbd\x24\x06\x3f\xd9\x32\x48\x19"
                "\xe1\x5c\x70\x85\x92\x11\x6c\x3a\xc1\x4c\x9b\x83\xeb\x05\xa7"
                "\x59\xe2\xa0\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x1e\x5a\xaf"
                "\x3e\x46\xf6\xd4\xdf\x4d\x70\xf0\xa1\xd1\x35\x6d\xf0\x8b\x86"
                "\x91\xac\xb2\xf2\x24\xf0\x1a\xd4\x23\xc0\x21\x8d\x42\xc0\x81"
                "\x03\x02\x00\x00\xa4\x64\x80\x20\xb1\x2f\x54\xbe\xb6\xf8\x76"
                "\x71\x72\xed\x44\x03\x71\x74\x2d\x7f\x98\x10\x4b\x57\xf2\x45"
                "\xfb\x3e\xea\xfd\xdd\x39\x42\xbf\x24\x4d\x81\x40\x86\xf5\xe9"
                "\x44\x74\xe8\x98\xca\xc8\x20\xde\x21\xcb\xf7\xf8\x65\x37\x6c"
                "\xd2\xe2\xd2\x46\x6f\xcf\xd4\xdd\x48\x66\x8a\x9c\x06\xda\xa5"
                "\x0e\x11\xfb\x87\x94\xd2\xed\xaa\xdd\x4e\x48\x09\x7a\x4b\xdd"
                "\xa5\xe8\x46\x2e\x1a\xbb\x51\x60\x0c\x9d\x8e\x35\x3e\xc1\x79"
                "\x09\xa1\x79\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11"
                "\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2"
                "\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa3\x27\x80"
                "\x20\xe5\x15\x0a\xbd\xf6\x06\xbe\xaa\x6c\x81\xf1\x88\x7e\x70"
                "\x64\x51\xeb\x6f\x70\xb1\xdd\xc5\xf1\x20\x53\xf7\xcb\x9f\x7f"
                "\xc7\xe4\x52\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x00\x8b\xe6"
                "\x62\xd4\x30\x65\x1e\x40\xb3\x23\x05\x52\x3a\xf3\x16\xda\x09"
                "\xbe\x79\x5f\x41\xc9\x03\x93\x34\x5b\x7c\x24\x87\x62\xfa\x81"
                "\x03\x02\x00\x00\xa3\x82\x02\x08\x80\x82\x01\x00\xd9\x25\xc3"
                "\xba\x0a\x46\x6e\xa9\x1d\x05\xd7\x54\xf1\xff\xf4\xaf\xe5\x13"
                "\xcf\xd6\x74\xb0\xcf\xc2\x8c\x68\x5c\xa9\xf3\x44\x4b\xfd\x4a"
                "\x4d\x29\x64\xbc\xa8\x98\xf5\x35\x0a\x65\xe5\xcd\x5d\x08\x9f"
                "\x58\x22\xed\x21\x78\x04\x4d\x2a\xce\x80\x33\x19\x5b\x7a\xbd"
                "\xa6\x89\xfa\x80\xa4\xf5\x32\xa6\xb1\x34\x61\x55\x5a\xbd\x05"
                "\xaf\x4b\x4b\xdf\xe0\xa9\x3e\x1d\x2f\x3e\xaf\x0c\x65\x32\xc6"
                "\xf2\xe0\x5c\x09\xc0\xa2\x41\xe6\xc9\x96\x5e\x88\x62\x4a\x28"
                "\x4b\x23\x2f\xcf\xb3\xb7\x1e\x11\x7f\xc4\x63\x1a\xe4\x24\x29"
                "\x46\xf4\x48\xde\x30\x45\x97\xf8\x6c\x8d\x4e\x4a\xce\x5e\x41"
                "\xb2\xb7\x5a\xd5\x94\x42\x5a\x14\xd1\x11\x99\xc5\xeb\x66\xbe"
                "\xb1\xc6\xc3\xdb\x2f\x8f\xa0\x6c\xa9\x27\x0f\xc0\x92\x77\x0b"
                "\x8d\x66\xb8\x93\x0b\xc0\x5c\xcb\x51\x4e\xa3\x83\xd2\xbd\x04"
                "\xd8\xc0\x0c\xb2\xf7\x38\x4e\x6a\xec\xfe\x76\xd9\x71\x0b\x90"
                "\x21\x7c\xbf\x07\xc4\xd8\x4c\x6d\xb9\x35\x48\x5d\x82\xea\x61"
                "\xc5\x14\xff\x25\x50\x47\xaf\x06\x58\xa9\x95\x2c\xdd\xe5\xbd"
                "\x95\x4a\x7b\x27\xa1\x46\xe3\xf0\x16\xe8\xf9\xba\x43\xb8\x77"
                "\xdc\x87\x81\x3a\xc0\xf2\xed\x3b\x03\x5e\xe6\x89\x71\x81\x82"
                "\x01\x00\x39\xff\x6a\xeb\xab\xed\x0e\x3e\x40\x7f\xca\xfd\xc7"
                "\xec\x09\x09\x66\xf0\xfe\x55\x69\xc7\x63\x9e\x33\x42\xfe\x36"
                "\xc4\x42\x9e\x86\x0e\xf4\xa6\xb5\x87\x24\xc8\xc8\xf0\x94\x8d"
                "\xf8\x60\x3a\xe7\xb1\xc0\xe0\xe4\x42\x59\xba\xd9\xc5\x2e\x84"
                "\x20\xd5\x43\x48\x78\x44\x98\x22\x3d\x89\x56\x2d\x14\xda\x60"
                "\x0a\xa5\x86\x7e\x47\xde\x87\x9f\x33\xba\xf2\x5c\xf6\x49\xbc"
                "\x40\xe2\xc0\x2b\x28\x2b\xe7\xab\x96\x95\x5e\xaf\x23\x13\xe9"
                "\xef\xd4\x3a\x26\x98\x66\xfb\x29\x70\x69\x5e\x32\x34\xb4\x4a"
                "\xd7\x08\x24\x93\x16\x6f\x37\x4b\xea\xd9\x32\x6b\x26\x92\xc1"
                "\xa3\x84\x91\xac\x15\xc5\xbb\x59\xf7\xc0\xdc\x28\x39\x15\x27"
                "\xb1\x5f\xa7\x23\x9f\x36\x6c\x22\xa3\xb5\x44\x6f\x9f\x77\x9e"
                "\x67\x3b\xde\x30\x89\x35\x8a\x94\x38\xbd\x95\x5a\x31\x5e\xa0"
                "\x7f\x88\xd4\xb4\xf3\xdd\x74\xf5\x25\x8b\x09\xb8\x44\x6c\x1b"
                "\x54\xe5\x53\x96\xa2\xeb\xd0\x28\x3e\x07\x31\xeb\x2d\xc1\x62"
                "\x82\x94\x3c\xbd\x89\xf1\xa1\x1c\xae\xdf\xd8\x2f\x01\xd7\xca"
                "\x4c\xc3\x7e\x8d\xf8\xca\xb7\xc9\xed\x81\x8f\x6a\xde\x44\xec"
                "\xce\x90\x00\xc9\x84\xad\x39\x60\xc9\x84\xe8\x65\x74\x0c\x45"
                "\xdc\xe9\x69\xa4\x64\x80\x20\xe8\xb1\xe9\x04\xef\x8f\x78\x4c"
                "\x54\xf2\x45\x60\x93\xb4\xc6\xa4\xc2\x9a\xa9\xb7\x5a\x0b\x06"
                "\xf1\x78\xdc\xa9\x08\x12\xb2\x2f\xf4\x81\x40\x03\x17\xa0\x49"
                "\x7b\xee\x0d\x84\x64\xee\xa8\xc1\xe6\x3e\xc6\xed\xd6\x25\x7e"
                "\x7d\xad\x96\xf3\x82\x4a\xa6\xb1\x38\xf1\x2f\x54\x6a\x52\x39"
                "\x26\x08\x2d\xe6\xfd\xb2\xfa\x23\xb3\x91\x30\x07\x9a\x4b\x63"
                "\xbb\x6f\x55\xcb\x0a\xe9\xb1\xfb\x40\x9e\x1f\x87\x70\x5a\x07"
                "\xa1\x81\xd3\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11"
                "\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2"
                "\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa1\x2b\x80"
                "\x20\xcd\x90\x5a\x0c\x17\xf9\x20\x2c\x33\xac\x5c\x51\xad\x10"
                "\xeb\x44\xc1\x86\xfd\x54\xc3\x34\x9c\x35\x82\x8a\xf4\x43\xf6"
                "\x04\x92\xa2\x81\x03\x02\x0c\x2a\x82\x02\x03\x28\xa2\x2b\x80"
                "\x20\x13\xe9\xc7\xaf\x08\xf9\xff\x83\x07\xaa\xb7\x0c\xa0\x82"
                "\x88\x02\x30\x04\xd8\xc5\xd1\xfd\xf7\x18\x3e\x4d\x7b\x6e\x59"
                "\x5f\x83\x87\x81\x03\x02\x04\x00\x82\x02\x03\x08\xa3\x27\x80"
                "\x20\x55\x6b\x6d\xe3\x00\xd4\xf3\x7e\x75\x3a\x68\xfc\x25\xdf"
                "\xf2\xf7\x18\x54\xa5\x55\x0c\xa5\xa9\x65\xbf\x66\x9e\x4e\x49"
                "\x56\x1e\xf1\x81\x03\x01\x00\x00\xa4\x27\x80\x20\xe4\x66\x69"
                "\x86\x87\x57\x0e\xac\xf1\xfd\x06\x81\x48\x90\x82\x42\x48\x50"
                "\x75\x8e\xd4\x2d\xf3\x02\x37\x89\x28\xc5\x68\xd7\xa0\x11\x81"
                "\x03\x02\x00\x00"s;
            auto const thresh0EncodedCondition =
                "\xa2\x2b\x80\x20\x0a\x5d\x07\x46\xa3\xbc\xa4\xe4\xba\xef\xef"
                "\xa2\xe7\x03\xd1\x88\x40\x58\x17\x9c\xce\x83\x73\xd1\x19\x60"
                "\x3d\x05\x85\xfa\x81\x00\x81\x03\x0a\x58\x2a\x82\x02\x03\xd8"s;
            auto const thresh0EncodedFingerprint =
                "\x30\x82\x01\x80\x80\x01\x04\xa1\x82\x01\x79\xa0\x25\x80\x20"
                "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
                "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
                "\xeb\x4e\x81\x01\x09\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1"
                "\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21"
                "\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa1"
                "\x2b\x80\x20\xcd\x90\x5a\x0c\x17\xf9\x20\x2c\x33\xac\x5c\x51"
                "\xad\x10\xeb\x44\xc1\x86\xfd\x54\xc3\x34\x9c\x35\x82\x8a\xf4"
                "\x43\xf6\x04\x92\xa2\x81\x03\x02\x0c\x2a\x82\x02\x03\x28\xa2"
                "\x2b\x80\x20\x13\xe9\xc7\xaf\x08\xf9\xff\x83\x07\xaa\xb7\x0c"
                "\xa0\x82\x88\x02\x30\x04\xd8\xc5\xd1\xfd\xf7\x18\x3e\x4d\x7b"
                "\x6e\x59\x5f\x83\x87\x81\x03\x02\x04\x00\x82\x02\x03\x08\xa2"
                "\x2b\x80\x20\x6e\x43\x2a\xb9\x45\x97\xfb\x3d\x36\x01\x97\x4c"
                "\x2e\xd2\x64\x38\x84\xdb\xc6\x2a\x9f\x58\x55\x9b\xda\x5d\x3a"
                "\xa3\xdf\x36\x31\xa5\x81\x03\x04\x24\x00\x82\x02\x03\x98\xa3"
                "\x27\x80\x20\x38\xb9\xf0\xeb\x68\x8b\x9f\x55\x37\x9a\xec\x07"
                "\xd4\xa2\x13\xac\x34\xa1\x67\x31\x34\xea\xc2\x2f\xef\x13\xe3"
                "\x5c\xcf\x8f\x90\x1e\x81\x03\x01\x00\x00\xa3\x27\x80\x20\x55"
                "\x6b\x6d\xe3\x00\xd4\xf3\x7e\x75\x3a\x68\xfc\x25\xdf\xf2\xf7"
                "\x18\x54\xa5\x55\x0c\xa5\xa9\x65\xbf\x66\x9e\x4e\x49\x56\x1e"
                "\xf1\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x7c\x54\x6a\x6d\x7f"
                "\x00\x52\x31\x03\xe7\xb4\x5b\x1c\x9f\x72\xeb\x3c\x18\x08\xa3"
                "\x24\xb2\x63\x5f\x77\x55\x4a\x42\xdb\x1e\xff\x1e\x81\x03\x02"
                "\x00\x00\xa4\x27\x80\x20\xe4\x66\x69\x86\x87\x57\x0e\xac\xf1"
                "\xfd\x06\x81\x48\x90\x82\x42\x48\x50\x75\x8e\xd4\x2d\xf3\x02"
                "\x37\x89\x28\xc5\x68\xd7\xa0\x11\x81\x03\x02\x00\x00"s;
            check(
                &thresh0,
                thresh0Msg,
                thresh0EncodedFulfillment,
                thresh0EncodedCondition,
                thresh0EncodedFingerprint);
        }
    }

    void
    testThresh70()
    {
        testcase("Thresh70");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * thresh0
        // ** Preim28Cond
        // ** Rsa29Cond
        // ** Ed30Cond
        // ** thresh1
        // *** Preim8Cond
        // *** Rsa9Cond
        // *** Ed10Cond
        // *** Thresh11Cond
        // *** ed2
        // *** thresh3
        // **** Preim5Cond
        // **** Rsa6Cond
        // **** Ed7Cond
        // **** ed4
        // ** prefix16
        // *** prefix17
        // **** thresh18
        // ***** Preim20Cond
        // ***** Rsa21Cond
        // ***** Ed22Cond
        // ***** ed19
        // ** thresh23
        // *** Preim25Cond
        // *** Rsa26Cond
        // *** Ed27Cond
        // *** ed24

        auto const ed2Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed2PublicKey{
            {0xb1, 0x2f, 0x54, 0xbe, 0xb6, 0xf8, 0x76, 0x71, 0x72, 0xed, 0x44,
             0x03, 0x71, 0x74, 0x2d, 0x7f, 0x98, 0x10, 0x4b, 0x57, 0xf2, 0x45,
             0xfb, 0x3e, 0xea, 0xfd, 0xdd, 0x39, 0x42, 0xbf, 0x24, 0x4d}};
        std::array<std::uint8_t, 64> const ed2Sig{
            {0x86, 0xf5, 0xe9, 0x44, 0x74, 0xe8, 0x98, 0xca, 0xc8, 0x20, 0xde,
             0x21, 0xcb, 0xf7, 0xf8, 0x65, 0x37, 0x6c, 0xd2, 0xe2, 0xd2, 0x46,
             0x6f, 0xcf, 0xd4, 0xdd, 0x48, 0x66, 0x8a, 0x9c, 0x06, 0xda, 0xa5,
             0x0e, 0x11, 0xfb, 0x87, 0x94, 0xd2, 0xed, 0xaa, 0xdd, 0x4e, 0x48,
             0x09, 0x7a, 0x4b, 0xdd, 0xa5, 0xe8, 0x46, 0x2e, 0x1a, 0xbb, 0x51,
             0x60, 0x0c, 0x9d, 0x8e, 0x35, 0x3e, 0xc1, 0x79, 0x09}};
        std::array<std::uint8_t, 32> const ed2SigningKey{
            {0xa7, 0xeb, 0x15, 0xc5, 0x2a, 0x41, 0x59, 0xf9, 0xf7, 0xb4, 0x78,
             0x5f, 0xdb, 0x79, 0xe5, 0x5b, 0x16, 0x44, 0xf7, 0xc7, 0xcf, 0xe2,
             0x46, 0xc5, 0xb3, 0x54, 0x64, 0xb5, 0x2f, 0x6c, 0x8e, 0x8e}};
        (void)ed2SigningKey;
        auto const ed4Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed4PublicKey{
            {0x26, 0x80, 0x85, 0x71, 0x79, 0x37, 0x27, 0xbd, 0x85, 0xaf, 0x22,
             0x49, 0x59, 0x42, 0x99, 0x5c, 0x9c, 0x5b, 0x9f, 0x99, 0x54, 0xb6,
             0xd4, 0xd1, 0x81, 0x94, 0x4c, 0x22, 0x53, 0x03, 0xc0, 0xec}};
        std::array<std::uint8_t, 64> const ed4Sig{
            {0x8d, 0xea, 0x41, 0xb3, 0xf6, 0x63, 0xef, 0xfe, 0x6e, 0x52, 0xf2,
             0x37, 0x9c, 0xd3, 0x57, 0x55, 0x0e, 0xe9, 0x51, 0x31, 0x07, 0xf9,
             0x9c, 0x6c, 0x58, 0xbf, 0x7f, 0x00, 0xa4, 0xe1, 0x81, 0x55, 0xfc,
             0xd5, 0xfb, 0x5c, 0xfc, 0xda, 0x85, 0xd3, 0xd5, 0xf4, 0xca, 0x25,
             0x5e, 0xa0, 0x0b, 0x4e, 0x70, 0x50, 0x6e, 0x70, 0x34, 0x91, 0x30,
             0x96, 0x75, 0xb2, 0x8f, 0x39, 0xf8, 0xd3, 0x8b, 0x0d}};
        std::array<std::uint8_t, 32> const ed4SigningKey{
            {0x2a, 0x7a, 0x9a, 0x1f, 0xf1, 0x08, 0x8f, 0x8e, 0xef, 0x3a, 0x39,
             0xce, 0x13, 0xea, 0x08, 0x08, 0x8a, 0xf6, 0x06, 0x78, 0xd5, 0x3e,
             0x0b, 0x9c, 0x84, 0xfb, 0x39, 0x93, 0xd6, 0xfe, 0xa0, 0x3d}};
        (void)ed4SigningKey;
        auto const thresh3Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim5CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim5Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim5CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa6CondConditionFingerprint =
            "\xee\x75\xbe\xb3\x52\x54\xbd\x24\x06\x3f\xd9\x32\x48\x19\xe1"
            "\x5c\x70\x85\x92\x11\x6c\x3a\xc1\x4c\x9b\x83\xeb\x05\xa7\x59"
            "\xe2\xa0"s;
        Condition const Rsa6Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa6CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed7CondConditionFingerprint =
            "\x1e\x5a\xaf\x3e\x46\xf6\xd4\xdf\x4d\x70\xf0\xa1\xd1\x35\x6d"
            "\xf0\x8b\x86\x91\xac\xb2\xf2\x24\xf0\x1a\xd4\x23\xc0\x21\x8d"
            "\x42\xc0"s;
        Condition const Ed7Cond{Type::ed25519Sha256,
                                131072,
                                makeSlice(Ed7CondConditionFingerprint),
                                std::bitset<5>{0}};
        auto const thresh1Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim8CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim8Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim8CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa9CondConditionFingerprint =
            "\xe5\x15\x0a\xbd\xf6\x06\xbe\xaa\x6c\x81\xf1\x88\x7e\x70\x64"
            "\x51\xeb\x6f\x70\xb1\xdd\xc5\xf1\x20\x53\xf7\xcb\x9f\x7f\xc7"
            "\xe4\x52"s;
        Condition const Rsa9Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa9CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed10CondConditionFingerprint =
            "\x00\x8b\xe6\x62\xd4\x30\x65\x1e\x40\xb3\x23\x05\x52\x3a\xf3"
            "\x16\xda\x09\xbe\x79\x5f\x41\xc9\x03\x93\x34\x5b\x7c\x24\x87"
            "\x62\xfa"s;
        Condition const Ed10Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed10CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Thresh11CondConditionFingerprint =
            "\x79\x95\xae\x4f\xba\x2b\x23\x42\x8e\xae\x72\x3f\xdc\x13\xf8"
            "\xc9\x1a\x35\x71\x25\x4f\x89\x8f\x40\xed\x8c\x99\xc4\xbb\x66"
            "\x24\xac"s;
        Condition const Thresh11Cond{
            Type::thresholdSha256,
            135168,
            makeSlice(Thresh11CondConditionFingerprint),
            std::bitset<5>{25}};
        auto const ed19Msg = "P17P16abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed19PublicKey{
            {0xe5, 0x6b, 0xde, 0x3b, 0x0b, 0x02, 0xf2, 0xc4, 0x25, 0x85, 0x28,
             0x3f, 0x44, 0x22, 0x73, 0x35, 0x42, 0x73, 0xab, 0x0b, 0x0b, 0x3e,
             0xfe, 0x5f, 0x9b, 0x77, 0x25, 0x0f, 0x91, 0x87, 0x27, 0xbc}};
        std::array<std::uint8_t, 64> const ed19Sig{
            {0x5a, 0x8a, 0xa9, 0xd4, 0x08, 0x92, 0xa3, 0xdb, 0x84, 0xde, 0xe5,
             0xdd, 0x99, 0x43, 0x30, 0xab, 0x68, 0xd5, 0x98, 0x9d, 0xef, 0x97,
             0x58, 0x70, 0x54, 0xd0, 0x25, 0xc4, 0x9f, 0x35, 0xdb, 0xa5, 0x27,
             0x4b, 0xd7, 0xa0, 0x1f, 0x53, 0xe4, 0x4f, 0xac, 0xf9, 0xaf, 0x2e,
             0x71, 0x9f, 0x10, 0xfb, 0xdb, 0xc1, 0xe8, 0x2f, 0xab, 0x00, 0x95,
             0x7a, 0xef, 0xfd, 0x87, 0x48, 0x77, 0xd4, 0xf6, 0x04}};
        std::array<std::uint8_t, 32> const ed19SigningKey{
            {0x59, 0xde, 0x60, 0x42, 0x59, 0x4e, 0xbc, 0xfb, 0x36, 0x92, 0x14,
             0xf5, 0x54, 0x85, 0x3a, 0x94, 0xc4, 0x94, 0x2a, 0x15, 0x1c, 0x81,
             0xbd, 0xed, 0x81, 0x8f, 0xcc, 0x51, 0x06, 0xa4, 0xae, 0x45}};
        (void)ed19SigningKey;
        auto const thresh18Msg = "P17P16abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim20CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim20Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim20CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa21CondConditionFingerprint =
            "\x18\x13\xb3\x53\x3a\x10\x06\xee\xf9\x67\xa2\xcb\x27\x5e\xb8"
            "\x79\x5c\x09\xd1\x8f\xa0\xc7\xb3\x95\x59\x14\xf6\x24\x99\x6b"
            "\x1a\xdd"s;
        Condition const Rsa21Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa21CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed22CondConditionFingerprint =
            "\xce\xba\x65\x8f\x48\xe3\x35\x4b\x51\xb6\xfd\xe9\x57\xd7\xb9"
            "\xf0\x9b\x80\xb3\x6e\xdf\x73\x20\x22\x5c\x0a\xda\x13\xf8\xc0"
            "\xa7\x5d"s;
        Condition const Ed22Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed22CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const prefix17Prefix = "P17"s;
        auto const prefix17Msg = "P16abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix17MaxMsgLength = 14;
        auto const prefix16Prefix = "P16"s;
        auto const prefix16Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const prefix16MaxMsgLength = 14;
        auto const ed24Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed24PublicKey{
            {0x77, 0x02, 0x19, 0xa2, 0x6a, 0xa1, 0x21, 0x71, 0x6d, 0x10, 0x12,
             0xb5, 0xd7, 0x47, 0x4c, 0x79, 0x34, 0x9c, 0x10, 0x73, 0xf2, 0x07,
             0x3e, 0x2a, 0x2a, 0xa3, 0xa0, 0x1f, 0xc1, 0x44, 0x8c, 0xce}};
        std::array<std::uint8_t, 64> const ed24Sig{
            {0xa6, 0xc7, 0xf0, 0x18, 0xc8, 0xd5, 0x3c, 0xf0, 0x04, 0x2a, 0x88,
             0x13, 0xde, 0xb9, 0x82, 0x1b, 0xe1, 0xd9, 0x3d, 0x53, 0x25, 0x7c,
             0xc9, 0xab, 0x8b, 0xaf, 0x2a, 0x19, 0x43, 0x76, 0xc5, 0x56, 0x5d,
             0x72, 0x62, 0x05, 0x88, 0x37, 0xb3, 0x8b, 0x21, 0x3b, 0xff, 0xa4,
             0x3d, 0xfe, 0xd2, 0x32, 0xac, 0x3d, 0x87, 0xd1, 0x1f, 0xeb, 0x6a,
             0x99, 0x17, 0x99, 0x44, 0xe3, 0xa2, 0x2d, 0x6d, 0x08}};
        std::array<std::uint8_t, 32> const ed24SigningKey{
            {0x1d, 0xfa, 0x69, 0x28, 0xbe, 0xae, 0x45, 0xfb, 0x23, 0x7e, 0x3e,
             0x40, 0x38, 0x2d, 0xfa, 0x28, 0xd7, 0xff, 0xb8, 0x74, 0xf5, 0x52,
             0x4b, 0x3d, 0xf4, 0x99, 0x06, 0x29, 0x30, 0xa6, 0xfa, 0x01}};
        (void)ed24SigningKey;
        auto const thresh23Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim25CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim25Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim25CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa26CondConditionFingerprint =
            "\xd6\x40\x0d\x21\x44\x8a\xd4\x5a\xe6\x10\x3f\xd4\x3a\x14\x5a"
            "\x5b\x87\x86\x20\x3c\x43\x20\x9d\x9d\x0c\x75\x57\x80\x7d\xda"
            "\x9d\x06"s;
        Condition const Rsa26Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa26CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed27CondConditionFingerprint =
            "\x6a\x26\x73\x6f\xc3\xbf\x25\x73\x8e\x3b\x27\x79\x47\xa5\x37"
            "\x7c\x78\xa0\x72\xd8\x77\x91\xfc\x45\x87\x7f\x11\x57\xfe\x94"
            "\x57\x45"s;
        Condition const Ed27Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed27CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const thresh0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim28CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim28Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim28CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa29CondConditionFingerprint =
            "\x5c\xe1\xef\x71\xf6\x96\x65\x37\x01\x15\x1a\xdd\xfe\x28\x5d"
            "\xef\x33\x99\x1f\xe9\x6a\x51\x2d\x22\x62\x2c\x2e\x26\xb8\xda"
            "\x1e\xfa"s;
        Condition const Rsa29Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa29CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed30CondConditionFingerprint =
            "\xcc\x8a\x65\x38\xf7\x7c\xf9\x28\xc9\xdd\xf3\x0c\x26\x64\x02"
            "\xde\x89\xd0\x71\xde\x61\x3e\x31\x4d\x9b\x4e\x91\x6f\xcc\x36"
            "\x5c\xa3"s;
        Condition const Ed30Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed30CondConditionFingerprint),
                                 std::bitset<5>{0}};

        auto ed2 = std::make_unique<Ed25519>(ed2PublicKey, ed2Sig);
        auto ed4 = std::make_unique<Ed25519>(ed4PublicKey, ed4Sig);
        std::vector<std::unique_ptr<Fulfillment>> thresh3Subfulfillments;
        thresh3Subfulfillments.emplace_back(std::move(ed4));
        std::vector<Condition> thresh3Subconditions{
            {Preim5Cond, Rsa6Cond, Ed7Cond}};
        auto thresh3 = std::make_unique<ThresholdSha256>(
            std::move(thresh3Subfulfillments), std::move(thresh3Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh1Subfulfillments;
        thresh1Subfulfillments.emplace_back(std::move(ed2));
        thresh1Subfulfillments.emplace_back(std::move(thresh3));
        std::vector<Condition> thresh1Subconditions{
            {Preim8Cond, Rsa9Cond, Ed10Cond, Thresh11Cond}};
        auto thresh1 = std::make_unique<ThresholdSha256>(
            std::move(thresh1Subfulfillments), std::move(thresh1Subconditions));
        auto ed19 = std::make_unique<Ed25519>(ed19PublicKey, ed19Sig);
        std::vector<std::unique_ptr<Fulfillment>> thresh18Subfulfillments;
        thresh18Subfulfillments.emplace_back(std::move(ed19));
        std::vector<Condition> thresh18Subconditions{
            {Preim20Cond, Rsa21Cond, Ed22Cond}};
        auto thresh18 = std::make_unique<ThresholdSha256>(
            std::move(thresh18Subfulfillments),
            std::move(thresh18Subconditions));
        auto prefix17 = std::make_unique<PrefixSha256>(
            makeSlice(prefix17Prefix),
            prefix17MaxMsgLength,
            std::move(thresh18));
        auto prefix16 = std::make_unique<PrefixSha256>(
            makeSlice(prefix16Prefix),
            prefix16MaxMsgLength,
            std::move(prefix17));
        auto ed24 = std::make_unique<Ed25519>(ed24PublicKey, ed24Sig);
        std::vector<std::unique_ptr<Fulfillment>> thresh23Subfulfillments;
        thresh23Subfulfillments.emplace_back(std::move(ed24));
        std::vector<Condition> thresh23Subconditions{
            {Preim25Cond, Rsa26Cond, Ed27Cond}};
        auto thresh23 = std::make_unique<ThresholdSha256>(
            std::move(thresh23Subfulfillments),
            std::move(thresh23Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh0Subfulfillments;
        thresh0Subfulfillments.emplace_back(std::move(thresh1));
        thresh0Subfulfillments.emplace_back(std::move(prefix16));
        thresh0Subfulfillments.emplace_back(std::move(thresh23));
        std::vector<Condition> thresh0Subconditions{
            {Preim28Cond, Rsa29Cond, Ed30Cond}};
        ThresholdSha256 const thresh0(
            std::move(thresh0Subfulfillments), std::move(thresh0Subconditions));
        {
            auto const thresh0EncodedFulfillment =
                "\xa2\x82\x04\x64\xa0\x82\x03\xe5\xa1\x81\xff\x80\x03\x50\x31"
                "\x36\x81\x01\x0e\xa2\x81\xf4\xa1\x81\xf1\x80\x03\x50\x31\x37"
                "\x81\x01\x0e\xa2\x81\xe6\xa2\x81\xe3\xa0\x66\xa4\x64\x80\x20"
                "\xe5\x6b\xde\x3b\x0b\x02\xf2\xc4\x25\x85\x28\x3f\x44\x22\x73"
                "\x35\x42\x73\xab\x0b\x0b\x3e\xfe\x5f\x9b\x77\x25\x0f\x91\x87"
                "\x27\xbc\x81\x40\x5a\x8a\xa9\xd4\x08\x92\xa3\xdb\x84\xde\xe5"
                "\xdd\x99\x43\x30\xab\x68\xd5\x98\x9d\xef\x97\x58\x70\x54\xd0"
                "\x25\xc4\x9f\x35\xdb\xa5\x27\x4b\xd7\xa0\x1f\x53\xe4\x4f\xac"
                "\xf9\xaf\x2e\x71\x9f\x10\xfb\xdb\xc1\xe8\x2f\xab\x00\x95\x7a"
                "\xef\xfd\x87\x48\x77\xd4\xf6\x04\xa1\x79\xa0\x25\x80\x20\x5d"
                "\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b"
                "\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb"
                "\x4e\x81\x01\x09\xa3\x27\x80\x20\x18\x13\xb3\x53\x3a\x10\x06"
                "\xee\xf9\x67\xa2\xcb\x27\x5e\xb8\x79\x5c\x09\xd1\x8f\xa0\xc7"
                "\xb3\x95\x59\x14\xf6\x24\x99\x6b\x1a\xdd\x81\x03\x01\x00\x00"
                "\xa4\x27\x80\x20\xce\xba\x65\x8f\x48\xe3\x35\x4b\x51\xb6\xfd"
                "\xe9\x57\xd7\xb9\xf0\x9b\x80\xb3\x6e\xdf\x73\x20\x22\x5c\x0a"
                "\xda\x13\xf8\xc0\xa7\x5d\x81\x03\x02\x00\x00\xa2\x81\xe3\xa0"
                "\x66\xa4\x64\x80\x20\x77\x02\x19\xa2\x6a\xa1\x21\x71\x6d\x10"
                "\x12\xb5\xd7\x47\x4c\x79\x34\x9c\x10\x73\xf2\x07\x3e\x2a\x2a"
                "\xa3\xa0\x1f\xc1\x44\x8c\xce\x81\x40\xa6\xc7\xf0\x18\xc8\xd5"
                "\x3c\xf0\x04\x2a\x88\x13\xde\xb9\x82\x1b\xe1\xd9\x3d\x53\x25"
                "\x7c\xc9\xab\x8b\xaf\x2a\x19\x43\x76\xc5\x56\x5d\x72\x62\x05"
                "\x88\x37\xb3\x8b\x21\x3b\xff\xa4\x3d\xfe\xd2\x32\xac\x3d\x87"
                "\xd1\x1f\xeb\x6a\x99\x17\x99\x44\xe3\xa2\x2d\x6d\x08\xa1\x79"
                "\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f"
                "\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd"
                "\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa3\x27\x80\x20\xd6\x40"
                "\x0d\x21\x44\x8a\xd4\x5a\xe6\x10\x3f\xd4\x3a\x14\x5a\x5b\x87"
                "\x86\x20\x3c\x43\x20\x9d\x9d\x0c\x75\x57\x80\x7d\xda\x9d\x06"
                "\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x6a\x26\x73\x6f\xc3\xbf"
                "\x25\x73\x8e\x3b\x27\x79\x47\xa5\x37\x7c\x78\xa0\x72\xd8\x77"
                "\x91\xfc\x45\x87\x7f\x11\x57\xfe\x94\x57\x45\x81\x03\x02\x00"
                "\x00\xa2\x82\x01\xf9\xa0\x82\x01\x4c\xa2\x81\xe3\xa0\x66\xa4"
                "\x64\x80\x20\x26\x80\x85\x71\x79\x37\x27\xbd\x85\xaf\x22\x49"
                "\x59\x42\x99\x5c\x9c\x5b\x9f\x99\x54\xb6\xd4\xd1\x81\x94\x4c"
                "\x22\x53\x03\xc0\xec\x81\x40\x8d\xea\x41\xb3\xf6\x63\xef\xfe"
                "\x6e\x52\xf2\x37\x9c\xd3\x57\x55\x0e\xe9\x51\x31\x07\xf9\x9c"
                "\x6c\x58\xbf\x7f\x00\xa4\xe1\x81\x55\xfc\xd5\xfb\x5c\xfc\xda"
                "\x85\xd3\xd5\xf4\xca\x25\x5e\xa0\x0b\x4e\x70\x50\x6e\x70\x34"
                "\x91\x30\x96\x75\xb2\x8f\x39\xf8\xd3\x8b\x0d\xa1\x79\xa0\x25"
                "\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54"
                "\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee"
                "\x93\x58\xeb\x4e\x81\x01\x09\xa3\x27\x80\x20\xee\x75\xbe\xb3"
                "\x52\x54\xbd\x24\x06\x3f\xd9\x32\x48\x19\xe1\x5c\x70\x85\x92"
                "\x11\x6c\x3a\xc1\x4c\x9b\x83\xeb\x05\xa7\x59\xe2\xa0\x81\x03"
                "\x01\x00\x00\xa4\x27\x80\x20\x1e\x5a\xaf\x3e\x46\xf6\xd4\xdf"
                "\x4d\x70\xf0\xa1\xd1\x35\x6d\xf0\x8b\x86\x91\xac\xb2\xf2\x24"
                "\xf0\x1a\xd4\x23\xc0\x21\x8d\x42\xc0\x81\x03\x02\x00\x00\xa4"
                "\x64\x80\x20\xb1\x2f\x54\xbe\xb6\xf8\x76\x71\x72\xed\x44\x03"
                "\x71\x74\x2d\x7f\x98\x10\x4b\x57\xf2\x45\xfb\x3e\xea\xfd\xdd"
                "\x39\x42\xbf\x24\x4d\x81\x40\x86\xf5\xe9\x44\x74\xe8\x98\xca"
                "\xc8\x20\xde\x21\xcb\xf7\xf8\x65\x37\x6c\xd2\xe2\xd2\x46\x6f"
                "\xcf\xd4\xdd\x48\x66\x8a\x9c\x06\xda\xa5\x0e\x11\xfb\x87\x94"
                "\xd2\xed\xaa\xdd\x4e\x48\x09\x7a\x4b\xdd\xa5\xe8\x46\x2e\x1a"
                "\xbb\x51\x60\x0c\x9d\x8e\x35\x3e\xc1\x79\x09\xa1\x81\xa6\xa0"
                "\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e"
                "\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53"
                "\xee\x93\x58\xeb\x4e\x81\x01\x09\xa2\x2b\x80\x20\x79\x95\xae"
                "\x4f\xba\x2b\x23\x42\x8e\xae\x72\x3f\xdc\x13\xf8\xc9\x1a\x35"
                "\x71\x25\x4f\x89\x8f\x40\xed\x8c\x99\xc4\xbb\x66\x24\xac\x81"
                "\x03\x02\x10\x00\x82\x02\x03\x98\xa3\x27\x80\x20\xe5\x15\x0a"
                "\xbd\xf6\x06\xbe\xaa\x6c\x81\xf1\x88\x7e\x70\x64\x51\xeb\x6f"
                "\x70\xb1\xdd\xc5\xf1\x20\x53\xf7\xcb\x9f\x7f\xc7\xe4\x52\x81"
                "\x03\x01\x00\x00\xa4\x27\x80\x20\x00\x8b\xe6\x62\xd4\x30\x65"
                "\x1e\x40\xb3\x23\x05\x52\x3a\xf3\x16\xda\x09\xbe\x79\x5f\x41"
                "\xc9\x03\x93\x34\x5b\x7c\x24\x87\x62\xfa\x81\x03\x02\x00\x00"
                "\xa1\x79\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51"
                "\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68"
                "\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa3\x27\x80\x20"
                "\x5c\xe1\xef\x71\xf6\x96\x65\x37\x01\x15\x1a\xdd\xfe\x28\x5d"
                "\xef\x33\x99\x1f\xe9\x6a\x51\x2d\x22\x62\x2c\x2e\x26\xb8\xda"
                "\x1e\xfa\x81\x03\x01\x00\x00\xa4\x27\x80\x20\xcc\x8a\x65\x38"
                "\xf7\x7c\xf9\x28\xc9\xdd\xf3\x0c\x26\x64\x02\xde\x89\xd0\x71"
                "\xde\x61\x3e\x31\x4d\x9b\x4e\x91\x6f\xcc\x36\x5c\xa3\x81\x03"
                "\x02\x00\x00"s;
            auto const thresh0EncodedCondition =
                "\xa2\x2b\x80\x20\x7f\x7f\x8a\x13\x82\x5c\xf4\xbe\xba\x94\xa7"
                "\x03\xfb\xeb\xf6\xac\xe3\x6f\x93\x5d\x2a\xdb\x99\xf0\xb9\xe2"
                "\xac\xc0\x74\x98\xb2\x30\x81\x03\x08\x78\x22\x82\x02\x03\xd8"s;
            auto const thresh0EncodedFingerprint =
                "\x30\x82\x01\x07\x80\x01\x03\xa1\x82\x01\x00\xa0\x25\x80\x20"
                "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
                "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
                "\xeb\x4e\x81\x01\x09\xa1\x2b\x80\x20\xe7\xeb\xea\xe3\xfc\x51"
                "\x97\x4a\xc0\x06\xea\x72\xfd\xe1\x62\x2e\x91\x41\x1f\xba\x77"
                "\x6e\xd2\x9d\x5f\xc5\x29\x33\xcb\xca\xd5\x5e\x81\x03\x02\x18"
                "\x22\x82\x02\x03\xb8\xa2\x2b\x80\x20\x3c\x87\xc9\xf7\x46\x52"
                "\x3a\x53\x2b\xcc\x10\x47\x73\x24\x8e\x84\x11\xac\xfb\xed\xf3"
                "\xa0\x01\x94\x68\x00\x8d\x66\xc9\x7e\x83\x96\x81\x03\x04\x38"
                "\x00\x82\x02\x03\x98\xa2\x2b\x80\x20\xd8\x1d\xe5\x4d\xc0\xea"
                "\x5c\x49\x99\x56\x75\x95\x7a\xfe\xce\xc9\x28\xdb\x31\xc6\xf6"
                "\x63\xf0\xb4\x57\x1a\x23\x13\x29\xe1\x32\x4d\x81\x03\x02\x10"
                "\x00\x82\x02\x03\x98\xa3\x27\x80\x20\x5c\xe1\xef\x71\xf6\x96"
                "\x65\x37\x01\x15\x1a\xdd\xfe\x28\x5d\xef\x33\x99\x1f\xe9\x6a"
                "\x51\x2d\x22\x62\x2c\x2e\x26\xb8\xda\x1e\xfa\x81\x03\x01\x00"
                "\x00\xa4\x27\x80\x20\xcc\x8a\x65\x38\xf7\x7c\xf9\x28\xc9\xdd"
                "\xf3\x0c\x26\x64\x02\xde\x89\xd0\x71\xde\x61\x3e\x31\x4d\x9b"
                "\x4e\x91\x6f\xcc\x36\x5c\xa3\x81\x03\x02\x00\x00"s;
            check(
                &thresh0,
                thresh0Msg,
                thresh0EncodedFulfillment,
                thresh0EncodedCondition,
                thresh0EncodedFingerprint);
        }
    }

    void
    testThresh71()
    {
        testcase("Thresh71");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * thresh0
        // ** Preim19Cond
        // ** Rsa20Cond
        // ** Ed21Cond
        // ** Prefix22Cond
        // ** Thresh29Cond
        // ** thresh1
        // *** Preim8Cond
        // *** Rsa9Cond
        // *** Ed10Cond
        // *** Thresh11Cond
        // *** ed2
        // *** thresh3
        // **** Preim5Cond
        // **** Rsa6Cond
        // **** Ed7Cond
        // **** ed4
        // ** preim16
        // ** rsa17
        // ** ed18

        auto const ed2Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed2PublicKey{
            {0xb1, 0x2f, 0x54, 0xbe, 0xb6, 0xf8, 0x76, 0x71, 0x72, 0xed, 0x44,
             0x03, 0x71, 0x74, 0x2d, 0x7f, 0x98, 0x10, 0x4b, 0x57, 0xf2, 0x45,
             0xfb, 0x3e, 0xea, 0xfd, 0xdd, 0x39, 0x42, 0xbf, 0x24, 0x4d}};
        std::array<std::uint8_t, 64> const ed2Sig{
            {0x86, 0xf5, 0xe9, 0x44, 0x74, 0xe8, 0x98, 0xca, 0xc8, 0x20, 0xde,
             0x21, 0xcb, 0xf7, 0xf8, 0x65, 0x37, 0x6c, 0xd2, 0xe2, 0xd2, 0x46,
             0x6f, 0xcf, 0xd4, 0xdd, 0x48, 0x66, 0x8a, 0x9c, 0x06, 0xda, 0xa5,
             0x0e, 0x11, 0xfb, 0x87, 0x94, 0xd2, 0xed, 0xaa, 0xdd, 0x4e, 0x48,
             0x09, 0x7a, 0x4b, 0xdd, 0xa5, 0xe8, 0x46, 0x2e, 0x1a, 0xbb, 0x51,
             0x60, 0x0c, 0x9d, 0x8e, 0x35, 0x3e, 0xc1, 0x79, 0x09}};
        std::array<std::uint8_t, 32> const ed2SigningKey{
            {0xa7, 0xeb, 0x15, 0xc5, 0x2a, 0x41, 0x59, 0xf9, 0xf7, 0xb4, 0x78,
             0x5f, 0xdb, 0x79, 0xe5, 0x5b, 0x16, 0x44, 0xf7, 0xc7, 0xcf, 0xe2,
             0x46, 0xc5, 0xb3, 0x54, 0x64, 0xb5, 0x2f, 0x6c, 0x8e, 0x8e}};
        (void)ed2SigningKey;
        auto const ed4Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed4PublicKey{
            {0x26, 0x80, 0x85, 0x71, 0x79, 0x37, 0x27, 0xbd, 0x85, 0xaf, 0x22,
             0x49, 0x59, 0x42, 0x99, 0x5c, 0x9c, 0x5b, 0x9f, 0x99, 0x54, 0xb6,
             0xd4, 0xd1, 0x81, 0x94, 0x4c, 0x22, 0x53, 0x03, 0xc0, 0xec}};
        std::array<std::uint8_t, 64> const ed4Sig{
            {0x8d, 0xea, 0x41, 0xb3, 0xf6, 0x63, 0xef, 0xfe, 0x6e, 0x52, 0xf2,
             0x37, 0x9c, 0xd3, 0x57, 0x55, 0x0e, 0xe9, 0x51, 0x31, 0x07, 0xf9,
             0x9c, 0x6c, 0x58, 0xbf, 0x7f, 0x00, 0xa4, 0xe1, 0x81, 0x55, 0xfc,
             0xd5, 0xfb, 0x5c, 0xfc, 0xda, 0x85, 0xd3, 0xd5, 0xf4, 0xca, 0x25,
             0x5e, 0xa0, 0x0b, 0x4e, 0x70, 0x50, 0x6e, 0x70, 0x34, 0x91, 0x30,
             0x96, 0x75, 0xb2, 0x8f, 0x39, 0xf8, 0xd3, 0x8b, 0x0d}};
        std::array<std::uint8_t, 32> const ed4SigningKey{
            {0x2a, 0x7a, 0x9a, 0x1f, 0xf1, 0x08, 0x8f, 0x8e, 0xef, 0x3a, 0x39,
             0xce, 0x13, 0xea, 0x08, 0x08, 0x8a, 0xf6, 0x06, 0x78, 0xd5, 0x3e,
             0x0b, 0x9c, 0x84, 0xfb, 0x39, 0x93, 0xd6, 0xfe, 0xa0, 0x3d}};
        (void)ed4SigningKey;
        auto const thresh3Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim5CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim5Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim5CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa6CondConditionFingerprint =
            "\xee\x75\xbe\xb3\x52\x54\xbd\x24\x06\x3f\xd9\x32\x48\x19\xe1"
            "\x5c\x70\x85\x92\x11\x6c\x3a\xc1\x4c\x9b\x83\xeb\x05\xa7\x59"
            "\xe2\xa0"s;
        Condition const Rsa6Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa6CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed7CondConditionFingerprint =
            "\x1e\x5a\xaf\x3e\x46\xf6\xd4\xdf\x4d\x70\xf0\xa1\xd1\x35\x6d"
            "\xf0\x8b\x86\x91\xac\xb2\xf2\x24\xf0\x1a\xd4\x23\xc0\x21\x8d"
            "\x42\xc0"s;
        Condition const Ed7Cond{Type::ed25519Sha256,
                                131072,
                                makeSlice(Ed7CondConditionFingerprint),
                                std::bitset<5>{0}};
        auto const thresh1Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim8CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim8Cond{Type::preimageSha256,
                                   9,
                                   makeSlice(Preim8CondConditionFingerprint),
                                   std::bitset<5>{0}};
        auto const Rsa9CondConditionFingerprint =
            "\xe5\x15\x0a\xbd\xf6\x06\xbe\xaa\x6c\x81\xf1\x88\x7e\x70\x64"
            "\x51\xeb\x6f\x70\xb1\xdd\xc5\xf1\x20\x53\xf7\xcb\x9f\x7f\xc7"
            "\xe4\x52"s;
        Condition const Rsa9Cond{Type::rsaSha256,
                                 65536,
                                 makeSlice(Rsa9CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Ed10CondConditionFingerprint =
            "\x00\x8b\xe6\x62\xd4\x30\x65\x1e\x40\xb3\x23\x05\x52\x3a\xf3"
            "\x16\xda\x09\xbe\x79\x5f\x41\xc9\x03\x93\x34\x5b\x7c\x24\x87"
            "\x62\xfa"s;
        Condition const Ed10Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed10CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Thresh11CondConditionFingerprint =
            "\x79\x95\xae\x4f\xba\x2b\x23\x42\x8e\xae\x72\x3f\xdc\x13\xf8"
            "\xc9\x1a\x35\x71\x25\x4f\x89\x8f\x40\xed\x8c\x99\xc4\xbb\x66"
            "\x24\xac"s;
        Condition const Thresh11Cond{
            Type::thresholdSha256,
            135168,
            makeSlice(Thresh11CondConditionFingerprint),
            std::bitset<5>{25}};
        auto const preim16Preimage = "I am root"s;
        auto const preim16Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const rsa17Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 256> const rsa17PublicKey{
            {0xb0, 0x41, 0xe9, 0x6e, 0xfe, 0x3b, 0xde, 0x46, 0x52, 0x56, 0x34,
             0x2a, 0x92, 0x83, 0x4d, 0x3a, 0x7b, 0x94, 0xe7, 0xc2, 0x06, 0x5b,
             0x8c, 0xf4, 0x9d, 0x71, 0x9d, 0x00, 0x73, 0xd9, 0x15, 0x81, 0x12,
             0x1a, 0x0c, 0x9e, 0xd8, 0xa6, 0xa6, 0xd8, 0x62, 0xbe, 0xfe, 0xa3,
             0x7c, 0xc5, 0xd0, 0x71, 0xdd, 0x83, 0xed, 0xcf, 0x71, 0xd8, 0xe5,
             0x72, 0x27, 0xcb, 0xce, 0xd7, 0x06, 0xda, 0xe8, 0x4b, 0xb8, 0x8d,
             0x45, 0xc0, 0x9c, 0xe3, 0x13, 0x27, 0xbf, 0x60, 0x50, 0x85, 0xbf,
             0xd1, 0xfc, 0x8c, 0x41, 0x75, 0x2d, 0x51, 0x83, 0x24, 0x06, 0xcb,
             0xe6, 0x98, 0x8e, 0x0d, 0x35, 0xfa, 0x58, 0x34, 0x43, 0x90, 0x55,
             0x6a, 0x40, 0xc9, 0x78, 0x31, 0xfb, 0x28, 0x8b, 0x10, 0x78, 0x46,
             0x59, 0x49, 0xf5, 0x89, 0x1c, 0x66, 0xc0, 0x6e, 0x6b, 0x73, 0x05,
             0x75, 0x83, 0x2b, 0x86, 0x78, 0x02, 0xc1, 0xb0, 0xf1, 0x2a, 0x6e,
             0x7e, 0xf6, 0x65, 0x8f, 0xe3, 0xc2, 0x02, 0x6d, 0xae, 0x03, 0xc5,
             0xef, 0x41, 0x03, 0x3a, 0x6b, 0xeb, 0xb0, 0xab, 0x6a, 0x27, 0x2e,
             0xcb, 0x13, 0xf5, 0xd3, 0xae, 0x11, 0x18, 0x33, 0x6a, 0xc3, 0x08,
             0x7a, 0xf8, 0xb9, 0xd7, 0xf3, 0x37, 0xee, 0x05, 0x32, 0xd9, 0xb5,
             0xa4, 0xb9, 0xeb, 0x67, 0xa8, 0x84, 0xeb, 0xb2, 0xc3, 0x2f, 0x8a,
             0x8f, 0xa7, 0x24, 0xac, 0x9a, 0x24, 0x91, 0x11, 0x70, 0xab, 0xc5,
             0x05, 0x25, 0xa9, 0xd3, 0x93, 0x17, 0x6d, 0x70, 0xb1, 0x67, 0x60,
             0x6b, 0x50, 0x69, 0xdd, 0x22, 0x8b, 0x6a, 0xa9, 0x11, 0x7e, 0x5e,
             0x09, 0xa8, 0xaa, 0xdc, 0x4a, 0xc8, 0x09, 0x4c, 0x1a, 0xe7, 0x4c,
             0x1e, 0x42, 0xb2, 0x27, 0x9d, 0xa9, 0x1b, 0xa3, 0x59, 0x14, 0xcb,
             0x0b, 0xca, 0xff, 0x6e, 0x8d, 0x8e, 0x38, 0xf6, 0x19, 0xb1, 0x81,
             0x5f, 0xf4, 0x7d}};
        std::array<std::uint8_t, 256> const rsa17Sig{
            {0x6d, 0x63, 0x8a, 0xce, 0x2e, 0xfe, 0x54, 0xdb, 0xb2, 0x37, 0xea,
             0x49, 0x52, 0x57, 0x86, 0xbe, 0x66, 0x37, 0xb2, 0x52, 0xfb, 0x21,
             0xaf, 0x31, 0x44, 0xc0, 0xa1, 0xc3, 0xfb, 0xab, 0xcd, 0x8f, 0xc7,
             0xd8, 0xac, 0x23, 0x6d, 0xb0, 0xc6, 0xf0, 0x6d, 0x1b, 0xa9, 0x79,
             0x05, 0x83, 0x78, 0x24, 0x68, 0x75, 0xeb, 0xa9, 0x00, 0x9b, 0xc8,
             0x97, 0xbb, 0xea, 0x47, 0xff, 0x79, 0x0d, 0x38, 0x0f, 0x48, 0x44,
             0x7d, 0xaa, 0x90, 0xb4, 0xf9, 0xa9, 0xfa, 0xa5, 0x48, 0x1b, 0x35,
             0x3d, 0xed, 0x22, 0x87, 0x48, 0xd8, 0x52, 0x68, 0x1c, 0x1d, 0x0f,
             0x54, 0x3c, 0xc2, 0x73, 0xaf, 0xb6, 0xa8, 0x76, 0x71, 0xe3, 0x78,
             0x03, 0x1e, 0x1f, 0xbc, 0xa7, 0xfc, 0xbf, 0x3c, 0x04, 0xa2, 0xa1,
             0xe4, 0x09, 0xbd, 0xd8, 0xb8, 0x86, 0x84, 0x0c, 0xa1, 0x87, 0x53,
             0xaf, 0x91, 0x0f, 0x79, 0x44, 0xb9, 0x74, 0xa2, 0x81, 0x0c, 0x41,
             0xb2, 0x3d, 0x65, 0xe7, 0x86, 0x74, 0xd0, 0xc4, 0x1a, 0x8e, 0x14,
             0x8b, 0x42, 0xa5, 0x4b, 0x34, 0x42, 0x4e, 0x2a, 0xbb, 0x1e, 0x50,
             0xbd, 0x07, 0x6b, 0xad, 0xaa, 0x1a, 0x08, 0xee, 0xea, 0x8d, 0x57,
             0x12, 0xf3, 0xc8, 0x92, 0x08, 0xf2, 0x28, 0x43, 0x0b, 0x75, 0x9d,
             0x61, 0x25, 0x91, 0xf9, 0x96, 0x92, 0xa3, 0x7e, 0x8c, 0x77, 0x44,
             0x65, 0xca, 0x40, 0x4e, 0x2f, 0x39, 0xd6, 0x03, 0xf6, 0xb9, 0xbd,
             0x69, 0x67, 0xbc, 0xfa, 0xde, 0xe2, 0xee, 0x48, 0x15, 0xe5, 0x09,
             0x2f, 0xa5, 0x67, 0xc1, 0x7f, 0x25, 0xbc, 0xb5, 0xdc, 0x80, 0x4c,
             0x4e, 0x18, 0x80, 0xaa, 0x3b, 0x02, 0x17, 0xb8, 0x34, 0xc6, 0x3f,
             0x48, 0xd0, 0x7f, 0x6d, 0x9d, 0x7a, 0x89, 0x81, 0x8b, 0x6a, 0x4e,
             0xe6, 0x14, 0x32, 0xa7, 0x04, 0x58, 0x0e, 0x13, 0xfa, 0xe9, 0x60,
             0xdd, 0x3f, 0xe3}};
        auto const ed18Msg = "abcdefghijklmnopqrstuvwxyz"s;
        std::array<std::uint8_t, 32> const ed18PublicKey{
            {0x3b, 0x07, 0x0f, 0xe5, 0x29, 0x34, 0xd9, 0x17, 0xf5, 0x06, 0x00,
             0xb8, 0x87, 0x2f, 0xcf, 0x89, 0x52, 0x70, 0xcc, 0x04, 0x92, 0xe1,
             0x67, 0xcb, 0xba, 0xbb, 0x10, 0xa6, 0x2d, 0x06, 0xa4, 0x6b}};
        std::array<std::uint8_t, 64> const ed18Sig{
            {0x09, 0xc4, 0x1d, 0xc3, 0x8e, 0x6c, 0xd6, 0x04, 0xb7, 0x9e, 0x8c,
             0x8b, 0x30, 0x65, 0x88, 0x43, 0xc7, 0xc6, 0xe5, 0xa0, 0xb0, 0x4c,
             0x60, 0xee, 0xb7, 0x1d, 0x69, 0x2a, 0xb7, 0x5d, 0x5f, 0x16, 0x53,
             0xd1, 0xe6, 0x6a, 0x74, 0x5d, 0x63, 0xc0, 0x41, 0x30, 0x6a, 0x58,
             0xce, 0x52, 0xf2, 0xdb, 0x41, 0x03, 0x78, 0xfd, 0x7f, 0x0e, 0xa5,
             0xc1, 0xe4, 0xd2, 0x50, 0x8d, 0x97, 0x1d, 0xf9, 0x06}};
        std::array<std::uint8_t, 32> const ed18SigningKey{
            {0x59, 0x73, 0xbb, 0x41, 0xb0, 0xe0, 0xce, 0xc2, 0xa9, 0x85, 0xaa,
             0x05, 0xa4, 0x7e, 0x3b, 0x51, 0x09, 0x8d, 0x3e, 0x47, 0xb7, 0x75,
             0xda, 0x81, 0x39, 0xa0, 0xe1, 0xd5, 0x9f, 0xb0, 0x9c, 0x5a}};
        (void)ed18SigningKey;
        auto const thresh0Msg = "abcdefghijklmnopqrstuvwxyz"s;
        auto const Preim19CondConditionFingerprint =
            "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
            "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
            "\xeb\x4e"s;
        Condition const Preim19Cond{Type::preimageSha256,
                                    9,
                                    makeSlice(Preim19CondConditionFingerprint),
                                    std::bitset<5>{0}};
        auto const Rsa20CondConditionFingerprint =
            "\x8d\xb0\x2c\xb1\x28\xc3\xf4\x97\x50\x84\x64\x57\xca\xf4\x9d"
            "\x63\x08\x73\xfc\xde\x2f\x90\xf0\xf2\xec\x79\xa9\xc6\xa3\xf1"
            "\x33\xfd"s;
        Condition const Rsa20Cond{Type::rsaSha256,
                                  65536,
                                  makeSlice(Rsa20CondConditionFingerprint),
                                  std::bitset<5>{0}};
        auto const Ed21CondConditionFingerprint =
            "\x95\x3c\x86\x65\x91\x76\x69\x6b\x72\x61\xaa\x76\x15\x2a\xd7"
            "\x25\x4f\x32\xb7\x73\x7a\xb2\x49\x0c\x0b\xdf\xb5\x4e\x4a\x8b"
            "\xf7\x65"s;
        Condition const Ed21Cond{Type::ed25519Sha256,
                                 131072,
                                 makeSlice(Ed21CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Prefix22CondConditionFingerprint =
            "\xc3\x94\x3d\xb3\x7c\x99\xfe\x3e\xf2\xc7\x47\xe4\x0c\x59\xb5"
            "\x51\xb8\x68\xbe\x0f\x41\xaf\x8e\x28\x97\x99\xa5\x1b\x8b\xab"
            "\x41\xc5"s;
        Condition const Prefix22Cond{
            Type::prefixSha256,
            137258,
            makeSlice(Prefix22CondConditionFingerprint),
            std::bitset<5>{29}};
        auto const Thresh29CondConditionFingerprint =
            "\x88\x40\x2d\x0d\x6a\x33\x4c\x14\x49\xbd\x34\x72\x96\xb9\x4d"
            "\xf7\xd1\x21\x4c\xff\x95\xa2\x84\xf3\xa6\x8b\xb6\x3d\x42\x97"
            "\x27\x41"s;
        Condition const Thresh29Cond{
            Type::thresholdSha256,
            135168,
            makeSlice(Thresh29CondConditionFingerprint),
            std::bitset<5>{25}};

        auto ed2 = std::make_unique<Ed25519>(ed2PublicKey, ed2Sig);
        auto ed4 = std::make_unique<Ed25519>(ed4PublicKey, ed4Sig);
        std::vector<std::unique_ptr<Fulfillment>> thresh3Subfulfillments;
        thresh3Subfulfillments.emplace_back(std::move(ed4));
        std::vector<Condition> thresh3Subconditions{
            {Preim5Cond, Rsa6Cond, Ed7Cond}};
        auto thresh3 = std::make_unique<ThresholdSha256>(
            std::move(thresh3Subfulfillments), std::move(thresh3Subconditions));
        std::vector<std::unique_ptr<Fulfillment>> thresh1Subfulfillments;
        thresh1Subfulfillments.emplace_back(std::move(ed2));
        thresh1Subfulfillments.emplace_back(std::move(thresh3));
        std::vector<Condition> thresh1Subconditions{
            {Preim8Cond, Rsa9Cond, Ed10Cond, Thresh11Cond}};
        auto thresh1 = std::make_unique<ThresholdSha256>(
            std::move(thresh1Subfulfillments), std::move(thresh1Subconditions));
        auto preim16 =
            std::make_unique<PreimageSha256>(makeSlice(preim16Preimage));
        auto rsa17 = std::make_unique<RsaSha256>(
            makeSlice(rsa17PublicKey), makeSlice(rsa17Sig));
        auto ed18 = std::make_unique<Ed25519>(ed18PublicKey, ed18Sig);
        std::vector<std::unique_ptr<Fulfillment>> thresh0Subfulfillments;
        thresh0Subfulfillments.emplace_back(std::move(thresh1));
        thresh0Subfulfillments.emplace_back(std::move(preim16));
        thresh0Subfulfillments.emplace_back(std::move(rsa17));
        thresh0Subfulfillments.emplace_back(std::move(ed18));
        std::vector<Condition> thresh0Subconditions{
            {Preim19Cond, Rsa20Cond, Ed21Cond, Prefix22Cond, Thresh29Cond}};
        ThresholdSha256 const thresh0(
            std::move(thresh0Subfulfillments), std::move(thresh0Subconditions));
        {
            auto const thresh0EncodedFulfillment =
                "\xa2\x82\x05\x56\xa0\x82\x04\x7c\xa0\x0b\x80\x09\x49\x20\x61"
                "\x6d\x20\x72\x6f\x6f\x74\xa2\x82\x01\xf9\xa0\x82\x01\x4c\xa2"
                "\x81\xe3\xa0\x66\xa4\x64\x80\x20\x26\x80\x85\x71\x79\x37\x27"
                "\xbd\x85\xaf\x22\x49\x59\x42\x99\x5c\x9c\x5b\x9f\x99\x54\xb6"
                "\xd4\xd1\x81\x94\x4c\x22\x53\x03\xc0\xec\x81\x40\x8d\xea\x41"
                "\xb3\xf6\x63\xef\xfe\x6e\x52\xf2\x37\x9c\xd3\x57\x55\x0e\xe9"
                "\x51\x31\x07\xf9\x9c\x6c\x58\xbf\x7f\x00\xa4\xe1\x81\x55\xfc"
                "\xd5\xfb\x5c\xfc\xda\x85\xd3\xd5\xf4\xca\x25\x5e\xa0\x0b\x4e"
                "\x70\x50\x6e\x70\x34\x91\x30\x96\x75\xb2\x8f\x39\xf8\xd3\x8b"
                "\x0d\xa1\x79\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75\x11"
                "\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2"
                "\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa3\x27\x80"
                "\x20\xee\x75\xbe\xb3\x52\x54\xbd\x24\x06\x3f\xd9\x32\x48\x19"
                "\xe1\x5c\x70\x85\x92\x11\x6c\x3a\xc1\x4c\x9b\x83\xeb\x05\xa7"
                "\x59\xe2\xa0\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x1e\x5a\xaf"
                "\x3e\x46\xf6\xd4\xdf\x4d\x70\xf0\xa1\xd1\x35\x6d\xf0\x8b\x86"
                "\x91\xac\xb2\xf2\x24\xf0\x1a\xd4\x23\xc0\x21\x8d\x42\xc0\x81"
                "\x03\x02\x00\x00\xa4\x64\x80\x20\xb1\x2f\x54\xbe\xb6\xf8\x76"
                "\x71\x72\xed\x44\x03\x71\x74\x2d\x7f\x98\x10\x4b\x57\xf2\x45"
                "\xfb\x3e\xea\xfd\xdd\x39\x42\xbf\x24\x4d\x81\x40\x86\xf5\xe9"
                "\x44\x74\xe8\x98\xca\xc8\x20\xde\x21\xcb\xf7\xf8\x65\x37\x6c"
                "\xd2\xe2\xd2\x46\x6f\xcf\xd4\xdd\x48\x66\x8a\x9c\x06\xda\xa5"
                "\x0e\x11\xfb\x87\x94\xd2\xed\xaa\xdd\x4e\x48\x09\x7a\x4b\xdd"
                "\xa5\xe8\x46\x2e\x1a\xbb\x51\x60\x0c\x9d\x8e\x35\x3e\xc1\x79"
                "\x09\xa1\x81\xa6\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75"
                "\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c"
                "\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa2\x2b"
                "\x80\x20\x79\x95\xae\x4f\xba\x2b\x23\x42\x8e\xae\x72\x3f\xdc"
                "\x13\xf8\xc9\x1a\x35\x71\x25\x4f\x89\x8f\x40\xed\x8c\x99\xc4"
                "\xbb\x66\x24\xac\x81\x03\x02\x10\x00\x82\x02\x03\x98\xa3\x27"
                "\x80\x20\xe5\x15\x0a\xbd\xf6\x06\xbe\xaa\x6c\x81\xf1\x88\x7e"
                "\x70\x64\x51\xeb\x6f\x70\xb1\xdd\xc5\xf1\x20\x53\xf7\xcb\x9f"
                "\x7f\xc7\xe4\x52\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x00\x8b"
                "\xe6\x62\xd4\x30\x65\x1e\x40\xb3\x23\x05\x52\x3a\xf3\x16\xda"
                "\x09\xbe\x79\x5f\x41\xc9\x03\x93\x34\x5b\x7c\x24\x87\x62\xfa"
                "\x81\x03\x02\x00\x00\xa3\x82\x02\x08\x80\x82\x01\x00\xb0\x41"
                "\xe9\x6e\xfe\x3b\xde\x46\x52\x56\x34\x2a\x92\x83\x4d\x3a\x7b"
                "\x94\xe7\xc2\x06\x5b\x8c\xf4\x9d\x71\x9d\x00\x73\xd9\x15\x81"
                "\x12\x1a\x0c\x9e\xd8\xa6\xa6\xd8\x62\xbe\xfe\xa3\x7c\xc5\xd0"
                "\x71\xdd\x83\xed\xcf\x71\xd8\xe5\x72\x27\xcb\xce\xd7\x06\xda"
                "\xe8\x4b\xb8\x8d\x45\xc0\x9c\xe3\x13\x27\xbf\x60\x50\x85\xbf"
                "\xd1\xfc\x8c\x41\x75\x2d\x51\x83\x24\x06\xcb\xe6\x98\x8e\x0d"
                "\x35\xfa\x58\x34\x43\x90\x55\x6a\x40\xc9\x78\x31\xfb\x28\x8b"
                "\x10\x78\x46\x59\x49\xf5\x89\x1c\x66\xc0\x6e\x6b\x73\x05\x75"
                "\x83\x2b\x86\x78\x02\xc1\xb0\xf1\x2a\x6e\x7e\xf6\x65\x8f\xe3"
                "\xc2\x02\x6d\xae\x03\xc5\xef\x41\x03\x3a\x6b\xeb\xb0\xab\x6a"
                "\x27\x2e\xcb\x13\xf5\xd3\xae\x11\x18\x33\x6a\xc3\x08\x7a\xf8"
                "\xb9\xd7\xf3\x37\xee\x05\x32\xd9\xb5\xa4\xb9\xeb\x67\xa8\x84"
                "\xeb\xb2\xc3\x2f\x8a\x8f\xa7\x24\xac\x9a\x24\x91\x11\x70\xab"
                "\xc5\x05\x25\xa9\xd3\x93\x17\x6d\x70\xb1\x67\x60\x6b\x50\x69"
                "\xdd\x22\x8b\x6a\xa9\x11\x7e\x5e\x09\xa8\xaa\xdc\x4a\xc8\x09"
                "\x4c\x1a\xe7\x4c\x1e\x42\xb2\x27\x9d\xa9\x1b\xa3\x59\x14\xcb"
                "\x0b\xca\xff\x6e\x8d\x8e\x38\xf6\x19\xb1\x81\x5f\xf4\x7d\x81"
                "\x82\x01\x00\x6d\x63\x8a\xce\x2e\xfe\x54\xdb\xb2\x37\xea\x49"
                "\x52\x57\x86\xbe\x66\x37\xb2\x52\xfb\x21\xaf\x31\x44\xc0\xa1"
                "\xc3\xfb\xab\xcd\x8f\xc7\xd8\xac\x23\x6d\xb0\xc6\xf0\x6d\x1b"
                "\xa9\x79\x05\x83\x78\x24\x68\x75\xeb\xa9\x00\x9b\xc8\x97\xbb"
                "\xea\x47\xff\x79\x0d\x38\x0f\x48\x44\x7d\xaa\x90\xb4\xf9\xa9"
                "\xfa\xa5\x48\x1b\x35\x3d\xed\x22\x87\x48\xd8\x52\x68\x1c\x1d"
                "\x0f\x54\x3c\xc2\x73\xaf\xb6\xa8\x76\x71\xe3\x78\x03\x1e\x1f"
                "\xbc\xa7\xfc\xbf\x3c\x04\xa2\xa1\xe4\x09\xbd\xd8\xb8\x86\x84"
                "\x0c\xa1\x87\x53\xaf\x91\x0f\x79\x44\xb9\x74\xa2\x81\x0c\x41"
                "\xb2\x3d\x65\xe7\x86\x74\xd0\xc4\x1a\x8e\x14\x8b\x42\xa5\x4b"
                "\x34\x42\x4e\x2a\xbb\x1e\x50\xbd\x07\x6b\xad\xaa\x1a\x08\xee"
                "\xea\x8d\x57\x12\xf3\xc8\x92\x08\xf2\x28\x43\x0b\x75\x9d\x61"
                "\x25\x91\xf9\x96\x92\xa3\x7e\x8c\x77\x44\x65\xca\x40\x4e\x2f"
                "\x39\xd6\x03\xf6\xb9\xbd\x69\x67\xbc\xfa\xde\xe2\xee\x48\x15"
                "\xe5\x09\x2f\xa5\x67\xc1\x7f\x25\xbc\xb5\xdc\x80\x4c\x4e\x18"
                "\x80\xaa\x3b\x02\x17\xb8\x34\xc6\x3f\x48\xd0\x7f\x6d\x9d\x7a"
                "\x89\x81\x8b\x6a\x4e\xe6\x14\x32\xa7\x04\x58\x0e\x13\xfa\xe9"
                "\x60\xdd\x3f\xe3\xa4\x64\x80\x20\x3b\x07\x0f\xe5\x29\x34\xd9"
                "\x17\xf5\x06\x00\xb8\x87\x2f\xcf\x89\x52\x70\xcc\x04\x92\xe1"
                "\x67\xcb\xba\xbb\x10\xa6\x2d\x06\xa4\x6b\x81\x40\x09\xc4\x1d"
                "\xc3\x8e\x6c\xd6\x04\xb7\x9e\x8c\x8b\x30\x65\x88\x43\xc7\xc6"
                "\xe5\xa0\xb0\x4c\x60\xee\xb7\x1d\x69\x2a\xb7\x5d\x5f\x16\x53"
                "\xd1\xe6\x6a\x74\x5d\x63\xc0\x41\x30\x6a\x58\xce\x52\xf2\xdb"
                "\x41\x03\x78\xfd\x7f\x0e\xa5\xc1\xe4\xd2\x50\x8d\x97\x1d\xf9"
                "\x06\xa1\x81\xd3\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1\x75"
                "\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21\x2c"
                "\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa1\x2b"
                "\x80\x20\xc3\x94\x3d\xb3\x7c\x99\xfe\x3e\xf2\xc7\x47\xe4\x0c"
                "\x59\xb5\x51\xb8\x68\xbe\x0f\x41\xaf\x8e\x28\x97\x99\xa5\x1b"
                "\x8b\xab\x41\xc5\x81\x03\x02\x18\x2a\x82\x02\x03\xb8\xa2\x2b"
                "\x80\x20\x88\x40\x2d\x0d\x6a\x33\x4c\x14\x49\xbd\x34\x72\x96"
                "\xb9\x4d\xf7\xd1\x21\x4c\xff\x95\xa2\x84\xf3\xa6\x8b\xb6\x3d"
                "\x42\x97\x27\x41\x81\x03\x02\x10\x00\x82\x02\x03\x98\xa3\x27"
                "\x80\x20\x8d\xb0\x2c\xb1\x28\xc3\xf4\x97\x50\x84\x64\x57\xca"
                "\xf4\x9d\x63\x08\x73\xfc\xde\x2f\x90\xf0\xf2\xec\x79\xa9\xc6"
                "\xa3\xf1\x33\xfd\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x95\x3c"
                "\x86\x65\x91\x76\x69\x6b\x72\x61\xaa\x76\x15\x2a\xd7\x25\x4f"
                "\x32\xb7\x73\x7a\xb2\x49\x0c\x0b\xdf\xb5\x4e\x4a\x8b\xf7\x65"
                "\x81\x03\x02\x00\x00"s;
            auto const thresh0EncodedCondition =
                "\xa2\x2b\x80\x20\xe0\x1d\xbf\xc5\x25\x62\x25\x9f\xe4\xb0\xee"
                "\x43\xd0\x61\xae\x70\x7d\xac\x55\x5c\xe4\x5c\x2c\x1b\x2b\x58"
                "\xdf\x63\x8f\x68\x2c\xb9\x81\x03\x0a\x84\x2a\x82\x02\x03\xd8"s;
            auto const thresh0EncodedFingerprint =
                "\x30\x82\x01\x80\x80\x01\x04\xa1\x82\x01\x79\xa0\x25\x80\x20"
                "\x5d\xa0\x30\xef\xfd\xe1\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a"
                "\x5b\xd1\x5c\xc9\x33\x21\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58"
                "\xeb\x4e\x81\x01\x09\xa0\x25\x80\x20\x5d\xa0\x30\xef\xfd\xe1"
                "\x75\x11\x51\xe8\x5f\x5e\x54\x2d\x6a\x5b\xd1\x5c\xc9\x33\x21"
                "\x2c\xe2\x68\xfc\xfd\x53\xee\x93\x58\xeb\x4e\x81\x01\x09\xa1"
                "\x2b\x80\x20\xc3\x94\x3d\xb3\x7c\x99\xfe\x3e\xf2\xc7\x47\xe4"
                "\x0c\x59\xb5\x51\xb8\x68\xbe\x0f\x41\xaf\x8e\x28\x97\x99\xa5"
                "\x1b\x8b\xab\x41\xc5\x81\x03\x02\x18\x2a\x82\x02\x03\xb8\xa2"
                "\x2b\x80\x20\x3c\x87\xc9\xf7\x46\x52\x3a\x53\x2b\xcc\x10\x47"
                "\x73\x24\x8e\x84\x11\xac\xfb\xed\xf3\xa0\x01\x94\x68\x00\x8d"
                "\x66\xc9\x7e\x83\x96\x81\x03\x04\x38\x00\x82\x02\x03\x98\xa2"
                "\x2b\x80\x20\x88\x40\x2d\x0d\x6a\x33\x4c\x14\x49\xbd\x34\x72"
                "\x96\xb9\x4d\xf7\xd1\x21\x4c\xff\x95\xa2\x84\xf3\xa6\x8b\xb6"
                "\x3d\x42\x97\x27\x41\x81\x03\x02\x10\x00\x82\x02\x03\x98\xa3"
                "\x27\x80\x20\x78\xe3\x04\xf4\xa6\x16\x68\x4c\x1b\xcf\x3a\x32"
                "\xff\xbc\x75\x1a\xe6\x08\x9b\xff\xba\x79\xf4\x39\x7a\xfc\xe1"
                "\x6f\xff\x3e\xb3\x75\x81\x03\x01\x00\x00\xa3\x27\x80\x20\x8d"
                "\xb0\x2c\xb1\x28\xc3\xf4\x97\x50\x84\x64\x57\xca\xf4\x9d\x63"
                "\x08\x73\xfc\xde\x2f\x90\xf0\xf2\xec\x79\xa9\xc6\xa3\xf1\x33"
                "\xfd\x81\x03\x01\x00\x00\xa4\x27\x80\x20\x0d\xea\xc5\x16\x5c"
                "\x62\xb8\xd1\xa4\xe7\x5a\x07\x58\x00\x79\x51\x88\x21\xe9\x4d"
                "\xba\x73\x7b\xad\x60\x9c\x5c\x26\x00\x2e\xd1\x51\x81\x03\x02"
                "\x00\x00\xa4\x27\x80\x20\x95\x3c\x86\x65\x91\x76\x69\x6b\x72"
                "\x61\xaa\x76\x15\x2a\xd7\x25\x4f\x32\xb7\x73\x7a\xb2\x49\x0c"
                "\x0b\xdf\xb5\x4e\x4a\x8b\xf7\x65\x81\x03\x02\x00\x00"s;
            check(
                &thresh0,
                thresh0Msg,
                thresh0EncodedFulfillment,
                thresh0EncodedCondition,
                thresh0EncodedFingerprint);
        }
    }

    void
    testPreim1()
    {
        testcase("Preim1");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * preim0

        auto const preim0Preimage = ""s;
        auto const preim0Msg = ""s;

        PreimageSha256 const preim0(makeSlice(preim0Preimage));
        {
            auto const preim0EncodedFulfillment = "\xa0\x02\x80\x00"s;
            auto const preim0EncodedCondition =
                "\xa0\x25\x80\x20\xe3\xb0\xc4\x42\x98\xfc\x1c\x14\x9a\xfb\xf4"
                "\xc8\x99\x6f\xb9\x24\x27\xae\x41\xe4\x64\x9b\x93\x4c\xa4\x95"
                "\x99\x1b\x78\x52\xb8\x55\x81\x01\x00"s;
            auto const preim0EncodedFingerprint = ""s;
            check(
                &preim0,
                preim0Msg,
                preim0EncodedFulfillment,
                preim0EncodedCondition,
                preim0EncodedFingerprint);
        }
    }

    void
    testPrefix21()
    {
        testcase("Prefix21");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * prefix0
        // ** preim1

        auto const preim1Preimage = ""s;
        auto const preim1Msg = ""s;
        auto const prefix0Prefix = ""s;
        auto const prefix0Msg = ""s;
        auto const prefix0MaxMsgLength = 0;

        auto preim1 =
            std::make_unique<PreimageSha256>(makeSlice(preim1Preimage));
        PrefixSha256 const prefix0(
            makeSlice(prefix0Prefix), prefix0MaxMsgLength, std::move(preim1));
        {
            auto const prefix0EncodedFulfillment =
                "\xa1\x0b\x80\x00\x81\x01\x00\xa2\x04\xa0\x02\x80\x00"s;
            auto const prefix0EncodedCondition =
                "\xa1\x2a\x80\x20\xbb\x1a\xc5\x26\x0c\x01\x41\xb7\xe5\x4b\x26"
                "\xec\x23\x30\x63\x7c\x55\x97\xbf\x81\x19\x51\xac\x09\xe7\x44"
                "\xad\x20\xff\x77\xe2\x87\x81\x02\x04\x00\x82\x02\x07\x80"s;
            auto const prefix0EncodedFingerprint =
                "\x30\x2e\x80\x00\x81\x01\x00\xa2\x27\xa0\x25\x80\x20\xe3\xb0"
                "\xc4\x42\x98\xfc\x1c\x14\x9a\xfb\xf4\xc8\x99\x6f\xb9\x24\x27"
                "\xae\x41\xe4\x64\x9b\x93\x4c\xa4\x95\x99\x1b\x78\x52\xb8\x55"
                "\x81\x01\x00"s;
            check(
                &prefix0,
                prefix0Msg,
                prefix0EncodedFulfillment,
                prefix0EncodedCondition,
                prefix0EncodedFingerprint);
        }
    }

    void
    testThresh72()
    {
        testcase("Thresh72");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * thresh0
        // ** preim1

        auto const preim1Preimage = ""s;
        auto const preim1Msg = ""s;
        auto const thresh0Msg = ""s;

        auto preim1 =
            std::make_unique<PreimageSha256>(makeSlice(preim1Preimage));
        std::vector<std::unique_ptr<Fulfillment>> thresh0Subfulfillments;
        thresh0Subfulfillments.emplace_back(std::move(preim1));
        std::vector<Condition> thresh0Subconditions{};
        ThresholdSha256 const thresh0(
            std::move(thresh0Subfulfillments), std::move(thresh0Subconditions));
        {
            auto const thresh0EncodedFulfillment =
                "\xa2\x08\xa0\x04\xa0\x02\x80\x00\xa1\x00"s;
            auto const thresh0EncodedCondition =
                "\xa2\x2a\x80\x20\xb4\xb8\x41\x36\xdf\x48\xa7\x1d\x73\xf4\x98"
                "\x5c\x04\xc6\x76\x7a\x77\x8e\xcb\x65\xba\x70\x23\xb4\x50\x68"
                "\x23\xbe\xee\x76\x31\xb9\x81\x02\x04\x00\x82\x02\x07\x80"s;
            auto const thresh0EncodedFingerprint =
                "\x30\x2c\x80\x01\x01\xa1\x27\xa0\x25\x80\x20\xe3\xb0\xc4\x42"
                "\x98\xfc\x1c\x14\x9a\xfb\xf4\xc8\x99\x6f\xb9\x24\x27\xae\x41"
                "\xe4\x64\x9b\x93\x4c\xa4\x95\x99\x1b\x78\x52\xb8\x55\x81\x01"
                "\x00"s;
            check(
                &thresh0,
                thresh0Msg,
                thresh0EncodedFulfillment,
                thresh0EncodedCondition,
                thresh0EncodedFingerprint);
        }
    }

    void
    testRsa1()
    {
        testcase("Rsa1");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * rsa0

        auto const rsa0Msg = ""s;
        std::array<std::uint8_t, 256> const rsa0PublicKey{
            {0xe1, 0xef, 0x8b, 0x24, 0xd6, 0xf7, 0x6b, 0x09, 0xc8, 0x1e, 0xd7,
             0x75, 0x2a, 0xa2, 0x62, 0xf0, 0x44, 0xf0, 0x4a, 0x87, 0x4d, 0x43,
             0x80, 0x9d, 0x31, 0xce, 0xa6, 0x12, 0xf9, 0x9b, 0x0c, 0x97, 0xa8,
             0xb4, 0x37, 0x41, 0x53, 0xe3, 0xee, 0xf3, 0xd6, 0x66, 0x16, 0x84,
             0x3e, 0x0e, 0x41, 0xc2, 0x93, 0x26, 0x4b, 0x71, 0xb6, 0x17, 0x3d,
             0xb1, 0xcf, 0x0d, 0x6c, 0xd5, 0x58, 0xc5, 0x86, 0x57, 0x70, 0x6f,
             0xcf, 0x09, 0x7f, 0x70, 0x4c, 0x48, 0x3e, 0x59, 0xcb, 0xfd, 0xfd,
             0x5b, 0x3e, 0xe7, 0xbc, 0x80, 0xd7, 0x40, 0xc5, 0xe0, 0xf0, 0x47,
             0xf3, 0xe8, 0x5f, 0xc0, 0xd7, 0x58, 0x15, 0x77, 0x6a, 0x6f, 0x3f,
             0x23, 0xc5, 0xdc, 0x5e, 0x79, 0x71, 0x39, 0xa6, 0x88, 0x2e, 0x38,
             0x33, 0x6a, 0x4a, 0x5f, 0xb3, 0x61, 0x37, 0x62, 0x0f, 0xf3, 0x66,
             0x3d, 0xba, 0xe3, 0x28, 0x47, 0x28, 0x01, 0x86, 0x2f, 0x72, 0xf2,
             0xf8, 0x7b, 0x20, 0x2b, 0x9c, 0x89, 0xad, 0xd7, 0xcd, 0x5b, 0x0a,
             0x07, 0x6f, 0x7c, 0x53, 0xe3, 0x50, 0x39, 0xf6, 0x7e, 0xd1, 0x7e,
             0xc8, 0x15, 0xe5, 0xb4, 0x30, 0x5c, 0xc6, 0x31, 0x97, 0x06, 0x8d,
             0x5e, 0x6e, 0x57, 0x9b, 0xa6, 0xde, 0x5f, 0x4e, 0x3e, 0x57, 0xdf,
             0x5e, 0x4e, 0x07, 0x2f, 0xf2, 0xce, 0x4c, 0x66, 0xeb, 0x45, 0x23,
             0x39, 0x73, 0x87, 0x52, 0x75, 0x96, 0x39, 0xf0, 0x25, 0x7b, 0xf5,
             0x7d, 0xbd, 0x5c, 0x44, 0x3f, 0xb5, 0x15, 0x8c, 0xce, 0x0a, 0x3d,
             0x36, 0xad, 0xc7, 0xba, 0x01, 0xf3, 0x3a, 0x0b, 0xb6, 0xdb, 0xb2,
             0xbf, 0x98, 0x9d, 0x60, 0x71, 0x12, 0xf2, 0x34, 0x4d, 0x99, 0x3e,
             0x77, 0xe5, 0x63, 0xc1, 0xd3, 0x61, 0xde, 0xdf, 0x57, 0xda, 0x96,
             0xef, 0x2c, 0xfc, 0x68, 0x5f, 0x00, 0x2b, 0x63, 0x82, 0x46, 0xa5,
             0xb3, 0x09, 0xb9}};
        std::array<std::uint8_t, 256> const rsa0Sig{
            {0xbd, 0x42, 0xd6, 0x56, 0x9f, 0x65, 0x99, 0xae, 0xd4, 0x55, 0xf9,
             0x6b, 0xc0, 0xed, 0x08, 0xed, 0x14, 0x80, 0xbf, 0x36, 0xcd, 0x9e,
             0x14, 0x67, 0xf9, 0xc6, 0xf7, 0x44, 0x61, 0xc9, 0xe3, 0xa7, 0x49,
             0x33, 0x4b, 0x2f, 0x64, 0x04, 0xaa, 0x5f, 0x9f, 0x6b, 0xaf, 0xe7,
             0x6c, 0x34, 0x7d, 0x06, 0x92, 0x50, 0xb3, 0x5d, 0x1c, 0x97, 0x0c,
             0x79, 0x30, 0x59, 0xee, 0x73, 0x3a, 0x81, 0x93, 0xf3, 0x0f, 0xa7,
             0x8f, 0xec, 0x7c, 0xae, 0x45, 0x9e, 0x3d, 0xdf, 0xd7, 0x63, 0x38,
             0x05, 0xd4, 0x76, 0x94, 0x0d, 0x0c, 0xb5, 0x3d, 0x7f, 0xb3, 0x89,
             0xdc, 0xda, 0xea, 0xf6, 0xe8, 0xcf, 0x48, 0xc4, 0xb5, 0x63, 0x54,
             0x30, 0xe4, 0xf2, 0xbc, 0xdf, 0xe5, 0x05, 0xc2, 0xc0, 0xfc, 0x17,
             0xb4, 0x0d, 0x93, 0xc7, 0xed, 0xb7, 0xc2, 0x61, 0xeb, 0xf4, 0x38,
             0x95, 0xa7, 0x05, 0xe0, 0x24, 0xaa, 0x05, 0x49, 0xa6, 0x60, 0xf7,
             0x0a, 0x32, 0x15, 0x06, 0x47, 0x52, 0x2d, 0xbe, 0x6b, 0x63, 0x52,
             0x04, 0x97, 0xcf, 0xf8, 0xf8, 0xd5, 0xd7, 0x47, 0x68, 0xa2, 0x7c,
             0x5b, 0x86, 0xe5, 0x80, 0xbe, 0x3f, 0xcd, 0xc9, 0x6f, 0x19, 0x76,
             0x29, 0x3c, 0xba, 0x0d, 0x58, 0xdf, 0xc6, 0x0b, 0x51, 0x8b, 0x63,
             0x2a, 0x6d, 0xc1, 0xe9, 0x50, 0xc4, 0x3e, 0x23, 0x1f, 0xe1, 0xa3,
             0x79, 0xaa, 0x6d, 0xdc, 0xc5, 0x2c, 0x70, 0xed, 0xf8, 0x51, 0xc6,
             0xc0, 0x12, 0x3a, 0x96, 0x42, 0x61, 0xcf, 0xdb, 0x38, 0x57, 0xcd,
             0x6c, 0xd5, 0xad, 0xc3, 0x7d, 0x8d, 0xa2, 0xcc, 0x92, 0x4e, 0xda,
             0xe1, 0xd8, 0x4c, 0xf6, 0x12, 0x45, 0x87, 0xf2, 0x74, 0xc1, 0xfa,
             0x36, 0x97, 0xda, 0x29, 0x01, 0xf0, 0x26, 0x9f, 0x03, 0xb2, 0x43,
             0xc0, 0x3b, 0x61, 0x4e, 0x03, 0x85, 0xe1, 0x96, 0x1f, 0xac, 0x50,
             0x00, 0xf9, 0xbb}};

        RsaSha256 const rsa0(makeSlice(rsa0PublicKey), makeSlice(rsa0Sig));
        {
            auto const rsa0EncodedFulfillment =
                "\xa3\x82\x02\x08\x80\x82\x01\x00\xe1\xef\x8b\x24\xd6\xf7\x6b"
                "\x09\xc8\x1e\xd7\x75\x2a\xa2\x62\xf0\x44\xf0\x4a\x87\x4d\x43"
                "\x80\x9d\x31\xce\xa6\x12\xf9\x9b\x0c\x97\xa8\xb4\x37\x41\x53"
                "\xe3\xee\xf3\xd6\x66\x16\x84\x3e\x0e\x41\xc2\x93\x26\x4b\x71"
                "\xb6\x17\x3d\xb1\xcf\x0d\x6c\xd5\x58\xc5\x86\x57\x70\x6f\xcf"
                "\x09\x7f\x70\x4c\x48\x3e\x59\xcb\xfd\xfd\x5b\x3e\xe7\xbc\x80"
                "\xd7\x40\xc5\xe0\xf0\x47\xf3\xe8\x5f\xc0\xd7\x58\x15\x77\x6a"
                "\x6f\x3f\x23\xc5\xdc\x5e\x79\x71\x39\xa6\x88\x2e\x38\x33\x6a"
                "\x4a\x5f\xb3\x61\x37\x62\x0f\xf3\x66\x3d\xba\xe3\x28\x47\x28"
                "\x01\x86\x2f\x72\xf2\xf8\x7b\x20\x2b\x9c\x89\xad\xd7\xcd\x5b"
                "\x0a\x07\x6f\x7c\x53\xe3\x50\x39\xf6\x7e\xd1\x7e\xc8\x15\xe5"
                "\xb4\x30\x5c\xc6\x31\x97\x06\x8d\x5e\x6e\x57\x9b\xa6\xde\x5f"
                "\x4e\x3e\x57\xdf\x5e\x4e\x07\x2f\xf2\xce\x4c\x66\xeb\x45\x23"
                "\x39\x73\x87\x52\x75\x96\x39\xf0\x25\x7b\xf5\x7d\xbd\x5c\x44"
                "\x3f\xb5\x15\x8c\xce\x0a\x3d\x36\xad\xc7\xba\x01\xf3\x3a\x0b"
                "\xb6\xdb\xb2\xbf\x98\x9d\x60\x71\x12\xf2\x34\x4d\x99\x3e\x77"
                "\xe5\x63\xc1\xd3\x61\xde\xdf\x57\xda\x96\xef\x2c\xfc\x68\x5f"
                "\x00\x2b\x63\x82\x46\xa5\xb3\x09\xb9\x81\x82\x01\x00\xbd\x42"
                "\xd6\x56\x9f\x65\x99\xae\xd4\x55\xf9\x6b\xc0\xed\x08\xed\x14"
                "\x80\xbf\x36\xcd\x9e\x14\x67\xf9\xc6\xf7\x44\x61\xc9\xe3\xa7"
                "\x49\x33\x4b\x2f\x64\x04\xaa\x5f\x9f\x6b\xaf\xe7\x6c\x34\x7d"
                "\x06\x92\x50\xb3\x5d\x1c\x97\x0c\x79\x30\x59\xee\x73\x3a\x81"
                "\x93\xf3\x0f\xa7\x8f\xec\x7c\xae\x45\x9e\x3d\xdf\xd7\x63\x38"
                "\x05\xd4\x76\x94\x0d\x0c\xb5\x3d\x7f\xb3\x89\xdc\xda\xea\xf6"
                "\xe8\xcf\x48\xc4\xb5\x63\x54\x30\xe4\xf2\xbc\xdf\xe5\x05\xc2"
                "\xc0\xfc\x17\xb4\x0d\x93\xc7\xed\xb7\xc2\x61\xeb\xf4\x38\x95"
                "\xa7\x05\xe0\x24\xaa\x05\x49\xa6\x60\xf7\x0a\x32\x15\x06\x47"
                "\x52\x2d\xbe\x6b\x63\x52\x04\x97\xcf\xf8\xf8\xd5\xd7\x47\x68"
                "\xa2\x7c\x5b\x86\xe5\x80\xbe\x3f\xcd\xc9\x6f\x19\x76\x29\x3c"
                "\xba\x0d\x58\xdf\xc6\x0b\x51\x8b\x63\x2a\x6d\xc1\xe9\x50\xc4"
                "\x3e\x23\x1f\xe1\xa3\x79\xaa\x6d\xdc\xc5\x2c\x70\xed\xf8\x51"
                "\xc6\xc0\x12\x3a\x96\x42\x61\xcf\xdb\x38\x57\xcd\x6c\xd5\xad"
                "\xc3\x7d\x8d\xa2\xcc\x92\x4e\xda\xe1\xd8\x4c\xf6\x12\x45\x87"
                "\xf2\x74\xc1\xfa\x36\x97\xda\x29\x01\xf0\x26\x9f\x03\xb2\x43"
                "\xc0\x3b\x61\x4e\x03\x85\xe1\x96\x1f\xac\x50\x00\xf9\xbb"s;
            auto const rsa0EncodedCondition =
                "\xa3\x27\x80\x20\xb3\x1f\xa8\x20\x6e\x4e\xa7\xe5\x15\x33\x7b"
                "\x3b\x33\x08\x2b\x87\x76\x51\x80\x10\x85\xed\x84\xfb\x4d\xae"
                "\xb2\x47\xbf\x69\x8d\x7f\x81\x03\x01\x00\x00"s;
            auto const rsa0EncodedFingerprint =
                "\x30\x82\x01\x04\x80\x82\x01\x00\xe1\xef\x8b\x24\xd6\xf7\x6b"
                "\x09\xc8\x1e\xd7\x75\x2a\xa2\x62\xf0\x44\xf0\x4a\x87\x4d\x43"
                "\x80\x9d\x31\xce\xa6\x12\xf9\x9b\x0c\x97\xa8\xb4\x37\x41\x53"
                "\xe3\xee\xf3\xd6\x66\x16\x84\x3e\x0e\x41\xc2\x93\x26\x4b\x71"
                "\xb6\x17\x3d\xb1\xcf\x0d\x6c\xd5\x58\xc5\x86\x57\x70\x6f\xcf"
                "\x09\x7f\x70\x4c\x48\x3e\x59\xcb\xfd\xfd\x5b\x3e\xe7\xbc\x80"
                "\xd7\x40\xc5\xe0\xf0\x47\xf3\xe8\x5f\xc0\xd7\x58\x15\x77\x6a"
                "\x6f\x3f\x23\xc5\xdc\x5e\x79\x71\x39\xa6\x88\x2e\x38\x33\x6a"
                "\x4a\x5f\xb3\x61\x37\x62\x0f\xf3\x66\x3d\xba\xe3\x28\x47\x28"
                "\x01\x86\x2f\x72\xf2\xf8\x7b\x20\x2b\x9c\x89\xad\xd7\xcd\x5b"
                "\x0a\x07\x6f\x7c\x53\xe3\x50\x39\xf6\x7e\xd1\x7e\xc8\x15\xe5"
                "\xb4\x30\x5c\xc6\x31\x97\x06\x8d\x5e\x6e\x57\x9b\xa6\xde\x5f"
                "\x4e\x3e\x57\xdf\x5e\x4e\x07\x2f\xf2\xce\x4c\x66\xeb\x45\x23"
                "\x39\x73\x87\x52\x75\x96\x39\xf0\x25\x7b\xf5\x7d\xbd\x5c\x44"
                "\x3f\xb5\x15\x8c\xce\x0a\x3d\x36\xad\xc7\xba\x01\xf3\x3a\x0b"
                "\xb6\xdb\xb2\xbf\x98\x9d\x60\x71\x12\xf2\x34\x4d\x99\x3e\x77"
                "\xe5\x63\xc1\xd3\x61\xde\xdf\x57\xda\x96\xef\x2c\xfc\x68\x5f"
                "\x00\x2b\x63\x82\x46\xa5\xb3\x09\xb9"s;
            check(
                &rsa0,
                rsa0Msg,
                rsa0EncodedFulfillment,
                rsa0EncodedCondition,
                rsa0EncodedFingerprint);
        }
    }

    void
    testEd1()
    {
        testcase("Ed1");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * ed0

        auto const ed0Msg = ""s;
        std::array<std::uint8_t, 32> const ed0PublicKey{
            {0xd7, 0x5a, 0x98, 0x01, 0x82, 0xb1, 0x0a, 0xb7, 0xd5, 0x4b, 0xfe,
             0xd3, 0xc9, 0x64, 0x07, 0x3a, 0x0e, 0xe1, 0x72, 0xf3, 0xda, 0xa6,
             0x23, 0x25, 0xaf, 0x02, 0x1a, 0x68, 0xf7, 0x07, 0x51, 0x1a}};
        std::array<std::uint8_t, 64> const ed0Sig{
            {0xe5, 0x56, 0x43, 0x00, 0xc3, 0x60, 0xac, 0x72, 0x90, 0x86, 0xe2,
             0xcc, 0x80, 0x6e, 0x82, 0x8a, 0x84, 0x87, 0x7f, 0x1e, 0xb8, 0xe5,
             0xd9, 0x74, 0xd8, 0x73, 0xe0, 0x65, 0x22, 0x49, 0x01, 0x55, 0x5f,
             0xb8, 0x82, 0x15, 0x90, 0xa3, 0x3b, 0xac, 0xc6, 0x1e, 0x39, 0x70,
             0x1c, 0xf9, 0xb4, 0x6b, 0xd2, 0x5b, 0xf5, 0xf0, 0x59, 0x5b, 0xbe,
             0x24, 0x65, 0x51, 0x41, 0x43, 0x8e, 0x7a, 0x10, 0x0b}};

        Ed25519 const ed0(ed0PublicKey, ed0Sig);
        {
            auto const ed0EncodedFulfillment =
                "\xa4\x64\x80\x20\xd7\x5a\x98\x01\x82\xb1\x0a\xb7\xd5\x4b\xfe"
                "\xd3\xc9\x64\x07\x3a\x0e\xe1\x72\xf3\xda\xa6\x23\x25\xaf\x02"
                "\x1a\x68\xf7\x07\x51\x1a\x81\x40\xe5\x56\x43\x00\xc3\x60\xac"
                "\x72\x90\x86\xe2\xcc\x80\x6e\x82\x8a\x84\x87\x7f\x1e\xb8\xe5"
                "\xd9\x74\xd8\x73\xe0\x65\x22\x49\x01\x55\x5f\xb8\x82\x15\x90"
                "\xa3\x3b\xac\xc6\x1e\x39\x70\x1c\xf9\xb4\x6b\xd2\x5b\xf5\xf0"
                "\x59\x5b\xbe\x24\x65\x51\x41\x43\x8e\x7a\x10\x0b"s;
            auto const ed0EncodedCondition =
                "\xa4\x27\x80\x20\x79\x92\x39\xab\xa8\xfc\x4f\xf7\xea\xbf\xbc"
                "\x4c\x44\xe6\x9e\x8b\xdf\xed\x99\x33\x24\xe1\x2e\xd6\x47\x92"
                "\xab\xe2\x89\xcf\x1d\x5f\x81\x03\x02\x00\x00"s;
            auto const ed0EncodedFingerprint =
                "\x30\x22\x80\x20\xd7\x5a\x98\x01\x82\xb1\x0a\xb7\xd5\x4b\xfe"
                "\xd3\xc9\x64\x07\x3a\x0e\xe1\x72\xf3\xda\xa6\x23\x25\xaf\x02"
                "\x1a\x68\xf7\x07\x51\x1a"s;
            check(
                &ed0,
                ed0Msg,
                ed0EncodedFulfillment,
                ed0EncodedCondition,
                ed0EncodedFingerprint);
        }
    }

    void
    testPreim2()
    {
        testcase("Preim2");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * preim0

        auto const preim0Preimage = "aaa"s;
        auto const preim0Msg = ""s;

        PreimageSha256 const preim0(makeSlice(preim0Preimage));
        {
            auto const preim0EncodedFulfillment =
                "\xa0\x05\x80\x03\x61\x61\x61"s;
            auto const preim0EncodedCondition =
                "\xa0\x25\x80\x20\x98\x34\x87\x6d\xcf\xb0\x5c\xb1\x67\xa5\xc2"
                "\x49\x53\xeb\xa5\x8c\x4a\xc8\x9b\x1a\xdf\x57\xf2\x8f\x2f\x9d"
                "\x09\xaf\x10\x7e\xe8\xf0\x81\x01\x03"s;
            auto const preim0EncodedFingerprint = "\x61\x61\x61"s;
            check(
                &preim0,
                preim0Msg,
                preim0EncodedFulfillment,
                preim0EncodedCondition,
                preim0EncodedFingerprint);
        }
    }

    void
    testPrefix22()
    {
        testcase("Prefix22");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * prefix0
        // ** ed1

        auto const ed1Msg = ""s;
        std::array<std::uint8_t, 32> const ed1PublicKey{
            {0xd7, 0x5a, 0x98, 0x01, 0x82, 0xb1, 0x0a, 0xb7, 0xd5, 0x4b, 0xfe,
             0xd3, 0xc9, 0x64, 0x07, 0x3a, 0x0e, 0xe1, 0x72, 0xf3, 0xda, 0xa6,
             0x23, 0x25, 0xaf, 0x02, 0x1a, 0x68, 0xf7, 0x07, 0x51, 0x1a}};
        std::array<std::uint8_t, 64> const ed1Sig{
            {0x50, 0x6a, 0x1e, 0xa6, 0x83, 0x18, 0xe6, 0x2d, 0x40, 0x63, 0x5d,
             0xad, 0x04, 0x3e, 0x19, 0x87, 0xeb, 0xc2, 0x6e, 0x5b, 0x5c, 0x44,
             0x06, 0xf7, 0xbd, 0xf8, 0x5a, 0x73, 0x38, 0x8f, 0xbf, 0xe5, 0xc2,
             0x45, 0xac, 0x49, 0xf4, 0x77, 0x0e, 0xbc, 0x78, 0x77, 0x08, 0x27,
             0x0a, 0xa6, 0xa8, 0x76, 0x9f, 0xef, 0xe8, 0x93, 0x0f, 0xd0, 0xea,
             0x1e, 0xe6, 0x4b, 0x31, 0x40, 0x7d, 0x76, 0x95, 0x09}};
        auto const prefix0Prefix = "aaa"s;
        auto const prefix0Msg = ""s;
        auto const prefix0MaxMsgLength = 0;

        auto ed1 = std::make_unique<Ed25519>(ed1PublicKey, ed1Sig);
        PrefixSha256 const prefix0(
            makeSlice(prefix0Prefix), prefix0MaxMsgLength, std::move(ed1));
        {
            auto const prefix0EncodedFulfillment =
                "\xa1\x70\x80\x03\x61\x61\x61\x81\x01\x00\xa2\x66\xa4\x64\x80"
                "\x20\xd7\x5a\x98\x01\x82\xb1\x0a\xb7\xd5\x4b\xfe\xd3\xc9\x64"
                "\x07\x3a\x0e\xe1\x72\xf3\xda\xa6\x23\x25\xaf\x02\x1a\x68\xf7"
                "\x07\x51\x1a\x81\x40\x50\x6a\x1e\xa6\x83\x18\xe6\x2d\x40\x63"
                "\x5d\xad\x04\x3e\x19\x87\xeb\xc2\x6e\x5b\x5c\x44\x06\xf7\xbd"
                "\xf8\x5a\x73\x38\x8f\xbf\xe5\xc2\x45\xac\x49\xf4\x77\x0e\xbc"
                "\x78\x77\x08\x27\x0a\xa6\xa8\x76\x9f\xef\xe8\x93\x0f\xd0\xea"
                "\x1e\xe6\x4b\x31\x40\x7d\x76\x95\x09"s;
            auto const prefix0EncodedCondition =
                "\xa1\x2b\x80\x20\x45\x1f\xe1\x5f\x16\x29\x9d\x49\x59\x93\xfe"
                "\x69\x2d\xb9\x89\xe5\x6a\x52\x30\xa9\x04\x76\xf7\x73\x92\xa3"
                "\xcd\x32\x13\xc0\x73\x3f\x81\x03\x02\x04\x03\x82\x02\x03\x08"s;
            auto const prefix0EncodedFingerprint =
                "\x30\x33\x80\x03\x61\x61\x61\x81\x01\x00\xa2\x29\xa4\x27\x80"
                "\x20\x79\x92\x39\xab\xa8\xfc\x4f\xf7\xea\xbf\xbc\x4c\x44\xe6"
                "\x9e\x8b\xdf\xed\x99\x33\x24\xe1\x2e\xd6\x47\x92\xab\xe2\x89"
                "\xcf\x1d\x5f\x81\x03\x02\x00\x00"s;
            check(
                &prefix0,
                prefix0Msg,
                prefix0EncodedFulfillment,
                prefix0EncodedCondition,
                prefix0EncodedFingerprint);
        }
    }

    void
    testPrefix23()
    {
        testcase("Prefix23");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * prefix0
        // ** prefix1
        // *** ed2

        auto const ed2Msg = ""s;
        std::array<std::uint8_t, 32> const ed2PublicKey{
            {0xd7, 0x5a, 0x98, 0x01, 0x82, 0xb1, 0x0a, 0xb7, 0xd5, 0x4b, 0xfe,
             0xd3, 0xc9, 0x64, 0x07, 0x3a, 0x0e, 0xe1, 0x72, 0xf3, 0xda, 0xa6,
             0x23, 0x25, 0xaf, 0x02, 0x1a, 0x68, 0xf7, 0x07, 0x51, 0x1a}};
        std::array<std::uint8_t, 64> const ed2Sig{
            {0xa4, 0x23, 0x60, 0xf4, 0x7f, 0x7d, 0xb8, 0x6d, 0xb5, 0xf0, 0x37,
             0xc8, 0x10, 0x24, 0x22, 0x37, 0x20, 0x7d, 0x7a, 0xdd, 0x6e, 0x3e,
             0x53, 0x17, 0xe2, 0x12, 0xb2, 0x07, 0xe2, 0x5b, 0xed, 0x2a, 0xcb,
             0x48, 0x5a, 0xd0, 0xbc, 0xbb, 0x57, 0x75, 0x57, 0x26, 0x0e, 0xcb,
             0xbb, 0xd6, 0x77, 0x18, 0xd6, 0xca, 0xba, 0xdf, 0x45, 0xba, 0xd6,
             0x55, 0xd1, 0xb8, 0xce, 0x84, 0x60, 0x9e, 0x97, 0x01}};
        auto const prefix1Prefix = "aaa"s;
        auto const prefix1Msg = ""s;
        auto const prefix1MaxMsgLength = 6;
        auto const prefix0Prefix = "bbb"s;
        auto const prefix0Msg = "\x7A\x7A\x7A"s;
        auto const prefix0MaxMsgLength = 3;

        auto ed2 = std::make_unique<Ed25519>(ed2PublicKey, ed2Sig);
        auto prefix1 = std::make_unique<PrefixSha256>(
            makeSlice(prefix1Prefix), prefix1MaxMsgLength, std::move(ed2));
        PrefixSha256 const prefix0(
            makeSlice(prefix0Prefix), prefix0MaxMsgLength, std::move(prefix1));
        {
            auto const prefix0EncodedFulfillment =
                "\xa1\x7c\x80\x03\x62\x62\x62\x81\x01\x03\xa2\x72\xa1\x70\x80"
                "\x03\x61\x61\x61\x81\x01\x06\xa2\x66\xa4\x64\x80\x20\xd7\x5a"
                "\x98\x01\x82\xb1\x0a\xb7\xd5\x4b\xfe\xd3\xc9\x64\x07\x3a\x0e"
                "\xe1\x72\xf3\xda\xa6\x23\x25\xaf\x02\x1a\x68\xf7\x07\x51\x1a"
                "\x81\x40\xa4\x23\x60\xf4\x7f\x7d\xb8\x6d\xb5\xf0\x37\xc8\x10"
                "\x24\x22\x37\x20\x7d\x7a\xdd\x6e\x3e\x53\x17\xe2\x12\xb2\x07"
                "\xe2\x5b\xed\x2a\xcb\x48\x5a\xd0\xbc\xbb\x57\x75\x57\x26\x0e"
                "\xcb\xbb\xd6\x77\x18\xd6\xca\xba\xdf\x45\xba\xd6\x55\xd1\xb8"
                "\xce\x84\x60\x9e\x97\x01"s;
            auto const prefix0EncodedCondition =
                "\xa1\x2b\x80\x20\x17\x73\x50\xad\x85\x66\xc5\x28\xb9\x2d\x9b"
                "\x53\x82\xdf\x2c\x68\xd9\xba\x9f\x9f\xa4\x1d\x43\xdb\xdd\x8e"
                "\x40\xb1\x18\xdd\x96\x41\x81\x03\x02\x08\x0f\x82\x02\x03\x08"s;
            auto const prefix0EncodedFingerprint =
                "\x30\x37\x80\x03\x62\x62\x62\x81\x01\x03\xa2\x2d\xa1\x2b\x80"
                "\x20\x7f\x19\xc9\xbb\x3b\xc7\x67\xde\x39\x65\x7e\x11\xd1\x60"
                "\x68\xf8\xca\xb0\x0e\x3e\x3c\x23\x91\x6d\xf9\x67\xb5\x84\xa2"
                "\x8b\x26\xdc\x81\x03\x02\x04\x09\x82\x02\x03\x08"s;
            check(
                &prefix0,
                prefix0Msg,
                prefix0EncodedFulfillment,
                prefix0EncodedCondition,
                prefix0EncodedFingerprint);
        }
    }

    void
    testThresh73()
    {
        testcase("Thresh73");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * thresh0
        // ** Rsa4Cond
        // ** prefix1
        // *** ed2
        // ** ed3

        auto const ed2Msg = ""s;
        std::array<std::uint8_t, 32> const ed2PublicKey{
            {0xd7, 0x5a, 0x98, 0x01, 0x82, 0xb1, 0x0a, 0xb7, 0xd5, 0x4b, 0xfe,
             0xd3, 0xc9, 0x64, 0x07, 0x3a, 0x0e, 0xe1, 0x72, 0xf3, 0xda, 0xa6,
             0x23, 0x25, 0xaf, 0x02, 0x1a, 0x68, 0xf7, 0x07, 0x51, 0x1a}};
        std::array<std::uint8_t, 64> const ed2Sig{
            {0x34, 0x4c, 0x9d, 0x12, 0xa0, 0x2a, 0x57, 0xb3, 0x5f, 0xd9, 0x66,
             0x19, 0x3c, 0xee, 0x95, 0xd5, 0xdb, 0xbb, 0xc6, 0x77, 0x55, 0x3f,
             0xce, 0xbf, 0x41, 0x4c, 0x18, 0xda, 0x75, 0x00, 0x29, 0xdd, 0x39,
             0xc6, 0xe5, 0x3a, 0xdd, 0x89, 0x2c, 0xef, 0xe4, 0x42, 0x35, 0x83,
             0x1f, 0xf8, 0xe5, 0xf3, 0x68, 0x68, 0x8e, 0xf7, 0x7c, 0xcf, 0x6f,
             0x99, 0x7f, 0xd4, 0x11, 0xa6, 0xa7, 0xeb, 0xf9, 0x02}};
        auto const prefix1Prefix = "aaa"s;
        auto const prefix1Msg = ""s;
        auto const prefix1MaxMsgLength = 0;
        auto const ed3Msg = ""s;
        std::array<std::uint8_t, 32> const ed3PublicKey{
            {0xd7, 0x5a, 0x98, 0x01, 0x82, 0xb1, 0x0a, 0xb7, 0xd5, 0x4b, 0xfe,
             0xd3, 0xc9, 0x64, 0x07, 0x3a, 0x0e, 0xe1, 0x72, 0xf3, 0xda, 0xa6,
             0x23, 0x25, 0xaf, 0x02, 0x1a, 0x68, 0xf7, 0x07, 0x51, 0x1a}};
        std::array<std::uint8_t, 64> const ed3Sig{
            {0x50, 0x6a, 0x1e, 0xa6, 0x83, 0x18, 0xe6, 0x2d, 0x40, 0x63, 0x5d,
             0xad, 0x04, 0x3e, 0x19, 0x87, 0xeb, 0xc2, 0x6e, 0x5b, 0x5c, 0x44,
             0x06, 0xf7, 0xbd, 0xf8, 0x5a, 0x73, 0x38, 0x8f, 0xbf, 0xe5, 0xc2,
             0x45, 0xac, 0x49, 0xf4, 0x77, 0x0e, 0xbc, 0x78, 0x77, 0x08, 0x27,
             0x0a, 0xa6, 0xa8, 0x76, 0x9f, 0xef, 0xe8, 0x93, 0x0f, 0xd0, 0xea,
             0x1e, 0xe6, 0x4b, 0x31, 0x40, 0x7d, 0x76, 0x95, 0x09}};
        auto const thresh0Msg = "\x61\x61\x61"s;
        auto const Rsa4CondConditionFingerprint =
            "\x4d\xd2\xea\x7f\x85\xb3\xea\xcb\x8f\x19\x05\x8e\x83\x60\x95"
            "\x5c\x32\xe7\x4c\x12\x43\x92\xa1\xf4\x46\x60\x73\x97\x09\xc5"
            "\x39\xc3"s;
        Condition const Rsa4Cond{Type::rsaSha256,
                                 262144,
                                 makeSlice(Rsa4CondConditionFingerprint),
                                 std::bitset<5>{0}};

        auto ed2 = std::make_unique<Ed25519>(ed2PublicKey, ed2Sig);
        auto prefix1 = std::make_unique<PrefixSha256>(
            makeSlice(prefix1Prefix), prefix1MaxMsgLength, std::move(ed2));
        auto ed3 = std::make_unique<Ed25519>(ed3PublicKey, ed3Sig);
        std::vector<std::unique_ptr<Fulfillment>> thresh0Subfulfillments;
        thresh0Subfulfillments.emplace_back(std::move(prefix1));
        thresh0Subfulfillments.emplace_back(std::move(ed3));
        std::vector<Condition> thresh0Subconditions{{Rsa4Cond}};
        ThresholdSha256 const thresh0(
            std::move(thresh0Subfulfillments), std::move(thresh0Subconditions));
        {
            auto const thresh0EncodedFulfillment =
                "\xa2\x82\x01\x06\xa0\x81\xd8\xa1\x70\x80\x03\x61\x61\x61\x81"
                "\x01\x00\xa2\x66\xa4\x64\x80\x20\xd7\x5a\x98\x01\x82\xb1\x0a"
                "\xb7\xd5\x4b\xfe\xd3\xc9\x64\x07\x3a\x0e\xe1\x72\xf3\xda\xa6"
                "\x23\x25\xaf\x02\x1a\x68\xf7\x07\x51\x1a\x81\x40\x34\x4c\x9d"
                "\x12\xa0\x2a\x57\xb3\x5f\xd9\x66\x19\x3c\xee\x95\xd5\xdb\xbb"
                "\xc6\x77\x55\x3f\xce\xbf\x41\x4c\x18\xda\x75\x00\x29\xdd\x39"
                "\xc6\xe5\x3a\xdd\x89\x2c\xef\xe4\x42\x35\x83\x1f\xf8\xe5\xf3"
                "\x68\x68\x8e\xf7\x7c\xcf\x6f\x99\x7f\xd4\x11\xa6\xa7\xeb\xf9"
                "\x02\xa4\x64\x80\x20\xd7\x5a\x98\x01\x82\xb1\x0a\xb7\xd5\x4b"
                "\xfe\xd3\xc9\x64\x07\x3a\x0e\xe1\x72\xf3\xda\xa6\x23\x25\xaf"
                "\x02\x1a\x68\xf7\x07\x51\x1a\x81\x40\x50\x6a\x1e\xa6\x83\x18"
                "\xe6\x2d\x40\x63\x5d\xad\x04\x3e\x19\x87\xeb\xc2\x6e\x5b\x5c"
                "\x44\x06\xf7\xbd\xf8\x5a\x73\x38\x8f\xbf\xe5\xc2\x45\xac\x49"
                "\xf4\x77\x0e\xbc\x78\x77\x08\x27\x0a\xa6\xa8\x76\x9f\xef\xe8"
                "\x93\x0f\xd0\xea\x1e\xe6\x4b\x31\x40\x7d\x76\x95\x09\xa1\x29"
                "\xa3\x27\x80\x20\x4d\xd2\xea\x7f\x85\xb3\xea\xcb\x8f\x19\x05"
                "\x8e\x83\x60\x95\x5c\x32\xe7\x4c\x12\x43\x92\xa1\xf4\x46\x60"
                "\x73\x97\x09\xc5\x39\xc3\x81\x03\x04\x00\x00"s;
            auto const thresh0EncodedCondition =
                "\xa2\x2b\x80\x20\xb6\xac\xf4\x08\x3e\x43\x8b\xe4\x35\x6f\x25"
                "\xff\x92\xc2\x95\xe9\xc8\xe1\xba\xb1\x41\xb4\x60\x7b\xa4\x85"
                "\x11\xeb\xa3\x5a\xef\xcc\x81\x03\x06\x10\x03\x82\x02\x03\x58"s;
            auto const thresh0EncodedFingerprint =
                "\x30\x81\x84\x80\x01\x02\xa1\x7f\xa1\x2b\x80\x20\x45\x1f\xe1"
                "\x5f\x16\x29\x9d\x49\x59\x93\xfe\x69\x2d\xb9\x89\xe5\x6a\x52"
                "\x30\xa9\x04\x76\xf7\x73\x92\xa3\xcd\x32\x13\xc0\x73\x3f\x81"
                "\x03\x02\x04\x03\x82\x02\x03\x08\xa3\x27\x80\x20\x4d\xd2\xea"
                "\x7f\x85\xb3\xea\xcb\x8f\x19\x05\x8e\x83\x60\x95\x5c\x32\xe7"
                "\x4c\x12\x43\x92\xa1\xf4\x46\x60\x73\x97\x09\xc5\x39\xc3\x81"
                "\x03\x04\x00\x00\xa4\x27\x80\x20\x79\x92\x39\xab\xa8\xfc\x4f"
                "\xf7\xea\xbf\xbc\x4c\x44\xe6\x9e\x8b\xdf\xed\x99\x33\x24\xe1"
                "\x2e\xd6\x47\x92\xab\xe2\x89\xcf\x1d\x5f\x81\x03\x02\x00\x00"s;
            check(
                &thresh0,
                thresh0Msg,
                thresh0EncodedFulfillment,
                thresh0EncodedCondition,
                thresh0EncodedFingerprint);
        }
    }

    void
    testThresh74()
    {
        testcase("Thresh74");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * thresh0
        // ** Prefix2Cond
        // ** Rsa4Cond
        // ** Prefix5Cond
        // ** Rsa7Cond
        // ** preim1

        auto const preim1Preimage = "aaa"s;
        auto const preim1Msg = ""s;
        auto const thresh0Msg = ""s;
        auto const Prefix2CondConditionFingerprint =
            "\x45\x1f\xe1\x5f\x16\x29\x9d\x49\x59\x93\xfe\x69\x2d\xb9\x89"
            "\xe5\x6a\x52\x30\xa9\x04\x76\xf7\x73\x92\xa3\xcd\x32\x13\xc0"
            "\x73\x3f"s;
        Condition const Prefix2Cond{Type::prefixSha256,
                                    132099,
                                    makeSlice(Prefix2CondConditionFingerprint),
                                    std::bitset<5>{16}};
        auto const Rsa4CondConditionFingerprint =
            "\x4d\xd2\xea\x7f\x85\xb3\xea\xcb\x8f\x19\x05\x8e\x83\x60\x95"
            "\x5c\x32\xe7\x4c\x12\x43\x92\xa1\xf4\x46\x60\x73\x97\x09\xc5"
            "\x39\xc3"s;
        Condition const Rsa4Cond{Type::rsaSha256,
                                 262144,
                                 makeSlice(Rsa4CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const Prefix5CondConditionFingerprint =
            "\x45\x1f\xe1\x5f\x16\x29\x9d\x49\x59\x93\xfe\x69\x2d\xb9\x89"
            "\xe5\x6a\x52\x30\xa9\x04\x76\xf7\x73\x92\xa3\xcd\x32\x13\xc0"
            "\x73\x3f"s;
        Condition const Prefix5Cond{Type::prefixSha256,
                                    132099,
                                    makeSlice(Prefix5CondConditionFingerprint),
                                    std::bitset<5>{16}};
        auto const Rsa7CondConditionFingerprint =
            "\x4d\xd2\xea\x7f\x85\xb3\xea\xcb\x8f\x19\x05\x8e\x83\x60\x95"
            "\x5c\x32\xe7\x4c\x12\x43\x92\xa1\xf4\x46\x60\x73\x97\x09\xc5"
            "\x39\xc3"s;
        Condition const Rsa7Cond{Type::rsaSha256,
                                 262144,
                                 makeSlice(Rsa7CondConditionFingerprint),
                                 std::bitset<5>{0}};

        auto preim1 =
            std::make_unique<PreimageSha256>(makeSlice(preim1Preimage));
        std::vector<std::unique_ptr<Fulfillment>> thresh0Subfulfillments;
        thresh0Subfulfillments.emplace_back(std::move(preim1));
        std::vector<Condition> thresh0Subconditions{
            {Prefix2Cond, Rsa4Cond, Prefix5Cond, Rsa7Cond}};
        ThresholdSha256 const thresh0(
            std::move(thresh0Subfulfillments), std::move(thresh0Subconditions));
        {
            auto const thresh0EncodedFulfillment =
                "\xa2\x81\xb8\xa0\x07\xa0\x05\x80\x03\x61\x61\x61\xa1\x81\xac"
                "\xa1\x2b\x80\x20\x45\x1f\xe1\x5f\x16\x29\x9d\x49\x59\x93\xfe"
                "\x69\x2d\xb9\x89\xe5\x6a\x52\x30\xa9\x04\x76\xf7\x73\x92\xa3"
                "\xcd\x32\x13\xc0\x73\x3f\x81\x03\x02\x04\x03\x82\x02\x03\x08"
                "\xa1\x2b\x80\x20\x45\x1f\xe1\x5f\x16\x29\x9d\x49\x59\x93\xfe"
                "\x69\x2d\xb9\x89\xe5\x6a\x52\x30\xa9\x04\x76\xf7\x73\x92\xa3"
                "\xcd\x32\x13\xc0\x73\x3f\x81\x03\x02\x04\x03\x82\x02\x03\x08"
                "\xa3\x27\x80\x20\x4d\xd2\xea\x7f\x85\xb3\xea\xcb\x8f\x19\x05"
                "\x8e\x83\x60\x95\x5c\x32\xe7\x4c\x12\x43\x92\xa1\xf4\x46\x60"
                "\x73\x97\x09\xc5\x39\xc3\x81\x03\x04\x00\x00\xa3\x27\x80\x20"
                "\x4d\xd2\xea\x7f\x85\xb3\xea\xcb\x8f\x19\x05\x8e\x83\x60\x95"
                "\x5c\x32\xe7\x4c\x12\x43\x92\xa1\xf4\x46\x60\x73\x97\x09\xc5"
                "\x39\xc3\x81\x03\x04\x00\x00"s;
            auto const thresh0EncodedCondition =
                "\xa2\x2b\x80\x20\x9a\x0b\x2c\x63\xdf\x80\x68\x6e\x60\x20\xd0"
                "\xca\x21\xcb\xfe\x66\x8c\xce\xc3\xd1\xaf\x82\x71\x3f\xea\xe9"
                "\xb8\xdd\x4a\x0f\x9b\xb7\x81\x03\x04\x14\x00\x82\x02\x03\xd8"s;
            auto const thresh0EncodedFingerprint =
                "\x30\x81\xd9\x80\x01\x01\xa1\x81\xd3\xa0\x25\x80\x20\x98\x34"
                "\x87\x6d\xcf\xb0\x5c\xb1\x67\xa5\xc2\x49\x53\xeb\xa5\x8c\x4a"
                "\xc8\x9b\x1a\xdf\x57\xf2\x8f\x2f\x9d\x09\xaf\x10\x7e\xe8\xf0"
                "\x81\x01\x03\xa1\x2b\x80\x20\x45\x1f\xe1\x5f\x16\x29\x9d\x49"
                "\x59\x93\xfe\x69\x2d\xb9\x89\xe5\x6a\x52\x30\xa9\x04\x76\xf7"
                "\x73\x92\xa3\xcd\x32\x13\xc0\x73\x3f\x81\x03\x02\x04\x03\x82"
                "\x02\x03\x08\xa1\x2b\x80\x20\x45\x1f\xe1\x5f\x16\x29\x9d\x49"
                "\x59\x93\xfe\x69\x2d\xb9\x89\xe5\x6a\x52\x30\xa9\x04\x76\xf7"
                "\x73\x92\xa3\xcd\x32\x13\xc0\x73\x3f\x81\x03\x02\x04\x03\x82"
                "\x02\x03\x08\xa3\x27\x80\x20\x4d\xd2\xea\x7f\x85\xb3\xea\xcb"
                "\x8f\x19\x05\x8e\x83\x60\x95\x5c\x32\xe7\x4c\x12\x43\x92\xa1"
                "\xf4\x46\x60\x73\x97\x09\xc5\x39\xc3\x81\x03\x04\x00\x00\xa3"
                "\x27\x80\x20\x4d\xd2\xea\x7f\x85\xb3\xea\xcb\x8f\x19\x05\x8e"
                "\x83\x60\x95\x5c\x32\xe7\x4c\x12\x43\x92\xa1\xf4\x46\x60\x73"
                "\x97\x09\xc5\x39\xc3\x81\x03\x04\x00\x00"s;
            check(
                &thresh0,
                thresh0Msg,
                thresh0EncodedFulfillment,
                thresh0EncodedCondition,
                thresh0EncodedFingerprint);
        }
    }

    void
    testThresh75()
    {
        testcase("Thresh75");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * thresh0
        // ** prefix1
        // *** ed2
        // ** ed3
        // ** prefix4
        // *** ed5
        // ** ed6

        auto const ed2Msg = ""s;
        std::array<std::uint8_t, 32> const ed2PublicKey{
            {0xd7, 0x5a, 0x98, 0x01, 0x82, 0xb1, 0x0a, 0xb7, 0xd5, 0x4b, 0xfe,
             0xd3, 0xc9, 0x64, 0x07, 0x3a, 0x0e, 0xe1, 0x72, 0xf3, 0xda, 0xa6,
             0x23, 0x25, 0xaf, 0x02, 0x1a, 0x68, 0xf7, 0x07, 0x51, 0x1a}};
        std::array<std::uint8_t, 64> const ed2Sig{
            {0x50, 0x6a, 0x1e, 0xa6, 0x83, 0x18, 0xe6, 0x2d, 0x40, 0x63, 0x5d,
             0xad, 0x04, 0x3e, 0x19, 0x87, 0xeb, 0xc2, 0x6e, 0x5b, 0x5c, 0x44,
             0x06, 0xf7, 0xbd, 0xf8, 0x5a, 0x73, 0x38, 0x8f, 0xbf, 0xe5, 0xc2,
             0x45, 0xac, 0x49, 0xf4, 0x77, 0x0e, 0xbc, 0x78, 0x77, 0x08, 0x27,
             0x0a, 0xa6, 0xa8, 0x76, 0x9f, 0xef, 0xe8, 0x93, 0x0f, 0xd0, 0xea,
             0x1e, 0xe6, 0x4b, 0x31, 0x40, 0x7d, 0x76, 0x95, 0x09}};
        auto const prefix1Prefix = "aaa"s;
        auto const prefix1Msg = ""s;
        auto const prefix1MaxMsgLength = 0;
        auto const ed3Msg = ""s;
        std::array<std::uint8_t, 32> const ed3PublicKey{
            {0xd7, 0x5a, 0x98, 0x01, 0x82, 0xb1, 0x0a, 0xb7, 0xd5, 0x4b, 0xfe,
             0xd3, 0xc9, 0x64, 0x07, 0x3a, 0x0e, 0xe1, 0x72, 0xf3, 0xda, 0xa6,
             0x23, 0x25, 0xaf, 0x02, 0x1a, 0x68, 0xf7, 0x07, 0x51, 0x1a}};
        std::array<std::uint8_t, 64> const ed3Sig{
            {0xe5, 0x56, 0x43, 0x00, 0xc3, 0x60, 0xac, 0x72, 0x90, 0x86, 0xe2,
             0xcc, 0x80, 0x6e, 0x82, 0x8a, 0x84, 0x87, 0x7f, 0x1e, 0xb8, 0xe5,
             0xd9, 0x74, 0xd8, 0x73, 0xe0, 0x65, 0x22, 0x49, 0x01, 0x55, 0x5f,
             0xb8, 0x82, 0x15, 0x90, 0xa3, 0x3b, 0xac, 0xc6, 0x1e, 0x39, 0x70,
             0x1c, 0xf9, 0xb4, 0x6b, 0xd2, 0x5b, 0xf5, 0xf0, 0x59, 0x5b, 0xbe,
             0x24, 0x65, 0x51, 0x41, 0x43, 0x8e, 0x7a, 0x10, 0x0b}};
        auto const ed5Msg = ""s;
        std::array<std::uint8_t, 32> const ed5PublicKey{
            {0xd7, 0x5a, 0x98, 0x01, 0x82, 0xb1, 0x0a, 0xb7, 0xd5, 0x4b, 0xfe,
             0xd3, 0xc9, 0x64, 0x07, 0x3a, 0x0e, 0xe1, 0x72, 0xf3, 0xda, 0xa6,
             0x23, 0x25, 0xaf, 0x02, 0x1a, 0x68, 0xf7, 0x07, 0x51, 0x1a}};
        std::array<std::uint8_t, 64> const ed5Sig{
            {0x50, 0x6a, 0x1e, 0xa6, 0x83, 0x18, 0xe6, 0x2d, 0x40, 0x63, 0x5d,
             0xad, 0x04, 0x3e, 0x19, 0x87, 0xeb, 0xc2, 0x6e, 0x5b, 0x5c, 0x44,
             0x06, 0xf7, 0xbd, 0xf8, 0x5a, 0x73, 0x38, 0x8f, 0xbf, 0xe5, 0xc2,
             0x45, 0xac, 0x49, 0xf4, 0x77, 0x0e, 0xbc, 0x78, 0x77, 0x08, 0x27,
             0x0a, 0xa6, 0xa8, 0x76, 0x9f, 0xef, 0xe8, 0x93, 0x0f, 0xd0, 0xea,
             0x1e, 0xe6, 0x4b, 0x31, 0x40, 0x7d, 0x76, 0x95, 0x09}};
        auto const prefix4Prefix = "aaa"s;
        auto const prefix4Msg = ""s;
        auto const prefix4MaxMsgLength = 0;
        auto const ed6Msg = ""s;
        std::array<std::uint8_t, 32> const ed6PublicKey{
            {0xd7, 0x5a, 0x98, 0x01, 0x82, 0xb1, 0x0a, 0xb7, 0xd5, 0x4b, 0xfe,
             0xd3, 0xc9, 0x64, 0x07, 0x3a, 0x0e, 0xe1, 0x72, 0xf3, 0xda, 0xa6,
             0x23, 0x25, 0xaf, 0x02, 0x1a, 0x68, 0xf7, 0x07, 0x51, 0x1a}};
        std::array<std::uint8_t, 64> const ed6Sig{
            {0xe5, 0x56, 0x43, 0x00, 0xc3, 0x60, 0xac, 0x72, 0x90, 0x86, 0xe2,
             0xcc, 0x80, 0x6e, 0x82, 0x8a, 0x84, 0x87, 0x7f, 0x1e, 0xb8, 0xe5,
             0xd9, 0x74, 0xd8, 0x73, 0xe0, 0x65, 0x22, 0x49, 0x01, 0x55, 0x5f,
             0xb8, 0x82, 0x15, 0x90, 0xa3, 0x3b, 0xac, 0xc6, 0x1e, 0x39, 0x70,
             0x1c, 0xf9, 0xb4, 0x6b, 0xd2, 0x5b, 0xf5, 0xf0, 0x59, 0x5b, 0xbe,
             0x24, 0x65, 0x51, 0x41, 0x43, 0x8e, 0x7a, 0x10, 0x0b}};
        auto const thresh0Msg = ""s;

        auto ed2 = std::make_unique<Ed25519>(ed2PublicKey, ed2Sig);
        auto prefix1 = std::make_unique<PrefixSha256>(
            makeSlice(prefix1Prefix), prefix1MaxMsgLength, std::move(ed2));
        auto ed3 = std::make_unique<Ed25519>(ed3PublicKey, ed3Sig);
        auto ed5 = std::make_unique<Ed25519>(ed5PublicKey, ed5Sig);
        auto prefix4 = std::make_unique<PrefixSha256>(
            makeSlice(prefix4Prefix), prefix4MaxMsgLength, std::move(ed5));
        auto ed6 = std::make_unique<Ed25519>(ed6PublicKey, ed6Sig);
        std::vector<std::unique_ptr<Fulfillment>> thresh0Subfulfillments;
        thresh0Subfulfillments.emplace_back(std::move(prefix1));
        thresh0Subfulfillments.emplace_back(std::move(ed3));
        thresh0Subfulfillments.emplace_back(std::move(prefix4));
        thresh0Subfulfillments.emplace_back(std::move(ed6));
        std::vector<Condition> thresh0Subconditions{};
        ThresholdSha256 const thresh0(
            std::move(thresh0Subfulfillments), std::move(thresh0Subconditions));
        {
            auto const thresh0EncodedFulfillment =
                "\xa2\x82\x01\xb6\xa0\x82\x01\xb0\xa1\x70\x80\x03\x61\x61\x61"
                "\x81\x01\x00\xa2\x66\xa4\x64\x80\x20\xd7\x5a\x98\x01\x82\xb1"
                "\x0a\xb7\xd5\x4b\xfe\xd3\xc9\x64\x07\x3a\x0e\xe1\x72\xf3\xda"
                "\xa6\x23\x25\xaf\x02\x1a\x68\xf7\x07\x51\x1a\x81\x40\x50\x6a"
                "\x1e\xa6\x83\x18\xe6\x2d\x40\x63\x5d\xad\x04\x3e\x19\x87\xeb"
                "\xc2\x6e\x5b\x5c\x44\x06\xf7\xbd\xf8\x5a\x73\x38\x8f\xbf\xe5"
                "\xc2\x45\xac\x49\xf4\x77\x0e\xbc\x78\x77\x08\x27\x0a\xa6\xa8"
                "\x76\x9f\xef\xe8\x93\x0f\xd0\xea\x1e\xe6\x4b\x31\x40\x7d\x76"
                "\x95\x09\xa1\x70\x80\x03\x61\x61\x61\x81\x01\x00\xa2\x66\xa4"
                "\x64\x80\x20\xd7\x5a\x98\x01\x82\xb1\x0a\xb7\xd5\x4b\xfe\xd3"
                "\xc9\x64\x07\x3a\x0e\xe1\x72\xf3\xda\xa6\x23\x25\xaf\x02\x1a"
                "\x68\xf7\x07\x51\x1a\x81\x40\x50\x6a\x1e\xa6\x83\x18\xe6\x2d"
                "\x40\x63\x5d\xad\x04\x3e\x19\x87\xeb\xc2\x6e\x5b\x5c\x44\x06"
                "\xf7\xbd\xf8\x5a\x73\x38\x8f\xbf\xe5\xc2\x45\xac\x49\xf4\x77"
                "\x0e\xbc\x78\x77\x08\x27\x0a\xa6\xa8\x76\x9f\xef\xe8\x93\x0f"
                "\xd0\xea\x1e\xe6\x4b\x31\x40\x7d\x76\x95\x09\xa4\x64\x80\x20"
                "\xd7\x5a\x98\x01\x82\xb1\x0a\xb7\xd5\x4b\xfe\xd3\xc9\x64\x07"
                "\x3a\x0e\xe1\x72\xf3\xda\xa6\x23\x25\xaf\x02\x1a\x68\xf7\x07"
                "\x51\x1a\x81\x40\xe5\x56\x43\x00\xc3\x60\xac\x72\x90\x86\xe2"
                "\xcc\x80\x6e\x82\x8a\x84\x87\x7f\x1e\xb8\xe5\xd9\x74\xd8\x73"
                "\xe0\x65\x22\x49\x01\x55\x5f\xb8\x82\x15\x90\xa3\x3b\xac\xc6"
                "\x1e\x39\x70\x1c\xf9\xb4\x6b\xd2\x5b\xf5\xf0\x59\x5b\xbe\x24"
                "\x65\x51\x41\x43\x8e\x7a\x10\x0b\xa4\x64\x80\x20\xd7\x5a\x98"
                "\x01\x82\xb1\x0a\xb7\xd5\x4b\xfe\xd3\xc9\x64\x07\x3a\x0e\xe1"
                "\x72\xf3\xda\xa6\x23\x25\xaf\x02\x1a\x68\xf7\x07\x51\x1a\x81"
                "\x40\xe5\x56\x43\x00\xc3\x60\xac\x72\x90\x86\xe2\xcc\x80\x6e"
                "\x82\x8a\x84\x87\x7f\x1e\xb8\xe5\xd9\x74\xd8\x73\xe0\x65\x22"
                "\x49\x01\x55\x5f\xb8\x82\x15\x90\xa3\x3b\xac\xc6\x1e\x39\x70"
                "\x1c\xf9\xb4\x6b\xd2\x5b\xf5\xf0\x59\x5b\xbe\x24\x65\x51\x41"
                "\x43\x8e\x7a\x10\x0b\xa1\x00"s;
            auto const thresh0EncodedCondition =
                "\xa2\x2b\x80\x20\x8e\x43\x3e\xf5\xd3\xea\xa0\x0a\x2b\x34\xa0"
                "\x5c\xa7\xc2\x2d\xd3\x92\x97\x3a\x19\xf1\xa2\x43\x26\x8c\xb5"
                "\x31\x11\xbd\xf1\xc8\x44\x81\x03\x08\x18\x06\x82\x02\x03\x48"s;
            auto const thresh0EncodedFingerprint =
                "\x30\x81\xb2\x80\x01\x04\xa1\x81\xac\xa1\x2b\x80\x20\x45\x1f"
                "\xe1\x5f\x16\x29\x9d\x49\x59\x93\xfe\x69\x2d\xb9\x89\xe5\x6a"
                "\x52\x30\xa9\x04\x76\xf7\x73\x92\xa3\xcd\x32\x13\xc0\x73\x3f"
                "\x81\x03\x02\x04\x03\x82\x02\x03\x08\xa1\x2b\x80\x20\x45\x1f"
                "\xe1\x5f\x16\x29\x9d\x49\x59\x93\xfe\x69\x2d\xb9\x89\xe5\x6a"
                "\x52\x30\xa9\x04\x76\xf7\x73\x92\xa3\xcd\x32\x13\xc0\x73\x3f"
                "\x81\x03\x02\x04\x03\x82\x02\x03\x08\xa4\x27\x80\x20\x79\x92"
                "\x39\xab\xa8\xfc\x4f\xf7\xea\xbf\xbc\x4c\x44\xe6\x9e\x8b\xdf"
                "\xed\x99\x33\x24\xe1\x2e\xd6\x47\x92\xab\xe2\x89\xcf\x1d\x5f"
                "\x81\x03\x02\x00\x00\xa4\x27\x80\x20\x79\x92\x39\xab\xa8\xfc"
                "\x4f\xf7\xea\xbf\xbc\x4c\x44\xe6\x9e\x8b\xdf\xed\x99\x33\x24"
                "\xe1\x2e\xd6\x47\x92\xab\xe2\x89\xcf\x1d\x5f\x81\x03\x02\x00"
                "\x00"s;
            check(
                &thresh0,
                thresh0Msg,
                thresh0EncodedFulfillment,
                thresh0EncodedCondition,
                thresh0EncodedFingerprint);
        }
    }

    void
    testThresh76()
    {
        testcase("Thresh76");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * thresh0
        // ** thresh1
        // *** Rsa5Cond
        // *** prefix2
        // **** ed3
        // *** ed4
        // ** preim6

        auto const ed3Msg = ""s;
        std::array<std::uint8_t, 32> const ed3PublicKey{
            {0xd7, 0x5a, 0x98, 0x01, 0x82, 0xb1, 0x0a, 0xb7, 0xd5, 0x4b, 0xfe,
             0xd3, 0xc9, 0x64, 0x07, 0x3a, 0x0e, 0xe1, 0x72, 0xf3, 0xda, 0xa6,
             0x23, 0x25, 0xaf, 0x02, 0x1a, 0x68, 0xf7, 0x07, 0x51, 0x1a}};
        std::array<std::uint8_t, 64> const ed3Sig{
            {0x50, 0x6a, 0x1e, 0xa6, 0x83, 0x18, 0xe6, 0x2d, 0x40, 0x63, 0x5d,
             0xad, 0x04, 0x3e, 0x19, 0x87, 0xeb, 0xc2, 0x6e, 0x5b, 0x5c, 0x44,
             0x06, 0xf7, 0xbd, 0xf8, 0x5a, 0x73, 0x38, 0x8f, 0xbf, 0xe5, 0xc2,
             0x45, 0xac, 0x49, 0xf4, 0x77, 0x0e, 0xbc, 0x78, 0x77, 0x08, 0x27,
             0x0a, 0xa6, 0xa8, 0x76, 0x9f, 0xef, 0xe8, 0x93, 0x0f, 0xd0, 0xea,
             0x1e, 0xe6, 0x4b, 0x31, 0x40, 0x7d, 0x76, 0x95, 0x09}};
        auto const prefix2Prefix = "aaa"s;
        auto const prefix2Msg = ""s;
        auto const prefix2MaxMsgLength = 0;
        auto const ed4Msg = ""s;
        std::array<std::uint8_t, 32> const ed4PublicKey{
            {0xd7, 0x5a, 0x98, 0x01, 0x82, 0xb1, 0x0a, 0xb7, 0xd5, 0x4b, 0xfe,
             0xd3, 0xc9, 0x64, 0x07, 0x3a, 0x0e, 0xe1, 0x72, 0xf3, 0xda, 0xa6,
             0x23, 0x25, 0xaf, 0x02, 0x1a, 0x68, 0xf7, 0x07, 0x51, 0x1a}};
        std::array<std::uint8_t, 64> const ed4Sig{
            {0xe5, 0x56, 0x43, 0x00, 0xc3, 0x60, 0xac, 0x72, 0x90, 0x86, 0xe2,
             0xcc, 0x80, 0x6e, 0x82, 0x8a, 0x84, 0x87, 0x7f, 0x1e, 0xb8, 0xe5,
             0xd9, 0x74, 0xd8, 0x73, 0xe0, 0x65, 0x22, 0x49, 0x01, 0x55, 0x5f,
             0xb8, 0x82, 0x15, 0x90, 0xa3, 0x3b, 0xac, 0xc6, 0x1e, 0x39, 0x70,
             0x1c, 0xf9, 0xb4, 0x6b, 0xd2, 0x5b, 0xf5, 0xf0, 0x59, 0x5b, 0xbe,
             0x24, 0x65, 0x51, 0x41, 0x43, 0x8e, 0x7a, 0x10, 0x0b}};
        auto const thresh1Msg = ""s;
        auto const Rsa5CondConditionFingerprint =
            "\x4d\xd2\xea\x7f\x85\xb3\xea\xcb\x8f\x19\x05\x8e\x83\x60\x95"
            "\x5c\x32\xe7\x4c\x12\x43\x92\xa1\xf4\x46\x60\x73\x97\x09\xc5"
            "\x39\xc3"s;
        Condition const Rsa5Cond{Type::rsaSha256,
                                 262144,
                                 makeSlice(Rsa5CondConditionFingerprint),
                                 std::bitset<5>{0}};
        auto const preim6Preimage = "aaa"s;
        auto const preim6Msg = ""s;
        auto const thresh0Msg = ""s;

        auto ed3 = std::make_unique<Ed25519>(ed3PublicKey, ed3Sig);
        auto prefix2 = std::make_unique<PrefixSha256>(
            makeSlice(prefix2Prefix), prefix2MaxMsgLength, std::move(ed3));
        auto ed4 = std::make_unique<Ed25519>(ed4PublicKey, ed4Sig);
        std::vector<std::unique_ptr<Fulfillment>> thresh1Subfulfillments;
        thresh1Subfulfillments.emplace_back(std::move(prefix2));
        thresh1Subfulfillments.emplace_back(std::move(ed4));
        std::vector<Condition> thresh1Subconditions{{Rsa5Cond}};
        auto thresh1 = std::make_unique<ThresholdSha256>(
            std::move(thresh1Subfulfillments), std::move(thresh1Subconditions));
        auto preim6 =
            std::make_unique<PreimageSha256>(makeSlice(preim6Preimage));
        std::vector<std::unique_ptr<Fulfillment>> thresh0Subfulfillments;
        thresh0Subfulfillments.emplace_back(std::move(thresh1));
        thresh0Subfulfillments.emplace_back(std::move(preim6));
        std::vector<Condition> thresh0Subconditions{};
        ThresholdSha256 const thresh0(
            std::move(thresh0Subfulfillments), std::move(thresh0Subconditions));
        {
            auto const thresh0EncodedFulfillment =
                "\xa2\x82\x01\x17\xa0\x82\x01\x11\xa0\x05\x80\x03\x61\x61\x61"
                "\xa2\x82\x01\x06\xa0\x81\xd8\xa1\x70\x80\x03\x61\x61\x61\x81"
                "\x01\x00\xa2\x66\xa4\x64\x80\x20\xd7\x5a\x98\x01\x82\xb1\x0a"
                "\xb7\xd5\x4b\xfe\xd3\xc9\x64\x07\x3a\x0e\xe1\x72\xf3\xda\xa6"
                "\x23\x25\xaf\x02\x1a\x68\xf7\x07\x51\x1a\x81\x40\x50\x6a\x1e"
                "\xa6\x83\x18\xe6\x2d\x40\x63\x5d\xad\x04\x3e\x19\x87\xeb\xc2"
                "\x6e\x5b\x5c\x44\x06\xf7\xbd\xf8\x5a\x73\x38\x8f\xbf\xe5\xc2"
                "\x45\xac\x49\xf4\x77\x0e\xbc\x78\x77\x08\x27\x0a\xa6\xa8\x76"
                "\x9f\xef\xe8\x93\x0f\xd0\xea\x1e\xe6\x4b\x31\x40\x7d\x76\x95"
                "\x09\xa4\x64\x80\x20\xd7\x5a\x98\x01\x82\xb1\x0a\xb7\xd5\x4b"
                "\xfe\xd3\xc9\x64\x07\x3a\x0e\xe1\x72\xf3\xda\xa6\x23\x25\xaf"
                "\x02\x1a\x68\xf7\x07\x51\x1a\x81\x40\xe5\x56\x43\x00\xc3\x60"
                "\xac\x72\x90\x86\xe2\xcc\x80\x6e\x82\x8a\x84\x87\x7f\x1e\xb8"
                "\xe5\xd9\x74\xd8\x73\xe0\x65\x22\x49\x01\x55\x5f\xb8\x82\x15"
                "\x90\xa3\x3b\xac\xc6\x1e\x39\x70\x1c\xf9\xb4\x6b\xd2\x5b\xf5"
                "\xf0\x59\x5b\xbe\x24\x65\x51\x41\x43\x8e\x7a\x10\x0b\xa1\x29"
                "\xa3\x27\x80\x20\x4d\xd2\xea\x7f\x85\xb3\xea\xcb\x8f\x19\x05"
                "\x8e\x83\x60\x95\x5c\x32\xe7\x4c\x12\x43\x92\xa1\xf4\x46\x60"
                "\x73\x97\x09\xc5\x39\xc3\x81\x03\x04\x00\x00\xa1\x00"s;
            auto const thresh0EncodedCondition =
                "\xa2\x2b\x80\x20\x0c\x99\x63\x0a\x20\x1a\x99\xb0\x74\x8d\x2b"
                "\xad\xb2\x05\xe5\xca\x93\x96\x92\xc6\x87\xd1\xc4\xa6\x97\xe3"
                "\x9b\xa8\xba\x1e\xbe\x71\x81\x03\x06\x18\x06\x82\x02\x03\xd8"s;
            auto const thresh0EncodedFingerprint =
                "\x30\x59\x80\x01\x02\xa1\x54\xa0\x25\x80\x20\x98\x34\x87\x6d"
                "\xcf\xb0\x5c\xb1\x67\xa5\xc2\x49\x53\xeb\xa5\x8c\x4a\xc8\x9b"
                "\x1a\xdf\x57\xf2\x8f\x2f\x9d\x09\xaf\x10\x7e\xe8\xf0\x81\x01"
                "\x03\xa2\x2b\x80\x20\xb6\xac\xf4\x08\x3e\x43\x8b\xe4\x35\x6f"
                "\x25\xff\x92\xc2\x95\xe9\xc8\xe1\xba\xb1\x41\xb4\x60\x7b\xa4"
                "\x85\x11\xeb\xa3\x5a\xef\xcc\x81\x03\x06\x10\x03\x82\x02\x03"
                "\x58"s;
            check(
                &thresh0,
                thresh0Msg,
                thresh0EncodedFulfillment,
                thresh0EncodedCondition,
                thresh0EncodedFingerprint);
        }
    }

    void
    testThresh77()
    {
        testcase("Thresh77");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * thresh0
        // ** Preim2Cond
        // ** preim1

        auto const preim1Preimage = "aaa"s;
        auto const preim1Msg = ""s;
        auto const thresh0Msg = ""s;
        auto const Preim2CondConditionFingerprint =
            "\x98\x34\x87\x6d\xcf\xb0\x5c\xb1\x67\xa5\xc2\x49\x53\xeb\xa5"
            "\x8c\x4a\xc8\x9b\x1a\xdf\x57\xf2\x8f\x2f\x9d\x09\xaf\x10\x7e"
            "\xe8\xf0"s;
        Condition const Preim2Cond{Type::preimageSha256,
                                   3,
                                   makeSlice(Preim2CondConditionFingerprint),
                                   std::bitset<5>{0}};

        auto preim1 =
            std::make_unique<PreimageSha256>(makeSlice(preim1Preimage));
        std::vector<std::unique_ptr<Fulfillment>> thresh0Subfulfillments;
        thresh0Subfulfillments.emplace_back(std::move(preim1));
        std::vector<Condition> thresh0Subconditions{{Preim2Cond}};
        ThresholdSha256 const thresh0(
            std::move(thresh0Subfulfillments), std::move(thresh0Subconditions));
        {
            auto const thresh0EncodedFulfillment =
                "\xa2\x32\xa0\x07\xa0\x05\x80\x03\x61\x61\x61\xa1\x27\xa0\x25"
                "\x80\x20\x98\x34\x87\x6d\xcf\xb0\x5c\xb1\x67\xa5\xc2\x49\x53"
                "\xeb\xa5\x8c\x4a\xc8\x9b\x1a\xdf\x57\xf2\x8f\x2f\x9d\x09\xaf"
                "\x10\x7e\xe8\xf0\x81\x01\x03"s;
            auto const thresh0EncodedCondition =
                "\xa2\x2a\x80\x20\xe4\xfd\xb4\x65\x2c\x6f\x17\xa3\x8b\x2a\xbe"
                "\x9a\xa0\x06\x40\xb1\xe1\x84\xfe\x7a\x8d\x0c\x97\x1b\x5d\x24"
                "\xf7\xed\xa6\xfc\x68\xbf\x81\x02\x08\x03\x82\x02\x07\x80"s;
            auto const thresh0EncodedFingerprint =
                "\x30\x53\x80\x01\x01\xa1\x4e\xa0\x25\x80\x20\x98\x34\x87\x6d"
                "\xcf\xb0\x5c\xb1\x67\xa5\xc2\x49\x53\xeb\xa5\x8c\x4a\xc8\x9b"
                "\x1a\xdf\x57\xf2\x8f\x2f\x9d\x09\xaf\x10\x7e\xe8\xf0\x81\x01"
                "\x03\xa0\x25\x80\x20\x98\x34\x87\x6d\xcf\xb0\x5c\xb1\x67\xa5"
                "\xc2\x49\x53\xeb\xa5\x8c\x4a\xc8\x9b\x1a\xdf\x57\xf2\x8f\x2f"
                "\x9d\x09\xaf\x10\x7e\xe8\xf0\x81\x01\x03"s;
            check(
                &thresh0,
                thresh0Msg,
                thresh0EncodedFulfillment,
                thresh0EncodedCondition,
                thresh0EncodedFingerprint);
        }
    }

    void
    testRsa2()
    {
        testcase("Rsa2");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * rsa0

        auto const rsa0Msg = "\x61\x61\x61"s;
        std::array<std::uint8_t, 256> const rsa0PublicKey{
            {0xe1, 0xef, 0x8b, 0x24, 0xd6, 0xf7, 0x6b, 0x09, 0xc8, 0x1e, 0xd7,
             0x75, 0x2a, 0xa2, 0x62, 0xf0, 0x44, 0xf0, 0x4a, 0x87, 0x4d, 0x43,
             0x80, 0x9d, 0x31, 0xce, 0xa6, 0x12, 0xf9, 0x9b, 0x0c, 0x97, 0xa8,
             0xb4, 0x37, 0x41, 0x53, 0xe3, 0xee, 0xf3, 0xd6, 0x66, 0x16, 0x84,
             0x3e, 0x0e, 0x41, 0xc2, 0x93, 0x26, 0x4b, 0x71, 0xb6, 0x17, 0x3d,
             0xb1, 0xcf, 0x0d, 0x6c, 0xd5, 0x58, 0xc5, 0x86, 0x57, 0x70, 0x6f,
             0xcf, 0x09, 0x7f, 0x70, 0x4c, 0x48, 0x3e, 0x59, 0xcb, 0xfd, 0xfd,
             0x5b, 0x3e, 0xe7, 0xbc, 0x80, 0xd7, 0x40, 0xc5, 0xe0, 0xf0, 0x47,
             0xf3, 0xe8, 0x5f, 0xc0, 0xd7, 0x58, 0x15, 0x77, 0x6a, 0x6f, 0x3f,
             0x23, 0xc5, 0xdc, 0x5e, 0x79, 0x71, 0x39, 0xa6, 0x88, 0x2e, 0x38,
             0x33, 0x6a, 0x4a, 0x5f, 0xb3, 0x61, 0x37, 0x62, 0x0f, 0xf3, 0x66,
             0x3d, 0xba, 0xe3, 0x28, 0x47, 0x28, 0x01, 0x86, 0x2f, 0x72, 0xf2,
             0xf8, 0x7b, 0x20, 0x2b, 0x9c, 0x89, 0xad, 0xd7, 0xcd, 0x5b, 0x0a,
             0x07, 0x6f, 0x7c, 0x53, 0xe3, 0x50, 0x39, 0xf6, 0x7e, 0xd1, 0x7e,
             0xc8, 0x15, 0xe5, 0xb4, 0x30, 0x5c, 0xc6, 0x31, 0x97, 0x06, 0x8d,
             0x5e, 0x6e, 0x57, 0x9b, 0xa6, 0xde, 0x5f, 0x4e, 0x3e, 0x57, 0xdf,
             0x5e, 0x4e, 0x07, 0x2f, 0xf2, 0xce, 0x4c, 0x66, 0xeb, 0x45, 0x23,
             0x39, 0x73, 0x87, 0x52, 0x75, 0x96, 0x39, 0xf0, 0x25, 0x7b, 0xf5,
             0x7d, 0xbd, 0x5c, 0x44, 0x3f, 0xb5, 0x15, 0x8c, 0xce, 0x0a, 0x3d,
             0x36, 0xad, 0xc7, 0xba, 0x01, 0xf3, 0x3a, 0x0b, 0xb6, 0xdb, 0xb2,
             0xbf, 0x98, 0x9d, 0x60, 0x71, 0x12, 0xf2, 0x34, 0x4d, 0x99, 0x3e,
             0x77, 0xe5, 0x63, 0xc1, 0xd3, 0x61, 0xde, 0xdf, 0x57, 0xda, 0x96,
             0xef, 0x2c, 0xfc, 0x68, 0x5f, 0x00, 0x2b, 0x63, 0x82, 0x46, 0xa5,
             0xb3, 0x09, 0xb9}};
        std::array<std::uint8_t, 256> const rsa0Sig{
            {0x48, 0xe8, 0x94, 0x5e, 0xfe, 0x00, 0x75, 0x56, 0xd5, 0xbf, 0x4d,
             0x5f, 0x24, 0x9e, 0x48, 0x08, 0xf7, 0x30, 0x7e, 0x29, 0x51, 0x1d,
             0x32, 0x62, 0xda, 0xef, 0x61, 0xd8, 0x80, 0x98, 0xf9, 0xaa, 0x4a,
             0x8b, 0xc0, 0x62, 0x3a, 0x8c, 0x97, 0x57, 0x38, 0xf6, 0x5d, 0x6b,
             0xf4, 0x59, 0xd5, 0x43, 0xf2, 0x89, 0xd7, 0x3c, 0xbc, 0x7a, 0xf4,
             0xea, 0x3a, 0x33, 0xfb, 0xf3, 0xec, 0x44, 0x40, 0x44, 0x79, 0x11,
             0xd7, 0x22, 0x94, 0x09, 0x1e, 0x56, 0x18, 0x33, 0x62, 0x8e, 0x49,
             0xa7, 0x72, 0xed, 0x60, 0x8d, 0xe6, 0xc4, 0x45, 0x95, 0xa9, 0x1e,
             0x3e, 0x17, 0xd6, 0xcf, 0x5e, 0xc3, 0xb2, 0x52, 0x8d, 0x63, 0xd2,
             0xad, 0xd6, 0x46, 0x39, 0x89, 0xb1, 0x2e, 0xec, 0x57, 0x7d, 0xf6,
             0x47, 0x09, 0x60, 0xdf, 0x68, 0x32, 0xa9, 0xd8, 0x4c, 0x36, 0x0d,
             0x1c, 0x21, 0x7a, 0xd6, 0x4c, 0x86, 0x25, 0xbd, 0xb5, 0x94, 0xfb,
             0x0a, 0xda, 0x08, 0x6c, 0xde, 0xcb, 0xbd, 0xe5, 0x80, 0xd4, 0x24,
             0xbf, 0x97, 0x46, 0xd2, 0xf0, 0xc3, 0x12, 0x82, 0x6d, 0xbb, 0xb0,
             0x0a, 0xd6, 0x8b, 0x52, 0xc4, 0xcb, 0x7d, 0x47, 0x15, 0x6b, 0xa3,
             0x5e, 0x3a, 0x98, 0x1c, 0x97, 0x38, 0x63, 0x79, 0x2c, 0xc8, 0x0d,
             0x04, 0xa1, 0x80, 0x21, 0x0a, 0x52, 0x41, 0x58, 0x65, 0xb6, 0x4b,
             0x3a, 0x61, 0x77, 0x4b, 0x1d, 0x39, 0x75, 0xd7, 0x8a, 0x98, 0xb0,
             0x82, 0x1e, 0xe5, 0x5c, 0xa0, 0xf8, 0x63, 0x05, 0xd4, 0x25, 0x29,
             0xe1, 0x0e, 0xb0, 0x15, 0xce, 0xfd, 0x40, 0x2f, 0xb5, 0x9b, 0x2a,
             0xbb, 0x8d, 0xee, 0xe5, 0x2a, 0x6f, 0x24, 0x47, 0xd2, 0x28, 0x46,
             0x03, 0xd2, 0x19, 0xcd, 0x4e, 0x8c, 0xf9, 0xcf, 0xfd, 0xd5, 0x49,
             0x88, 0x89, 0xc3, 0x78, 0x0b, 0x59, 0xdd, 0x6a, 0x57, 0xef, 0x7d,
             0x73, 0x26, 0x20}};

        RsaSha256 const rsa0(makeSlice(rsa0PublicKey), makeSlice(rsa0Sig));
        {
            auto const rsa0EncodedFulfillment =
                "\xa3\x82\x02\x08\x80\x82\x01\x00\xe1\xef\x8b\x24\xd6\xf7\x6b"
                "\x09\xc8\x1e\xd7\x75\x2a\xa2\x62\xf0\x44\xf0\x4a\x87\x4d\x43"
                "\x80\x9d\x31\xce\xa6\x12\xf9\x9b\x0c\x97\xa8\xb4\x37\x41\x53"
                "\xe3\xee\xf3\xd6\x66\x16\x84\x3e\x0e\x41\xc2\x93\x26\x4b\x71"
                "\xb6\x17\x3d\xb1\xcf\x0d\x6c\xd5\x58\xc5\x86\x57\x70\x6f\xcf"
                "\x09\x7f\x70\x4c\x48\x3e\x59\xcb\xfd\xfd\x5b\x3e\xe7\xbc\x80"
                "\xd7\x40\xc5\xe0\xf0\x47\xf3\xe8\x5f\xc0\xd7\x58\x15\x77\x6a"
                "\x6f\x3f\x23\xc5\xdc\x5e\x79\x71\x39\xa6\x88\x2e\x38\x33\x6a"
                "\x4a\x5f\xb3\x61\x37\x62\x0f\xf3\x66\x3d\xba\xe3\x28\x47\x28"
                "\x01\x86\x2f\x72\xf2\xf8\x7b\x20\x2b\x9c\x89\xad\xd7\xcd\x5b"
                "\x0a\x07\x6f\x7c\x53\xe3\x50\x39\xf6\x7e\xd1\x7e\xc8\x15\xe5"
                "\xb4\x30\x5c\xc6\x31\x97\x06\x8d\x5e\x6e\x57\x9b\xa6\xde\x5f"
                "\x4e\x3e\x57\xdf\x5e\x4e\x07\x2f\xf2\xce\x4c\x66\xeb\x45\x23"
                "\x39\x73\x87\x52\x75\x96\x39\xf0\x25\x7b\xf5\x7d\xbd\x5c\x44"
                "\x3f\xb5\x15\x8c\xce\x0a\x3d\x36\xad\xc7\xba\x01\xf3\x3a\x0b"
                "\xb6\xdb\xb2\xbf\x98\x9d\x60\x71\x12\xf2\x34\x4d\x99\x3e\x77"
                "\xe5\x63\xc1\xd3\x61\xde\xdf\x57\xda\x96\xef\x2c\xfc\x68\x5f"
                "\x00\x2b\x63\x82\x46\xa5\xb3\x09\xb9\x81\x82\x01\x00\x48\xe8"
                "\x94\x5e\xfe\x00\x75\x56\xd5\xbf\x4d\x5f\x24\x9e\x48\x08\xf7"
                "\x30\x7e\x29\x51\x1d\x32\x62\xda\xef\x61\xd8\x80\x98\xf9\xaa"
                "\x4a\x8b\xc0\x62\x3a\x8c\x97\x57\x38\xf6\x5d\x6b\xf4\x59\xd5"
                "\x43\xf2\x89\xd7\x3c\xbc\x7a\xf4\xea\x3a\x33\xfb\xf3\xec\x44"
                "\x40\x44\x79\x11\xd7\x22\x94\x09\x1e\x56\x18\x33\x62\x8e\x49"
                "\xa7\x72\xed\x60\x8d\xe6\xc4\x45\x95\xa9\x1e\x3e\x17\xd6\xcf"
                "\x5e\xc3\xb2\x52\x8d\x63\xd2\xad\xd6\x46\x39\x89\xb1\x2e\xec"
                "\x57\x7d\xf6\x47\x09\x60\xdf\x68\x32\xa9\xd8\x4c\x36\x0d\x1c"
                "\x21\x7a\xd6\x4c\x86\x25\xbd\xb5\x94\xfb\x0a\xda\x08\x6c\xde"
                "\xcb\xbd\xe5\x80\xd4\x24\xbf\x97\x46\xd2\xf0\xc3\x12\x82\x6d"
                "\xbb\xb0\x0a\xd6\x8b\x52\xc4\xcb\x7d\x47\x15\x6b\xa3\x5e\x3a"
                "\x98\x1c\x97\x38\x63\x79\x2c\xc8\x0d\x04\xa1\x80\x21\x0a\x52"
                "\x41\x58\x65\xb6\x4b\x3a\x61\x77\x4b\x1d\x39\x75\xd7\x8a\x98"
                "\xb0\x82\x1e\xe5\x5c\xa0\xf8\x63\x05\xd4\x25\x29\xe1\x0e\xb0"
                "\x15\xce\xfd\x40\x2f\xb5\x9b\x2a\xbb\x8d\xee\xe5\x2a\x6f\x24"
                "\x47\xd2\x28\x46\x03\xd2\x19\xcd\x4e\x8c\xf9\xcf\xfd\xd5\x49"
                "\x88\x89\xc3\x78\x0b\x59\xdd\x6a\x57\xef\x7d\x73\x26\x20"s;
            auto const rsa0EncodedCondition =
                "\xa3\x27\x80\x20\xb3\x1f\xa8\x20\x6e\x4e\xa7\xe5\x15\x33\x7b"
                "\x3b\x33\x08\x2b\x87\x76\x51\x80\x10\x85\xed\x84\xfb\x4d\xae"
                "\xb2\x47\xbf\x69\x8d\x7f\x81\x03\x01\x00\x00"s;
            auto const rsa0EncodedFingerprint =
                "\x30\x82\x01\x04\x80\x82\x01\x00\xe1\xef\x8b\x24\xd6\xf7\x6b"
                "\x09\xc8\x1e\xd7\x75\x2a\xa2\x62\xf0\x44\xf0\x4a\x87\x4d\x43"
                "\x80\x9d\x31\xce\xa6\x12\xf9\x9b\x0c\x97\xa8\xb4\x37\x41\x53"
                "\xe3\xee\xf3\xd6\x66\x16\x84\x3e\x0e\x41\xc2\x93\x26\x4b\x71"
                "\xb6\x17\x3d\xb1\xcf\x0d\x6c\xd5\x58\xc5\x86\x57\x70\x6f\xcf"
                "\x09\x7f\x70\x4c\x48\x3e\x59\xcb\xfd\xfd\x5b\x3e\xe7\xbc\x80"
                "\xd7\x40\xc5\xe0\xf0\x47\xf3\xe8\x5f\xc0\xd7\x58\x15\x77\x6a"
                "\x6f\x3f\x23\xc5\xdc\x5e\x79\x71\x39\xa6\x88\x2e\x38\x33\x6a"
                "\x4a\x5f\xb3\x61\x37\x62\x0f\xf3\x66\x3d\xba\xe3\x28\x47\x28"
                "\x01\x86\x2f\x72\xf2\xf8\x7b\x20\x2b\x9c\x89\xad\xd7\xcd\x5b"
                "\x0a\x07\x6f\x7c\x53\xe3\x50\x39\xf6\x7e\xd1\x7e\xc8\x15\xe5"
                "\xb4\x30\x5c\xc6\x31\x97\x06\x8d\x5e\x6e\x57\x9b\xa6\xde\x5f"
                "\x4e\x3e\x57\xdf\x5e\x4e\x07\x2f\xf2\xce\x4c\x66\xeb\x45\x23"
                "\x39\x73\x87\x52\x75\x96\x39\xf0\x25\x7b\xf5\x7d\xbd\x5c\x44"
                "\x3f\xb5\x15\x8c\xce\x0a\x3d\x36\xad\xc7\xba\x01\xf3\x3a\x0b"
                "\xb6\xdb\xb2\xbf\x98\x9d\x60\x71\x12\xf2\x34\x4d\x99\x3e\x77"
                "\xe5\x63\xc1\xd3\x61\xde\xdf\x57\xda\x96\xef\x2c\xfc\x68\x5f"
                "\x00\x2b\x63\x82\x46\xa5\xb3\x09\xb9"s;
            check(
                &rsa0,
                rsa0Msg,
                rsa0EncodedFulfillment,
                rsa0EncodedCondition,
                rsa0EncodedFingerprint);
        }
    }

    void
    testRsa3()
    {
        testcase("Rsa3");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * rsa0

        auto const rsa0Msg = "\x61\x61\x61"s;
        std::array<std::uint8_t, 512> const rsa0PublicKey{
            {0xbb, 0xb0, 0xa1, 0xa3, 0x14, 0xff, 0x6a, 0x2f, 0xc7, 0x9a, 0xe0,
             0x6f, 0x61, 0x0d, 0xc8, 0xd4, 0x42, 0x1c, 0x93, 0x3e, 0xd0, 0xc4,
             0x35, 0x4e, 0x6a, 0xea, 0xd9, 0x1e, 0xf9, 0x47, 0xea, 0x4f, 0x8f,
             0x63, 0x2b, 0x2e, 0x2f, 0x78, 0xb8, 0xa0, 0x7a, 0x78, 0xc3, 0x32,
             0x48, 0x95, 0xc7, 0xcb, 0x09, 0x16, 0xeb, 0x33, 0x4c, 0x10, 0x09,
             0x0e, 0x5e, 0xdb, 0x9e, 0x02, 0x95, 0xed, 0x2f, 0xf1, 0xde, 0xaf,
             0xd1, 0xf4, 0x9f, 0x54, 0x41, 0x2e, 0x43, 0xed, 0xe2, 0xcb, 0x06,
             0xcf, 0xfc, 0x39, 0x53, 0x03, 0x30, 0x9a, 0x4c, 0xe3, 0xea, 0xc2,
             0x34, 0x1d, 0x9a, 0xf3, 0x18, 0x83, 0x37, 0xee, 0xba, 0xbd, 0x3d,
             0x4a, 0x4a, 0xf8, 0xf4, 0x3e, 0x15, 0x7d, 0x6f, 0x02, 0xf9, 0xd1,
             0xf2, 0x4a, 0x42, 0x77, 0x70, 0x49, 0xc9, 0x30, 0xaa, 0x23, 0x3f,
             0xed, 0x5c, 0x63, 0xb0, 0x7f, 0x72, 0x5c, 0xde, 0x6b, 0xb2, 0x44,
             0x04, 0xfc, 0xbf, 0xc0, 0xb8, 0x72, 0x47, 0xea, 0xcb, 0x7d, 0xb0,
             0x44, 0x78, 0x5b, 0xa6, 0x6e, 0xde, 0x8e, 0x79, 0x21, 0x12, 0x47,
             0x01, 0x50, 0x40, 0x1e, 0x0a, 0x84, 0x71, 0xbd, 0xe3, 0x6f, 0x2d,
             0x5e, 0xcb, 0x96, 0x0f, 0x57, 0x1b, 0xa1, 0x7d, 0xaf, 0x38, 0x1d,
             0x83, 0x78, 0xde, 0xc2, 0x1e, 0x10, 0x12, 0xe4, 0xb3, 0x76, 0xc9,
             0xe6, 0xc4, 0x6b, 0xb6, 0x7d, 0x68, 0xee, 0xf1, 0x2b, 0xa9, 0xa1,
             0x59, 0x67, 0xf4, 0x86, 0xd8, 0xbc, 0x91, 0xb3, 0xe2, 0xb0, 0x6f,
             0xa5, 0xfc, 0xa6, 0x9b, 0x75, 0x24, 0x26, 0xaf, 0x02, 0x9c, 0xb1,
             0x49, 0xea, 0x58, 0x6d, 0xed, 0x85, 0x1e, 0xba, 0x16, 0x08, 0x76,
             0xac, 0xd8, 0x5f, 0x06, 0x22, 0x71, 0xfa, 0xd7, 0x3d, 0x15, 0xf5,
             0xf0, 0xf0, 0x22, 0xe2, 0x61, 0x30, 0x92, 0x26, 0xbe, 0xe3, 0x56,
             0x7a, 0xd0, 0x52, 0xf9, 0x74, 0x6c, 0xa8, 0xbf, 0xac, 0xf0, 0xd4,
             0xf4, 0x17, 0x30, 0x08, 0x5c, 0x09, 0x7a, 0x02, 0x02, 0x83, 0x01,
             0xd9, 0x2a, 0x0c, 0x54, 0x5c, 0x03, 0x97, 0x47, 0x2c, 0x2e, 0xee,
             0x5b, 0x61, 0x22, 0x20, 0x25, 0xd6, 0x34, 0x70, 0xee, 0x68, 0x1c,
             0xe3, 0x25, 0x27, 0x47, 0xce, 0x9c, 0xa2, 0x3f, 0x19, 0xe6, 0x6f,
             0x2f, 0x63, 0x86, 0xe6, 0xad, 0x13, 0x91, 0x1d, 0x7a, 0xda, 0xcd,
             0x38, 0xce, 0x5c, 0xa8, 0xff, 0x2c, 0x2d, 0x99, 0xab, 0xb0, 0xf5,
             0xc3, 0xba, 0x84, 0x75, 0x09, 0x61, 0x3e, 0x66, 0x32, 0xa1, 0x2c,
             0xe6, 0xef, 0x78, 0xda, 0x4c, 0x82, 0x0e, 0x90, 0x83, 0x40, 0x53,
             0x00, 0x3d, 0x11, 0x97, 0xf6, 0xa5, 0x7b, 0x01, 0x00, 0xfe, 0xe1,
             0x52, 0xc8, 0x4c, 0x8b, 0x1b, 0x33, 0xbb, 0x96, 0x57, 0x19, 0x88,
             0x78, 0x0f, 0xaf, 0xbd, 0x69, 0x7c, 0xf8, 0x37, 0x0a, 0x99, 0xda,
             0x8f, 0xaa, 0xf7, 0x56, 0x87, 0xd9, 0x51, 0xcc, 0x65, 0x33, 0xc7,
             0x8b, 0x8e, 0x1c, 0xe2, 0xe1, 0xd5, 0xce, 0xb9, 0xa1, 0x16, 0x29,
             0x20, 0x1a, 0xf4, 0x37, 0x47, 0x5c, 0x94, 0x02, 0x7f, 0xa5, 0x26,
             0x14, 0xb4, 0x30, 0x0b, 0x77, 0xdc, 0xf1, 0x80, 0xac, 0x49, 0xca,
             0xa3, 0x40, 0x16, 0x8f, 0x32, 0x62, 0xfd, 0x1e, 0xe8, 0xb1, 0x38,
             0x02, 0xce, 0xa3, 0x57, 0x54, 0xb4, 0x23, 0xb8, 0x33, 0xfa, 0x14,
             0xc5, 0xdd, 0x0c, 0x47, 0x6d, 0xde, 0x5d, 0x5e, 0x7b, 0xf7, 0x37,
             0x4d, 0x61, 0xf2, 0x48, 0xc3, 0xba, 0xb9, 0x1c, 0xb0, 0x55, 0x0b,
             0xd1, 0xcb, 0xef, 0x70, 0x50, 0x7e, 0xe8, 0xdb, 0x1c, 0xf3, 0x99,
             0x30, 0x7e, 0x22, 0x8d, 0x4f, 0x45, 0x92, 0xa6, 0x6c, 0x58, 0x57,
             0x3c, 0xfe, 0xcc, 0x63, 0x96, 0x68, 0x06, 0xfa, 0xf8, 0x81, 0x09,
             0xcc, 0xb0, 0x99, 0x23, 0xea, 0x5b}};
        std::array<std::uint8_t, 512> const rsa0Sig{
            {0x41, 0x20, 0x0e, 0x42, 0x96, 0x1e, 0xea, 0x46, 0x0c, 0x82, 0x76,
             0xf2, 0x39, 0xab, 0x66, 0xb7, 0x6f, 0x8f, 0x28, 0x69, 0xea, 0xcc,
             0xc5, 0xf9, 0xe9, 0x94, 0x5c, 0x0a, 0xbc, 0x63, 0xb1, 0x43, 0x06,
             0x56, 0xf3, 0xda, 0x2d, 0x21, 0x7a, 0x43, 0x32, 0x7e, 0xe8, 0xce,
             0x11, 0x27, 0xd1, 0x4a, 0x85, 0xd7, 0x4a, 0xf4, 0x12, 0xfe, 0x93,
             0x70, 0x34, 0x5b, 0xa6, 0xb4, 0x40, 0x03, 0xd7, 0x71, 0xae, 0xdd,
             0x2b, 0xa0, 0xfc, 0x25, 0x06, 0x27, 0xfd, 0xf6, 0x16, 0x31, 0xaf,
             0xd6, 0x4e, 0x9b, 0xee, 0x71, 0x4b, 0x1b, 0xaf, 0xb6, 0x9f, 0x90,
             0x1b, 0xee, 0xb6, 0xf9, 0x59, 0xb1, 0x6a, 0x54, 0xb3, 0x28, 0xa9,
             0xa6, 0x74, 0xc8, 0x83, 0xca, 0xfc, 0x4f, 0xc2, 0xf7, 0xb0, 0x47,
             0x6d, 0xbc, 0xaa, 0x8d, 0x9b, 0xfd, 0x47, 0xf7, 0x34, 0xe3, 0x47,
             0x36, 0xbf, 0x66, 0xe9, 0x73, 0xb3, 0x15, 0xc2, 0xab, 0xf4, 0x72,
             0x7b, 0x06, 0x2c, 0xa3, 0xc4, 0x02, 0x93, 0x6e, 0xb5, 0x08, 0x49,
             0xe1, 0x81, 0x5d, 0xd1, 0x60, 0x4a, 0x60, 0x4d, 0xef, 0xa6, 0x68,
             0xcf, 0xe8, 0x23, 0xb0, 0x08, 0xbf, 0x8f, 0x7b, 0xf5, 0x7c, 0xeb,
             0x1b, 0x41, 0xe5, 0x18, 0xff, 0x53, 0xae, 0x91, 0x1e, 0xf9, 0x88,
             0x05, 0x71, 0xb3, 0xd1, 0x74, 0x23, 0x41, 0xd6, 0x0e, 0x3c, 0xb2,
             0xbe, 0xb9, 0x3e, 0xb5, 0xf1, 0x78, 0xf8, 0xef, 0x7b, 0xa0, 0xc6,
             0xf2, 0x29, 0x0b, 0x99, 0x55, 0xd8, 0x3d, 0x60, 0xf9, 0x43, 0xd6,
             0x44, 0x57, 0x1e, 0xc8, 0xd5, 0xf0, 0x64, 0xd9, 0x5f, 0x1d, 0xa1,
             0xe7, 0x59, 0xd6, 0x92, 0x0d, 0x84, 0xa5, 0x4c, 0xbc, 0x49, 0x78,
             0x36, 0x40, 0xa7, 0xb0, 0xcf, 0x3d, 0x02, 0x8e, 0x62, 0x7e, 0xc7,
             0xad, 0x25, 0xa9, 0x15, 0xf6, 0xd8, 0xc2, 0x4b, 0x2e, 0x09, 0x91,
             0x52, 0x8a, 0x02, 0xc5, 0xbe, 0xf0, 0x10, 0x6c, 0x18, 0xb3, 0xf3,
             0x9c, 0x59, 0x99, 0x56, 0xeb, 0x7a, 0x27, 0xb3, 0x37, 0x31, 0x3d,
             0xcf, 0x93, 0xe7, 0x58, 0x67, 0x60, 0x6a, 0x4a, 0xc5, 0xa1, 0xab,
             0x6f, 0x9b, 0xb4, 0x44, 0xdc, 0x1d, 0xad, 0x1f, 0x54, 0x6f, 0xae,
             0xde, 0x6a, 0xe9, 0x34, 0x88, 0x40, 0x49, 0x01, 0x76, 0x91, 0x37,
             0x1d, 0x51, 0xee, 0x1d, 0x65, 0x0e, 0xfc, 0xe5, 0x81, 0xb3, 0x0c,
             0x68, 0x43, 0x08, 0x7e, 0x70, 0x14, 0x19, 0x0f, 0x44, 0x60, 0x26,
             0x7d, 0x89, 0x4d, 0x52, 0x58, 0x14, 0xdd, 0xa3, 0x43, 0xb9, 0xa0,
             0x48, 0x9d, 0xc0, 0x8c, 0x6a, 0x34, 0x33, 0x47, 0x42, 0xce, 0xa3,
             0x0b, 0x49, 0x25, 0x12, 0xd2, 0x95, 0x74, 0x52, 0x17, 0xdd, 0x65,
             0xec, 0xfe, 0xcb, 0x9c, 0xa1, 0x8d, 0x21, 0x2f, 0x84, 0xa5, 0x06,
             0xd7, 0x00, 0x26, 0xed, 0x33, 0x28, 0x96, 0xbd, 0x24, 0xa6, 0x30,
             0x5a, 0x0c, 0xbd, 0xee, 0x9d, 0xfd, 0x8a, 0xbb, 0x85, 0x07, 0xf8,
             0x40, 0xeb, 0x94, 0xcf, 0xa8, 0xe9, 0x28, 0xe6, 0x91, 0x0c, 0x27,
             0x5f, 0x7b, 0x68, 0xd1, 0x1f, 0x96, 0x46, 0x3c, 0x10, 0x2a, 0x59,
             0x66, 0x13, 0x47, 0x86, 0x95, 0xbc, 0x76, 0x71, 0xfb, 0x27, 0x30,
             0x91, 0x39, 0xc6, 0xcd, 0x2f, 0x15, 0xca, 0x7e, 0x24, 0x05, 0x2e,
             0x47, 0xf4, 0xe3, 0x4e, 0xf8, 0xb8, 0x44, 0xec, 0x36, 0x4a, 0x85,
             0xbd, 0xc9, 0xbe, 0x84, 0x25, 0xcf, 0xf7, 0x2a, 0x77, 0xbe, 0x98,
             0xd9, 0x01, 0x69, 0x86, 0xa6, 0x67, 0x10, 0x98, 0x25, 0xf1, 0xef,
             0x18, 0xe0, 0x81, 0x70, 0xa8, 0x7b, 0x43, 0x68, 0xe7, 0xc1, 0x42,
             0xc1, 0x9d, 0xad, 0x10, 0x60, 0x5c, 0x4f, 0x34, 0x1d, 0x52, 0x09,
             0x98, 0x7a, 0xf3, 0x1a, 0xba, 0x8e, 0x2e, 0x49, 0x63, 0xf3, 0xe0,
             0x79, 0x4d, 0xd1, 0x1f, 0x0b, 0x72}};

        RsaSha256 const rsa0(makeSlice(rsa0PublicKey), makeSlice(rsa0Sig));
        {
            auto const rsa0EncodedFulfillment =
                "\xa3\x82\x04\x08\x80\x82\x02\x00\xbb\xb0\xa1\xa3\x14\xff\x6a"
                "\x2f\xc7\x9a\xe0\x6f\x61\x0d\xc8\xd4\x42\x1c\x93\x3e\xd0\xc4"
                "\x35\x4e\x6a\xea\xd9\x1e\xf9\x47\xea\x4f\x8f\x63\x2b\x2e\x2f"
                "\x78\xb8\xa0\x7a\x78\xc3\x32\x48\x95\xc7\xcb\x09\x16\xeb\x33"
                "\x4c\x10\x09\x0e\x5e\xdb\x9e\x02\x95\xed\x2f\xf1\xde\xaf\xd1"
                "\xf4\x9f\x54\x41\x2e\x43\xed\xe2\xcb\x06\xcf\xfc\x39\x53\x03"
                "\x30\x9a\x4c\xe3\xea\xc2\x34\x1d\x9a\xf3\x18\x83\x37\xee\xba"
                "\xbd\x3d\x4a\x4a\xf8\xf4\x3e\x15\x7d\x6f\x02\xf9\xd1\xf2\x4a"
                "\x42\x77\x70\x49\xc9\x30\xaa\x23\x3f\xed\x5c\x63\xb0\x7f\x72"
                "\x5c\xde\x6b\xb2\x44\x04\xfc\xbf\xc0\xb8\x72\x47\xea\xcb\x7d"
                "\xb0\x44\x78\x5b\xa6\x6e\xde\x8e\x79\x21\x12\x47\x01\x50\x40"
                "\x1e\x0a\x84\x71\xbd\xe3\x6f\x2d\x5e\xcb\x96\x0f\x57\x1b\xa1"
                "\x7d\xaf\x38\x1d\x83\x78\xde\xc2\x1e\x10\x12\xe4\xb3\x76\xc9"
                "\xe6\xc4\x6b\xb6\x7d\x68\xee\xf1\x2b\xa9\xa1\x59\x67\xf4\x86"
                "\xd8\xbc\x91\xb3\xe2\xb0\x6f\xa5\xfc\xa6\x9b\x75\x24\x26\xaf"
                "\x02\x9c\xb1\x49\xea\x58\x6d\xed\x85\x1e\xba\x16\x08\x76\xac"
                "\xd8\x5f\x06\x22\x71\xfa\xd7\x3d\x15\xf5\xf0\xf0\x22\xe2\x61"
                "\x30\x92\x26\xbe\xe3\x56\x7a\xd0\x52\xf9\x74\x6c\xa8\xbf\xac"
                "\xf0\xd4\xf4\x17\x30\x08\x5c\x09\x7a\x02\x02\x83\x01\xd9\x2a"
                "\x0c\x54\x5c\x03\x97\x47\x2c\x2e\xee\x5b\x61\x22\x20\x25\xd6"
                "\x34\x70\xee\x68\x1c\xe3\x25\x27\x47\xce\x9c\xa2\x3f\x19\xe6"
                "\x6f\x2f\x63\x86\xe6\xad\x13\x91\x1d\x7a\xda\xcd\x38\xce\x5c"
                "\xa8\xff\x2c\x2d\x99\xab\xb0\xf5\xc3\xba\x84\x75\x09\x61\x3e"
                "\x66\x32\xa1\x2c\xe6\xef\x78\xda\x4c\x82\x0e\x90\x83\x40\x53"
                "\x00\x3d\x11\x97\xf6\xa5\x7b\x01\x00\xfe\xe1\x52\xc8\x4c\x8b"
                "\x1b\x33\xbb\x96\x57\x19\x88\x78\x0f\xaf\xbd\x69\x7c\xf8\x37"
                "\x0a\x99\xda\x8f\xaa\xf7\x56\x87\xd9\x51\xcc\x65\x33\xc7\x8b"
                "\x8e\x1c\xe2\xe1\xd5\xce\xb9\xa1\x16\x29\x20\x1a\xf4\x37\x47"
                "\x5c\x94\x02\x7f\xa5\x26\x14\xb4\x30\x0b\x77\xdc\xf1\x80\xac"
                "\x49\xca\xa3\x40\x16\x8f\x32\x62\xfd\x1e\xe8\xb1\x38\x02\xce"
                "\xa3\x57\x54\xb4\x23\xb8\x33\xfa\x14\xc5\xdd\x0c\x47\x6d\xde"
                "\x5d\x5e\x7b\xf7\x37\x4d\x61\xf2\x48\xc3\xba\xb9\x1c\xb0\x55"
                "\x0b\xd1\xcb\xef\x70\x50\x7e\xe8\xdb\x1c\xf3\x99\x30\x7e\x22"
                "\x8d\x4f\x45\x92\xa6\x6c\x58\x57\x3c\xfe\xcc\x63\x96\x68\x06"
                "\xfa\xf8\x81\x09\xcc\xb0\x99\x23\xea\x5b\x81\x82\x02\x00\x41"
                "\x20\x0e\x42\x96\x1e\xea\x46\x0c\x82\x76\xf2\x39\xab\x66\xb7"
                "\x6f\x8f\x28\x69\xea\xcc\xc5\xf9\xe9\x94\x5c\x0a\xbc\x63\xb1"
                "\x43\x06\x56\xf3\xda\x2d\x21\x7a\x43\x32\x7e\xe8\xce\x11\x27"
                "\xd1\x4a\x85\xd7\x4a\xf4\x12\xfe\x93\x70\x34\x5b\xa6\xb4\x40"
                "\x03\xd7\x71\xae\xdd\x2b\xa0\xfc\x25\x06\x27\xfd\xf6\x16\x31"
                "\xaf\xd6\x4e\x9b\xee\x71\x4b\x1b\xaf\xb6\x9f\x90\x1b\xee\xb6"
                "\xf9\x59\xb1\x6a\x54\xb3\x28\xa9\xa6\x74\xc8\x83\xca\xfc\x4f"
                "\xc2\xf7\xb0\x47\x6d\xbc\xaa\x8d\x9b\xfd\x47\xf7\x34\xe3\x47"
                "\x36\xbf\x66\xe9\x73\xb3\x15\xc2\xab\xf4\x72\x7b\x06\x2c\xa3"
                "\xc4\x02\x93\x6e\xb5\x08\x49\xe1\x81\x5d\xd1\x60\x4a\x60\x4d"
                "\xef\xa6\x68\xcf\xe8\x23\xb0\x08\xbf\x8f\x7b\xf5\x7c\xeb\x1b"
                "\x41\xe5\x18\xff\x53\xae\x91\x1e\xf9\x88\x05\x71\xb3\xd1\x74"
                "\x23\x41\xd6\x0e\x3c\xb2\xbe\xb9\x3e\xb5\xf1\x78\xf8\xef\x7b"
                "\xa0\xc6\xf2\x29\x0b\x99\x55\xd8\x3d\x60\xf9\x43\xd6\x44\x57"
                "\x1e\xc8\xd5\xf0\x64\xd9\x5f\x1d\xa1\xe7\x59\xd6\x92\x0d\x84"
                "\xa5\x4c\xbc\x49\x78\x36\x40\xa7\xb0\xcf\x3d\x02\x8e\x62\x7e"
                "\xc7\xad\x25\xa9\x15\xf6\xd8\xc2\x4b\x2e\x09\x91\x52\x8a\x02"
                "\xc5\xbe\xf0\x10\x6c\x18\xb3\xf3\x9c\x59\x99\x56\xeb\x7a\x27"
                "\xb3\x37\x31\x3d\xcf\x93\xe7\x58\x67\x60\x6a\x4a\xc5\xa1\xab"
                "\x6f\x9b\xb4\x44\xdc\x1d\xad\x1f\x54\x6f\xae\xde\x6a\xe9\x34"
                "\x88\x40\x49\x01\x76\x91\x37\x1d\x51\xee\x1d\x65\x0e\xfc\xe5"
                "\x81\xb3\x0c\x68\x43\x08\x7e\x70\x14\x19\x0f\x44\x60\x26\x7d"
                "\x89\x4d\x52\x58\x14\xdd\xa3\x43\xb9\xa0\x48\x9d\xc0\x8c\x6a"
                "\x34\x33\x47\x42\xce\xa3\x0b\x49\x25\x12\xd2\x95\x74\x52\x17"
                "\xdd\x65\xec\xfe\xcb\x9c\xa1\x8d\x21\x2f\x84\xa5\x06\xd7\x00"
                "\x26\xed\x33\x28\x96\xbd\x24\xa6\x30\x5a\x0c\xbd\xee\x9d\xfd"
                "\x8a\xbb\x85\x07\xf8\x40\xeb\x94\xcf\xa8\xe9\x28\xe6\x91\x0c"
                "\x27\x5f\x7b\x68\xd1\x1f\x96\x46\x3c\x10\x2a\x59\x66\x13\x47"
                "\x86\x95\xbc\x76\x71\xfb\x27\x30\x91\x39\xc6\xcd\x2f\x15\xca"
                "\x7e\x24\x05\x2e\x47\xf4\xe3\x4e\xf8\xb8\x44\xec\x36\x4a\x85"
                "\xbd\xc9\xbe\x84\x25\xcf\xf7\x2a\x77\xbe\x98\xd9\x01\x69\x86"
                "\xa6\x67\x10\x98\x25\xf1\xef\x18\xe0\x81\x70\xa8\x7b\x43\x68"
                "\xe7\xc1\x42\xc1\x9d\xad\x10\x60\x5c\x4f\x34\x1d\x52\x09\x98"
                "\x7a\xf3\x1a\xba\x8e\x2e\x49\x63\xf3\xe0\x79\x4d\xd1\x1f\x0b"
                "\x72"s;
            auto const rsa0EncodedCondition =
                "\xa3\x27\x80\x20\x4d\xd2\xea\x7f\x85\xb3\xea\xcb\x8f\x19\x05"
                "\x8e\x83\x60\x95\x5c\x32\xe7\x4c\x12\x43\x92\xa1\xf4\x46\x60"
                "\x73\x97\x09\xc5\x39\xc3\x81\x03\x04\x00\x00"s;
            auto const rsa0EncodedFingerprint =
                "\x30\x82\x02\x04\x80\x82\x02\x00\xbb\xb0\xa1\xa3\x14\xff\x6a"
                "\x2f\xc7\x9a\xe0\x6f\x61\x0d\xc8\xd4\x42\x1c\x93\x3e\xd0\xc4"
                "\x35\x4e\x6a\xea\xd9\x1e\xf9\x47\xea\x4f\x8f\x63\x2b\x2e\x2f"
                "\x78\xb8\xa0\x7a\x78\xc3\x32\x48\x95\xc7\xcb\x09\x16\xeb\x33"
                "\x4c\x10\x09\x0e\x5e\xdb\x9e\x02\x95\xed\x2f\xf1\xde\xaf\xd1"
                "\xf4\x9f\x54\x41\x2e\x43\xed\xe2\xcb\x06\xcf\xfc\x39\x53\x03"
                "\x30\x9a\x4c\xe3\xea\xc2\x34\x1d\x9a\xf3\x18\x83\x37\xee\xba"
                "\xbd\x3d\x4a\x4a\xf8\xf4\x3e\x15\x7d\x6f\x02\xf9\xd1\xf2\x4a"
                "\x42\x77\x70\x49\xc9\x30\xaa\x23\x3f\xed\x5c\x63\xb0\x7f\x72"
                "\x5c\xde\x6b\xb2\x44\x04\xfc\xbf\xc0\xb8\x72\x47\xea\xcb\x7d"
                "\xb0\x44\x78\x5b\xa6\x6e\xde\x8e\x79\x21\x12\x47\x01\x50\x40"
                "\x1e\x0a\x84\x71\xbd\xe3\x6f\x2d\x5e\xcb\x96\x0f\x57\x1b\xa1"
                "\x7d\xaf\x38\x1d\x83\x78\xde\xc2\x1e\x10\x12\xe4\xb3\x76\xc9"
                "\xe6\xc4\x6b\xb6\x7d\x68\xee\xf1\x2b\xa9\xa1\x59\x67\xf4\x86"
                "\xd8\xbc\x91\xb3\xe2\xb0\x6f\xa5\xfc\xa6\x9b\x75\x24\x26\xaf"
                "\x02\x9c\xb1\x49\xea\x58\x6d\xed\x85\x1e\xba\x16\x08\x76\xac"
                "\xd8\x5f\x06\x22\x71\xfa\xd7\x3d\x15\xf5\xf0\xf0\x22\xe2\x61"
                "\x30\x92\x26\xbe\xe3\x56\x7a\xd0\x52\xf9\x74\x6c\xa8\xbf\xac"
                "\xf0\xd4\xf4\x17\x30\x08\x5c\x09\x7a\x02\x02\x83\x01\xd9\x2a"
                "\x0c\x54\x5c\x03\x97\x47\x2c\x2e\xee\x5b\x61\x22\x20\x25\xd6"
                "\x34\x70\xee\x68\x1c\xe3\x25\x27\x47\xce\x9c\xa2\x3f\x19\xe6"
                "\x6f\x2f\x63\x86\xe6\xad\x13\x91\x1d\x7a\xda\xcd\x38\xce\x5c"
                "\xa8\xff\x2c\x2d\x99\xab\xb0\xf5\xc3\xba\x84\x75\x09\x61\x3e"
                "\x66\x32\xa1\x2c\xe6\xef\x78\xda\x4c\x82\x0e\x90\x83\x40\x53"
                "\x00\x3d\x11\x97\xf6\xa5\x7b\x01\x00\xfe\xe1\x52\xc8\x4c\x8b"
                "\x1b\x33\xbb\x96\x57\x19\x88\x78\x0f\xaf\xbd\x69\x7c\xf8\x37"
                "\x0a\x99\xda\x8f\xaa\xf7\x56\x87\xd9\x51\xcc\x65\x33\xc7\x8b"
                "\x8e\x1c\xe2\xe1\xd5\xce\xb9\xa1\x16\x29\x20\x1a\xf4\x37\x47"
                "\x5c\x94\x02\x7f\xa5\x26\x14\xb4\x30\x0b\x77\xdc\xf1\x80\xac"
                "\x49\xca\xa3\x40\x16\x8f\x32\x62\xfd\x1e\xe8\xb1\x38\x02\xce"
                "\xa3\x57\x54\xb4\x23\xb8\x33\xfa\x14\xc5\xdd\x0c\x47\x6d\xde"
                "\x5d\x5e\x7b\xf7\x37\x4d\x61\xf2\x48\xc3\xba\xb9\x1c\xb0\x55"
                "\x0b\xd1\xcb\xef\x70\x50\x7e\xe8\xdb\x1c\xf3\x99\x30\x7e\x22"
                "\x8d\x4f\x45\x92\xa6\x6c\x58\x57\x3c\xfe\xcc\x63\x96\x68\x06"
                "\xfa\xf8\x81\x09\xcc\xb0\x99\x23\xea\x5b"s;
            check(
                &rsa0,
                rsa0Msg,
                rsa0EncodedFulfillment,
                rsa0EncodedCondition,
                rsa0EncodedFingerprint);
        }
    }

    void
    testEd2()
    {
        testcase("Ed2");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * ed0

        auto const ed0Msg = "\x61\x61\x61"s;
        std::array<std::uint8_t, 32> const ed0PublicKey{
            {0xd7, 0x5a, 0x98, 0x01, 0x82, 0xb1, 0x0a, 0xb7, 0xd5, 0x4b, 0xfe,
             0xd3, 0xc9, 0x64, 0x07, 0x3a, 0x0e, 0xe1, 0x72, 0xf3, 0xda, 0xa6,
             0x23, 0x25, 0xaf, 0x02, 0x1a, 0x68, 0xf7, 0x07, 0x51, 0x1a}};
        std::array<std::uint8_t, 64> const ed0Sig{
            {0x50, 0x6a, 0x1e, 0xa6, 0x83, 0x18, 0xe6, 0x2d, 0x40, 0x63, 0x5d,
             0xad, 0x04, 0x3e, 0x19, 0x87, 0xeb, 0xc2, 0x6e, 0x5b, 0x5c, 0x44,
             0x06, 0xf7, 0xbd, 0xf8, 0x5a, 0x73, 0x38, 0x8f, 0xbf, 0xe5, 0xc2,
             0x45, 0xac, 0x49, 0xf4, 0x77, 0x0e, 0xbc, 0x78, 0x77, 0x08, 0x27,
             0x0a, 0xa6, 0xa8, 0x76, 0x9f, 0xef, 0xe8, 0x93, 0x0f, 0xd0, 0xea,
             0x1e, 0xe6, 0x4b, 0x31, 0x40, 0x7d, 0x76, 0x95, 0x09}};

        Ed25519 const ed0(ed0PublicKey, ed0Sig);
        {
            auto const ed0EncodedFulfillment =
                "\xa4\x64\x80\x20\xd7\x5a\x98\x01\x82\xb1\x0a\xb7\xd5\x4b\xfe"
                "\xd3\xc9\x64\x07\x3a\x0e\xe1\x72\xf3\xda\xa6\x23\x25\xaf\x02"
                "\x1a\x68\xf7\x07\x51\x1a\x81\x40\x50\x6a\x1e\xa6\x83\x18\xe6"
                "\x2d\x40\x63\x5d\xad\x04\x3e\x19\x87\xeb\xc2\x6e\x5b\x5c\x44"
                "\x06\xf7\xbd\xf8\x5a\x73\x38\x8f\xbf\xe5\xc2\x45\xac\x49\xf4"
                "\x77\x0e\xbc\x78\x77\x08\x27\x0a\xa6\xa8\x76\x9f\xef\xe8\x93"
                "\x0f\xd0\xea\x1e\xe6\x4b\x31\x40\x7d\x76\x95\x09"s;
            auto const ed0EncodedCondition =
                "\xa4\x27\x80\x20\x79\x92\x39\xab\xa8\xfc\x4f\xf7\xea\xbf\xbc"
                "\x4c\x44\xe6\x9e\x8b\xdf\xed\x99\x33\x24\xe1\x2e\xd6\x47\x92"
                "\xab\xe2\x89\xcf\x1d\x5f\x81\x03\x02\x00\x00"s;
            auto const ed0EncodedFingerprint =
                "\x30\x22\x80\x20\xd7\x5a\x98\x01\x82\xb1\x0a\xb7\xd5\x4b\xfe"
                "\xd3\xc9\x64\x07\x3a\x0e\xe1\x72\xf3\xda\xa6\x23\x25\xaf\x02"
                "\x1a\x68\xf7\x07\x51\x1a"s;
            check(
                &ed0,
                ed0Msg,
                ed0EncodedFulfillment,
                ed0EncodedCondition,
                ed0EncodedFingerprint);
        }
    }

    void
    testThresh78()
    {
        testcase("Thresh78");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * thresh0
        // ** prefix1
        // *** ed2
        // ** preim3

        auto const ed2Msg = ""s;
        std::array<std::uint8_t, 32> const ed2PublicKey{
            {0x2e, 0x53, 0x1e, 0x88, 0xbf, 0xe8, 0xc4, 0x19, 0xf9, 0x61, 0xad,
             0x9c, 0x90, 0x1d, 0xe2, 0xbd, 0xd8, 0xe7, 0xa0, 0xe7, 0x14, 0x84,
             0x55, 0x05, 0x9e, 0x89, 0xeb, 0x79, 0x98, 0x6b, 0x25, 0x24}};
        std::array<std::uint8_t, 64> const ed2Sig{
            {0xe5, 0xfd, 0xdb, 0xbe, 0xc2, 0xe8, 0xdb, 0x59, 0xbc, 0xb6, 0xa6,
             0x80, 0xe4, 0xa7, 0x05, 0x6f, 0xdd, 0x46, 0x50, 0x0b, 0x4e, 0x99,
             0xa3, 0x71, 0x9f, 0x25, 0x73, 0x50, 0x36, 0xa1, 0x49, 0x28, 0x3e,
             0x28, 0x7c, 0xed, 0xed, 0xcd, 0x9e, 0x5a, 0x50, 0xcd, 0x97, 0x6a,
             0xb4, 0x11, 0xf8, 0x4f, 0xf5, 0x69, 0xaa, 0xbd, 0xe6, 0xf6, 0xe0,
             0xce, 0x6a, 0x0b, 0xdd, 0x0c, 0x4a, 0x82, 0x46, 0x08}};
        auto const prefix1Prefix =
            "https://notary.example/cases/657c12da-8dca-43b0-97ca-8ee8c38ab9f7/state/executed"s;
        auto const prefix1Msg = ""s;
        auto const prefix1MaxMsgLength = 0;
        auto const preim3Preimage =
            "https://notary.example/cases/657c12da-8dca-43b0-97ca-8ee8c38ab9f7/state/executed"s;
        auto const preim3Msg = ""s;
        auto const thresh0Msg = ""s;

        auto ed2 = std::make_unique<Ed25519>(ed2PublicKey, ed2Sig);
        auto prefix1 = std::make_unique<PrefixSha256>(
            makeSlice(prefix1Prefix), prefix1MaxMsgLength, std::move(ed2));
        auto preim3 =
            std::make_unique<PreimageSha256>(makeSlice(preim3Preimage));
        std::vector<std::unique_ptr<Fulfillment>> thresh0Subfulfillments;
        thresh0Subfulfillments.emplace_back(std::move(prefix1));
        thresh0Subfulfillments.emplace_back(std::move(preim3));
        std::vector<Condition> thresh0Subconditions{};
        ThresholdSha256 const thresh0(
            std::move(thresh0Subfulfillments), std::move(thresh0Subconditions));
        {
            auto const thresh0EncodedFulfillment =
                "\xa2\x82\x01\x1a\xa0\x82\x01\x14\xa0\x52\x80\x50\x68\x74\x74"
                "\x70\x73\x3a\x2f\x2f\x6e\x6f\x74\x61\x72\x79\x2e\x65\x78\x61"
                "\x6d\x70\x6c\x65\x2f\x63\x61\x73\x65\x73\x2f\x36\x35\x37\x63"
                "\x31\x32\x64\x61\x2d\x38\x64\x63\x61\x2d\x34\x33\x62\x30\x2d"
                "\x39\x37\x63\x61\x2d\x38\x65\x65\x38\x63\x33\x38\x61\x62\x39"
                "\x66\x37\x2f\x73\x74\x61\x74\x65\x2f\x65\x78\x65\x63\x75\x74"
                "\x65\x64\xa1\x81\xbd\x80\x50\x68\x74\x74\x70\x73\x3a\x2f\x2f"
                "\x6e\x6f\x74\x61\x72\x79\x2e\x65\x78\x61\x6d\x70\x6c\x65\x2f"
                "\x63\x61\x73\x65\x73\x2f\x36\x35\x37\x63\x31\x32\x64\x61\x2d"
                "\x38\x64\x63\x61\x2d\x34\x33\x62\x30\x2d\x39\x37\x63\x61\x2d"
                "\x38\x65\x65\x38\x63\x33\x38\x61\x62\x39\x66\x37\x2f\x73\x74"
                "\x61\x74\x65\x2f\x65\x78\x65\x63\x75\x74\x65\x64\x81\x01\x00"
                "\xa2\x66\xa4\x64\x80\x20\x2e\x53\x1e\x88\xbf\xe8\xc4\x19\xf9"
                "\x61\xad\x9c\x90\x1d\xe2\xbd\xd8\xe7\xa0\xe7\x14\x84\x55\x05"
                "\x9e\x89\xeb\x79\x98\x6b\x25\x24\x81\x40\xe5\xfd\xdb\xbe\xc2"
                "\xe8\xdb\x59\xbc\xb6\xa6\x80\xe4\xa7\x05\x6f\xdd\x46\x50\x0b"
                "\x4e\x99\xa3\x71\x9f\x25\x73\x50\x36\xa1\x49\x28\x3e\x28\x7c"
                "\xed\xed\xcd\x9e\x5a\x50\xcd\x97\x6a\xb4\x11\xf8\x4f\xf5\x69"
                "\xaa\xbd\xe6\xf6\xe0\xce\x6a\x0b\xdd\x0c\x4a\x82\x46\x08\xa1"
                "\x00"s;
            auto const thresh0EncodedCondition =
                "\xa2\x2b\x80\x20\x09\xe3\x91\x00\x46\x28\x72\x5e\x88\xf8\x55"
                "\x7e\x95\x4f\xb2\xa0\xea\xe2\xb7\xc1\x51\xc4\x7d\xf3\xc4\xaf"
                "\x22\xf8\xc1\x69\x88\xf9\x81\x03\x02\x0c\xa0\x82\x02\x03\xc8"s;
            auto const thresh0EncodedFingerprint =
                "\x30\x59\x80\x01\x02\xa1\x54\xa0\x25\x80\x20\x0b\x4a\xc3\xa1"
                "\xe0\x93\x2c\xb7\x1b\x74\x30\x9f\xad\x7d\x15\xdf\x51\xbd\x4d"
                "\x13\x59\xed\x59\xff\x7c\x91\x7b\x35\xdf\x24\x46\x4a\x81\x01"
                "\x50\xa1\x2b\x80\x20\x3f\x94\x52\x55\x55\xcf\x4c\x52\x34\xbf"
                "\x77\xcb\x10\x85\x01\xd9\x7b\x9d\x8a\x28\xd1\xe7\xa3\xa7\xfe"
                "\x8d\x3d\x7f\x03\x1f\xde\xbd\x81\x03\x02\x04\x50\x82\x02\x03"
                "\x08"s;
            check(
                &thresh0,
                thresh0Msg,
                thresh0EncodedFulfillment,
                thresh0EncodedCondition,
                thresh0EncodedFingerprint);
        }
    }

    void
    testThresh79()
    {
        testcase("Thresh79");

        using namespace std::string_literals;
        using namespace ripple::cryptoconditions;

        // Fulfillment structure
        // * thresh0
        // ** prefix1
        // *** thresh2
        // **** Prefix9Cond
        // **** prefix3
        // ***** ed4
        // **** prefix5
        // ***** ed6
        // **** prefix7
        // ***** ed8
        // ** preim11

        auto const ed4Msg = ""s;
        std::array<std::uint8_t, 32> const ed4PublicKey{
            {0x2e, 0x53, 0x1e, 0x88, 0xbf, 0xe8, 0xc4, 0x19, 0xf9, 0x61, 0xad,
             0x9c, 0x90, 0x1d, 0xe2, 0xbd, 0xd8, 0xe7, 0xa0, 0xe7, 0x14, 0x84,
             0x55, 0x05, 0x9e, 0x89, 0xeb, 0x79, 0x98, 0x6b, 0x25, 0x24}};
        std::array<std::uint8_t, 64> const ed4Sig{
            {0x87, 0x30, 0x1a, 0x18, 0x08, 0xf7, 0x3c, 0x20, 0x3f, 0x0e, 0x9c,
             0x81, 0x06, 0xf1, 0x30, 0x71, 0x08, 0x81, 0xda, 0xcd, 0xac, 0x80,
             0x7c, 0x10, 0xd3, 0x49, 0xb7, 0x98, 0x20, 0xdc, 0xb3, 0x40, 0x7c,
             0x77, 0xb9, 0xd2, 0x3d, 0xb4, 0x28, 0x27, 0x64, 0x0b, 0xdc, 0x41,
             0x38, 0x3f, 0xdc, 0x4e, 0xca, 0x76, 0x19, 0xc1, 0x70, 0x37, 0xe8,
             0x70, 0x37, 0xa5, 0xc7, 0xcf, 0x33, 0x81, 0x7a, 0x0e}};
        auto const prefix3Prefix = "https://notary1.example/"s;
        auto const prefix3Msg = ""s;
        auto const prefix3MaxMsgLength = 1024;
        auto const ed6Msg = ""s;
        std::array<std::uint8_t, 32> const ed6PublicKey{
            {0x59, 0x02, 0x3e, 0x76, 0x8a, 0x9c, 0x85, 0x87, 0x6c, 0x61, 0xeb,
             0xaa, 0xa3, 0x4e, 0xc1, 0x8e, 0x64, 0x85, 0x7f, 0xa7, 0x66, 0x92,
             0xc5, 0x5a, 0x99, 0x63, 0x5f, 0x9b, 0x88, 0xe5, 0xaf, 0x90}};
        std::array<std::uint8_t, 64> const ed6Sig{
            {0xac, 0xf9, 0xee, 0x83, 0x88, 0x5b, 0xa5, 0x8f, 0x62, 0xc4, 0x2b,
             0x48, 0x99, 0xe8, 0xce, 0xa9, 0x15, 0xa9, 0x19, 0x2f, 0x74, 0x88,
             0xc1, 0x59, 0x2c, 0xe9, 0x59, 0x56, 0x0b, 0x52, 0xf8, 0x7a, 0x37,
             0x90, 0xe0, 0x36, 0xd3, 0xc6, 0x95, 0x4b, 0x87, 0x55, 0x41, 0x48,
             0xd1, 0x31, 0xcc, 0xba, 0xf3, 0x69, 0xc6, 0x8a, 0x66, 0xa3, 0x13,
             0x7f, 0xe8, 0xfa, 0x43, 0x68, 0xa1, 0x65, 0xa0, 0x0a}};
        auto const prefix5Prefix = "https://notary2.example/"s;
        auto const prefix5Msg = ""s;
        auto const prefix5MaxMsgLength = 1024;
        auto const ed8Msg = ""s;
        std::array<std::uint8_t, 32> const ed8PublicKey{
            {0x9a, 0x98, 0xac, 0x6d, 0xbf, 0xf0, 0x90, 0xe9, 0x6e, 0x38, 0xd8,
             0x1f, 0x05, 0x47, 0x7d, 0xf8, 0x6b, 0x3b, 0xbb, 0x0e, 0xff, 0xc3,
             0x11, 0xbc, 0x7b, 0x42, 0xcd, 0xac, 0x99, 0xd6, 0xbd, 0xd9}};
        std::array<std::uint8_t, 64> const ed8Sig{
            {0x97, 0xa3, 0x2b, 0x0c, 0x61, 0xce, 0x15, 0x10, 0x36, 0xca, 0xd3,
             0x59, 0x69, 0xc9, 0xf9, 0x5e, 0xb5, 0x44, 0x65, 0xea, 0x5d, 0x62,
             0x9b, 0xa9, 0x65, 0xab, 0xf8, 0xa6, 0xa9, 0x17, 0xf1, 0x0d, 0xd1,
             0x4a, 0xbe, 0x55, 0xd3, 0x30, 0x54, 0x43, 0x8e, 0x68, 0xc9, 0x15,
             0xa6, 0xb6, 0x7c, 0x1d, 0xdf, 0x8a, 0x0c, 0x16, 0xd2, 0xd8, 0x01,
             0xf8, 0xd0, 0xba, 0x85, 0xef, 0xee, 0x9b, 0xbf, 0x0f}};
        auto const prefix7Prefix = "https://notary3.example/"s;
        auto const prefix7Msg = ""s;
        auto const prefix7MaxMsgLength = 1024;
        auto const thresh2Msg = ""s;
        auto const Prefix9CondConditionFingerprint =
            "\xee\x0b\xc0\x2f\x97\x7c\x26\x4b\x6c\x30\x6e\xd1\xb1\x68\xfe"
            "\xb4\xfd\x60\x09\x50\xad\x21\x75\x0c\xe8\xa8\x6e\xcb\xd4\x60"
            "\x35\x38"s;
        Condition const Prefix9Cond{Type::prefixSha256,
                                    133145,
                                    makeSlice(Prefix9CondConditionFingerprint),
                                    std::bitset<5>{16}};
        auto const prefix1Prefix =
            "cases/657c12da-8dca-43b0-97ca-8ee8c38ab9f7/state/executed"s;
        auto const prefix1Msg = ""s;
        auto const prefix1MaxMsgLength = 0;
        auto const preim11Preimage =
            "https://notary.example/cases/657c12da-8dca-43b0-97ca-8ee8c38ab9f7/state/executed"s;
        auto const preim11Msg = ""s;
        auto const thresh0Msg = ""s;

        auto ed4 = std::make_unique<Ed25519>(ed4PublicKey, ed4Sig);
        auto prefix3 = std::make_unique<PrefixSha256>(
            makeSlice(prefix3Prefix), prefix3MaxMsgLength, std::move(ed4));
        auto ed6 = std::make_unique<Ed25519>(ed6PublicKey, ed6Sig);
        auto prefix5 = std::make_unique<PrefixSha256>(
            makeSlice(prefix5Prefix), prefix5MaxMsgLength, std::move(ed6));
        auto ed8 = std::make_unique<Ed25519>(ed8PublicKey, ed8Sig);
        auto prefix7 = std::make_unique<PrefixSha256>(
            makeSlice(prefix7Prefix), prefix7MaxMsgLength, std::move(ed8));
        std::vector<std::unique_ptr<Fulfillment>> thresh2Subfulfillments;
        thresh2Subfulfillments.emplace_back(std::move(prefix3));
        thresh2Subfulfillments.emplace_back(std::move(prefix5));
        thresh2Subfulfillments.emplace_back(std::move(prefix7));
        std::vector<Condition> thresh2Subconditions{{Prefix9Cond}};
        auto thresh2 = std::make_unique<ThresholdSha256>(
            std::move(thresh2Subfulfillments), std::move(thresh2Subconditions));
        auto prefix1 = std::make_unique<PrefixSha256>(
            makeSlice(prefix1Prefix), prefix1MaxMsgLength, std::move(thresh2));
        auto preim11 =
            std::make_unique<PreimageSha256>(makeSlice(preim11Preimage));
        std::vector<std::unique_ptr<Fulfillment>> thresh0Subfulfillments;
        thresh0Subfulfillments.emplace_back(std::move(prefix1));
        thresh0Subfulfillments.emplace_back(std::move(preim11));
        std::vector<Condition> thresh0Subconditions{};
        ThresholdSha256 const thresh0(
            std::move(thresh0Subfulfillments), std::move(thresh0Subconditions));
        {
            auto const thresh0EncodedFulfillment =
                "\xa2\x82\x02\x72\xa0\x82\x02\x6c\xa0\x52\x80\x50\x68\x74\x74"
                "\x70\x73\x3a\x2f\x2f\x6e\x6f\x74\x61\x72\x79\x2e\x65\x78\x61"
                "\x6d\x70\x6c\x65\x2f\x63\x61\x73\x65\x73\x2f\x36\x35\x37\x63"
                "\x31\x32\x64\x61\x2d\x38\x64\x63\x61\x2d\x34\x33\x62\x30\x2d"
                "\x39\x37\x63\x61\x2d\x38\x65\x65\x38\x63\x33\x38\x61\x62\x39"
                "\x66\x37\x2f\x73\x74\x61\x74\x65\x2f\x65\x78\x65\x63\x75\x74"
                "\x65\x64\xa1\x82\x02\x14\x80\x39\x63\x61\x73\x65\x73\x2f\x36"
                "\x35\x37\x63\x31\x32\x64\x61\x2d\x38\x64\x63\x61\x2d\x34\x33"
                "\x62\x30\x2d\x39\x37\x63\x61\x2d\x38\x65\x65\x38\x63\x33\x38"
                "\x61\x62\x39\x66\x37\x2f\x73\x74\x61\x74\x65\x2f\x65\x78\x65"
                "\x63\x75\x74\x65\x64\x81\x01\x00\xa2\x82\x01\xd2\xa2\x82\x01"
                "\xce\xa0\x82\x01\x9b\xa1\x81\x86\x80\x18\x68\x74\x74\x70\x73"
                "\x3a\x2f\x2f\x6e\x6f\x74\x61\x72\x79\x31\x2e\x65\x78\x61\x6d"
                "\x70\x6c\x65\x2f\x81\x02\x04\x00\xa2\x66\xa4\x64\x80\x20\x2e"
                "\x53\x1e\x88\xbf\xe8\xc4\x19\xf9\x61\xad\x9c\x90\x1d\xe2\xbd"
                "\xd8\xe7\xa0\xe7\x14\x84\x55\x05\x9e\x89\xeb\x79\x98\x6b\x25"
                "\x24\x81\x40\x87\x30\x1a\x18\x08\xf7\x3c\x20\x3f\x0e\x9c\x81"
                "\x06\xf1\x30\x71\x08\x81\xda\xcd\xac\x80\x7c\x10\xd3\x49\xb7"
                "\x98\x20\xdc\xb3\x40\x7c\x77\xb9\xd2\x3d\xb4\x28\x27\x64\x0b"
                "\xdc\x41\x38\x3f\xdc\x4e\xca\x76\x19\xc1\x70\x37\xe8\x70\x37"
                "\xa5\xc7\xcf\x33\x81\x7a\x0e\xa1\x81\x86\x80\x18\x68\x74\x74"
                "\x70\x73\x3a\x2f\x2f\x6e\x6f\x74\x61\x72\x79\x32\x2e\x65\x78"
                "\x61\x6d\x70\x6c\x65\x2f\x81\x02\x04\x00\xa2\x66\xa4\x64\x80"
                "\x20\x59\x02\x3e\x76\x8a\x9c\x85\x87\x6c\x61\xeb\xaa\xa3\x4e"
                "\xc1\x8e\x64\x85\x7f\xa7\x66\x92\xc5\x5a\x99\x63\x5f\x9b\x88"
                "\xe5\xaf\x90\x81\x40\xac\xf9\xee\x83\x88\x5b\xa5\x8f\x62\xc4"
                "\x2b\x48\x99\xe8\xce\xa9\x15\xa9\x19\x2f\x74\x88\xc1\x59\x2c"
                "\xe9\x59\x56\x0b\x52\xf8\x7a\x37\x90\xe0\x36\xd3\xc6\x95\x4b"
                "\x87\x55\x41\x48\xd1\x31\xcc\xba\xf3\x69\xc6\x8a\x66\xa3\x13"
                "\x7f\xe8\xfa\x43\x68\xa1\x65\xa0\x0a\xa1\x81\x86\x80\x18\x68"
                "\x74\x74\x70\x73\x3a\x2f\x2f\x6e\x6f\x74\x61\x72\x79\x33\x2e"
                "\x65\x78\x61\x6d\x70\x6c\x65\x2f\x81\x02\x04\x00\xa2\x66\xa4"
                "\x64\x80\x20\x9a\x98\xac\x6d\xbf\xf0\x90\xe9\x6e\x38\xd8\x1f"
                "\x05\x47\x7d\xf8\x6b\x3b\xbb\x0e\xff\xc3\x11\xbc\x7b\x42\xcd"
                "\xac\x99\xd6\xbd\xd9\x81\x40\x97\xa3\x2b\x0c\x61\xce\x15\x10"
                "\x36\xca\xd3\x59\x69\xc9\xf9\x5e\xb5\x44\x65\xea\x5d\x62\x9b"
                "\xa9\x65\xab\xf8\xa6\xa9\x17\xf1\x0d\xd1\x4a\xbe\x55\xd3\x30"
                "\x54\x43\x8e\x68\xc9\x15\xa6\xb6\x7c\x1d\xdf\x8a\x0c\x16\xd2"
                "\xd8\x01\xf8\xd0\xba\x85\xef\xee\x9b\xbf\x0f\xa1\x2d\xa1\x2b"
                "\x80\x20\xee\x0b\xc0\x2f\x97\x7c\x26\x4b\x6c\x30\x6e\xd1\xb1"
                "\x68\xfe\xb4\xfd\x60\x09\x50\xad\x21\x75\x0c\xe8\xa8\x6e\xcb"
                "\xd4\x60\x35\x38\x81\x03\x02\x08\x19\x82\x02\x03\x08\xa1\x00"s;
            auto const thresh0EncodedCondition =
                "\xa2\x2b\x80\x20\x42\x4a\x70\x49\x49\x52\x92\x67\xb6\x21\xb3"
                "\xd7\x91\x19\xd7\x29\xb2\x38\x2c\xed\x8b\x29\x6c\x3c\x02\x8f"
                "\xa9\x7d\x35\x0f\x6d\x07\x81\x03\x06\x34\xd2\x82\x02\x03\xc8"s;
            auto const thresh0EncodedFingerprint =
                "\x30\x59\x80\x01\x02\xa1\x54\xa0\x25\x80\x20\x0b\x4a\xc3\xa1"
                "\xe0\x93\x2c\xb7\x1b\x74\x30\x9f\xad\x7d\x15\xdf\x51\xbd\x4d"
                "\x13\x59\xed\x59\xff\x7c\x91\x7b\x35\xdf\x24\x46\x4a\x81\x01"
                "\x50\xa1\x2b\x80\x20\x06\x2f\x2c\x1b\xdd\x08\x66\x1f\xe7\xfe"
                "\xfa\xc2\x0e\x02\xda\x8b\x01\x84\xfc\xd3\x6f\x6c\x6c\x54\xc5"
                "\x3c\xc2\x8d\x2e\x54\xdd\x11\x81\x03\x06\x2c\x82\x82\x02\x03"
                "\x28"s;
            check(
                &thresh0,
                thresh0Msg,
                thresh0EncodedFulfillment,
                thresh0EncodedCondition,
                thresh0EncodedFingerprint);
        }
    }

    void
    run()
    {
        testPreim0();
        testPrefix0();
        testThresh0();
        testThresh1();
        testThresh2();
        testThresh3();
        testPrefix1();
        testPrefix2();
        testPrefix3();
        testPrefix4();
        testPrefix5();
        testPrefix6();
        testThresh4();
        testThresh5();
        testThresh6();
        testThresh7();
        testThresh8();
        testThresh9();
        testThresh10();
        testThresh11();
        testThresh12();
        testThresh13();
        testThresh14();
        testThresh15();
        testThresh16();
        testThresh17();
        testThresh18();
        testThresh19();
        testThresh20();
        testThresh21();
        testThresh22();
        testThresh23();
        testRsa0();
        testPrefix7();
        testThresh24();
        testThresh25();
        testThresh26();
        testThresh27();
        testPrefix8();
        testPrefix9();
        testPrefix10();
        testPrefix11();
        testPrefix12();
        testPrefix13();
        testThresh28();
        testThresh29();
        testThresh30();
        testThresh31();
        testThresh32();
        testThresh33();
        testThresh34();
        testThresh35();
        testThresh36();
        testThresh37();
        testThresh38();
        testThresh39();
        testThresh40();
        testThresh41();
        testThresh42();
        testThresh43();
        testThresh44();
        testThresh45();
        testThresh46();
        testThresh47();
        testEd0();
        testPrefix14();
        testThresh48();
        testThresh49();
        testThresh50();
        testThresh51();
        testPrefix15();
        testPrefix16();
        testPrefix17();
        testPrefix18();
        testPrefix19();
        testPrefix20();
        testThresh52();
        testThresh53();
        testThresh54();
        testThresh55();
        testThresh56();
        testThresh57();
        testThresh58();
        testThresh59();
        testThresh60();
        testThresh61();
        testThresh62();
        testThresh63();
        testThresh64();
        testThresh65();
        testThresh66();
        testThresh67();
        testThresh68();
        testThresh69();
        testThresh70();
        testThresh71();
        testPreim1();
        testPrefix21();
        testThresh72();
        testRsa1();
        testEd1();
        testPreim2();
        testPrefix22();
        testPrefix23();
        testThresh73();
        testThresh74();
        testThresh75();
        testThresh76();
        testThresh77();
        testRsa2();
        testRsa3();
        testEd2();
        testThresh78();
        testThresh79();
    }
};

BEAST_DEFINE_TESTSUITE(Conditions, conditions, ripple);
}
}
